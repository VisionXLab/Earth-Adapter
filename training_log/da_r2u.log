2025/03/28 16:41:34 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.19 (default, Mar 20 2024, 19:58:24) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 0
    GPU 0: NVIDIA RTX A6000
    CUDA_HOME: /usr/local/cuda-11.2
    NVCC: Cuda compilation tools, release 11.2, V11.2.67
    GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0
    PyTorch: 2.1.1+cu118
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_90,code=sm_90
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-invalid-partial-specialization -Wno-unused-private-field -Wno-aligned-allocation-unavailable -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.1.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.1+cu118
    OpenCV: 4.9.0
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 0
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/03/28 16:41:34 - mmengine - INFO - Config:
crop_size = (
    512,
    512,
)
data_root = '/data/xiaoxinghhh/dataset/remote_sensing_new'
dataset_type = 'LoveDADataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False,
        interval=2000,
        max_keep_ckpts=1,
        save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
exp_name = 'DA_spatial_16_fft_cut_off_0.3_suf3_scale_0.1'
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        adapter_config=dict(
            cutoff_ratio=0.3, dim=16, fft_layer=[
                21,
                22,
                23,
            ], scale=0.1),
        block_chunks=0,
        depth=24,
        embed_dim=1024,
        ffn_bias=True,
        ffn_layer='mlp',
        img_size=512,
        init_cfg=dict(
            checkpoint='checkpoints/dinov2_converted.pth', type='Pretrained'),
        init_values=1e-05,
        mlp_ratio=4,
        moe_adapter_type='earth_adapter',
        num_heads=16,
        patch_size=16,
        proj_bias=True,
        qkv_bias=True,
        type='MOE_Adpter_DinoVisionTransformer'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            1024,
            1024,
            1024,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=7,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(crop_size=(
        512,
        512,
    ), mode='slide', stride=(
        341,
        341,
    )),
    train_cfg=dict(),
    type='DACS_encoder_decoder')
num_classes = 19
optim_wrapper = dict(
    constructor='PEFTOptimWrapperConstructor',
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'learnable_tokens': dict(decay_mult=0.0, lr_mult=1.0),
            'level_embed': dict(decay_mult=0.0, lr_mult=1.0),
            'norm': dict(decay_mult=0.0),
            'query_embed': dict(decay_mult=0.0, lr_mult=1.0),
            'reins.scale': dict(decay_mult=0.0, lr_mult=1.0)
        }),
        norm_decay_mult=0.0))
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=20000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
randomness = dict(seed=0)
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='loveda_uda/urban/val/img_dir',
            seg_map_path='loveda_uda/urban/val/ann_dir'),
        data_root='/data/xiaoxinghhh/dataset/remote_sensing_new',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                512,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='LoveDADataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        512,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(max_iters=20000, type='IterBasedTrainLoop', val_interval=2000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        source_dataset=dict(
            data_prefix=dict(
                img_path='loveda_uda/rural/train/img_dir',
                seg_map_path='loveda_uda/rural/train/ann_dir'),
            data_root='/data/xiaoxinghhh/dataset/remote_sensing_new',
            pipeline=[
                dict(type='LoadImageFromFile'),
                dict(reduce_zero_label=True, type='LoadAnnotations'),
                dict(
                    keep_ratio=True,
                    ratio_range=(
                        0.5,
                        2.0,
                    ),
                    scale=(
                        512,
                        512,
                    ),
                    type='RandomResize'),
                dict(
                    cat_max_ratio=0.75,
                    crop_size=(
                        512,
                        512,
                    ),
                    type='RandomCrop'),
                dict(prob=0.5, type='RandomFlip'),
                dict(type='PhotoMetricDistortion'),
                dict(type='PackSegInputs'),
            ],
            type='LoveDADataset'),
        target_dataset=dict(
            data_prefix=dict(
                img_path='loveda_uda/urban/train/img_dir',
                seg_map_path='loveda_uda/urban/train/ann_dir'),
            data_root='/data/xiaoxinghhh/dataset/remote_sensing_new',
            pipeline=[
                dict(type='LoadImageFromFile'),
                dict(reduce_zero_label=True, type='LoadAnnotations'),
                dict(
                    keep_ratio=True,
                    ratio_range=(
                        0.5,
                        2.0,
                    ),
                    scale=(
                        512,
                        512,
                    ),
                    type='RandomResize'),
                dict(
                    cat_max_ratio=0.75,
                    crop_size=(
                        512,
                        512,
                    ),
                    type='RandomCrop'),
                dict(prob=0.5, type='RandomFlip'),
                dict(type='PhotoMetricDistortion'),
                dict(type='PackSegInputs'),
            ],
            type='LoveDADataset'),
        type='UDA_dataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.5,
            2.0,
        ),
        scale=(
            512,
            512,
        ),
        type='RandomResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='loveda_uda/urban/val/img_dir',
            seg_map_path='loveda_uda/urban/val/ann_dir'),
        data_root='/data/xiaoxinghhh/dataset/remote_sensing_new',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                512,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='LoveDADataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/r2u/DA_spatial_16_fft_cut_off_0.3_suf3_scale_0.1/e6531_seed0'

2025/03/28 16:41:41 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/03/28 16:41:41 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/03/28 16:41:42 - mmengine - WARNING - Dataset UDA_dataset has no metainfo. ``dataset_meta`` in visualizer will be None.
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.scale
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.1.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.1.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.3.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.3.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.4.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.4.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.5.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.5.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.6.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.6.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.7.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.7.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.8.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.8.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.9.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.9.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.10.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.10.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.11.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.11.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.12.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.12.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.13.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.13.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.14.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.14.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.15.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.15.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.16.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.16.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.17.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.17.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.18.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.18.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.19.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.19.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.20.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.20.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.21.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.21.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.22.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.22.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.23.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.layer_norm.23.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.0.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.0.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.0.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.0.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.1.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.1.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.1.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.1.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.2.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.2.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.2.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.2.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.3.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.3.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.3.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.3.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.4.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.4.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.4.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.4.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.5.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.5.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.5.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.5.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.6.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.6.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.6.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.6.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.7.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.7.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.7.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.7.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.8.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.8.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.8.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.8.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.9.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.9.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.9.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.9.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.10.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.10.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.10.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.10.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.11.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.11.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.11.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.11.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.12.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.12.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.12.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.12.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.13.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.13.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.13.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.13.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.14.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.14.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.14.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.14.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.15.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.15.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.15.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.15.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.16.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.16.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.16.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.16.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.17.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.17.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.17.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.17.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.18.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.18.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.18.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.18.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.19.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.19.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.19.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.19.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.20.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.20.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.20.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.20.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.21.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.21.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.21.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.21.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.22.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.22.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.22.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.22.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.23.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.23.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.23.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list1.23.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.0.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.0.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.0.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.0.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.1.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.1.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.1.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.1.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.2.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.2.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.2.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.2.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.3.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.3.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.3.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.3.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.4.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.4.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.4.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.4.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.5.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.5.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.5.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.5.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.6.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.6.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.6.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.6.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.7.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.7.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.7.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.7.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.8.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.8.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.8.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.8.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.9.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.9.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.9.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.9.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.10.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.10.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.10.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.10.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.11.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.11.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.11.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.11.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.12.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.12.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.12.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.12.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.13.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.13.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.13.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.13.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.14.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.14.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.14.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.14.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.15.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.15.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.15.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.15.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.16.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.16.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.16.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.16.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.17.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.17.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.17.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.17.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.18.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.18.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.18.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.18.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.19.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.19.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.19.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.19.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.20.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.20.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.20.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.20.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.21.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.21.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.21.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.21.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.22.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.22.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.22.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.22.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.23.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.23.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.23.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list2.23.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.0.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.0.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.0.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.0.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.1.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.1.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.1.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.1.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.2.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.2.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.2.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.2.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.3.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.3.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.3.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.3.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.4.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.4.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.4.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.4.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.5.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.5.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.5.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.5.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.6.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.6.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.6.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.6.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.7.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.7.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.7.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.7.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.8.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.8.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.8.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.8.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.9.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.9.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.9.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.9.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.10.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.10.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.10.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.10.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.11.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.11.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.11.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.11.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.12.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.12.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.12.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.12.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.13.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.13.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.13.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.13.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.14.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.14.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.14.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.14.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.15.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.15.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.15.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.15.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.16.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.16.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.16.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.16.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.17.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.17.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.17.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.17.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.18.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.18.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.18.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.18.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.19.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.19.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.19.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.19.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.20.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.20.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.20.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.20.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.21.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.21.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.21.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.21.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.22.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.22.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.22.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.22.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.23.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.23.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.23.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.mlp_list3.23.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.0.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.0.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.1.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.1.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.2.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.2.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.3.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.3.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.4.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.4.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.5.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.5.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.6.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.6.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.7.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.7.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.8.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.8.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.9.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.9.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.10.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.10.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.11.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.11.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.12.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.12.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.13.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.13.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.14.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.14.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.15.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.15.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.16.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.16.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.17.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.17.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.18.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.18.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.19.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.19.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.20.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.20.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.21.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.21.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.22.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.22.bias
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.23.weight
2025/03/28 16:41:42 - mmengine - INFO - set_requires_grad----refine_feat.router.23.bias
2025/03/28 16:41:42 - mmengine - INFO - Total trainable params--2557152, All params--306756832, Ratio--0.8%
2025/03/28 16:41:42 - mmengine - INFO - set_train----.refine_feat
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.scale:num of params=24
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.0.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.0.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.0.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.0.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.0.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.0.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.0.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.0.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.1.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.1.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.1.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.1.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.1.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.1.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.1.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.1.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.2.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.2.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.2.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.2.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.2.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.2.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.2.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.3.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.3.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.3.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.3.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.3.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.3.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.3.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.3.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.4.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.4.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.4.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.4.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.4.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.4.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.4.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.4.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.5.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.5.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.5.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.5.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.5.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.5.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.5.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.5.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.6.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.6.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.6.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.6.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.6.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.6.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.6.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.6.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.7.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.7.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.7.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.7.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.7.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.7.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.7.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.7.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.8.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.8.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.8.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.8.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.8.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.8.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.8.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.8.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.9.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.9.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.9.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.9.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.9.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.9.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.9.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.9.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.10.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.10.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.10.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.10.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.10.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.10.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.10.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.10.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.11.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.11.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.11.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.11.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.11.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.11.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.11.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.11.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.12.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.12.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.12.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.12.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.12.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.12.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.12.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.12.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.13.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.13.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.13.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.13.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.13.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.13.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.13.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.13.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.14.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.14.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.14.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.14.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.14.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.14.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.14.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.14.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.15.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.15.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.15.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.15.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.15.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.15.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.15.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.15.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.16.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.16.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.16.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.16.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.16.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.16.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.16.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.16.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.17.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.17.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.17.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.17.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.17.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.17.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.17.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.17.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.18.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.18.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.18.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.18.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.18.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.18.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.18.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.18.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.19.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.19.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.19.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.19.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.19.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.19.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.19.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.19.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.20.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.20.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.20.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.20.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.20.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.20.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.20.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.20.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.21.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.21.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.21.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.21.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.21.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.21.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.21.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.21.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.22.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.22.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.22.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.22.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.22.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.22.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.22.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.22.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.23.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.23.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.23.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.23.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.23.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.23.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.23.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.layer_norm.23.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.0.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.0.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.0.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.0.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.1.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.1.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.1.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.1.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.2.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.2.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.2.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.2.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.3.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.3.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.3.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.3.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.4.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.4.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.4.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.4.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.5.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.5.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.5.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.5.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.6.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.6.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.6.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.6.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.7.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.7.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.7.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.7.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.8.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.8.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.8.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.8.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.9.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.9.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.9.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.9.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.10.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.10.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.10.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.10.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.11.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.11.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.11.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.11.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.12.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.12.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.12.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.12.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.13.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.13.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.13.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.13.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.14.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.14.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.14.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.14.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.15.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.15.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.15.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.15.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.16.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.16.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.16.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.16.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.17.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.17.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.17.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.17.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.18.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.18.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.18.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.18.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.19.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.19.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.19.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.19.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.20.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.20.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.20.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.20.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.21.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.21.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.21.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.21.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.22.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.22.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.22.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.22.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.23.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.23.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.23.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list1.23.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.0.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.0.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.0.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.0.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.1.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.1.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.1.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.1.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.2.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.2.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.2.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.2.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.3.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.3.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.3.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.3.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.4.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.4.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.4.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.4.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.5.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.5.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.5.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.5.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.6.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.6.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.6.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.6.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.7.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.7.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.7.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.7.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.8.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.8.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.8.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.8.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.9.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.9.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.9.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.9.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.10.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.10.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.10.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.10.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.11.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.11.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.11.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.11.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.12.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.12.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.12.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.12.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.13.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.13.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.13.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.13.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.14.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.14.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.14.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.14.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.15.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.15.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.15.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.15.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.16.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.16.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.16.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.16.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.17.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.17.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.17.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.17.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.18.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.18.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.18.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.18.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.19.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.19.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.19.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.19.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.20.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.20.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.20.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.20.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.21.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.21.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.21.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.21.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.22.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.22.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.22.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.22.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.23.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.23.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.23.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list2.23.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.0.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.0.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.0.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.0.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.1.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.1.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.1.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.1.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.2.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.2.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.2.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.2.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.3.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.3.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.3.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.3.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.4.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.4.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.4.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.4.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.5.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.5.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.5.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.5.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.6.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.6.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.6.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.6.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.7.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.7.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.7.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.7.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.8.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.8.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.8.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.8.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.9.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.9.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.9.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.9.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.10.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.10.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.10.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.10.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.11.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.11.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.11.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.11.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.12.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.12.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.12.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.12.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.13.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.13.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.13.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.13.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.14.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.14.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.14.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.14.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.15.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.15.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.15.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.15.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.16.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.16.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.16.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.16.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.17.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.17.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.17.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.17.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.18.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.18.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.18.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.18.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.19.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.19.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.19.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.19.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.20.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.20.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.20.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.20.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.21.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.21.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.21.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.21.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.22.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.22.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.22.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.22.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.23.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.23.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.23.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.mlp_list3.23.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.0.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.0.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.1.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.1.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.2.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.2.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.3.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.3.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.4.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.4.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.5.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.5.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.6.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.6.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.7.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.7.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.8.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.8.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.9.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.9.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.10.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.10.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.11.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.11.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.12.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.12.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.13.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.13.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.14.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.14.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.15.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.15.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.16.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.16.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.17.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.17.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.18.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.18.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.19.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.19.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.20.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.20.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.21.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.21.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.22.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.22.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.23.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- backbone.refine_feat.router.23.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.input_convs.0.conv.weight:num of params=262144
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.input_convs.0.conv.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.input_convs.0.gn.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.input_convs.0.gn.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.input_convs.0.gn.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.input_convs.0.gn.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.input_convs.1.conv.weight:num of params=262144
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.input_convs.1.conv.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.input_convs.1.gn.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.input_convs.1.gn.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.input_convs.1.gn.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.input_convs.1.gn.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.input_convs.2.conv.weight:num of params=262144
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.input_convs.2.conv.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.input_convs.2.gn.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.input_convs.2.gn.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.input_convs.2.gn.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.input_convs.2.gn.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.self_attn.sampling_offsets.weight:num of params=49152
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.self_attn.sampling_offsets.bias:num of params=192
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.self_attn.attention_weights.weight:num of params=24576
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.self_attn.attention_weights.bias:num of params=96
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.self_attn.value_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.self_attn.value_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.self_attn.output_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.self_attn.output_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.ffn.layers.0.0.weight:num of params=262144
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.ffn.layers.0.0.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.ffn.layers.1.weight:num of params=262144
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.ffn.layers.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.norms.0.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.norms.0.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.norms.0.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.norms.0.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.norms.0.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.norms.0.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.norms.0.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.norms.0.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.norms.1.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.norms.1.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.norms.1.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.norms.1.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.norms.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.norms.1.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.norms.1.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.0.norms.1.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.self_attn.sampling_offsets.weight:num of params=49152
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.self_attn.sampling_offsets.bias:num of params=192
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.self_attn.attention_weights.weight:num of params=24576
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.self_attn.attention_weights.bias:num of params=96
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.self_attn.value_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.self_attn.value_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.self_attn.output_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.self_attn.output_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.ffn.layers.0.0.weight:num of params=262144
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.ffn.layers.0.0.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.ffn.layers.1.weight:num of params=262144
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.ffn.layers.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.norms.0.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.norms.0.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.norms.0.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.norms.0.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.norms.0.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.norms.0.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.norms.0.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.norms.0.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.norms.1.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.norms.1.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.norms.1.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.norms.1.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.norms.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.norms.1.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.norms.1.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.1.norms.1.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.self_attn.sampling_offsets.weight:num of params=49152
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.self_attn.sampling_offsets.bias:num of params=192
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.self_attn.attention_weights.weight:num of params=24576
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.self_attn.attention_weights.bias:num of params=96
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.self_attn.value_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.self_attn.value_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.self_attn.output_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.self_attn.output_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.ffn.layers.0.0.weight:num of params=262144
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.ffn.layers.0.0.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.ffn.layers.1.weight:num of params=262144
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.ffn.layers.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.norms.0.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.norms.0.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.norms.0.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.norms.0.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.norms.0.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.norms.0.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.norms.0.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.norms.0.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.norms.1.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.norms.1.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.norms.1.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.norms.1.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.norms.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.norms.1.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.norms.1.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.2.norms.1.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.self_attn.sampling_offsets.weight:num of params=49152
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.self_attn.sampling_offsets.bias:num of params=192
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.self_attn.attention_weights.weight:num of params=24576
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.self_attn.attention_weights.bias:num of params=96
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.self_attn.value_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.self_attn.value_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.self_attn.output_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.self_attn.output_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.ffn.layers.0.0.weight:num of params=262144
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.ffn.layers.0.0.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.ffn.layers.1.weight:num of params=262144
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.ffn.layers.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.norms.0.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.norms.0.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.norms.0.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.norms.0.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.norms.0.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.norms.0.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.norms.0.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.norms.0.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.norms.1.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.norms.1.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.norms.1.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.norms.1.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.norms.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.norms.1.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.norms.1.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.3.norms.1.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.self_attn.sampling_offsets.weight:num of params=49152
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.self_attn.sampling_offsets.bias:num of params=192
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.self_attn.attention_weights.weight:num of params=24576
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.self_attn.attention_weights.bias:num of params=96
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.self_attn.value_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.self_attn.value_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.self_attn.output_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.self_attn.output_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.ffn.layers.0.0.weight:num of params=262144
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.ffn.layers.0.0.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.ffn.layers.1.weight:num of params=262144
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.ffn.layers.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.norms.0.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.norms.0.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.norms.0.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.norms.0.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.norms.0.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.norms.0.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.norms.0.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.norms.0.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.norms.1.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.norms.1.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.norms.1.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.norms.1.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.norms.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.norms.1.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.norms.1.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.4.norms.1.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.self_attn.sampling_offsets.weight:num of params=49152
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.self_attn.sampling_offsets.bias:num of params=192
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.self_attn.attention_weights.weight:num of params=24576
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.self_attn.attention_weights.bias:num of params=96
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.self_attn.value_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.self_attn.value_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.self_attn.output_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.self_attn.output_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.ffn.layers.0.0.weight:num of params=262144
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.ffn.layers.0.0.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.ffn.layers.1.weight:num of params=262144
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.ffn.layers.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.norms.0.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.norms.0.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.norms.0.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.norms.0.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.norms.0.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.norms.0.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.norms.0.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.norms.0.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.norms.1.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.norms.1.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.norms.1.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.norms.1.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.norms.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.norms.1.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.norms.1.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.encoder.layers.5.norms.1.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.level_encoding.weight:num of params=768
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.lateral_convs.0.conv.weight:num of params=262144
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.lateral_convs.0.gn.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.lateral_convs.0.gn.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.lateral_convs.0.gn.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.lateral_convs.0.gn.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.output_convs.0.conv.weight:num of params=589824
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.output_convs.0.gn.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.output_convs.0.gn.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.output_convs.0.gn.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.output_convs.0.gn.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.mask_feature.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.pixel_decoder.mask_feature.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.self_attn.attn.in_proj_weight:num of params=196608
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.self_attn.attn.in_proj_bias:num of params=768
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.self_attn.attn.out_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.self_attn.attn.out_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.cross_attn.attn.in_proj_weight:num of params=196608
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.cross_attn.attn.in_proj_bias:num of params=768
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.cross_attn.attn.out_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.cross_attn.attn.out_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.ffn.layers.0.0.weight:num of params=524288
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.ffn.layers.0.0.bias:num of params=2048
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.ffn.layers.1.weight:num of params=524288
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.ffn.layers.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.0.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.0.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.0.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.0.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.0.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.0.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.0.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.0.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.1.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.1.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.1.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.1.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.1.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.1.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.1.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.2.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.2.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.2.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.2.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.2.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.2.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.2.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.0.norms.2.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.self_attn.attn.in_proj_weight:num of params=196608
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.self_attn.attn.in_proj_bias:num of params=768
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.self_attn.attn.out_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.self_attn.attn.out_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.cross_attn.attn.in_proj_weight:num of params=196608
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.cross_attn.attn.in_proj_bias:num of params=768
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.cross_attn.attn.out_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.cross_attn.attn.out_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.ffn.layers.0.0.weight:num of params=524288
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.ffn.layers.0.0.bias:num of params=2048
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.ffn.layers.1.weight:num of params=524288
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.ffn.layers.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.0.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.0.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.0.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.0.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.0.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.0.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.0.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.0.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.1.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.1.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.1.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.1.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.1.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.1.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.1.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.2.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.2.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.2.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.2.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.2.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.2.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.2.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.1.norms.2.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.self_attn.attn.in_proj_weight:num of params=196608
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.self_attn.attn.in_proj_bias:num of params=768
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.self_attn.attn.out_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.self_attn.attn.out_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.cross_attn.attn.in_proj_weight:num of params=196608
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.cross_attn.attn.in_proj_bias:num of params=768
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.cross_attn.attn.out_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.cross_attn.attn.out_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.ffn.layers.0.0.weight:num of params=524288
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.ffn.layers.0.0.bias:num of params=2048
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.ffn.layers.1.weight:num of params=524288
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.ffn.layers.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.0.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.0.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.0.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.0.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.0.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.0.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.0.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.0.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.1.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.1.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.1.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.1.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.1.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.1.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.1.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.2.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.2.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.2.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.2.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.2.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.2.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.2.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.2.norms.2.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.self_attn.attn.in_proj_weight:num of params=196608
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.self_attn.attn.in_proj_bias:num of params=768
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.self_attn.attn.out_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.self_attn.attn.out_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.cross_attn.attn.in_proj_weight:num of params=196608
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.cross_attn.attn.in_proj_bias:num of params=768
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.cross_attn.attn.out_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.cross_attn.attn.out_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.ffn.layers.0.0.weight:num of params=524288
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.ffn.layers.0.0.bias:num of params=2048
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.ffn.layers.1.weight:num of params=524288
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.ffn.layers.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.0.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.0.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.0.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.0.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.0.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.0.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.0.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.0.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.1.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.1.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.1.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.1.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.1.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.1.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.1.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.2.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.2.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.2.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.2.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.2.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.2.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.2.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.3.norms.2.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.self_attn.attn.in_proj_weight:num of params=196608
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.self_attn.attn.in_proj_bias:num of params=768
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.self_attn.attn.out_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.self_attn.attn.out_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.cross_attn.attn.in_proj_weight:num of params=196608
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.cross_attn.attn.in_proj_bias:num of params=768
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.cross_attn.attn.out_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.cross_attn.attn.out_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.ffn.layers.0.0.weight:num of params=524288
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.ffn.layers.0.0.bias:num of params=2048
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.ffn.layers.1.weight:num of params=524288
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.ffn.layers.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.0.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.0.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.0.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.0.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.0.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.0.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.0.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.0.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.1.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.1.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.1.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.1.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.1.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.1.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.1.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.2.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.2.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.2.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.2.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.2.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.2.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.2.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.4.norms.2.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.self_attn.attn.in_proj_weight:num of params=196608
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.self_attn.attn.in_proj_bias:num of params=768
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.self_attn.attn.out_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.self_attn.attn.out_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.cross_attn.attn.in_proj_weight:num of params=196608
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.cross_attn.attn.in_proj_bias:num of params=768
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.cross_attn.attn.out_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.cross_attn.attn.out_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.ffn.layers.0.0.weight:num of params=524288
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.ffn.layers.0.0.bias:num of params=2048
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.ffn.layers.1.weight:num of params=524288
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.ffn.layers.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.0.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.0.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.0.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.0.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.0.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.0.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.0.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.0.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.1.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.1.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.1.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.1.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.1.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.1.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.1.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.2.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.2.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.2.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.2.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.2.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.2.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.2.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.5.norms.2.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.self_attn.attn.in_proj_weight:num of params=196608
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.self_attn.attn.in_proj_bias:num of params=768
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.self_attn.attn.out_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.self_attn.attn.out_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.cross_attn.attn.in_proj_weight:num of params=196608
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.cross_attn.attn.in_proj_bias:num of params=768
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.cross_attn.attn.out_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.cross_attn.attn.out_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.ffn.layers.0.0.weight:num of params=524288
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.ffn.layers.0.0.bias:num of params=2048
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.ffn.layers.1.weight:num of params=524288
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.ffn.layers.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.0.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.0.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.0.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.0.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.0.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.0.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.0.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.0.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.1.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.1.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.1.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.1.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.1.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.1.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.1.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.2.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.2.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.2.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.2.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.2.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.2.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.2.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.6.norms.2.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.self_attn.attn.in_proj_weight:num of params=196608
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.self_attn.attn.in_proj_bias:num of params=768
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.self_attn.attn.out_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.self_attn.attn.out_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.cross_attn.attn.in_proj_weight:num of params=196608
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.cross_attn.attn.in_proj_bias:num of params=768
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.cross_attn.attn.out_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.cross_attn.attn.out_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.ffn.layers.0.0.weight:num of params=524288
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.ffn.layers.0.0.bias:num of params=2048
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.ffn.layers.1.weight:num of params=524288
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.ffn.layers.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.0.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.0.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.0.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.0.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.0.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.0.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.0.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.0.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.1.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.1.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.1.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.1.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.1.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.1.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.1.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.2.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.2.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.2.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.2.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.2.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.2.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.2.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.7.norms.2.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.self_attn.attn.in_proj_weight:num of params=196608
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.self_attn.attn.in_proj_bias:num of params=768
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.self_attn.attn.out_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.self_attn.attn.out_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.cross_attn.attn.in_proj_weight:num of params=196608
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.cross_attn.attn.in_proj_bias:num of params=768
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.cross_attn.attn.out_proj.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.cross_attn.attn.out_proj.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.ffn.layers.0.0.weight:num of params=524288
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.ffn.layers.0.0.bias:num of params=2048
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.ffn.layers.1.weight:num of params=524288
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.ffn.layers.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.0.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.0.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.0.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.0.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.0.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.0.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.0.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.0.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.1.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.1.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.1.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.1.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.1.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.1.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.1.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.1.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.2.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.2.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.2.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.2.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.2.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.2.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.2.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.layers.8.norms.2.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.post_norm.weight:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.post_norm.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.post_norm.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.post_norm.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.post_norm.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.post_norm.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.post_norm.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.transformer_decoder.post_norm.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.query_embed.weight:num of params=25600
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.query_embed.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.query_embed.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.query_embed.weight:lr_mult=1.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.query_embed.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.query_feat.weight:num of params=25600
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.level_embed.weight:num of params=768
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.level_embed.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.level_embed.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.level_embed.weight:lr_mult=1.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.level_embed.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.cls_embed.weight:num of params=2048
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.cls_embed.bias:num of params=8
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.mask_embed.0.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.mask_embed.0.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.mask_embed.2.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.mask_embed.2.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.mask_embed.4.weight:num of params=65536
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- decode_head.mask_embed.4.bias:num of params=256
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.scale:num of params=24
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.0.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.0.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.0.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.0.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.0.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.0.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.0.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.0.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.1.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.1.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.1.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.1.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.1.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.1.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.1.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.1.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.2.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.2.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.2.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.2.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.2.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.2.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.2.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.3.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.3.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.3.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.3.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.3.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.3.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.3.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.3.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.4.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.4.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.4.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.4.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.4.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.4.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.4.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.4.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.5.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.5.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.5.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.5.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.5.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.5.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.5.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.5.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.6.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.6.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.6.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.6.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.6.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.6.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.6.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.6.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.7.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.7.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.7.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.7.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.7.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.7.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.7.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.7.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.8.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.8.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.8.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.8.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.8.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.8.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.8.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.8.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.9.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.9.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.9.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.9.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.9.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.9.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.9.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.9.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.10.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.10.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.10.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.10.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.10.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.10.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.10.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.10.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.11.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.11.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.11.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.11.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.11.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.11.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.11.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.11.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.12.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.12.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.12.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.12.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.12.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.12.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.12.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.12.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.13.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.13.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.13.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.13.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.13.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.13.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.13.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.13.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.14.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.14.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.14.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.14.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.14.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.14.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.14.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.14.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.15.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.15.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.15.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.15.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.15.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.15.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.15.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.15.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.16.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.16.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.16.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.16.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.16.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.16.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.16.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.16.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.17.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.17.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.17.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.17.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.17.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.17.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.17.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.17.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.18.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.18.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.18.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.18.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.18.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.18.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.18.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.18.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.19.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.19.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.19.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.19.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.19.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.19.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.19.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.19.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.20.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.20.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.20.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.20.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.20.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.20.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.20.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.20.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.21.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.21.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.21.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.21.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.21.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.21.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.21.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.21.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.22.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.22.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.22.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.22.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.22.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.22.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.22.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.22.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.23.weight:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.23.weight:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.23.weight:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.23.weight:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.23.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.23.bias:lr=0.0001
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.23.bias:weight_decay=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.layer_norm.23.bias:decay_mult=0.0
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.0.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.0.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.0.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.0.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.1.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.1.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.1.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.1.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.2.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.2.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.2.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.2.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.3.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.3.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.3.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.3.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.4.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.4.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.4.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.4.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.5.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.5.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.5.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.5.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.6.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.6.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.6.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.6.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.7.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.7.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.7.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.7.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.8.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.8.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.8.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.8.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.9.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.9.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.9.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.9.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.10.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.10.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.10.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.10.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.11.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.11.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.11.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.11.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.12.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.12.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.12.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.12.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.13.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.13.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.13.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.13.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.14.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.14.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.14.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.14.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.15.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.15.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.15.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.15.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.16.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.16.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.16.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.16.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.17.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.17.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.17.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.17.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.18.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.18.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.18.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.18.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.19.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.19.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.19.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.19.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.20.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.20.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.20.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.20.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.21.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.21.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.21.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.21.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.22.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.22.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.22.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.22.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.23.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.23.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.23.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list1.23.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.0.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.0.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.0.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.0.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.1.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.1.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.1.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.1.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.2.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.2.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.2.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.2.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.3.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.3.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.3.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.3.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.4.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.4.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.4.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.4.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.5.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.5.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.5.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.5.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.6.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.6.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.6.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.6.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.7.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.7.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.7.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.7.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.8.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.8.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.8.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.8.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.9.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.9.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.9.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.9.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.10.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.10.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.10.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.10.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.11.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.11.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.11.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.11.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.12.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.12.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.12.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.12.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.13.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.13.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.13.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.13.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.14.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.14.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.14.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.14.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.15.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.15.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.15.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.15.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.16.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.16.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.16.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.16.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.17.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.17.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.17.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.17.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.18.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.18.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.18.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.18.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.19.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.19.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.19.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.19.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.20.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.20.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.20.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.20.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.21.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.21.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.21.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.21.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.22.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.22.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.22.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.22.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.23.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.23.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.23.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list2.23.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.0.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.0.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.0.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.0.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.1.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.1.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.1.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.1.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.2.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.2.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.2.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.2.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.3.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.3.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.3.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.3.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.4.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.4.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.4.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.4.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.5.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.5.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.5.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.5.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.6.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.6.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.6.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.6.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.7.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.7.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.7.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.7.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.8.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.8.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.8.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.8.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.9.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.9.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.9.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.9.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.10.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.10.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.10.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.10.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.11.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.11.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.11.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.11.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.12.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.12.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.12.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.12.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.13.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.13.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.13.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.13.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.14.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.14.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.14.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.14.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.15.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.15.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.15.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.15.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.16.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.16.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.16.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.16.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.17.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.17.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.17.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.17.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.18.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.18.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.18.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.18.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.19.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.19.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.19.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.19.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.20.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.20.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.20.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.20.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.21.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.21.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.21.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.21.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.22.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.22.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.22.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.22.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.23.0.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.23.0.bias:num of params=16
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.23.2.weight:num of params=16384
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.mlp_list3.23.2.bias:num of params=1024
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.0.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.0.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.1.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.1.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.2.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.2.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.3.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.3.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.4.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.4.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.5.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.5.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.6.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.6.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.7.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.7.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.8.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.8.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.9.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.9.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.10.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.10.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.11.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.11.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.12.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.12.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.13.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.13.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.14.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.14.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.15.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.15.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.16.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.16.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.17.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.17.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.18.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.18.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.19.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.19.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.20.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.20.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.21.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.21.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.22.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.22.bias:num of params=3
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.23.weight:num of params=3072
2025/03/28 16:41:42 - mmengine - INFO - paramwise_options -- ema_model.backbone.refine_feat.router.23.bias:num of params=3
2025/03/28 16:41:43 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
2025/03/28 16:41:46 - mmengine - INFO - load model from: checkpoints/dinov2_converted.pth
2025/03/28 16:41:46 - mmengine - INFO - Loads checkpoint by local backend from path: checkpoints/dinov2_converted.pth
2025/03/28 16:41:47 - mmengine - WARNING - The model and loaded state dict do not match exactly

missing keys in source state_dict: refine_feat.scale, refine_feat.layer_norm.0.weight, refine_feat.layer_norm.0.bias, refine_feat.layer_norm.1.weight, refine_feat.layer_norm.1.bias, refine_feat.layer_norm.2.weight, refine_feat.layer_norm.2.bias, refine_feat.layer_norm.3.weight, refine_feat.layer_norm.3.bias, refine_feat.layer_norm.4.weight, refine_feat.layer_norm.4.bias, refine_feat.layer_norm.5.weight, refine_feat.layer_norm.5.bias, refine_feat.layer_norm.6.weight, refine_feat.layer_norm.6.bias, refine_feat.layer_norm.7.weight, refine_feat.layer_norm.7.bias, refine_feat.layer_norm.8.weight, refine_feat.layer_norm.8.bias, refine_feat.layer_norm.9.weight, refine_feat.layer_norm.9.bias, refine_feat.layer_norm.10.weight, refine_feat.layer_norm.10.bias, refine_feat.layer_norm.11.weight, refine_feat.layer_norm.11.bias, refine_feat.layer_norm.12.weight, refine_feat.layer_norm.12.bias, refine_feat.layer_norm.13.weight, refine_feat.layer_norm.13.bias, refine_feat.layer_norm.14.weight, refine_feat.layer_norm.14.bias, refine_feat.layer_norm.15.weight, refine_feat.layer_norm.15.bias, refine_feat.layer_norm.16.weight, refine_feat.layer_norm.16.bias, refine_feat.layer_norm.17.weight, refine_feat.layer_norm.17.bias, refine_feat.layer_norm.18.weight, refine_feat.layer_norm.18.bias, refine_feat.layer_norm.19.weight, refine_feat.layer_norm.19.bias, refine_feat.layer_norm.20.weight, refine_feat.layer_norm.20.bias, refine_feat.layer_norm.21.weight, refine_feat.layer_norm.21.bias, refine_feat.layer_norm.22.weight, refine_feat.layer_norm.22.bias, refine_feat.layer_norm.23.weight, refine_feat.layer_norm.23.bias, refine_feat.mlp_list1.0.0.weight, refine_feat.mlp_list1.0.0.bias, refine_feat.mlp_list1.0.2.weight, refine_feat.mlp_list1.0.2.bias, refine_feat.mlp_list1.1.0.weight, refine_feat.mlp_list1.1.0.bias, refine_feat.mlp_list1.1.2.weight, refine_feat.mlp_list1.1.2.bias, refine_feat.mlp_list1.2.0.weight, refine_feat.mlp_list1.2.0.bias, refine_feat.mlp_list1.2.2.weight, refine_feat.mlp_list1.2.2.bias, refine_feat.mlp_list1.3.0.weight, refine_feat.mlp_list1.3.0.bias, refine_feat.mlp_list1.3.2.weight, refine_feat.mlp_list1.3.2.bias, refine_feat.mlp_list1.4.0.weight, refine_feat.mlp_list1.4.0.bias, refine_feat.mlp_list1.4.2.weight, refine_feat.mlp_list1.4.2.bias, refine_feat.mlp_list1.5.0.weight, refine_feat.mlp_list1.5.0.bias, refine_feat.mlp_list1.5.2.weight, refine_feat.mlp_list1.5.2.bias, refine_feat.mlp_list1.6.0.weight, refine_feat.mlp_list1.6.0.bias, refine_feat.mlp_list1.6.2.weight, refine_feat.mlp_list1.6.2.bias, refine_feat.mlp_list1.7.0.weight, refine_feat.mlp_list1.7.0.bias, refine_feat.mlp_list1.7.2.weight, refine_feat.mlp_list1.7.2.bias, refine_feat.mlp_list1.8.0.weight, refine_feat.mlp_list1.8.0.bias, refine_feat.mlp_list1.8.2.weight, refine_feat.mlp_list1.8.2.bias, refine_feat.mlp_list1.9.0.weight, refine_feat.mlp_list1.9.0.bias, refine_feat.mlp_list1.9.2.weight, refine_feat.mlp_list1.9.2.bias, refine_feat.mlp_list1.10.0.weight, refine_feat.mlp_list1.10.0.bias, refine_feat.mlp_list1.10.2.weight, refine_feat.mlp_list1.10.2.bias, refine_feat.mlp_list1.11.0.weight, refine_feat.mlp_list1.11.0.bias, refine_feat.mlp_list1.11.2.weight, refine_feat.mlp_list1.11.2.bias, refine_feat.mlp_list1.12.0.weight, refine_feat.mlp_list1.12.0.bias, refine_feat.mlp_list1.12.2.weight, refine_feat.mlp_list1.12.2.bias, refine_feat.mlp_list1.13.0.weight, refine_feat.mlp_list1.13.0.bias, refine_feat.mlp_list1.13.2.weight, refine_feat.mlp_list1.13.2.bias, refine_feat.mlp_list1.14.0.weight, refine_feat.mlp_list1.14.0.bias, refine_feat.mlp_list1.14.2.weight, refine_feat.mlp_list1.14.2.bias, refine_feat.mlp_list1.15.0.weight, refine_feat.mlp_list1.15.0.bias, refine_feat.mlp_list1.15.2.weight, refine_feat.mlp_list1.15.2.bias, refine_feat.mlp_list1.16.0.weight, refine_feat.mlp_list1.16.0.bias, refine_feat.mlp_list1.16.2.weight, refine_feat.mlp_list1.16.2.bias, refine_feat.mlp_list1.17.0.weight, refine_feat.mlp_list1.17.0.bias, refine_feat.mlp_list1.17.2.weight, refine_feat.mlp_list1.17.2.bias, refine_feat.mlp_list1.18.0.weight, refine_feat.mlp_list1.18.0.bias, refine_feat.mlp_list1.18.2.weight, refine_feat.mlp_list1.18.2.bias, refine_feat.mlp_list1.19.0.weight, refine_feat.mlp_list1.19.0.bias, refine_feat.mlp_list1.19.2.weight, refine_feat.mlp_list1.19.2.bias, refine_feat.mlp_list1.20.0.weight, refine_feat.mlp_list1.20.0.bias, refine_feat.mlp_list1.20.2.weight, refine_feat.mlp_list1.20.2.bias, refine_feat.mlp_list1.21.0.weight, refine_feat.mlp_list1.21.0.bias, refine_feat.mlp_list1.21.2.weight, refine_feat.mlp_list1.21.2.bias, refine_feat.mlp_list1.22.0.weight, refine_feat.mlp_list1.22.0.bias, refine_feat.mlp_list1.22.2.weight, refine_feat.mlp_list1.22.2.bias, refine_feat.mlp_list1.23.0.weight, refine_feat.mlp_list1.23.0.bias, refine_feat.mlp_list1.23.2.weight, refine_feat.mlp_list1.23.2.bias, refine_feat.mlp_list2.0.0.weight, refine_feat.mlp_list2.0.0.bias, refine_feat.mlp_list2.0.2.weight, refine_feat.mlp_list2.0.2.bias, refine_feat.mlp_list2.1.0.weight, refine_feat.mlp_list2.1.0.bias, refine_feat.mlp_list2.1.2.weight, refine_feat.mlp_list2.1.2.bias, refine_feat.mlp_list2.2.0.weight, refine_feat.mlp_list2.2.0.bias, refine_feat.mlp_list2.2.2.weight, refine_feat.mlp_list2.2.2.bias, refine_feat.mlp_list2.3.0.weight, refine_feat.mlp_list2.3.0.bias, refine_feat.mlp_list2.3.2.weight, refine_feat.mlp_list2.3.2.bias, refine_feat.mlp_list2.4.0.weight, refine_feat.mlp_list2.4.0.bias, refine_feat.mlp_list2.4.2.weight, refine_feat.mlp_list2.4.2.bias, refine_feat.mlp_list2.5.0.weight, refine_feat.mlp_list2.5.0.bias, refine_feat.mlp_list2.5.2.weight, refine_feat.mlp_list2.5.2.bias, refine_feat.mlp_list2.6.0.weight, refine_feat.mlp_list2.6.0.bias, refine_feat.mlp_list2.6.2.weight, refine_feat.mlp_list2.6.2.bias, refine_feat.mlp_list2.7.0.weight, refine_feat.mlp_list2.7.0.bias, refine_feat.mlp_list2.7.2.weight, refine_feat.mlp_list2.7.2.bias, refine_feat.mlp_list2.8.0.weight, refine_feat.mlp_list2.8.0.bias, refine_feat.mlp_list2.8.2.weight, refine_feat.mlp_list2.8.2.bias, refine_feat.mlp_list2.9.0.weight, refine_feat.mlp_list2.9.0.bias, refine_feat.mlp_list2.9.2.weight, refine_feat.mlp_list2.9.2.bias, refine_feat.mlp_list2.10.0.weight, refine_feat.mlp_list2.10.0.bias, refine_feat.mlp_list2.10.2.weight, refine_feat.mlp_list2.10.2.bias, refine_feat.mlp_list2.11.0.weight, refine_feat.mlp_list2.11.0.bias, refine_feat.mlp_list2.11.2.weight, refine_feat.mlp_list2.11.2.bias, refine_feat.mlp_list2.12.0.weight, refine_feat.mlp_list2.12.0.bias, refine_feat.mlp_list2.12.2.weight, refine_feat.mlp_list2.12.2.bias, refine_feat.mlp_list2.13.0.weight, refine_feat.mlp_list2.13.0.bias, refine_feat.mlp_list2.13.2.weight, refine_feat.mlp_list2.13.2.bias, refine_feat.mlp_list2.14.0.weight, refine_feat.mlp_list2.14.0.bias, refine_feat.mlp_list2.14.2.weight, refine_feat.mlp_list2.14.2.bias, refine_feat.mlp_list2.15.0.weight, refine_feat.mlp_list2.15.0.bias, refine_feat.mlp_list2.15.2.weight, refine_feat.mlp_list2.15.2.bias, refine_feat.mlp_list2.16.0.weight, refine_feat.mlp_list2.16.0.bias, refine_feat.mlp_list2.16.2.weight, refine_feat.mlp_list2.16.2.bias, refine_feat.mlp_list2.17.0.weight, refine_feat.mlp_list2.17.0.bias, refine_feat.mlp_list2.17.2.weight, refine_feat.mlp_list2.17.2.bias, refine_feat.mlp_list2.18.0.weight, refine_feat.mlp_list2.18.0.bias, refine_feat.mlp_list2.18.2.weight, refine_feat.mlp_list2.18.2.bias, refine_feat.mlp_list2.19.0.weight, refine_feat.mlp_list2.19.0.bias, refine_feat.mlp_list2.19.2.weight, refine_feat.mlp_list2.19.2.bias, refine_feat.mlp_list2.20.0.weight, refine_feat.mlp_list2.20.0.bias, refine_feat.mlp_list2.20.2.weight, refine_feat.mlp_list2.20.2.bias, refine_feat.mlp_list2.21.0.weight, refine_feat.mlp_list2.21.0.bias, refine_feat.mlp_list2.21.2.weight, refine_feat.mlp_list2.21.2.bias, refine_feat.mlp_list2.22.0.weight, refine_feat.mlp_list2.22.0.bias, refine_feat.mlp_list2.22.2.weight, refine_feat.mlp_list2.22.2.bias, refine_feat.mlp_list2.23.0.weight, refine_feat.mlp_list2.23.0.bias, refine_feat.mlp_list2.23.2.weight, refine_feat.mlp_list2.23.2.bias, refine_feat.mlp_list3.0.0.weight, refine_feat.mlp_list3.0.0.bias, refine_feat.mlp_list3.0.2.weight, refine_feat.mlp_list3.0.2.bias, refine_feat.mlp_list3.1.0.weight, refine_feat.mlp_list3.1.0.bias, refine_feat.mlp_list3.1.2.weight, refine_feat.mlp_list3.1.2.bias, refine_feat.mlp_list3.2.0.weight, refine_feat.mlp_list3.2.0.bias, refine_feat.mlp_list3.2.2.weight, refine_feat.mlp_list3.2.2.bias, refine_feat.mlp_list3.3.0.weight, refine_feat.mlp_list3.3.0.bias, refine_feat.mlp_list3.3.2.weight, refine_feat.mlp_list3.3.2.bias, refine_feat.mlp_list3.4.0.weight, refine_feat.mlp_list3.4.0.bias, refine_feat.mlp_list3.4.2.weight, refine_feat.mlp_list3.4.2.bias, refine_feat.mlp_list3.5.0.weight, refine_feat.mlp_list3.5.0.bias, refine_feat.mlp_list3.5.2.weight, refine_feat.mlp_list3.5.2.bias, refine_feat.mlp_list3.6.0.weight, refine_feat.mlp_list3.6.0.bias, refine_feat.mlp_list3.6.2.weight, refine_feat.mlp_list3.6.2.bias, refine_feat.mlp_list3.7.0.weight, refine_feat.mlp_list3.7.0.bias, refine_feat.mlp_list3.7.2.weight, refine_feat.mlp_list3.7.2.bias, refine_feat.mlp_list3.8.0.weight, refine_feat.mlp_list3.8.0.bias, refine_feat.mlp_list3.8.2.weight, refine_feat.mlp_list3.8.2.bias, refine_feat.mlp_list3.9.0.weight, refine_feat.mlp_list3.9.0.bias, refine_feat.mlp_list3.9.2.weight, refine_feat.mlp_list3.9.2.bias, refine_feat.mlp_list3.10.0.weight, refine_feat.mlp_list3.10.0.bias, refine_feat.mlp_list3.10.2.weight, refine_feat.mlp_list3.10.2.bias, refine_feat.mlp_list3.11.0.weight, refine_feat.mlp_list3.11.0.bias, refine_feat.mlp_list3.11.2.weight, refine_feat.mlp_list3.11.2.bias, refine_feat.mlp_list3.12.0.weight, refine_feat.mlp_list3.12.0.bias, refine_feat.mlp_list3.12.2.weight, refine_feat.mlp_list3.12.2.bias, refine_feat.mlp_list3.13.0.weight, refine_feat.mlp_list3.13.0.bias, refine_feat.mlp_list3.13.2.weight, refine_feat.mlp_list3.13.2.bias, refine_feat.mlp_list3.14.0.weight, refine_feat.mlp_list3.14.0.bias, refine_feat.mlp_list3.14.2.weight, refine_feat.mlp_list3.14.2.bias, refine_feat.mlp_list3.15.0.weight, refine_feat.mlp_list3.15.0.bias, refine_feat.mlp_list3.15.2.weight, refine_feat.mlp_list3.15.2.bias, refine_feat.mlp_list3.16.0.weight, refine_feat.mlp_list3.16.0.bias, refine_feat.mlp_list3.16.2.weight, refine_feat.mlp_list3.16.2.bias, refine_feat.mlp_list3.17.0.weight, refine_feat.mlp_list3.17.0.bias, refine_feat.mlp_list3.17.2.weight, refine_feat.mlp_list3.17.2.bias, refine_feat.mlp_list3.18.0.weight, refine_feat.mlp_list3.18.0.bias, refine_feat.mlp_list3.18.2.weight, refine_feat.mlp_list3.18.2.bias, refine_feat.mlp_list3.19.0.weight, refine_feat.mlp_list3.19.0.bias, refine_feat.mlp_list3.19.2.weight, refine_feat.mlp_list3.19.2.bias, refine_feat.mlp_list3.20.0.weight, refine_feat.mlp_list3.20.0.bias, refine_feat.mlp_list3.20.2.weight, refine_feat.mlp_list3.20.2.bias, refine_feat.mlp_list3.21.0.weight, refine_feat.mlp_list3.21.0.bias, refine_feat.mlp_list3.21.2.weight, refine_feat.mlp_list3.21.2.bias, refine_feat.mlp_list3.22.0.weight, refine_feat.mlp_list3.22.0.bias, refine_feat.mlp_list3.22.2.weight, refine_feat.mlp_list3.22.2.bias, refine_feat.mlp_list3.23.0.weight, refine_feat.mlp_list3.23.0.bias, refine_feat.mlp_list3.23.2.weight, refine_feat.mlp_list3.23.2.bias, refine_feat.router.0.weight, refine_feat.router.0.bias, refine_feat.router.1.weight, refine_feat.router.1.bias, refine_feat.router.2.weight, refine_feat.router.2.bias, refine_feat.router.3.weight, refine_feat.router.3.bias, refine_feat.router.4.weight, refine_feat.router.4.bias, refine_feat.router.5.weight, refine_feat.router.5.bias, refine_feat.router.6.weight, refine_feat.router.6.bias, refine_feat.router.7.weight, refine_feat.router.7.bias, refine_feat.router.8.weight, refine_feat.router.8.bias, refine_feat.router.9.weight, refine_feat.router.9.bias, refine_feat.router.10.weight, refine_feat.router.10.bias, refine_feat.router.11.weight, refine_feat.router.11.bias, refine_feat.router.12.weight, refine_feat.router.12.bias, refine_feat.router.13.weight, refine_feat.router.13.bias, refine_feat.router.14.weight, refine_feat.router.14.bias, refine_feat.router.15.weight, refine_feat.router.15.bias, refine_feat.router.16.weight, refine_feat.router.16.bias, refine_feat.router.17.weight, refine_feat.router.17.bias, refine_feat.router.18.weight, refine_feat.router.18.bias, refine_feat.router.19.weight, refine_feat.router.19.bias, refine_feat.router.20.weight, refine_feat.router.20.bias, refine_feat.router.21.weight, refine_feat.router.21.bias, refine_feat.router.22.weight, refine_feat.router.22.bias, refine_feat.router.23.weight, refine_feat.router.23.bias

2025/03/28 16:41:49 - mmengine - INFO - load model from: checkpoints/dinov2_converted.pth
2025/03/28 16:41:49 - mmengine - INFO - Loads checkpoint by local backend from path: checkpoints/dinov2_converted.pth
Name of parameter - Initialization information

backbone.cls_token - torch.Size([1, 1, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.pos_embed - torch.Size([1, 1025, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.mask_token - torch.Size([1, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.patch_embed.proj.weight - torch.Size([1024, 3, 16, 16]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.patch_embed.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.0.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.0.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.0.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.0.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.0.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.0.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.0.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.0.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.0.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.0.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.0.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.0.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.0.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.0.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.1.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.1.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.1.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.1.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.1.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.1.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.1.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.1.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.1.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.1.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.1.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.1.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.1.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.1.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.2.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.2.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.2.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.2.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.2.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.2.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.2.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.2.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.2.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.2.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.2.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.2.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.2.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.2.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.3.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.3.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.3.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.3.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.3.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.3.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.3.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.3.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.3.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.3.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.3.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.3.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.3.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.3.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.4.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.4.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.4.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.4.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.4.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.4.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.4.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.4.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.4.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.4.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.4.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.4.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.4.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.4.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.5.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.5.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.5.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.5.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.5.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.5.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.5.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.5.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.5.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.5.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.5.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.5.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.5.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.5.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.6.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.6.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.6.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.6.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.6.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.6.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.6.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.6.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.6.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.6.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.6.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.6.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.6.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.6.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.7.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.7.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.7.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.7.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.7.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.7.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.7.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.7.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.7.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.7.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.7.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.7.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.7.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.7.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.8.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.8.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.8.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.8.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.8.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.8.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.8.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.8.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.8.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.8.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.8.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.8.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.8.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.8.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.9.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.9.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.9.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.9.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.9.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.9.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.9.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.9.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.9.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.9.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.9.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.9.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.9.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.9.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.10.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.10.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.10.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.10.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.10.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.10.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.10.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.10.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.10.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.10.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.10.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.10.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.10.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.10.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.11.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.11.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.11.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.11.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.11.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.11.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.11.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.11.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.11.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.11.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.11.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.11.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.11.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.11.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.12.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.12.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.12.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.12.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.12.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.12.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.12.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.12.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.12.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.12.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.12.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.12.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.12.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.12.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.13.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.13.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.13.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.13.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.13.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.13.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.13.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.13.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.13.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.13.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.13.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.13.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.13.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.13.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.14.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.14.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.14.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.14.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.14.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.14.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.14.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.14.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.14.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.14.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.14.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.14.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.14.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.14.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.15.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.15.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.15.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.15.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.15.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.15.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.15.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.15.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.15.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.15.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.15.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.15.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.15.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.15.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.16.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.16.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.16.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.16.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.16.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.16.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.16.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.16.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.16.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.16.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.16.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.16.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.16.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.16.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.17.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.17.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.17.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.17.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.17.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.17.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.17.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.17.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.17.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.17.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.17.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.17.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.17.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.17.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.18.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.18.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.18.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.18.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.18.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.18.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.18.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.18.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.18.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.18.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.18.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.18.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.18.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.18.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.19.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.19.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.19.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.19.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.19.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.19.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.19.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.19.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.19.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.19.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.19.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.19.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.19.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.19.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.20.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.20.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.20.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.20.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.20.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.20.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.20.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.20.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.20.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.20.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.20.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.20.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.20.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.20.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.21.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.21.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.21.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.21.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.21.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.21.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.21.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.21.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.21.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.21.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.21.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.21.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.21.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.21.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.22.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.22.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.22.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.22.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.22.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.22.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.22.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.22.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.22.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.22.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.22.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.22.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.22.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.22.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.23.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.23.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.23.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.23.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.23.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.23.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.23.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.23.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.23.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.23.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.23.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.23.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.23.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.blocks.23.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.norm.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.norm.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

backbone.refine_feat.scale - torch.Size([24]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.0.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.3.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.4.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.4.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.5.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.5.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.6.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.6.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.7.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.7.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.8.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.8.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.9.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.9.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.10.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.10.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.11.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.11.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.12.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.12.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.13.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.13.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.14.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.14.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.15.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.15.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.16.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.16.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.17.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.17.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.18.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.18.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.19.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.19.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.20.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.20.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.21.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.21.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.22.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.22.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.23.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.23.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.0.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.0.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.0.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.0.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.1.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.1.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.1.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.1.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.2.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.2.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.2.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.2.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.3.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.3.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.3.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.3.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.4.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.4.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.4.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.4.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.5.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.5.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.5.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.5.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.6.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.6.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.6.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.6.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.7.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.7.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.7.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.7.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.8.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.8.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.8.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.8.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.9.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.9.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.9.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.9.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.10.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.10.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.10.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.10.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.11.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.11.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.11.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.11.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.12.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.12.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.12.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.12.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.13.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.13.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.13.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.13.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.14.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.14.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.14.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.14.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.15.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.15.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.15.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.15.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.16.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.16.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.16.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.16.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.17.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.17.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.17.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.17.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.18.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.18.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.18.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.18.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.19.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.19.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.19.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.19.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.20.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.20.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.20.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.20.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.21.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.21.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.21.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.21.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.22.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.22.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.22.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.22.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.23.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.23.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.23.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.23.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.0.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.0.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.0.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.0.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.1.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.1.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.1.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.1.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.2.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.2.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.2.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.2.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.3.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.3.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.3.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.3.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.4.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.4.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.4.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.4.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.5.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.5.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.5.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.5.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.6.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.6.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.6.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.6.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.7.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.7.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.7.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.7.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.8.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.8.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.8.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.8.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.9.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.9.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.9.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.9.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.10.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.10.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.10.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.10.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.11.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.11.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.11.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.11.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.12.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.12.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.12.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.12.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.13.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.13.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.13.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.13.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.14.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.14.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.14.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.14.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.15.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.15.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.15.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.15.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.16.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.16.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.16.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.16.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.17.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.17.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.17.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.17.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.18.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.18.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.18.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.18.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.19.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.19.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.19.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.19.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.20.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.20.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.20.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.20.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.21.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.21.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.21.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.21.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.22.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.22.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.22.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.22.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.23.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.23.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.23.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.23.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.0.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.0.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.0.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.0.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.1.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.1.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.1.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.1.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.2.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.2.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.2.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.2.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.3.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.3.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.3.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.3.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.4.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.4.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.4.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.4.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.5.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.5.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.5.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.5.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.6.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.6.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.6.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.6.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.7.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.7.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.7.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.7.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.8.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.8.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.8.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.8.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.9.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.9.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.9.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.9.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.10.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.10.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.10.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.10.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.11.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.11.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.11.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.11.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.12.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.12.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.12.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.12.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.13.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.13.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.13.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.13.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.14.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.14.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.14.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.14.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.15.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.15.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.15.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.15.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.16.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.16.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.16.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.16.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.17.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.17.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.17.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.17.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.18.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.18.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.18.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.18.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.19.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.19.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.19.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.19.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.20.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.20.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.20.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.20.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.21.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.21.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.21.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.21.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.22.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.22.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.22.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.22.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.23.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.23.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.23.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.23.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.0.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.0.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.1.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.2.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.2.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.3.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.3.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.4.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.4.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.5.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.5.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.6.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.6.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.7.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.7.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.8.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.8.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.9.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.9.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.10.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.10.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.11.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.11.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.12.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.12.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.13.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.13.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.14.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.14.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.15.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.15.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.16.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.16.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.17.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.17.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.18.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.18.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.19.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.19.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.20.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.20.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.21.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.21.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.22.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.22.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.23.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.23.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.input_convs.0.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.input_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.input_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.input_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.input_convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.input_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.input_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.input_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.input_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.input_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.input_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.input_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.self_attn.sampling_offsets.bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.0.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.self_attn.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.0.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.self_attn.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.0.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.0.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.0.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.self_attn.sampling_offsets.bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.1.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.self_attn.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.1.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.self_attn.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.1.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.1.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.1.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.self_attn.sampling_offsets.bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.2.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.self_attn.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.2.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.self_attn.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.2.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.2.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.2.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.self_attn.sampling_offsets.bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.3.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.self_attn.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.3.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.self_attn.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.3.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.3.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.3.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.self_attn.sampling_offsets.bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.4.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.self_attn.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.4.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.self_attn.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.4.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.4.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.4.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.self_attn.sampling_offsets.bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.5.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.self_attn.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.5.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.self_attn.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.5.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.5.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.encoder.layers.5.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.level_encoding.weight - torch.Size([3, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.lateral_convs.0.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.lateral_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.lateral_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.output_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.output_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.output_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.mask_feature.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.pixel_decoder.mask_feature.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.0.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.0.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.0.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.0.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.0.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.0.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.0.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.1.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.1.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.1.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.1.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.1.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.1.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.2.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.2.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.2.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.2.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.2.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.2.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.3.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.3.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.3.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.3.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.3.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.3.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.4.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.4.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.4.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.4.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.4.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.4.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.5.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.5.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.5.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.5.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.5.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.5.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.6.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.6.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.6.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.6.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.6.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.6.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.7.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.7.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.7.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.7.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.7.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.7.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.8.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.8.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.8.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.8.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.8.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

decode_head.transformer_decoder.layers.8.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.post_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.post_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.query_embed.weight - torch.Size([100, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.query_feat.weight - torch.Size([100, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.level_embed.weight - torch.Size([3, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.cls_embed.weight - torch.Size([8, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.cls_embed.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.mask_embed.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.mask_embed.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.mask_embed.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.mask_embed.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.mask_embed.4.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.mask_embed.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.cls_token - torch.Size([1, 1, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.pos_embed - torch.Size([1, 1025, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.mask_token - torch.Size([1, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.patch_embed.proj.weight - torch.Size([1024, 3, 16, 16]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.patch_embed.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.0.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.0.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.0.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.0.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.0.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.0.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.0.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.0.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.0.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.0.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.0.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.0.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.0.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.0.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.1.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.1.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.1.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.1.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.1.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.1.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.1.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.1.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.1.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.1.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.1.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.1.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.1.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.1.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.2.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.2.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.2.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.2.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.2.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.2.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.2.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.2.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.2.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.2.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.2.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.2.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.2.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.2.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.3.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.3.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.3.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.3.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.3.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.3.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.3.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.3.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.3.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.3.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.3.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.3.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.3.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.3.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.4.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.4.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.4.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.4.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.4.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.4.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.4.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.4.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.4.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.4.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.4.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.4.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.4.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.4.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.5.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.5.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.5.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.5.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.5.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.5.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.5.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.5.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.5.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.5.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.5.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.5.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.5.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.5.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.6.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.6.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.6.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.6.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.6.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.6.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.6.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.6.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.6.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.6.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.6.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.6.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.6.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.6.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.7.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.7.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.7.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.7.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.7.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.7.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.7.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.7.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.7.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.7.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.7.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.7.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.7.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.7.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.8.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.8.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.8.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.8.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.8.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.8.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.8.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.8.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.8.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.8.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.8.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.8.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.8.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.8.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.9.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.9.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.9.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.9.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.9.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.9.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.9.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.9.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.9.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.9.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.9.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.9.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.9.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.9.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.10.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.10.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.10.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.10.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.10.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.10.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.10.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.10.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.10.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.10.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.10.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.10.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.10.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.10.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.11.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.11.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.11.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.11.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.11.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.11.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.11.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.11.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.11.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.11.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.11.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.11.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.11.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.11.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.12.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.12.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.12.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.12.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.12.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.12.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.12.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.12.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.12.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.12.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.12.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.12.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.12.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.12.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.13.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.13.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.13.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.13.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.13.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.13.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.13.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.13.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.13.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.13.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.13.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.13.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.13.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.13.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.14.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.14.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.14.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.14.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.14.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.14.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.14.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.14.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.14.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.14.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.14.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.14.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.14.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.14.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.15.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.15.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.15.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.15.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.15.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.15.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.15.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.15.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.15.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.15.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.15.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.15.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.15.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.15.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.16.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.16.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.16.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.16.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.16.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.16.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.16.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.16.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.16.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.16.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.16.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.16.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.16.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.16.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.17.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.17.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.17.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.17.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.17.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.17.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.17.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.17.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.17.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.17.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.17.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.17.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.17.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.17.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.18.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.18.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.18.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.18.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.18.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.18.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.18.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.18.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.18.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.18.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.18.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.18.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.18.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.18.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.19.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.19.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.19.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.19.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.19.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.19.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.19.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.19.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.19.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.19.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.19.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.19.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.19.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.19.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.20.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.20.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.20.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.20.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.20.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.20.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.20.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.20.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.20.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.20.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.20.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.20.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.20.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.20.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.21.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.21.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.21.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.21.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.21.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.21.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.21.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.21.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.21.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.21.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.21.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.21.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.21.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.21.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.22.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.22.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.22.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.22.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.22.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.22.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.22.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.22.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.22.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.22.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.22.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.22.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.22.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.22.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.23.norm1.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.23.norm1.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.23.attn.qkv.weight - torch.Size([3072, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.23.attn.qkv.bias - torch.Size([3072]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.23.attn.proj.weight - torch.Size([1024, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.23.attn.proj.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.23.ls1.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.23.norm2.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.23.norm2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.23.mlp.fc1.weight - torch.Size([4096, 1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.23.mlp.fc1.bias - torch.Size([4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.23.mlp.fc2.weight - torch.Size([1024, 4096]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.23.mlp.fc2.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.blocks.23.ls2.gamma - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.norm.weight - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.norm.bias - torch.Size([1024]): 
PretrainedInit: load from checkpoints/dinov2_converted.pth 

ema_model.backbone.refine_feat.scale - torch.Size([24]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.0.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.3.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.4.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.4.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.5.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.5.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.6.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.6.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.7.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.7.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.8.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.8.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.9.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.9.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.10.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.10.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.11.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.11.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.12.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.12.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.13.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.13.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.14.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.14.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.15.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.15.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.16.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.16.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.17.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.17.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.18.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.18.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.19.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.19.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.20.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.20.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.21.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.21.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.22.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.22.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.23.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.23.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.0.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.0.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.0.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.0.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.1.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.1.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.1.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.1.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.2.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.2.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.2.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.2.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.3.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.3.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.3.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.3.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.4.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.4.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.4.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.4.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.5.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.5.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.5.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.5.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.6.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.6.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.6.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.6.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.7.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.7.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.7.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.7.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.8.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.8.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.8.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.8.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.9.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.9.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.9.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.9.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.10.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.10.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.10.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.10.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.11.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.11.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.11.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.11.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.12.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.12.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.12.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.12.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.13.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.13.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.13.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.13.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.14.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.14.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.14.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.14.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.15.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.15.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.15.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.15.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.16.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.16.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.16.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.16.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.17.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.17.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.17.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.17.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.18.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.18.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.18.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.18.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.19.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.19.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.19.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.19.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.20.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.20.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.20.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.20.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.21.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.21.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.21.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.21.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.22.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.22.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.22.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.22.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.23.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.23.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.23.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.23.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.0.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.0.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.0.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.0.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.1.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.1.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.1.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.1.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.2.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.2.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.2.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.2.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.3.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.3.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.3.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.3.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.4.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.4.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.4.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.4.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.5.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.5.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.5.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.5.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.6.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.6.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.6.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.6.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.7.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.7.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.7.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.7.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.8.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.8.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.8.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.8.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.9.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.9.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.9.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.9.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.10.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.10.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.10.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.10.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.11.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.11.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.11.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.11.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.12.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.12.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.12.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.12.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.13.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.13.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.13.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.13.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.14.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.14.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.14.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.14.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.15.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.15.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.15.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.15.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.16.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.16.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.16.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.16.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.17.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.17.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.17.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.17.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.18.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.18.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.18.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.18.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.19.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.19.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.19.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.19.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.20.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.20.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.20.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.20.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.21.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.21.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.21.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.21.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.22.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.22.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.22.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.22.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.23.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.23.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.23.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.23.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.0.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.0.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.0.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.0.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.1.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.1.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.1.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.1.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.2.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.2.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.2.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.2.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.3.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.3.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.3.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.3.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.4.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.4.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.4.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.4.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.5.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.5.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.5.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.5.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.6.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.6.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.6.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.6.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.7.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.7.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.7.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.7.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.8.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.8.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.8.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.8.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.9.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.9.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.9.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.9.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.10.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.10.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.10.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.10.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.11.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.11.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.11.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.11.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.12.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.12.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.12.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.12.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.13.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.13.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.13.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.13.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.14.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.14.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.14.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.14.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.15.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.15.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.15.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.15.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.16.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.16.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.16.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.16.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.17.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.17.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.17.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.17.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.18.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.18.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.18.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.18.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.19.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.19.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.19.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.19.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.20.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.20.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.20.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.20.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.21.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.21.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.21.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.21.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.22.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.22.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.22.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.22.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.23.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.23.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.23.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.23.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.0.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.0.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.1.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.2.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.2.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.3.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.3.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.4.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.4.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.5.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.5.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.6.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.6.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.7.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.7.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.8.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.8.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.9.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.9.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.10.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.10.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.11.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.11.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.12.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.12.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.13.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.13.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.14.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.14.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.15.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.15.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.16.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.16.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.17.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.17.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.18.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.18.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.19.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.19.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.20.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.20.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.21.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.21.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.22.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.22.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.23.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.23.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.input_convs.0.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.input_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.input_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.input_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.input_convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.input_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.input_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.input_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.input_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.input_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.input_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.input_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.self_attn.sampling_offsets.bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.0.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.self_attn.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.0.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.self_attn.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.0.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.0.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.0.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.self_attn.sampling_offsets.bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.1.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.self_attn.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.1.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.self_attn.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.1.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.1.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.1.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.self_attn.sampling_offsets.bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.2.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.self_attn.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.2.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.self_attn.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.2.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.2.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.2.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.self_attn.sampling_offsets.bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.3.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.self_attn.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.3.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.self_attn.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.3.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.3.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.3.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.self_attn.sampling_offsets.bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.4.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.self_attn.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.4.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.self_attn.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.4.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.4.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.4.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.self_attn.sampling_offsets.bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.5.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.self_attn.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.5.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.self_attn.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.5.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.5.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.encoder.layers.5.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.level_encoding.weight - torch.Size([3, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.lateral_convs.0.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.lateral_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.lateral_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.output_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.output_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.output_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.mask_feature.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.pixel_decoder.mask_feature.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.0.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.0.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.0.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.0.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.0.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.0.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.0.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.1.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.1.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.1.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.1.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.1.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.1.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.2.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.2.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.2.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.2.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.2.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.2.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.3.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.3.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.3.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.3.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.3.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.3.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.4.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.4.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.4.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.4.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.4.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.4.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.5.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.5.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.5.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.5.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.5.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.5.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.6.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.6.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.6.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.6.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.6.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.6.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.7.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.7.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.7.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.7.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.7.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.7.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.8.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.8.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.8.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.8.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.8.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

ema_model.decode_head.transformer_decoder.layers.8.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.post_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.post_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.query_embed.weight - torch.Size([100, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.query_feat.weight - torch.Size([100, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.level_embed.weight - torch.Size([3, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.cls_embed.weight - torch.Size([8, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.cls_embed.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.mask_embed.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.mask_embed.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.mask_embed.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.mask_embed.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.mask_embed.4.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.mask_embed.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  
2025/03/28 16:41:54 - mmengine - WARNING - init_weights of DACS_encoder_decoder has been called more than once.
Name of parameter - Initialization information

backbone.cls_token - torch.Size([1, 1, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.pos_embed - torch.Size([1, 1025, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.mask_token - torch.Size([1, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.patch_embed.proj.weight - torch.Size([1024, 3, 16, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.patch_embed.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.0.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.0.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.0.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.0.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.0.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.0.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.0.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.0.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.0.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.0.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.0.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.0.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.0.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.0.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.1.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.1.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.1.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.1.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.1.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.1.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.1.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.1.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.1.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.1.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.1.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.1.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.1.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.1.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.2.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.2.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.2.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.2.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.2.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.2.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.2.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.2.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.2.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.2.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.2.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.2.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.2.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.2.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.3.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.3.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.3.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.3.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.3.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.3.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.3.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.3.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.3.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.3.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.3.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.3.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.3.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.3.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.4.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.4.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.4.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.4.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.4.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.4.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.4.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.4.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.4.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.4.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.4.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.4.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.4.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.4.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.5.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.5.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.5.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.5.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.5.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.5.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.5.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.5.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.5.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.5.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.5.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.5.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.5.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.5.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.6.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.6.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.6.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.6.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.6.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.6.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.6.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.6.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.6.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.6.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.6.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.6.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.6.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.6.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.7.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.7.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.7.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.7.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.7.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.7.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.7.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.7.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.7.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.7.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.7.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.7.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.7.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.7.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.8.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.8.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.8.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.8.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.8.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.8.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.8.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.8.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.8.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.8.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.8.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.8.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.8.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.8.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.9.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.9.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.9.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.9.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.9.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.9.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.9.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.9.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.9.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.9.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.9.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.9.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.9.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.9.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.10.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.10.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.10.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.10.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.10.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.10.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.10.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.10.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.10.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.10.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.10.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.10.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.10.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.10.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.11.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.11.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.11.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.11.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.11.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.11.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.11.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.11.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.11.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.11.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.11.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.11.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.11.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.11.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.12.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.12.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.12.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.12.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.12.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.12.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.12.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.12.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.12.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.12.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.12.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.12.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.12.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.12.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.13.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.13.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.13.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.13.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.13.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.13.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.13.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.13.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.13.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.13.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.13.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.13.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.13.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.13.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.14.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.14.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.14.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.14.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.14.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.14.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.14.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.14.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.14.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.14.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.14.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.14.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.14.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.14.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.15.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.15.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.15.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.15.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.15.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.15.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.15.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.15.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.15.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.15.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.15.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.15.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.15.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.15.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.16.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.16.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.16.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.16.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.16.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.16.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.16.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.16.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.16.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.16.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.16.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.16.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.16.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.16.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.17.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.17.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.17.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.17.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.17.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.17.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.17.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.17.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.17.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.17.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.17.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.17.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.17.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.17.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.18.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.18.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.18.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.18.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.18.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.18.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.18.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.18.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.18.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.18.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.18.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.18.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.18.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.18.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.19.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.19.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.19.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.19.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.19.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.19.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.19.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.19.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.19.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.19.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.19.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.19.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.19.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.19.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.20.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.20.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.20.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.20.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.20.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.20.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.20.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.20.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.20.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.20.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.20.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.20.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.20.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.20.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.21.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.21.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.21.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.21.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.21.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.21.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.21.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.21.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.21.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.21.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.21.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.21.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.21.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.21.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.22.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.22.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.22.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.22.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.22.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.22.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.22.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.22.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.22.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.22.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.22.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.22.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.22.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.22.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.23.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.23.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.23.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.23.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.23.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.23.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.23.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.23.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.23.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.23.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.23.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.23.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.23.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.blocks.23.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.scale - torch.Size([24]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.0.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.3.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.4.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.4.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.5.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.5.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.6.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.6.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.7.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.7.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.8.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.8.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.9.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.9.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.10.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.10.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.11.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.11.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.12.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.12.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.13.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.13.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.14.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.14.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.15.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.15.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.16.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.16.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.17.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.17.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.18.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.18.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.19.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.19.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.20.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.20.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.21.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.21.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.22.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.22.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.23.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.layer_norm.23.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.0.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.0.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.0.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.0.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.1.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.1.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.1.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.1.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.2.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.2.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.2.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.2.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.3.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.3.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.3.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.3.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.4.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.4.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.4.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.4.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.5.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.5.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.5.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.5.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.6.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.6.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.6.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.6.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.7.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.7.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.7.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.7.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.8.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.8.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.8.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.8.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.9.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.9.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.9.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.9.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.10.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.10.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.10.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.10.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.11.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.11.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.11.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.11.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.12.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.12.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.12.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.12.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.13.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.13.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.13.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.13.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.14.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.14.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.14.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.14.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.15.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.15.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.15.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.15.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.16.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.16.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.16.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.16.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.17.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.17.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.17.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.17.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.18.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.18.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.18.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.18.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.19.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.19.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.19.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.19.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.20.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.20.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.20.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.20.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.21.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.21.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.21.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.21.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.22.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.22.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.22.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.22.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.23.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.23.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.23.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list1.23.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.0.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.0.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.0.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.0.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.1.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.1.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.1.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.1.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.2.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.2.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.2.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.2.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.3.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.3.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.3.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.3.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.4.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.4.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.4.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.4.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.5.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.5.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.5.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.5.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.6.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.6.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.6.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.6.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.7.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.7.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.7.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.7.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.8.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.8.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.8.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.8.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.9.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.9.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.9.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.9.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.10.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.10.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.10.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.10.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.11.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.11.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.11.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.11.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.12.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.12.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.12.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.12.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.13.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.13.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.13.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.13.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.14.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.14.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.14.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.14.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.15.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.15.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.15.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.15.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.16.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.16.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.16.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.16.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.17.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.17.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.17.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.17.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.18.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.18.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.18.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.18.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.19.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.19.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.19.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.19.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.20.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.20.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.20.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.20.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.21.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.21.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.21.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.21.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.22.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.22.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.22.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.22.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.23.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.23.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.23.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list2.23.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.0.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.0.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.0.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.0.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.1.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.1.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.1.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.1.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.2.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.2.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.2.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.2.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.3.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.3.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.3.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.3.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.4.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.4.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.4.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.4.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.5.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.5.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.5.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.5.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.6.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.6.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.6.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.6.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.7.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.7.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.7.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.7.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.8.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.8.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.8.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.8.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.9.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.9.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.9.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.9.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.10.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.10.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.10.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.10.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.11.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.11.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.11.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.11.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.12.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.12.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.12.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.12.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.13.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.13.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.13.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.13.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.14.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.14.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.14.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.14.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.15.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.15.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.15.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.15.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.16.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.16.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.16.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.16.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.17.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.17.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.17.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.17.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.18.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.18.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.18.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.18.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.19.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.19.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.19.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.19.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.20.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.20.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.20.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.20.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.21.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.21.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.21.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.21.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.22.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.22.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.22.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.22.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.23.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.23.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.23.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.mlp_list3.23.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.0.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.0.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.1.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.2.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.2.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.3.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.3.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.4.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.4.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.5.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.5.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.6.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.6.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.7.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.7.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.8.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.8.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.9.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.9.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.10.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.10.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.11.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.11.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.12.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.12.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.13.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.13.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.14.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.14.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.15.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.15.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.16.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.16.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.17.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.17.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.18.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.18.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.19.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.19.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.20.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.20.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.21.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.21.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.22.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.22.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.23.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

backbone.refine_feat.router.23.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.input_convs.0.conv.weight - torch.Size([256, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.input_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.input_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.input_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.input_convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.input_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.input_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.input_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.input_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.input_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.input_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.input_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.self_attn.sampling_offsets.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.self_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.self_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.self_attn.sampling_offsets.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.self_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.self_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.self_attn.sampling_offsets.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.self_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.self_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.self_attn.sampling_offsets.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.self_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.self_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.self_attn.sampling_offsets.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.self_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.self_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.self_attn.sampling_offsets.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.self_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.self_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.encoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.level_encoding.weight - torch.Size([3, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.lateral_convs.0.conv.weight - torch.Size([256, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.lateral_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.lateral_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.output_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.output_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.output_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.mask_feature.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.pixel_decoder.mask_feature.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.ffn.layers.1.weight - torch.Size([256, 2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.0.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.ffn.layers.1.weight - torch.Size([256, 2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.1.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.ffn.layers.1.weight - torch.Size([256, 2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.2.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.ffn.layers.1.weight - torch.Size([256, 2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.3.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.ffn.layers.1.weight - torch.Size([256, 2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.4.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.ffn.layers.1.weight - torch.Size([256, 2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.5.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.ffn.layers.1.weight - torch.Size([256, 2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.6.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.ffn.layers.1.weight - torch.Size([256, 2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.7.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.ffn.layers.1.weight - torch.Size([256, 2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.layers.8.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.post_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.transformer_decoder.post_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.query_embed.weight - torch.Size([100, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.query_feat.weight - torch.Size([100, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.level_embed.weight - torch.Size([3, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.cls_embed.weight - torch.Size([8, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.cls_embed.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.mask_embed.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.mask_embed.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.mask_embed.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.mask_embed.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.mask_embed.4.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

decode_head.mask_embed.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.cls_token - torch.Size([1, 1, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.pos_embed - torch.Size([1, 1025, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.mask_token - torch.Size([1, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.patch_embed.proj.weight - torch.Size([1024, 3, 16, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.patch_embed.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.0.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.0.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.0.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.0.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.0.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.0.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.0.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.0.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.0.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.0.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.0.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.0.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.0.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.0.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.1.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.1.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.1.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.1.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.1.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.1.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.1.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.1.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.1.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.1.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.1.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.1.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.1.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.1.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.2.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.2.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.2.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.2.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.2.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.2.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.2.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.2.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.2.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.2.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.2.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.2.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.2.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.2.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.3.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.3.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.3.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.3.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.3.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.3.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.3.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.3.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.3.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.3.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.3.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.3.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.3.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.3.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.4.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.4.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.4.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.4.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.4.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.4.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.4.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.4.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.4.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.4.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.4.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.4.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.4.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.4.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.5.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.5.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.5.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.5.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.5.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.5.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.5.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.5.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.5.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.5.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.5.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.5.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.5.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.5.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.6.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.6.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.6.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.6.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.6.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.6.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.6.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.6.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.6.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.6.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.6.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.6.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.6.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.6.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.7.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.7.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.7.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.7.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.7.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.7.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.7.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.7.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.7.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.7.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.7.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.7.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.7.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.7.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.8.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.8.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.8.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.8.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.8.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.8.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.8.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.8.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.8.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.8.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.8.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.8.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.8.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.8.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.9.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.9.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.9.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.9.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.9.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.9.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.9.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.9.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.9.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.9.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.9.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.9.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.9.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.9.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.10.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.10.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.10.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.10.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.10.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.10.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.10.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.10.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.10.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.10.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.10.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.10.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.10.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.10.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.11.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.11.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.11.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.11.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.11.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.11.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.11.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.11.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.11.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.11.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.11.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.11.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.11.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.11.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.12.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.12.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.12.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.12.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.12.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.12.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.12.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.12.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.12.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.12.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.12.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.12.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.12.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.12.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.13.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.13.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.13.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.13.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.13.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.13.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.13.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.13.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.13.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.13.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.13.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.13.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.13.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.13.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.14.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.14.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.14.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.14.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.14.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.14.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.14.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.14.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.14.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.14.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.14.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.14.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.14.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.14.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.15.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.15.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.15.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.15.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.15.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.15.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.15.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.15.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.15.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.15.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.15.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.15.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.15.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.15.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.16.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.16.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.16.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.16.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.16.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.16.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.16.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.16.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.16.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.16.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.16.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.16.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.16.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.16.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.17.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.17.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.17.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.17.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.17.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.17.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.17.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.17.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.17.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.17.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.17.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.17.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.17.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.17.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.18.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.18.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.18.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.18.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.18.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.18.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.18.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.18.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.18.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.18.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.18.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.18.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.18.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.18.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.19.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.19.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.19.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.19.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.19.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.19.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.19.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.19.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.19.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.19.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.19.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.19.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.19.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.19.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.20.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.20.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.20.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.20.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.20.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.20.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.20.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.20.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.20.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.20.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.20.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.20.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.20.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.20.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.21.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.21.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.21.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.21.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.21.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.21.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.21.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.21.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.21.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.21.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.21.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.21.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.21.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.21.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.22.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.22.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.22.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.22.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.22.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.22.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.22.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.22.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.22.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.22.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.22.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.22.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.22.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.22.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.23.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.23.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.23.attn.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.23.attn.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.23.attn.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.23.attn.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.23.ls1.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.23.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.23.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.23.mlp.fc1.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.23.mlp.fc1.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.23.mlp.fc2.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.23.mlp.fc2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.blocks.23.ls2.gamma - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.scale - torch.Size([24]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.0.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.3.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.4.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.4.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.5.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.5.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.6.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.6.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.7.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.7.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.8.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.8.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.9.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.9.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.10.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.10.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.11.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.11.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.12.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.12.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.13.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.13.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.14.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.14.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.15.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.15.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.16.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.16.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.17.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.17.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.18.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.18.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.19.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.19.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.20.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.20.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.21.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.21.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.22.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.22.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.23.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.layer_norm.23.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.0.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.0.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.0.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.0.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.1.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.1.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.1.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.1.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.2.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.2.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.2.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.2.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.3.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.3.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.3.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.3.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.4.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.4.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.4.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.4.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.5.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.5.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.5.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.5.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.6.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.6.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.6.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.6.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.7.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.7.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.7.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.7.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.8.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.8.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.8.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.8.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.9.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.9.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.9.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.9.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.10.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.10.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.10.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.10.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.11.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.11.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.11.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.11.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.12.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.12.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.12.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.12.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.13.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.13.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.13.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.13.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.14.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.14.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.14.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.14.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.15.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.15.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.15.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.15.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.16.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.16.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.16.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.16.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.17.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.17.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.17.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.17.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.18.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.18.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.18.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.18.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.19.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.19.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.19.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.19.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.20.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.20.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.20.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.20.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.21.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.21.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.21.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.21.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.22.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.22.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.22.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.22.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.23.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.23.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.23.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list1.23.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.0.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.0.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.0.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.0.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.1.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.1.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.1.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.1.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.2.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.2.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.2.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.2.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.3.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.3.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.3.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.3.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.4.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.4.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.4.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.4.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.5.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.5.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.5.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.5.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.6.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.6.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.6.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.6.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.7.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.7.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.7.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.7.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.8.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.8.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.8.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.8.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.9.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.9.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.9.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.9.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.10.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.10.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.10.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.10.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.11.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.11.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.11.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.11.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.12.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.12.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.12.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.12.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.13.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.13.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.13.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.13.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.14.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.14.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.14.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.14.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.15.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.15.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.15.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.15.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.16.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.16.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.16.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.16.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.17.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.17.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.17.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.17.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.18.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.18.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.18.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.18.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.19.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.19.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.19.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.19.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.20.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.20.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.20.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.20.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.21.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.21.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.21.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.21.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.22.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.22.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.22.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.22.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.23.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.23.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.23.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list2.23.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.0.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.0.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.0.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.0.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.1.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.1.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.1.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.1.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.2.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.2.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.2.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.2.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.3.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.3.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.3.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.3.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.4.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.4.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.4.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.4.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.5.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.5.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.5.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.5.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.6.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.6.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.6.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.6.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.7.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.7.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.7.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.7.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.8.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.8.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.8.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.8.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.9.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.9.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.9.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.9.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.10.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.10.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.10.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.10.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.11.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.11.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.11.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.11.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.12.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.12.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.12.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.12.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.13.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.13.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.13.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.13.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.14.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.14.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.14.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.14.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.15.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.15.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.15.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.15.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.16.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.16.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.16.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.16.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.17.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.17.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.17.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.17.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.18.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.18.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.18.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.18.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.19.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.19.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.19.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.19.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.20.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.20.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.20.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.20.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.21.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.21.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.21.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.21.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.22.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.22.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.22.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.22.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.23.0.weight - torch.Size([16, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.23.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.23.2.weight - torch.Size([1024, 16]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.mlp_list3.23.2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.0.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.0.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.1.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.2.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.2.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.3.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.3.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.4.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.4.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.5.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.5.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.6.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.6.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.7.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.7.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.8.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.8.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.9.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.9.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.10.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.10.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.11.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.11.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.12.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.12.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.13.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.13.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.14.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.14.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.15.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.15.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.16.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.16.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.17.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.17.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.18.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.18.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.19.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.19.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.20.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.20.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.21.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.21.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.22.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.22.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.23.weight - torch.Size([3, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.backbone.refine_feat.router.23.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.input_convs.0.conv.weight - torch.Size([256, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.input_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.input_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.input_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.input_convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.input_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.input_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.input_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.input_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.input_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.input_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.input_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.self_attn.sampling_offsets.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.self_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.self_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.self_attn.sampling_offsets.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.self_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.self_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.self_attn.sampling_offsets.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.self_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.self_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.self_attn.sampling_offsets.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.self_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.self_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.self_attn.sampling_offsets.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.self_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.self_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.self_attn.sampling_offsets.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.self_attn.value_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.self_attn.output_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.encoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.level_encoding.weight - torch.Size([3, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.lateral_convs.0.conv.weight - torch.Size([256, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.lateral_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.lateral_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.output_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.output_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.output_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.mask_feature.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.pixel_decoder.mask_feature.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.ffn.layers.1.weight - torch.Size([256, 2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.0.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.ffn.layers.1.weight - torch.Size([256, 2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.1.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.ffn.layers.1.weight - torch.Size([256, 2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.2.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.ffn.layers.1.weight - torch.Size([256, 2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.3.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.ffn.layers.1.weight - torch.Size([256, 2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.4.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.ffn.layers.1.weight - torch.Size([256, 2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.5.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.ffn.layers.1.weight - torch.Size([256, 2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.6.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.ffn.layers.1.weight - torch.Size([256, 2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.7.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.ffn.layers.1.weight - torch.Size([256, 2048]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.layers.8.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.post_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.transformer_decoder.post_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.query_embed.weight - torch.Size([100, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.query_feat.weight - torch.Size([100, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.level_embed.weight - torch.Size([3, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.cls_embed.weight - torch.Size([8, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.cls_embed.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.mask_embed.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.mask_embed.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.mask_embed.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.mask_embed.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.mask_embed.4.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  

ema_model.decode_head.mask_embed.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of DACS_encoder_decoder  
2025/03/28 16:41:54 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/03/28 16:41:54 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/03/28 16:41:54 - mmengine - INFO - Checkpoints will be saved to /data/xiaoxinghhh/code/my_mmcv/work_dirs/r2u/DA_spatial_16_fft_cut_off_0.3_suf3_scale_0.1/e6531_seed0.
2025/03/28 16:42:52 - mmengine - INFO - Iter(train) [   50/20000]  base_lr: 9.9779e-05 lr: 9.9779e-05  eta: 6:27:16  time: 1.0652  data_time: 0.0267  memory: 13765  loss: 78.3201  decode.loss_cls: 2.1733  decode.loss_mask: 2.7126  decode.loss_dice: 3.6584  decode.d0.loss_cls: 3.9086  decode.d0.loss_mask: 2.0675  decode.d0.loss_dice: 3.1028  decode.d1.loss_cls: 1.8968  decode.d1.loss_mask: 2.0981  decode.d1.loss_dice: 3.1134  decode.d2.loss_cls: 2.0539  decode.d2.loss_mask: 2.1654  decode.d2.loss_dice: 3.0487  decode.d3.loss_cls: 2.0196  decode.d3.loss_mask: 2.1633  decode.d3.loss_dice: 3.1470  decode.d4.loss_cls: 2.1245  decode.d4.loss_mask: 2.1152  decode.d4.loss_dice: 3.1868  decode.d5.loss_cls: 2.1515  decode.d5.loss_mask: 2.0979  decode.d5.loss_dice: 3.2169  decode.d6.loss_cls: 2.1318  decode.d6.loss_mask: 2.2111  decode.d6.loss_dice: 3.2772  decode.d7.loss_cls: 2.1629  decode.d7.loss_mask: 2.4070  decode.d7.loss_dice: 3.4277  decode.d8.loss_cls: 2.1905  decode.d8.loss_mask: 2.6885  decode.d8.loss_dice: 3.6009
2025/03/28 16:43:50 - mmengine - INFO - Iter(train) [  100/20000]  base_lr: 9.9554e-05 lr: 9.9554e-05  eta: 6:26:16  time: 1.1491  data_time: 0.0323  memory: 6834  loss: 68.4043  decode.loss_cls: 2.1012  decode.loss_mask: 2.2339  decode.loss_dice: 2.8674  decode.d0.loss_cls: 3.9678  decode.d0.loss_mask: 2.0341  decode.d0.loss_dice: 2.6658  decode.d1.loss_cls: 1.7507  decode.d1.loss_mask: 2.0519  decode.d1.loss_dice: 2.7529  decode.d2.loss_cls: 1.7818  decode.d2.loss_mask: 1.9894  decode.d2.loss_dice: 2.5580  decode.d3.loss_cls: 1.8081  decode.d3.loss_mask: 1.9998  decode.d3.loss_dice: 2.5358  decode.d4.loss_cls: 1.7921  decode.d4.loss_mask: 2.0229  decode.d4.loss_dice: 2.5262  decode.d5.loss_cls: 1.8163  decode.d5.loss_mask: 2.0263  decode.d5.loss_dice: 2.5862  decode.d6.loss_cls: 1.8889  decode.d6.loss_mask: 2.1235  decode.d6.loss_dice: 2.6293  decode.d7.loss_cls: 1.9840  decode.d7.loss_mask: 2.1459  decode.d7.loss_dice: 2.7307  decode.d8.loss_cls: 2.0312  decode.d8.loss_mask: 2.1715  decode.d8.loss_dice: 2.8307
2025/03/28 16:44:47 - mmengine - INFO - Iter(train) [  150/20000]  base_lr: 9.9329e-05 lr: 9.9329e-05  eta: 6:21:50  time: 1.1990  data_time: 0.0301  memory: 6820  loss: 62.5345  decode.loss_cls: 1.8039  decode.loss_mask: 2.1724  decode.loss_dice: 2.6722  decode.d0.loss_cls: 3.8562  decode.d0.loss_mask: 1.8433  decode.d0.loss_dice: 2.4870  decode.d1.loss_cls: 1.4967  decode.d1.loss_mask: 1.8604  decode.d1.loss_dice: 2.4792  decode.d2.loss_cls: 1.6235  decode.d2.loss_mask: 1.8939  decode.d2.loss_dice: 2.4434  decode.d3.loss_cls: 1.5719  decode.d3.loss_mask: 1.9185  decode.d3.loss_dice: 2.4001  decode.d4.loss_cls: 1.6861  decode.d4.loss_mask: 1.8532  decode.d4.loss_dice: 2.3968  decode.d5.loss_cls: 1.6379  decode.d5.loss_mask: 1.8835  decode.d5.loss_dice: 2.3957  decode.d6.loss_cls: 1.6839  decode.d6.loss_mask: 1.8290  decode.d6.loss_dice: 2.4616  decode.d7.loss_cls: 1.7369  decode.d7.loss_mask: 1.8522  decode.d7.loss_dice: 2.4806  decode.d8.loss_cls: 1.8033  decode.d8.loss_mask: 1.7856  decode.d8.loss_dice: 2.5254
2025/03/28 16:45:42 - mmengine - INFO - Iter(train) [  200/20000]  base_lr: 9.9104e-05 lr: 9.9104e-05  eta: 6:16:15  time: 1.0032  data_time: 0.0328  memory: 6830  loss: 64.5127  decode.loss_cls: 1.8166  decode.loss_mask: 2.0926  decode.loss_dice: 2.7455  decode.d0.loss_cls: 3.7606  decode.d0.loss_mask: 1.8736  decode.d0.loss_dice: 2.7692  decode.d1.loss_cls: 1.4586  decode.d1.loss_mask: 1.8873  decode.d1.loss_dice: 2.6489  decode.d2.loss_cls: 1.4927  decode.d2.loss_mask: 1.9352  decode.d2.loss_dice: 2.6308  decode.d3.loss_cls: 1.4416  decode.d3.loss_mask: 1.9413  decode.d3.loss_dice: 2.5962  decode.d4.loss_cls: 1.5434  decode.d4.loss_mask: 1.9745  decode.d4.loss_dice: 2.5932  decode.d5.loss_cls: 1.5547  decode.d5.loss_mask: 1.9314  decode.d5.loss_dice: 2.5489  decode.d6.loss_cls: 1.6621  decode.d6.loss_mask: 1.9957  decode.d6.loss_dice: 2.6570  decode.d7.loss_cls: 1.7413  decode.d7.loss_mask: 1.9465  decode.d7.loss_dice: 2.6961  decode.d8.loss_cls: 1.8276  decode.d8.loss_mask: 2.0012  decode.d8.loss_dice: 2.7485
2025/03/28 16:46:35 - mmengine - INFO - Iter(train) [  250/20000]  base_lr: 9.8879e-05 lr: 9.8879e-05  eta: 6:09:45  time: 1.1118  data_time: 0.0313  memory: 6827  loss: 56.1094  decode.loss_cls: 1.7069  decode.loss_mask: 1.6519  decode.loss_dice: 2.3556  decode.d0.loss_cls: 3.6618  decode.d0.loss_mask: 1.5117  decode.d0.loss_dice: 2.4143  decode.d1.loss_cls: 1.3585  decode.d1.loss_mask: 1.5011  decode.d1.loss_dice: 2.2021  decode.d2.loss_cls: 1.4771  decode.d2.loss_mask: 1.5427  decode.d2.loss_dice: 2.1470  decode.d3.loss_cls: 1.4614  decode.d3.loss_mask: 1.6403  decode.d3.loss_dice: 2.2130  decode.d4.loss_cls: 1.5004  decode.d4.loss_mask: 1.5853  decode.d4.loss_dice: 2.2034  decode.d5.loss_cls: 1.5590  decode.d5.loss_mask: 1.6080  decode.d5.loss_dice: 2.2367  decode.d6.loss_cls: 1.5107  decode.d6.loss_mask: 1.6198  decode.d6.loss_dice: 2.2207  decode.d7.loss_cls: 1.5322  decode.d7.loss_mask: 1.8304  decode.d7.loss_dice: 2.3505  decode.d8.loss_cls: 1.5867  decode.d8.loss_mask: 1.6383  decode.d8.loss_dice: 2.2819
2025/03/28 16:47:25 - mmengine - INFO - Iter(train) [  300/20000]  base_lr: 9.8653e-05 lr: 9.8653e-05  eta: 6:02:34  time: 0.9973  data_time: 0.0295  memory: 6833  loss: 50.4191  decode.loss_cls: 1.3617  decode.loss_mask: 1.6565  decode.loss_dice: 1.8009  decode.d0.loss_cls: 3.5242  decode.d0.loss_mask: 1.6657  decode.d0.loss_dice: 2.0486  decode.d1.loss_cls: 1.1487  decode.d1.loss_mask: 1.7072  decode.d1.loss_dice: 1.9514  decode.d2.loss_cls: 1.2270  decode.d2.loss_mask: 1.8508  decode.d2.loss_dice: 1.8900  decode.d3.loss_cls: 1.2492  decode.d3.loss_mask: 1.6816  decode.d3.loss_dice: 1.8068  decode.d4.loss_cls: 1.2570  decode.d4.loss_mask: 1.6415  decode.d4.loss_dice: 1.7833  decode.d5.loss_cls: 1.2743  decode.d5.loss_mask: 1.6898  decode.d5.loss_dice: 1.8487  decode.d6.loss_cls: 1.2156  decode.d6.loss_mask: 1.6628  decode.d6.loss_dice: 1.8226  decode.d7.loss_cls: 1.2054  decode.d7.loss_mask: 1.7652  decode.d7.loss_dice: 1.8972  decode.d8.loss_cls: 1.2552  decode.d8.loss_mask: 1.7280  decode.d8.loss_dice: 1.8023
2025/03/28 16:48:26 - mmengine - INFO - Iter(train) [  350/20000]  base_lr: 9.8428e-05 lr: 9.8428e-05  eta: 6:06:38  time: 1.1755  data_time: 0.0316  memory: 6809  loss: 53.4782  decode.loss_cls: 1.2476  decode.loss_mask: 1.7954  decode.loss_dice: 2.1745  decode.d0.loss_cls: 3.4687  decode.d0.loss_mask: 1.7113  decode.d0.loss_dice: 2.1815  decode.d1.loss_cls: 1.0420  decode.d1.loss_mask: 1.8086  decode.d1.loss_dice: 2.1907  decode.d2.loss_cls: 1.0740  decode.d2.loss_mask: 1.7898  decode.d2.loss_dice: 2.1573  decode.d3.loss_cls: 1.0134  decode.d3.loss_mask: 1.8264  decode.d3.loss_dice: 2.2178  decode.d4.loss_cls: 1.0518  decode.d4.loss_mask: 1.8533  decode.d4.loss_dice: 2.1295  decode.d5.loss_cls: 1.1972  decode.d5.loss_mask: 1.7814  decode.d5.loss_dice: 2.0600  decode.d6.loss_cls: 1.2622  decode.d6.loss_mask: 1.8483  decode.d6.loss_dice: 2.1865  decode.d7.loss_cls: 1.2365  decode.d7.loss_mask: 1.8060  decode.d7.loss_dice: 2.1347  decode.d8.loss_cls: 1.2624  decode.d8.loss_mask: 1.8070  decode.d8.loss_dice: 2.1625
2025/03/28 16:49:23 - mmengine - INFO - Iter(train) [  400/20000]  base_lr: 9.8203e-05 lr: 9.8203e-05  eta: 6:06:44  time: 1.0507  data_time: 0.0264  memory: 6811  loss: 53.2201  decode.loss_cls: 1.3755  decode.loss_mask: 1.6681  decode.loss_dice: 2.0104  decode.d0.loss_cls: 3.5013  decode.d0.loss_mask: 1.7087  decode.d0.loss_dice: 2.2961  decode.d1.loss_cls: 1.1737  decode.d1.loss_mask: 1.7518  decode.d1.loss_dice: 2.1592  decode.d2.loss_cls: 1.0299  decode.d2.loss_mask: 1.8220  decode.d2.loss_dice: 2.1054  decode.d3.loss_cls: 1.0763  decode.d3.loss_mask: 1.7749  decode.d3.loss_dice: 2.0660  decode.d4.loss_cls: 1.3129  decode.d4.loss_mask: 1.6787  decode.d4.loss_dice: 2.0380  decode.d5.loss_cls: 1.4807  decode.d5.loss_mask: 1.6707  decode.d5.loss_dice: 2.0330  decode.d6.loss_cls: 1.4734  decode.d6.loss_mask: 1.7193  decode.d6.loss_dice: 2.0282  decode.d7.loss_cls: 1.5053  decode.d7.loss_mask: 1.6688  decode.d7.loss_dice: 2.0393  decode.d8.loss_cls: 1.3963  decode.d8.loss_mask: 1.6891  decode.d8.loss_dice: 1.9671
2025/03/28 16:50:20 - mmengine - INFO - Iter(train) [  450/20000]  base_lr: 9.7977e-05 lr: 9.7977e-05  eta: 6:06:27  time: 1.1731  data_time: 0.0314  memory: 6825  loss: 58.3845  decode.loss_cls: 1.5506  decode.loss_mask: 1.8186  decode.loss_dice: 2.3415  decode.d0.loss_cls: 3.3163  decode.d0.loss_mask: 1.7598  decode.d0.loss_dice: 2.5491  decode.d1.loss_cls: 1.2674  decode.d1.loss_mask: 1.8923  decode.d1.loss_dice: 2.4765  decode.d2.loss_cls: 1.2405  decode.d2.loss_mask: 1.8400  decode.d2.loss_dice: 2.4017  decode.d3.loss_cls: 1.3409  decode.d3.loss_mask: 1.8083  decode.d3.loss_dice: 2.4388  decode.d4.loss_cls: 1.4347  decode.d4.loss_mask: 1.7727  decode.d4.loss_dice: 2.4039  decode.d5.loss_cls: 1.5116  decode.d5.loss_mask: 1.7664  decode.d5.loss_dice: 2.3538  decode.d6.loss_cls: 1.6077  decode.d6.loss_mask: 1.7850  decode.d6.loss_dice: 2.3186  decode.d7.loss_cls: 1.5981  decode.d7.loss_mask: 1.7529  decode.d7.loss_dice: 2.3795  decode.d8.loss_cls: 1.4756  decode.d8.loss_mask: 1.7759  decode.d8.loss_dice: 2.4057
2025/03/28 16:51:17 - mmengine - INFO - Iter(train) [  500/20000]  base_lr: 9.7752e-05 lr: 9.7752e-05  eta: 6:06:18  time: 1.2379  data_time: 0.0302  memory: 6835  loss: 56.3813  decode.loss_cls: 1.2088  decode.loss_mask: 2.1380  decode.loss_dice: 2.3834  decode.d0.loss_cls: 3.1880  decode.d0.loss_mask: 1.9728  decode.d0.loss_dice: 2.5264  decode.d1.loss_cls: 0.9991  decode.d1.loss_mask: 2.0062  decode.d1.loss_dice: 2.3293  decode.d2.loss_cls: 0.9968  decode.d2.loss_mask: 1.9291  decode.d2.loss_dice: 2.2751  decode.d3.loss_cls: 1.1147  decode.d3.loss_mask: 1.8884  decode.d3.loss_dice: 2.2626  decode.d4.loss_cls: 1.2139  decode.d4.loss_mask: 1.9186  decode.d4.loss_dice: 2.1803  decode.d5.loss_cls: 1.2431  decode.d5.loss_mask: 1.9625  decode.d5.loss_dice: 2.1416  decode.d6.loss_cls: 1.3180  decode.d6.loss_mask: 1.8736  decode.d6.loss_dice: 2.2262  decode.d7.loss_cls: 1.2925  decode.d7.loss_mask: 2.0295  decode.d7.loss_dice: 2.2563  decode.d8.loss_cls: 1.1936  decode.d8.loss_mask: 2.0622  decode.d8.loss_dice: 2.2508
2025/03/28 16:52:03 - mmengine - INFO - Iter(train) [  550/20000]  base_lr: 9.7526e-05 lr: 9.7526e-05  eta: 5:58:59  time: 0.9301  data_time: 0.0312  memory: 6831  loss: 50.2086  decode.loss_cls: 1.1845  decode.loss_mask: 1.6540  decode.loss_dice: 2.1336  decode.d0.loss_cls: 3.0761  decode.d0.loss_mask: 1.6371  decode.d0.loss_dice: 2.3190  decode.d1.loss_cls: 0.8301  decode.d1.loss_mask: 1.7653  decode.d1.loss_dice: 2.1743  decode.d2.loss_cls: 0.7794  decode.d2.loss_mask: 1.7070  decode.d2.loss_dice: 2.1722  decode.d3.loss_cls: 0.9062  decode.d3.loss_mask: 1.6750  decode.d3.loss_dice: 2.0885  decode.d4.loss_cls: 0.9379  decode.d4.loss_mask: 1.6574  decode.d4.loss_dice: 2.0850  decode.d5.loss_cls: 1.0069  decode.d5.loss_mask: 1.5759  decode.d5.loss_dice: 2.0087  decode.d6.loss_cls: 1.0421  decode.d6.loss_mask: 1.6665  decode.d6.loss_dice: 2.1946  decode.d7.loss_cls: 1.1072  decode.d7.loss_mask: 1.6896  decode.d7.loss_dice: 2.1019  decode.d8.loss_cls: 1.1625  decode.d8.loss_mask: 1.6848  decode.d8.loss_dice: 2.1851
2025/03/28 16:52:52 - mmengine - INFO - Iter(train) [  600/20000]  base_lr: 9.7300e-05 lr: 9.7300e-05  eta: 5:54:33  time: 1.2261  data_time: 0.0292  memory: 6812  loss: 51.7193  decode.loss_cls: 1.1532  decode.loss_mask: 1.8481  decode.loss_dice: 2.0649  decode.d0.loss_cls: 3.0820  decode.d0.loss_mask: 1.6903  decode.d0.loss_dice: 2.0388  decode.d1.loss_cls: 0.9165  decode.d1.loss_mask: 1.8288  decode.d1.loss_dice: 2.0551  decode.d2.loss_cls: 0.9272  decode.d2.loss_mask: 1.8723  decode.d2.loss_dice: 2.0269  decode.d3.loss_cls: 1.1288  decode.d3.loss_mask: 1.8815  decode.d3.loss_dice: 2.0249  decode.d4.loss_cls: 1.1110  decode.d4.loss_mask: 1.8742  decode.d4.loss_dice: 2.0161  decode.d5.loss_cls: 1.1755  decode.d5.loss_mask: 1.7899  decode.d5.loss_dice: 1.9847  decode.d6.loss_cls: 1.1658  decode.d6.loss_mask: 1.9282  decode.d6.loss_dice: 2.0619  decode.d7.loss_cls: 1.1176  decode.d7.loss_mask: 1.8811  decode.d7.loss_dice: 2.0685  decode.d8.loss_cls: 1.1045  decode.d8.loss_mask: 1.8123  decode.d8.loss_dice: 2.0889
2025/03/28 16:53:47 - mmengine - INFO - Iter(train) [  650/20000]  base_lr: 9.7075e-05 lr: 9.7075e-05  eta: 5:53:55  time: 0.9906  data_time: 0.0271  memory: 6828  loss: 46.6516  decode.loss_cls: 1.0817  decode.loss_mask: 1.6805  decode.loss_dice: 1.8406  decode.d0.loss_cls: 2.8943  decode.d0.loss_mask: 1.6566  decode.d0.loss_dice: 1.9668  decode.d1.loss_cls: 0.6960  decode.d1.loss_mask: 1.6485  decode.d1.loss_dice: 1.8623  decode.d2.loss_cls: 0.6211  decode.d2.loss_mask: 1.7970  decode.d2.loss_dice: 1.8553  decode.d3.loss_cls: 0.7146  decode.d3.loss_mask: 1.8741  decode.d3.loss_dice: 1.8548  decode.d4.loss_cls: 0.8032  decode.d4.loss_mask: 1.7601  decode.d4.loss_dice: 1.9172  decode.d5.loss_cls: 0.9043  decode.d5.loss_mask: 1.8447  decode.d5.loss_dice: 1.8948  decode.d6.loss_cls: 0.9655  decode.d6.loss_mask: 1.8002  decode.d6.loss_dice: 1.8359  decode.d7.loss_cls: 0.9675  decode.d7.loss_mask: 1.7326  decode.d7.loss_dice: 1.7705  decode.d8.loss_cls: 0.9777  decode.d8.loss_mask: 1.6842  decode.d8.loss_dice: 1.7492
2025/03/28 16:54:41 - mmengine - INFO - Iter(train) [  700/20000]  base_lr: 9.6849e-05 lr: 9.6849e-05  eta: 5:52:22  time: 0.9999  data_time: 0.0276  memory: 6826  loss: 51.2053  decode.loss_cls: 1.1745  decode.loss_mask: 1.8579  decode.loss_dice: 2.0272  decode.d0.loss_cls: 2.8816  decode.d0.loss_mask: 1.7847  decode.d0.loss_dice: 2.1748  decode.d1.loss_cls: 0.8220  decode.d1.loss_mask: 2.0464  decode.d1.loss_dice: 2.2040  decode.d2.loss_cls: 0.9064  decode.d2.loss_mask: 1.8663  decode.d2.loss_dice: 2.0957  decode.d3.loss_cls: 0.9932  decode.d3.loss_mask: 1.8758  decode.d3.loss_dice: 2.0513  decode.d4.loss_cls: 0.9503  decode.d4.loss_mask: 1.8032  decode.d4.loss_dice: 1.9870  decode.d5.loss_cls: 1.0380  decode.d5.loss_mask: 1.7476  decode.d5.loss_dice: 1.9943  decode.d6.loss_cls: 1.0571  decode.d6.loss_mask: 1.8246  decode.d6.loss_dice: 2.0360  decode.d7.loss_cls: 1.1172  decode.d7.loss_mask: 1.8659  decode.d7.loss_dice: 2.0137  decode.d8.loss_cls: 1.0751  decode.d8.loss_mask: 1.8949  decode.d8.loss_dice: 2.0384
2025/03/28 16:55:38 - mmengine - INFO - Iter(train) [  750/20000]  base_lr: 9.6623e-05 lr: 9.6623e-05  eta: 5:52:30  time: 1.0996  data_time: 0.0297  memory: 6828  loss: 48.9835  decode.loss_cls: 1.0114  decode.loss_mask: 1.7679  decode.loss_dice: 1.8822  decode.d0.loss_cls: 2.9339  decode.d0.loss_mask: 1.7685  decode.d0.loss_dice: 1.9421  decode.d1.loss_cls: 0.8806  decode.d1.loss_mask: 1.8987  decode.d1.loss_dice: 1.8902  decode.d2.loss_cls: 1.0323  decode.d2.loss_mask: 1.8001  decode.d2.loss_dice: 1.8287  decode.d3.loss_cls: 0.9405  decode.d3.loss_mask: 1.8372  decode.d3.loss_dice: 1.8621  decode.d4.loss_cls: 1.0268  decode.d4.loss_mask: 1.9012  decode.d4.loss_dice: 1.8148  decode.d5.loss_cls: 0.9664  decode.d5.loss_mask: 1.8340  decode.d5.loss_dice: 1.8779  decode.d6.loss_cls: 1.0431  decode.d6.loss_mask: 1.8216  decode.d6.loss_dice: 1.8915  decode.d7.loss_cls: 0.9574  decode.d7.loss_mask: 1.8344  decode.d7.loss_dice: 1.9654  decode.d8.loss_cls: 1.0076  decode.d8.loss_mask: 1.8148  decode.d8.loss_dice: 1.9501
2025/03/28 16:56:36 - mmengine - INFO - Iter(train) [  800/20000]  base_lr: 9.6397e-05 lr: 9.6397e-05  eta: 5:52:46  time: 1.0537  data_time: 0.0317  memory: 6817  loss: 49.4292  decode.loss_cls: 1.0853  decode.loss_mask: 1.8774  decode.loss_dice: 1.8741  decode.d0.loss_cls: 2.7747  decode.d0.loss_mask: 1.7860  decode.d0.loss_dice: 2.0081  decode.d1.loss_cls: 0.7800  decode.d1.loss_mask: 1.9544  decode.d1.loss_dice: 1.9924  decode.d2.loss_cls: 0.6839  decode.d2.loss_mask: 1.9921  decode.d2.loss_dice: 1.9813  decode.d3.loss_cls: 0.8022  decode.d3.loss_mask: 1.9335  decode.d3.loss_dice: 1.9174  decode.d4.loss_cls: 0.8861  decode.d4.loss_mask: 1.8873  decode.d4.loss_dice: 1.9706  decode.d5.loss_cls: 0.9380  decode.d5.loss_mask: 1.8705  decode.d5.loss_dice: 1.9002  decode.d6.loss_cls: 1.0244  decode.d6.loss_mask: 1.9294  decode.d6.loss_dice: 1.9542  decode.d7.loss_cls: 0.9818  decode.d7.loss_mask: 1.8923  decode.d7.loss_dice: 1.9166  decode.d8.loss_cls: 1.0025  decode.d8.loss_mask: 1.9125  decode.d8.loss_dice: 1.9200
2025/03/28 16:57:36 - mmengine - INFO - Iter(train) [  850/20000]  base_lr: 9.6171e-05 lr: 9.6171e-05  eta: 5:53:54  time: 1.1501  data_time: 0.0291  memory: 6828  loss: 55.6999  decode.loss_cls: 1.3681  decode.loss_mask: 2.0344  decode.loss_dice: 2.1192  decode.d0.loss_cls: 2.7948  decode.d0.loss_mask: 2.0206  decode.d0.loss_dice: 2.2958  decode.d1.loss_cls: 0.9067  decode.d1.loss_mask: 2.0161  decode.d1.loss_dice: 2.2175  decode.d2.loss_cls: 1.0169  decode.d2.loss_mask: 1.9835  decode.d2.loss_dice: 2.2196  decode.d3.loss_cls: 1.0269  decode.d3.loss_mask: 2.0872  decode.d3.loss_dice: 2.2022  decode.d4.loss_cls: 1.2179  decode.d4.loss_mask: 2.0815  decode.d4.loss_dice: 2.2476  decode.d5.loss_cls: 1.3660  decode.d5.loss_mask: 2.0131  decode.d5.loss_dice: 2.1592  decode.d6.loss_cls: 1.1954  decode.d6.loss_mask: 2.0029  decode.d6.loss_dice: 2.1361  decode.d7.loss_cls: 1.2753  decode.d7.loss_mask: 2.0487  decode.d7.loss_dice: 2.1103  decode.d8.loss_cls: 1.3208  decode.d8.loss_mask: 2.0186  decode.d8.loss_dice: 2.1972
2025/03/28 16:58:31 - mmengine - INFO - Iter(train) [  900/20000]  base_lr: 9.5945e-05 lr: 9.5945e-05  eta: 5:52:37  time: 1.0854  data_time: 0.0311  memory: 6813  loss: 52.1398  decode.loss_cls: 1.0487  decode.loss_mask: 2.0141  decode.loss_dice: 2.1817  decode.d0.loss_cls: 2.6680  decode.d0.loss_mask: 1.9233  decode.d0.loss_dice: 2.2740  decode.d1.loss_cls: 0.9044  decode.d1.loss_mask: 1.8515  decode.d1.loss_dice: 2.1298  decode.d2.loss_cls: 0.9099  decode.d2.loss_mask: 1.8546  decode.d2.loss_dice: 2.1237  decode.d3.loss_cls: 0.9144  decode.d3.loss_mask: 1.8613  decode.d3.loss_dice: 2.1642  decode.d4.loss_cls: 0.9826  decode.d4.loss_mask: 1.8452  decode.d4.loss_dice: 2.0846  decode.d5.loss_cls: 1.0595  decode.d5.loss_mask: 1.9540  decode.d5.loss_dice: 2.1546  decode.d6.loss_cls: 1.1207  decode.d6.loss_mask: 1.8775  decode.d6.loss_dice: 2.1120  decode.d7.loss_cls: 1.1519  decode.d7.loss_mask: 1.8991  decode.d7.loss_dice: 2.1128  decode.d8.loss_cls: 1.0822  decode.d8.loss_mask: 1.7884  decode.d8.loss_dice: 2.0911
2025/03/28 16:59:32 - mmengine - INFO - Iter(train) [  950/20000]  base_lr: 9.5719e-05 lr: 9.5719e-05  eta: 5:53:29  time: 1.1989  data_time: 0.0322  memory: 6839  loss: 46.4027  decode.loss_cls: 0.9759  decode.loss_mask: 1.5988  decode.loss_dice: 1.9199  decode.d0.loss_cls: 2.5179  decode.d0.loss_mask: 1.6136  decode.d0.loss_dice: 2.1263  decode.d1.loss_cls: 0.7521  decode.d1.loss_mask: 1.6165  decode.d1.loss_dice: 2.0056  decode.d2.loss_cls: 0.7769  decode.d2.loss_mask: 1.6299  decode.d2.loss_dice: 1.9489  decode.d3.loss_cls: 0.7943  decode.d3.loss_mask: 1.5831  decode.d3.loss_dice: 1.9164  decode.d4.loss_cls: 0.9393  decode.d4.loss_mask: 1.5246  decode.d4.loss_dice: 1.9134  decode.d5.loss_cls: 0.9366  decode.d5.loss_mask: 1.6468  decode.d5.loss_dice: 2.0133  decode.d6.loss_cls: 0.9639  decode.d6.loss_mask: 1.6209  decode.d6.loss_dice: 1.9180  decode.d7.loss_cls: 0.9782  decode.d7.loss_mask: 1.6659  decode.d7.loss_dice: 1.9234  decode.d8.loss_cls: 0.9493  decode.d8.loss_mask: 1.6858  decode.d8.loss_dice: 1.9470
2025/03/28 17:00:25 - mmengine - INFO - Exp name: r2u_20250328_164133
2025/03/28 17:00:25 - mmengine - INFO - Iter(train) [ 1000/20000]  base_lr: 9.5493e-05 lr: 9.5493e-05  eta: 5:51:55  time: 1.0034  data_time: 0.0338  memory: 6828  loss: 56.1868  decode.loss_cls: 1.3697  decode.loss_mask: 2.0031  decode.loss_dice: 2.2297  decode.d0.loss_cls: 2.5257  decode.d0.loss_mask: 2.0633  decode.d0.loss_dice: 2.4692  decode.d1.loss_cls: 0.9835  decode.d1.loss_mask: 2.0491  decode.d1.loss_dice: 2.3512  decode.d2.loss_cls: 1.1514  decode.d2.loss_mask: 2.1331  decode.d2.loss_dice: 2.2420  decode.d3.loss_cls: 1.1534  decode.d3.loss_mask: 1.9856  decode.d3.loss_dice: 2.2521  decode.d4.loss_cls: 1.1320  decode.d4.loss_mask: 2.0416  decode.d4.loss_dice: 2.3109  decode.d5.loss_cls: 1.2274  decode.d5.loss_mask: 2.0131  decode.d5.loss_dice: 2.1542  decode.d6.loss_cls: 1.3025  decode.d6.loss_mask: 1.9656  decode.d6.loss_dice: 2.1803  decode.d7.loss_cls: 1.4032  decode.d7.loss_mask: 1.9054  decode.d7.loss_dice: 2.2259  decode.d8.loss_cls: 1.2665  decode.d8.loss_mask: 1.9081  decode.d8.loss_dice: 2.1879
2025/03/28 17:01:22 - mmengine - INFO - Iter(train) [ 1050/20000]  base_lr: 9.5267e-05 lr: 9.5267e-05  eta: 5:51:27  time: 1.1578  data_time: 0.0299  memory: 6836  loss: 51.1525  decode.loss_cls: 1.1220  decode.loss_mask: 1.9068  decode.loss_dice: 1.9684  decode.d0.loss_cls: 2.4309  decode.d0.loss_mask: 1.8602  decode.d0.loss_dice: 2.1552  decode.d1.loss_cls: 0.8920  decode.d1.loss_mask: 1.9645  decode.d1.loss_dice: 2.1323  decode.d2.loss_cls: 0.8907  decode.d2.loss_mask: 1.9417  decode.d2.loss_dice: 2.0843  decode.d3.loss_cls: 0.9276  decode.d3.loss_mask: 1.9321  decode.d3.loss_dice: 2.0709  decode.d4.loss_cls: 0.9183  decode.d4.loss_mask: 2.0093  decode.d4.loss_dice: 2.0192  decode.d5.loss_cls: 0.9599  decode.d5.loss_mask: 1.9997  decode.d5.loss_dice: 1.9804  decode.d6.loss_cls: 1.0089  decode.d6.loss_mask: 1.9984  decode.d6.loss_dice: 2.0163  decode.d7.loss_cls: 0.9390  decode.d7.loss_mask: 1.9922  decode.d7.loss_dice: 1.9929  decode.d8.loss_cls: 0.9649  decode.d8.loss_mask: 1.9961  decode.d8.loss_dice: 2.0773
2025/03/28 17:02:23 - mmengine - INFO - Iter(train) [ 1100/20000]  base_lr: 9.5040e-05 lr: 9.5040e-05  eta: 5:51:54  time: 1.2393  data_time: 0.0323  memory: 6809  loss: 49.3226  decode.loss_cls: 0.9030  decode.loss_mask: 1.9311  decode.loss_dice: 1.9926  decode.d0.loss_cls: 2.3096  decode.d0.loss_mask: 1.8903  decode.d0.loss_dice: 2.0296  decode.d1.loss_cls: 0.7035  decode.d1.loss_mask: 1.8415  decode.d1.loss_dice: 2.0419  decode.d2.loss_cls: 0.7284  decode.d2.loss_mask: 1.8570  decode.d2.loss_dice: 2.0542  decode.d3.loss_cls: 0.9855  decode.d3.loss_mask: 1.8755  decode.d3.loss_dice: 2.0874  decode.d4.loss_cls: 1.0068  decode.d4.loss_mask: 1.9474  decode.d4.loss_dice: 1.9877  decode.d5.loss_cls: 0.9303  decode.d5.loss_mask: 1.9438  decode.d5.loss_dice: 1.9565  decode.d6.loss_cls: 0.9173  decode.d6.loss_mask: 1.8849  decode.d6.loss_dice: 1.9814  decode.d7.loss_cls: 0.9492  decode.d7.loss_mask: 1.8662  decode.d7.loss_dice: 1.9205  decode.d8.loss_cls: 0.9564  decode.d8.loss_mask: 1.8966  decode.d8.loss_dice: 1.9466
2025/03/28 17:03:22 - mmengine - INFO - Iter(train) [ 1150/20000]  base_lr: 9.4814e-05 lr: 9.4814e-05  eta: 5:52:03  time: 1.1618  data_time: 0.0292  memory: 6828  loss: 46.0068  decode.loss_cls: 0.9850  decode.loss_mask: 1.4649  decode.loss_dice: 1.9411  decode.d0.loss_cls: 2.3228  decode.d0.loss_mask: 1.6002  decode.d0.loss_dice: 2.0621  decode.d1.loss_cls: 0.6367  decode.d1.loss_mask: 1.7345  decode.d1.loss_dice: 2.1080  decode.d2.loss_cls: 0.8227  decode.d2.loss_mask: 1.7006  decode.d2.loss_dice: 2.0330  decode.d3.loss_cls: 0.7709  decode.d3.loss_mask: 1.7117  decode.d3.loss_dice: 2.0203  decode.d4.loss_cls: 0.7931  decode.d4.loss_mask: 1.5751  decode.d4.loss_dice: 2.0006  decode.d5.loss_cls: 0.9635  decode.d5.loss_mask: 1.5460  decode.d5.loss_dice: 1.9295  decode.d6.loss_cls: 0.8818  decode.d6.loss_mask: 1.6189  decode.d6.loss_dice: 1.9240  decode.d7.loss_cls: 0.9934  decode.d7.loss_mask: 1.5542  decode.d7.loss_dice: 1.8568  decode.d8.loss_cls: 0.9583  decode.d8.loss_mask: 1.5661  decode.d8.loss_dice: 1.9309
2025/03/28 17:04:22 - mmengine - INFO - Iter(train) [ 1200/20000]  base_lr: 9.4588e-05 lr: 9.4588e-05  eta: 5:51:55  time: 1.2590  data_time: 0.0284  memory: 6829  loss: 49.2806  decode.loss_cls: 1.1947  decode.loss_mask: 1.4254  decode.loss_dice: 2.3512  decode.d0.loss_cls: 2.2187  decode.d0.loss_mask: 1.3337  decode.d0.loss_dice: 2.4284  decode.d1.loss_cls: 0.8325  decode.d1.loss_mask: 1.5028  decode.d1.loss_dice: 2.3218  decode.d2.loss_cls: 0.8948  decode.d2.loss_mask: 1.5231  decode.d2.loss_dice: 2.3734  decode.d3.loss_cls: 0.9436  decode.d3.loss_mask: 1.5712  decode.d3.loss_dice: 2.3966  decode.d4.loss_cls: 1.0276  decode.d4.loss_mask: 1.4034  decode.d4.loss_dice: 2.3572  decode.d5.loss_cls: 1.0817  decode.d5.loss_mask: 1.3101  decode.d5.loss_dice: 2.3185  decode.d6.loss_cls: 1.0726  decode.d6.loss_mask: 1.3530  decode.d6.loss_dice: 2.3386  decode.d7.loss_cls: 1.1365  decode.d7.loss_mask: 1.4200  decode.d7.loss_dice: 2.2862  decode.d8.loss_cls: 1.1344  decode.d8.loss_mask: 1.4018  decode.d8.loss_dice: 2.3271
2025/03/28 17:05:21 - mmengine - INFO - Iter(train) [ 1250/20000]  base_lr: 9.4361e-05 lr: 9.4361e-05  eta: 5:51:47  time: 1.2102  data_time: 0.0257  memory: 6810  loss: 48.1490  decode.loss_cls: 1.0938  decode.loss_mask: 1.5999  decode.loss_dice: 1.9788  decode.d0.loss_cls: 2.1993  decode.d0.loss_mask: 1.5922  decode.d0.loss_dice: 2.1385  decode.d1.loss_cls: 0.9167  decode.d1.loss_mask: 1.5772  decode.d1.loss_dice: 2.0786  decode.d2.loss_cls: 0.8974  decode.d2.loss_mask: 1.6927  decode.d2.loss_dice: 2.0385  decode.d3.loss_cls: 0.9228  decode.d3.loss_mask: 1.6737  decode.d3.loss_dice: 2.0017  decode.d4.loss_cls: 0.8828  decode.d4.loss_mask: 1.7089  decode.d4.loss_dice: 2.0226  decode.d5.loss_cls: 1.1194  decode.d5.loss_mask: 1.5665  decode.d5.loss_dice: 1.9812  decode.d6.loss_cls: 1.2618  decode.d6.loss_mask: 1.6257  decode.d6.loss_dice: 1.9763  decode.d7.loss_cls: 1.2713  decode.d7.loss_mask: 1.6137  decode.d7.loss_dice: 2.0504  decode.d8.loss_cls: 1.0844  decode.d8.loss_mask: 1.5682  decode.d8.loss_dice: 2.0141
2025/03/28 17:06:07 - mmengine - INFO - Iter(train) [ 1300/20000]  base_lr: 9.4135e-05 lr: 9.4135e-05  eta: 5:48:28  time: 0.7999  data_time: 0.0308  memory: 6831  loss: 51.6450  decode.loss_cls: 0.9489  decode.loss_mask: 2.0872  decode.loss_dice: 2.2642  decode.d0.loss_cls: 2.0735  decode.d0.loss_mask: 2.1154  decode.d0.loss_dice: 2.1226  decode.d1.loss_cls: 0.7810  decode.d1.loss_mask: 2.1561  decode.d1.loss_dice: 2.0652  decode.d2.loss_cls: 0.7128  decode.d2.loss_mask: 2.1421  decode.d2.loss_dice: 2.0559  decode.d3.loss_cls: 0.8229  decode.d3.loss_mask: 2.0141  decode.d3.loss_dice: 2.0865  decode.d4.loss_cls: 0.8656  decode.d4.loss_mask: 2.0686  decode.d4.loss_dice: 2.0371  decode.d5.loss_cls: 0.8879  decode.d5.loss_mask: 2.0271  decode.d5.loss_dice: 2.0347  decode.d6.loss_cls: 0.9128  decode.d6.loss_mask: 1.9757  decode.d6.loss_dice: 2.0660  decode.d7.loss_cls: 0.8866  decode.d7.loss_mask: 2.0754  decode.d7.loss_dice: 2.1150  decode.d8.loss_cls: 0.9516  decode.d8.loss_mask: 2.1203  decode.d8.loss_dice: 2.1722
2025/03/28 17:06:55 - mmengine - INFO - Iter(train) [ 1350/20000]  base_lr: 9.3908e-05 lr: 9.3908e-05  eta: 5:45:36  time: 0.8038  data_time: 0.0315  memory: 6823  loss: 45.2972  decode.loss_cls: 0.9071  decode.loss_mask: 1.5746  decode.loss_dice: 1.9491  decode.d0.loss_cls: 2.0206  decode.d0.loss_mask: 1.5378  decode.d0.loss_dice: 2.0319  decode.d1.loss_cls: 0.7513  decode.d1.loss_mask: 1.5658  decode.d1.loss_dice: 2.0044  decode.d2.loss_cls: 0.8232  decode.d2.loss_mask: 1.5507  decode.d2.loss_dice: 1.9561  decode.d3.loss_cls: 0.8360  decode.d3.loss_mask: 1.5649  decode.d3.loss_dice: 1.9363  decode.d4.loss_cls: 0.8150  decode.d4.loss_mask: 1.5652  decode.d4.loss_dice: 2.0108  decode.d5.loss_cls: 0.9704  decode.d5.loss_mask: 1.6063  decode.d5.loss_dice: 1.9364  decode.d6.loss_cls: 0.8980  decode.d6.loss_mask: 1.5993  decode.d6.loss_dice: 1.9214  decode.d7.loss_cls: 0.9256  decode.d7.loss_mask: 1.6711  decode.d7.loss_dice: 1.9500  decode.d8.loss_cls: 0.9212  decode.d8.loss_mask: 1.5406  decode.d8.loss_dice: 1.9560
2025/03/28 17:07:54 - mmengine - INFO - Iter(train) [ 1400/20000]  base_lr: 9.3682e-05 lr: 9.3682e-05  eta: 5:45:34  time: 1.2017  data_time: 0.0263  memory: 6830  loss: 47.8277  decode.loss_cls: 0.8425  decode.loss_mask: 1.8979  decode.loss_dice: 2.0142  decode.d0.loss_cls: 1.9090  decode.d0.loss_mask: 1.7957  decode.d0.loss_dice: 2.0181  decode.d1.loss_cls: 0.5963  decode.d1.loss_mask: 1.8427  decode.d1.loss_dice: 2.0785  decode.d2.loss_cls: 0.7438  decode.d2.loss_mask: 1.9017  decode.d2.loss_dice: 2.0212  decode.d3.loss_cls: 0.9883  decode.d3.loss_mask: 1.8586  decode.d3.loss_dice: 2.1112  decode.d4.loss_cls: 0.7496  decode.d4.loss_mask: 1.8100  decode.d4.loss_dice: 1.9426  decode.d5.loss_cls: 0.9123  decode.d5.loss_mask: 1.7933  decode.d5.loss_dice: 1.9446  decode.d6.loss_cls: 0.8372  decode.d6.loss_mask: 1.7764  decode.d6.loss_dice: 1.9758  decode.d7.loss_cls: 0.8000  decode.d7.loss_mask: 1.9290  decode.d7.loss_dice: 2.0348  decode.d8.loss_cls: 0.7688  decode.d8.loss_mask: 1.9073  decode.d8.loss_dice: 2.0262
2025/03/28 17:08:55 - mmengine - INFO - Iter(train) [ 1450/20000]  base_lr: 9.3455e-05 lr: 9.3455e-05  eta: 5:45:34  time: 1.2321  data_time: 0.0311  memory: 6829  loss: 48.8740  decode.loss_cls: 0.9271  decode.loss_mask: 1.7863  decode.loss_dice: 2.1477  decode.d0.loss_cls: 1.9983  decode.d0.loss_mask: 1.5910  decode.d0.loss_dice: 2.1630  decode.d1.loss_cls: 0.8712  decode.d1.loss_mask: 1.7307  decode.d1.loss_dice: 2.1845  decode.d2.loss_cls: 0.9002  decode.d2.loss_mask: 1.7578  decode.d2.loss_dice: 2.1785  decode.d3.loss_cls: 0.8447  decode.d3.loss_mask: 1.7152  decode.d3.loss_dice: 2.1757  decode.d4.loss_cls: 0.8616  decode.d4.loss_mask: 1.7402  decode.d4.loss_dice: 2.1253  decode.d5.loss_cls: 0.8430  decode.d5.loss_mask: 1.6654  decode.d5.loss_dice: 2.0962  decode.d6.loss_cls: 0.9149  decode.d6.loss_mask: 1.6869  decode.d6.loss_dice: 2.1164  decode.d7.loss_cls: 0.8921  decode.d7.loss_mask: 1.8061  decode.d7.loss_dice: 2.2483  decode.d8.loss_cls: 0.9441  decode.d8.loss_mask: 1.7442  decode.d8.loss_dice: 2.2174
2025/03/28 17:09:54 - mmengine - INFO - Iter(train) [ 1500/20000]  base_lr: 9.3228e-05 lr: 9.3228e-05  eta: 5:45:17  time: 1.1831  data_time: 0.0290  memory: 6811  loss: 47.0347  decode.loss_cls: 0.8097  decode.loss_mask: 1.8673  decode.loss_dice: 1.9457  decode.d0.loss_cls: 1.8368  decode.d0.loss_mask: 1.8244  decode.d0.loss_dice: 2.0650  decode.d1.loss_cls: 0.6454  decode.d1.loss_mask: 1.8295  decode.d1.loss_dice: 1.9608  decode.d2.loss_cls: 0.6503  decode.d2.loss_mask: 1.8801  decode.d2.loss_dice: 1.9815  decode.d3.loss_cls: 0.7256  decode.d3.loss_mask: 1.9371  decode.d3.loss_dice: 2.0151  decode.d4.loss_cls: 0.7486  decode.d4.loss_mask: 1.9101  decode.d4.loss_dice: 1.9452  decode.d5.loss_cls: 0.7910  decode.d5.loss_mask: 1.9258  decode.d5.loss_dice: 1.9128  decode.d6.loss_cls: 0.7961  decode.d6.loss_mask: 1.8430  decode.d6.loss_dice: 1.9235  decode.d7.loss_cls: 0.8405  decode.d7.loss_mask: 1.8486  decode.d7.loss_dice: 1.9207  decode.d8.loss_cls: 0.8640  decode.d8.loss_mask: 1.8719  decode.d8.loss_dice: 1.9185
2025/03/28 17:10:53 - mmengine - INFO - Iter(train) [ 1550/20000]  base_lr: 9.3001e-05 lr: 9.3001e-05  eta: 5:44:57  time: 1.2451  data_time: 0.0298  memory: 6807  loss: 45.3952  decode.loss_cls: 0.7357  decode.loss_mask: 1.6759  decode.loss_dice: 2.0501  decode.d0.loss_cls: 1.7577  decode.d0.loss_mask: 1.6876  decode.d0.loss_dice: 2.1065  decode.d1.loss_cls: 0.5964  decode.d1.loss_mask: 1.6611  decode.d1.loss_dice: 2.0125  decode.d2.loss_cls: 0.6390  decode.d2.loss_mask: 1.7893  decode.d2.loss_dice: 2.0570  decode.d3.loss_cls: 0.6665  decode.d3.loss_mask: 1.7005  decode.d3.loss_dice: 2.0197  decode.d4.loss_cls: 0.6061  decode.d4.loss_mask: 1.7668  decode.d4.loss_dice: 2.0388  decode.d5.loss_cls: 0.7250  decode.d5.loss_mask: 1.5799  decode.d5.loss_dice: 1.9877  decode.d6.loss_cls: 0.7497  decode.d6.loss_mask: 1.7046  decode.d6.loss_dice: 2.0809  decode.d7.loss_cls: 0.7734  decode.d7.loss_mask: 1.8093  decode.d7.loss_dice: 2.1074  decode.d8.loss_cls: 0.7369  decode.d8.loss_mask: 1.5922  decode.d8.loss_dice: 1.9808
2025/03/28 17:11:51 - mmengine - INFO - Iter(train) [ 1600/20000]  base_lr: 9.2774e-05 lr: 9.2774e-05  eta: 5:44:29  time: 1.1621  data_time: 0.0306  memory: 6826  loss: 49.3019  decode.loss_cls: 0.9408  decode.loss_mask: 1.8086  decode.loss_dice: 2.0801  decode.d0.loss_cls: 1.8662  decode.d0.loss_mask: 1.7518  decode.d0.loss_dice: 2.1534  decode.d1.loss_cls: 0.8224  decode.d1.loss_mask: 1.8499  decode.d1.loss_dice: 2.1552  decode.d2.loss_cls: 0.8442  decode.d2.loss_mask: 1.8158  decode.d2.loss_dice: 2.1574  decode.d3.loss_cls: 0.8487  decode.d3.loss_mask: 1.8058  decode.d3.loss_dice: 2.1245  decode.d4.loss_cls: 0.9028  decode.d4.loss_mask: 1.7705  decode.d4.loss_dice: 2.1269  decode.d5.loss_cls: 0.9459  decode.d5.loss_mask: 1.8398  decode.d5.loss_dice: 2.1564  decode.d6.loss_cls: 0.8562  decode.d6.loss_mask: 1.8802  decode.d6.loss_dice: 2.1313  decode.d7.loss_cls: 0.9930  decode.d7.loss_mask: 1.7829  decode.d7.loss_dice: 2.0833  decode.d8.loss_cls: 0.9210  decode.d8.loss_mask: 1.8362  decode.d8.loss_dice: 2.0507
2025/03/28 17:12:50 - mmengine - INFO - Iter(train) [ 1650/20000]  base_lr: 9.2548e-05 lr: 9.2548e-05  eta: 5:43:59  time: 1.1777  data_time: 0.0273  memory: 6820  loss: 42.4620  decode.loss_cls: 0.7349  decode.loss_mask: 1.7306  decode.loss_dice: 1.7191  decode.d0.loss_cls: 1.6967  decode.d0.loss_mask: 1.8096  decode.d0.loss_dice: 1.7484  decode.d1.loss_cls: 0.5853  decode.d1.loss_mask: 1.8443  decode.d1.loss_dice: 1.7061  decode.d2.loss_cls: 0.6641  decode.d2.loss_mask: 1.7223  decode.d2.loss_dice: 1.6718  decode.d3.loss_cls: 0.6839  decode.d3.loss_mask: 1.7833  decode.d3.loss_dice: 1.6359  decode.d4.loss_cls: 0.6666  decode.d4.loss_mask: 1.7957  decode.d4.loss_dice: 1.6892  decode.d5.loss_cls: 0.5934  decode.d5.loss_mask: 1.7267  decode.d5.loss_dice: 1.6609  decode.d6.loss_cls: 0.6236  decode.d6.loss_mask: 1.9292  decode.d6.loss_dice: 1.7254  decode.d7.loss_cls: 0.5712  decode.d7.loss_mask: 1.8357  decode.d7.loss_dice: 1.6821  decode.d8.loss_cls: 0.7574  decode.d8.loss_mask: 1.7806  decode.d8.loss_dice: 1.6878
2025/03/28 17:13:49 - mmengine - INFO - Iter(train) [ 1700/20000]  base_lr: 9.2321e-05 lr: 9.2321e-05  eta: 5:43:38  time: 1.1665  data_time: 0.0252  memory: 6828  loss: 43.2387  decode.loss_cls: 0.7054  decode.loss_mask: 1.7293  decode.loss_dice: 1.7773  decode.d0.loss_cls: 1.6424  decode.d0.loss_mask: 1.6355  decode.d0.loss_dice: 1.7969  decode.d1.loss_cls: 0.6301  decode.d1.loss_mask: 1.7866  decode.d1.loss_dice: 1.7734  decode.d2.loss_cls: 0.6626  decode.d2.loss_mask: 1.7643  decode.d2.loss_dice: 1.8229  decode.d3.loss_cls: 0.6445  decode.d3.loss_mask: 1.7400  decode.d3.loss_dice: 1.8173  decode.d4.loss_cls: 0.6492  decode.d4.loss_mask: 1.7606  decode.d4.loss_dice: 1.8104  decode.d5.loss_cls: 0.6885  decode.d5.loss_mask: 1.6255  decode.d5.loss_dice: 1.7882  decode.d6.loss_cls: 0.7051  decode.d6.loss_mask: 1.7626  decode.d6.loss_dice: 1.8302  decode.d7.loss_cls: 0.7557  decode.d7.loss_mask: 1.8052  decode.d7.loss_dice: 1.8168  decode.d8.loss_cls: 0.7383  decode.d8.loss_mask: 1.7566  decode.d8.loss_dice: 1.8175
2025/03/28 17:14:48 - mmengine - INFO - Iter(train) [ 1750/20000]  base_lr: 9.2094e-05 lr: 9.2094e-05  eta: 5:43:08  time: 1.0693  data_time: 0.0299  memory: 6829  loss: 42.6964  decode.loss_cls: 0.7758  decode.loss_mask: 1.6195  decode.loss_dice: 1.8330  decode.d0.loss_cls: 1.5081  decode.d0.loss_mask: 1.6115  decode.d0.loss_dice: 1.9249  decode.d1.loss_cls: 0.5562  decode.d1.loss_mask: 1.6326  decode.d1.loss_dice: 1.8726  decode.d2.loss_cls: 0.6077  decode.d2.loss_mask: 1.5786  decode.d2.loss_dice: 1.8382  decode.d3.loss_cls: 0.6431  decode.d3.loss_mask: 1.6542  decode.d3.loss_dice: 1.9555  decode.d4.loss_cls: 0.6578  decode.d4.loss_mask: 1.6040  decode.d4.loss_dice: 1.9329  decode.d5.loss_cls: 0.6570  decode.d5.loss_mask: 1.6187  decode.d5.loss_dice: 1.8943  decode.d6.loss_cls: 0.6188  decode.d6.loss_mask: 1.6713  decode.d6.loss_dice: 1.8998  decode.d7.loss_cls: 0.6527  decode.d7.loss_mask: 1.6775  decode.d7.loss_dice: 1.8980  decode.d8.loss_cls: 0.7409  decode.d8.loss_mask: 1.6721  decode.d8.loss_dice: 1.8892
2025/03/28 17:15:37 - mmengine - INFO - Iter(train) [ 1800/20000]  base_lr: 9.1866e-05 lr: 9.1866e-05  eta: 5:40:56  time: 0.9986  data_time: 0.0314  memory: 6829  loss: 43.1710  decode.loss_cls: 0.7205  decode.loss_mask: 1.4850  decode.loss_dice: 1.9900  decode.d0.loss_cls: 1.4566  decode.d0.loss_mask: 1.6631  decode.d0.loss_dice: 2.0682  decode.d1.loss_cls: 0.4143  decode.d1.loss_mask: 1.7017  decode.d1.loss_dice: 2.0234  decode.d2.loss_cls: 0.4831  decode.d2.loss_mask: 1.7345  decode.d2.loss_dice: 2.0742  decode.d3.loss_cls: 0.5445  decode.d3.loss_mask: 1.7237  decode.d3.loss_dice: 2.0216  decode.d4.loss_cls: 0.5788  decode.d4.loss_mask: 1.7019  decode.d4.loss_dice: 2.0594  decode.d5.loss_cls: 0.6081  decode.d5.loss_mask: 1.6132  decode.d5.loss_dice: 1.9605  decode.d6.loss_cls: 0.6038  decode.d6.loss_mask: 1.5577  decode.d6.loss_dice: 1.9847  decode.d7.loss_cls: 0.7543  decode.d7.loss_mask: 1.4744  decode.d7.loss_dice: 1.9415  decode.d8.loss_cls: 0.7398  decode.d8.loss_mask: 1.5639  decode.d8.loss_dice: 1.9247
2025/03/28 17:16:23 - mmengine - INFO - Iter(train) [ 1850/20000]  base_lr: 9.1639e-05 lr: 9.1639e-05  eta: 5:38:19  time: 0.9949  data_time: 0.0327  memory: 6828  loss: 46.2082  decode.loss_cls: 0.7226  decode.loss_mask: 1.8357  decode.loss_dice: 2.0556  decode.d0.loss_cls: 1.4134  decode.d0.loss_mask: 1.7725  decode.d0.loss_dice: 2.0888  decode.d1.loss_cls: 0.3828  decode.d1.loss_mask: 1.8641  decode.d1.loss_dice: 2.0836  decode.d2.loss_cls: 0.4411  decode.d2.loss_mask: 1.8149  decode.d2.loss_dice: 2.0689  decode.d3.loss_cls: 0.6411  decode.d3.loss_mask: 1.7258  decode.d3.loss_dice: 2.0860  decode.d4.loss_cls: 0.6308  decode.d4.loss_mask: 1.7149  decode.d4.loss_dice: 2.1248  decode.d5.loss_cls: 0.7262  decode.d5.loss_mask: 1.8109  decode.d5.loss_dice: 2.0767  decode.d6.loss_cls: 0.8346  decode.d6.loss_mask: 1.7798  decode.d6.loss_dice: 2.1474  decode.d7.loss_cls: 0.7517  decode.d7.loss_mask: 1.7950  decode.d7.loss_dice: 2.0760  decode.d8.loss_cls: 0.8230  decode.d8.loss_mask: 1.8353  decode.d8.loss_dice: 2.0842
2025/03/28 17:17:14 - mmengine - INFO - Iter(train) [ 1900/20000]  base_lr: 9.1412e-05 lr: 9.1412e-05  eta: 5:36:41  time: 1.0955  data_time: 0.0301  memory: 6832  loss: 45.7104  decode.loss_cls: 0.9631  decode.loss_mask: 1.7036  decode.loss_dice: 1.9324  decode.d0.loss_cls: 1.4487  decode.d0.loss_mask: 1.6784  decode.d0.loss_dice: 2.0502  decode.d1.loss_cls: 0.7437  decode.d1.loss_mask: 1.7073  decode.d1.loss_dice: 2.0065  decode.d2.loss_cls: 0.6652  decode.d2.loss_mask: 1.6719  decode.d2.loss_dice: 1.9827  decode.d3.loss_cls: 0.6807  decode.d3.loss_mask: 1.6812  decode.d3.loss_dice: 1.9992  decode.d4.loss_cls: 0.7033  decode.d4.loss_mask: 1.7349  decode.d4.loss_dice: 2.0238  decode.d5.loss_cls: 0.8547  decode.d5.loss_mask: 1.6473  decode.d5.loss_dice: 1.9567  decode.d6.loss_cls: 1.0584  decode.d6.loss_mask: 1.7265  decode.d6.loss_dice: 2.0018  decode.d7.loss_cls: 0.9892  decode.d7.loss_mask: 1.6434  decode.d7.loss_dice: 1.9624  decode.d8.loss_cls: 0.9080  decode.d8.loss_mask: 1.6476  decode.d8.loss_dice: 1.9376
2025/03/28 17:18:13 - mmengine - INFO - Iter(train) [ 1950/20000]  base_lr: 9.1185e-05 lr: 9.1185e-05  eta: 5:36:15  time: 1.1067  data_time: 0.0278  memory: 6823  loss: 45.0798  decode.loss_cls: 0.8613  decode.loss_mask: 1.7050  decode.loss_dice: 1.7433  decode.d0.loss_cls: 1.4784  decode.d0.loss_mask: 1.8508  decode.d0.loss_dice: 1.9400  decode.d1.loss_cls: 0.7195  decode.d1.loss_mask: 1.8145  decode.d1.loss_dice: 1.9043  decode.d2.loss_cls: 0.6228  decode.d2.loss_mask: 1.8932  decode.d2.loss_dice: 1.9066  decode.d3.loss_cls: 0.6674  decode.d3.loss_mask: 1.8932  decode.d3.loss_dice: 1.8467  decode.d4.loss_cls: 0.7604  decode.d4.loss_mask: 1.8258  decode.d4.loss_dice: 1.8086  decode.d5.loss_cls: 0.8669  decode.d5.loss_mask: 1.7327  decode.d5.loss_dice: 1.7613  decode.d6.loss_cls: 0.7094  decode.d6.loss_mask: 1.9574  decode.d6.loss_dice: 1.9696  decode.d7.loss_cls: 0.7821  decode.d7.loss_mask: 1.7958  decode.d7.loss_dice: 1.8173  decode.d8.loss_cls: 0.9087  decode.d8.loss_mask: 1.7261  decode.d8.loss_dice: 1.8108
2025/03/28 17:19:07 - mmengine - INFO - Exp name: r2u_20250328_164133
2025/03/28 17:19:07 - mmengine - INFO - Iter(train) [ 2000/20000]  base_lr: 9.0957e-05 lr: 9.0957e-05  eta: 5:34:59  time: 1.0591  data_time: 0.0280  memory: 6832  loss: 39.1410  decode.loss_cls: 0.5566  decode.loss_mask: 1.7401  decode.loss_dice: 1.7392  decode.d0.loss_cls: 1.2320  decode.d0.loss_mask: 1.5469  decode.d0.loss_dice: 1.7010  decode.d1.loss_cls: 0.2776  decode.d1.loss_mask: 1.6026  decode.d1.loss_dice: 1.7801  decode.d2.loss_cls: 0.2634  decode.d2.loss_mask: 1.6549  decode.d2.loss_dice: 1.8304  decode.d3.loss_cls: 0.3414  decode.d3.loss_mask: 1.5483  decode.d3.loss_dice: 1.7113  decode.d4.loss_cls: 0.4119  decode.d4.loss_mask: 1.5722  decode.d4.loss_dice: 1.8231  decode.d5.loss_cls: 0.5849  decode.d5.loss_mask: 1.5079  decode.d5.loss_dice: 1.6897  decode.d6.loss_cls: 0.6095  decode.d6.loss_mask: 1.6644  decode.d6.loss_dice: 1.7539  decode.d7.loss_cls: 0.5073  decode.d7.loss_mask: 1.7137  decode.d7.loss_dice: 1.7194  decode.d8.loss_cls: 0.6255  decode.d8.loss_mask: 1.7023  decode.d8.loss_dice: 1.7294
2025/03/28 17:19:07 - mmengine - INFO - Saving checkpoint at 2000 iterations
2025/03/28 17:19:17 - mmengine - INFO - Iter(val) [  50/2708]    eta: 0:07:49  time: 0.2135  data_time: 0.0021  memory: 3057  
2025/03/28 17:19:25 - mmengine - INFO - Iter(val) [ 100/2708]    eta: 0:07:18  time: 0.1050  data_time: 0.0029  memory: 3056  
2025/03/28 17:19:34 - mmengine - INFO - Iter(val) [ 150/2708]    eta: 0:07:21  time: 0.1080  data_time: 0.0023  memory: 3056  
2025/03/28 17:19:43 - mmengine - INFO - Iter(val) [ 200/2708]    eta: 0:07:17  time: 0.1046  data_time: 0.0022  memory: 3056  
2025/03/28 17:19:52 - mmengine - INFO - Iter(val) [ 250/2708]    eta: 0:07:12  time: 0.1984  data_time: 0.0024  memory: 3056  
2025/03/28 17:20:01 - mmengine - INFO - Iter(val) [ 300/2708]    eta: 0:06:58  time: 0.2669  data_time: 0.0027  memory: 3056  
2025/03/28 17:20:10 - mmengine - INFO - Iter(val) [ 350/2708]    eta: 0:06:51  time: 0.2521  data_time: 0.0028  memory: 3056  
2025/03/28 17:20:19 - mmengine - INFO - Iter(val) [ 400/2708]    eta: 0:06:46  time: 0.1943  data_time: 0.0028  memory: 3056  
2025/03/28 17:20:28 - mmengine - INFO - Iter(val) [ 450/2708]    eta: 0:06:40  time: 0.1946  data_time: 0.0030  memory: 3056  
2025/03/28 17:20:38 - mmengine - INFO - Iter(val) [ 500/2708]    eta: 0:06:33  time: 0.1600  data_time: 0.0033  memory: 3056  
2025/03/28 17:20:47 - mmengine - INFO - Iter(val) [ 550/2708]    eta: 0:06:26  time: 0.1663  data_time: 0.0024  memory: 3056  
2025/03/28 17:20:57 - mmengine - INFO - Iter(val) [ 600/2708]    eta: 0:06:19  time: 0.1973  data_time: 0.0033  memory: 3056  
2025/03/28 17:21:06 - mmengine - INFO - Iter(val) [ 650/2708]    eta: 0:06:10  time: 0.1901  data_time: 0.0021  memory: 3056  
2025/03/28 17:21:15 - mmengine - INFO - Iter(val) [ 700/2708]    eta: 0:06:03  time: 0.1930  data_time: 0.0023  memory: 3056  
2025/03/28 17:21:25 - mmengine - INFO - Iter(val) [ 750/2708]    eta: 0:05:55  time: 0.2136  data_time: 0.0021  memory: 3056  
2025/03/28 17:21:34 - mmengine - INFO - Iter(val) [ 800/2708]    eta: 0:05:47  time: 0.1920  data_time: 0.0020  memory: 3056  
2025/03/28 17:21:44 - mmengine - INFO - Iter(val) [ 850/2708]    eta: 0:05:39  time: 0.1990  data_time: 0.0028  memory: 3056  
2025/03/28 17:21:54 - mmengine - INFO - Iter(val) [ 900/2708]    eta: 0:05:31  time: 0.1987  data_time: 0.0032  memory: 3056  
2025/03/28 17:22:03 - mmengine - INFO - Iter(val) [ 950/2708]    eta: 0:05:23  time: 0.1938  data_time: 0.0024  memory: 3056  
2025/03/28 17:22:13 - mmengine - INFO - Iter(val) [1000/2708]    eta: 0:05:14  time: 0.1925  data_time: 0.0025  memory: 3056  
2025/03/28 17:22:22 - mmengine - INFO - Iter(val) [1050/2708]    eta: 0:05:05  time: 0.2036  data_time: 0.0025  memory: 3056  
2025/03/28 17:22:32 - mmengine - INFO - Iter(val) [1100/2708]    eta: 0:04:56  time: 0.1924  data_time: 0.0021  memory: 3056  
2025/03/28 17:22:41 - mmengine - INFO - Iter(val) [1150/2708]    eta: 0:04:48  time: 0.1985  data_time: 0.0036  memory: 3056  
2025/03/28 17:22:51 - mmengine - INFO - Iter(val) [1200/2708]    eta: 0:04:39  time: 0.2008  data_time: 0.0023  memory: 3056  
2025/03/28 17:23:01 - mmengine - INFO - Iter(val) [1250/2708]    eta: 0:04:30  time: 0.1924  data_time: 0.0021  memory: 3056  
2025/03/28 17:23:10 - mmengine - INFO - Iter(val) [1300/2708]    eta: 0:04:21  time: 0.1926  data_time: 0.0025  memory: 3056  
2025/03/28 17:23:19 - mmengine - INFO - Iter(val) [1350/2708]    eta: 0:04:12  time: 0.1690  data_time: 0.0023  memory: 3056  
2025/03/28 17:23:29 - mmengine - INFO - Iter(val) [1400/2708]    eta: 0:04:03  time: 0.1937  data_time: 0.0025  memory: 3056  
2025/03/28 17:23:39 - mmengine - INFO - Iter(val) [1450/2708]    eta: 0:03:54  time: 0.1965  data_time: 0.0023  memory: 3056  
2025/03/28 17:23:48 - mmengine - INFO - Iter(val) [1500/2708]    eta: 0:03:45  time: 0.2042  data_time: 0.0020  memory: 3056  
2025/03/28 17:23:58 - mmengine - INFO - Iter(val) [1550/2708]    eta: 0:03:36  time: 0.1936  data_time: 0.0024  memory: 3056  
2025/03/28 17:24:08 - mmengine - INFO - Iter(val) [1600/2708]    eta: 0:03:26  time: 0.1928  data_time: 0.0026  memory: 3056  
2025/03/28 17:24:17 - mmengine - INFO - Iter(val) [1650/2708]    eta: 0:03:17  time: 0.1389  data_time: 0.0027  memory: 3056  
2025/03/28 17:24:26 - mmengine - INFO - Iter(val) [1700/2708]    eta: 0:03:07  time: 0.1277  data_time: 0.0025  memory: 3056  
2025/03/28 17:24:35 - mmengine - INFO - Iter(val) [1750/2708]    eta: 0:02:58  time: 0.1793  data_time: 0.0025  memory: 3056  
2025/03/28 17:24:45 - mmengine - INFO - Iter(val) [1800/2708]    eta: 0:02:49  time: 0.1960  data_time: 0.0022  memory: 3056  
2025/03/28 17:24:55 - mmengine - INFO - Iter(val) [1850/2708]    eta: 0:02:40  time: 0.2143  data_time: 0.0022  memory: 3056  
2025/03/28 17:25:04 - mmengine - INFO - Iter(val) [1900/2708]    eta: 0:02:31  time: 0.2767  data_time: 0.0035  memory: 3056  
2025/03/28 17:25:14 - mmengine - INFO - Iter(val) [1950/2708]    eta: 0:02:21  time: 0.2122  data_time: 0.0030  memory: 3056  
2025/03/28 17:25:23 - mmengine - INFO - Iter(val) [2000/2708]    eta: 0:02:12  time: 0.1931  data_time: 0.0028  memory: 3056  
2025/03/28 17:25:32 - mmengine - INFO - Iter(val) [2050/2708]    eta: 0:02:03  time: 0.1715  data_time: 0.0022  memory: 3056  
2025/03/28 17:25:42 - mmengine - INFO - Iter(val) [2100/2708]    eta: 0:01:53  time: 0.1896  data_time: 0.0021  memory: 3056  
2025/03/28 17:25:52 - mmengine - INFO - Iter(val) [2150/2708]    eta: 0:01:44  time: 0.1940  data_time: 0.0023  memory: 3056  
2025/03/28 17:26:01 - mmengine - INFO - Iter(val) [2200/2708]    eta: 0:01:35  time: 0.1944  data_time: 0.0021  memory: 3056  
2025/03/28 17:26:09 - mmengine - INFO - Iter(val) [2250/2708]    eta: 0:01:25  time: 0.1435  data_time: 0.0026  memory: 3056  
2025/03/28 17:26:15 - mmengine - INFO - Iter(val) [2300/2708]    eta: 0:01:15  time: 0.1053  data_time: 0.0038  memory: 3056  
2025/03/28 17:26:24 - mmengine - INFO - Iter(val) [2350/2708]    eta: 0:01:06  time: 0.1905  data_time: 0.0023  memory: 3056  
2025/03/28 17:26:30 - mmengine - INFO - Iter(val) [2400/2708]    eta: 0:00:56  time: 0.1466  data_time: 0.0026  memory: 3056  
2025/03/28 17:26:38 - mmengine - INFO - Iter(val) [2450/2708]    eta: 0:00:47  time: 0.1787  data_time: 0.0023  memory: 3056  
2025/03/28 17:26:44 - mmengine - INFO - Iter(val) [2500/2708]    eta: 0:00:37  time: 0.1943  data_time: 0.0034  memory: 3056  
2025/03/28 17:26:52 - mmengine - INFO - Iter(val) [2550/2708]    eta: 0:00:28  time: 0.1132  data_time: 0.0025  memory: 3056  
2025/03/28 17:26:59 - mmengine - INFO - Iter(val) [2600/2708]    eta: 0:00:19  time: 0.1950  data_time: 0.0031  memory: 3056  
2025/03/28 17:27:08 - mmengine - INFO - Iter(val) [2650/2708]    eta: 0:00:10  time: 0.2011  data_time: 0.0020  memory: 3056  
2025/03/28 17:27:18 - mmengine - INFO - Iter(val) [2700/2708]    eta: 0:00:01  time: 0.1975  data_time: 0.0023  memory: 3056  
2025/03/28 17:27:20 - mmengine - INFO - per class results:
2025/03/28 17:27:20 - mmengine - INFO - 
+--------------+-------+-------+
|    Class     |  IoU  |  Acc  |
+--------------+-------+-------+
|  background  | 32.24 |  43.1 |
|   building   | 58.83 | 86.23 |
|     road     |  53.6 | 70.98 |
|    water     | 60.65 | 86.43 |
|    barren    |  0.1  |  0.1  |
|    forest    | 51.72 | 63.15 |
| agricultural | 57.45 | 80.48 |
+--------------+-------+-------+
2025/03/28 17:27:20 - mmengine - INFO - Iter(val) [2708/2708]    aAcc: 65.2000  mIoU: 44.9400  mAcc: 61.5000  data_time: 0.0026  time: 0.1811
2025/03/28 17:27:20 - mmengine - INFO - The best checkpoint with 44.9400 mIoU at 2000 iter is saved to best_mIoU_iter_2000.pth.
2025/03/28 17:28:24 - mmengine - INFO - Iter(train) [ 2050/20000]  base_lr: 9.0730e-05 lr: 9.0730e-05  eta: 5:35:20  time: 1.2397  data_time: 0.0305  memory: 6838  loss: 41.3081  decode.loss_cls: 0.7685  decode.loss_mask: 1.4483  decode.loss_dice: 1.9391  decode.d0.loss_cls: 1.2138  decode.d0.loss_mask: 1.4206  decode.d0.loss_dice: 1.9347  decode.d1.loss_cls: 0.5544  decode.d1.loss_mask: 1.4428  decode.d1.loss_dice: 1.8960  decode.d2.loss_cls: 0.8179  decode.d2.loss_mask: 1.4179  decode.d2.loss_dice: 1.9184  decode.d3.loss_cls: 0.7034  decode.d3.loss_mask: 1.4230  decode.d3.loss_dice: 1.9108  decode.d4.loss_cls: 0.6853  decode.d4.loss_mask: 1.3981  decode.d4.loss_dice: 1.9216  decode.d5.loss_cls: 0.8938  decode.d5.loss_mask: 1.4026  decode.d5.loss_dice: 1.8200  decode.d6.loss_cls: 0.8360  decode.d6.loss_mask: 1.3911  decode.d6.loss_dice: 1.9017  decode.d7.loss_cls: 0.8388  decode.d7.loss_mask: 1.3728  decode.d7.loss_dice: 1.8712  decode.d8.loss_cls: 0.8138  decode.d8.loss_mask: 1.4511  decode.d8.loss_dice: 1.9004
2025/03/28 17:29:25 - mmengine - INFO - Iter(train) [ 2100/20000]  base_lr: 9.0502e-05 lr: 9.0502e-05  eta: 5:35:03  time: 1.2323  data_time: 0.0278  memory: 6829  loss: 40.2209  decode.loss_cls: 0.8949  decode.loss_mask: 1.3212  decode.loss_dice: 1.9327  decode.d0.loss_cls: 1.3073  decode.d0.loss_mask: 1.2383  decode.d0.loss_dice: 1.9538  decode.d1.loss_cls: 0.6263  decode.d1.loss_mask: 1.3143  decode.d1.loss_dice: 1.9755  decode.d2.loss_cls: 0.7007  decode.d2.loss_mask: 1.2577  decode.d2.loss_dice: 1.9097  decode.d3.loss_cls: 0.6174  decode.d3.loss_mask: 1.2702  decode.d3.loss_dice: 1.9267  decode.d4.loss_cls: 0.6520  decode.d4.loss_mask: 1.2880  decode.d4.loss_dice: 1.9342  decode.d5.loss_cls: 0.8141  decode.d5.loss_mask: 1.2930  decode.d5.loss_dice: 1.9009  decode.d6.loss_cls: 0.7269  decode.d6.loss_mask: 1.3148  decode.d6.loss_dice: 1.9311  decode.d7.loss_cls: 0.8659  decode.d7.loss_mask: 1.2787  decode.d7.loss_dice: 1.9161  decode.d8.loss_cls: 0.8512  decode.d8.loss_mask: 1.3207  decode.d8.loss_dice: 1.8865
2025/03/28 17:30:26 - mmengine - INFO - Iter(train) [ 2150/20000]  base_lr: 9.0275e-05 lr: 9.0275e-05  eta: 5:34:46  time: 1.2591  data_time: 0.0324  memory: 6812  loss: 37.9236  decode.loss_cls: 0.7053  decode.loss_mask: 1.6181  decode.loss_dice: 1.6507  decode.d0.loss_cls: 1.2290  decode.d0.loss_mask: 1.4699  decode.d0.loss_dice: 1.6145  decode.d1.loss_cls: 0.5416  decode.d1.loss_mask: 1.5551  decode.d1.loss_dice: 1.6264  decode.d2.loss_cls: 0.5037  decode.d2.loss_mask: 1.4486  decode.d2.loss_dice: 1.6007  decode.d3.loss_cls: 0.5580  decode.d3.loss_mask: 1.4582  decode.d3.loss_dice: 1.5938  decode.d4.loss_cls: 0.5616  decode.d4.loss_mask: 1.4933  decode.d4.loss_dice: 1.5940  decode.d5.loss_cls: 0.7594  decode.d5.loss_mask: 1.3978  decode.d5.loss_dice: 1.5611  decode.d6.loss_cls: 0.8284  decode.d6.loss_mask: 1.5348  decode.d6.loss_dice: 1.5836  decode.d7.loss_cls: 0.7486  decode.d7.loss_mask: 1.3789  decode.d7.loss_dice: 1.6303  decode.d8.loss_cls: 0.6760  decode.d8.loss_mask: 1.4595  decode.d8.loss_dice: 1.5427
2025/03/28 17:31:27 - mmengine - INFO - Iter(train) [ 2200/20000]  base_lr: 9.0047e-05 lr: 9.0047e-05  eta: 5:34:33  time: 1.2367  data_time: 0.0284  memory: 6812  loss: 44.0916  decode.loss_cls: 0.9271  decode.loss_mask: 1.6698  decode.loss_dice: 1.9082  decode.d0.loss_cls: 1.3066  decode.d0.loss_mask: 1.6214  decode.d0.loss_dice: 1.9758  decode.d1.loss_cls: 0.6961  decode.d1.loss_mask: 1.7349  decode.d1.loss_dice: 1.9406  decode.d2.loss_cls: 0.7442  decode.d2.loss_mask: 1.6500  decode.d2.loss_dice: 1.8607  decode.d3.loss_cls: 0.6757  decode.d3.loss_mask: 1.6148  decode.d3.loss_dice: 1.8879  decode.d4.loss_cls: 0.9382  decode.d4.loss_mask: 1.5975  decode.d4.loss_dice: 1.7870  decode.d5.loss_cls: 0.9622  decode.d5.loss_mask: 1.5828  decode.d5.loss_dice: 1.8143  decode.d6.loss_cls: 0.9260  decode.d6.loss_mask: 1.6047  decode.d6.loss_dice: 1.8229  decode.d7.loss_cls: 0.9596  decode.d7.loss_mask: 1.6122  decode.d7.loss_dice: 1.8202  decode.d8.loss_cls: 0.9883  decode.d8.loss_mask: 1.6410  decode.d8.loss_dice: 1.8208
2025/03/28 17:32:15 - mmengine - INFO - Iter(train) [ 2250/20000]  base_lr: 8.9820e-05 lr: 8.9820e-05  eta: 5:32:26  time: 0.9375  data_time: 0.0296  memory: 6821  loss: 43.1520  decode.loss_cls: 0.8440  decode.loss_mask: 1.6427  decode.loss_dice: 1.8437  decode.d0.loss_cls: 1.4164  decode.d0.loss_mask: 1.5545  decode.d0.loss_dice: 1.8529  decode.d1.loss_cls: 0.8383  decode.d1.loss_mask: 1.5205  decode.d1.loss_dice: 1.8244  decode.d2.loss_cls: 0.8180  decode.d2.loss_mask: 1.5169  decode.d2.loss_dice: 1.8426  decode.d3.loss_cls: 0.7818  decode.d3.loss_mask: 1.4991  decode.d3.loss_dice: 1.8174  decode.d4.loss_cls: 0.8532  decode.d4.loss_mask: 1.5252  decode.d4.loss_dice: 1.8476  decode.d5.loss_cls: 0.9541  decode.d5.loss_mask: 1.6363  decode.d5.loss_dice: 1.8301  decode.d6.loss_cls: 0.8733  decode.d6.loss_mask: 1.5812  decode.d6.loss_dice: 1.8120  decode.d7.loss_cls: 0.8474  decode.d7.loss_mask: 1.5786  decode.d7.loss_dice: 1.8875  decode.d8.loss_cls: 0.8658  decode.d8.loss_mask: 1.5951  decode.d8.loss_dice: 1.8510
2025/03/28 17:33:05 - mmengine - INFO - Iter(train) [ 2300/20000]  base_lr: 8.9592e-05 lr: 8.9592e-05  eta: 5:30:47  time: 1.1909  data_time: 0.0338  memory: 6826  loss: 43.0032  decode.loss_cls: 0.7222  decode.loss_mask: 1.8568  decode.loss_dice: 1.7552  decode.d0.loss_cls: 1.1205  decode.d0.loss_mask: 1.7658  decode.d0.loss_dice: 1.8617  decode.d1.loss_cls: 0.5285  decode.d1.loss_mask: 1.7449  decode.d1.loss_dice: 1.8581  decode.d2.loss_cls: 0.5130  decode.d2.loss_mask: 1.7310  decode.d2.loss_dice: 1.8982  decode.d3.loss_cls: 0.4732  decode.d3.loss_mask: 1.9099  decode.d3.loss_dice: 1.8861  decode.d4.loss_cls: 0.5455  decode.d4.loss_mask: 1.7738  decode.d4.loss_dice: 1.7539  decode.d5.loss_cls: 0.5413  decode.d5.loss_mask: 1.8398  decode.d5.loss_dice: 1.7943  decode.d6.loss_cls: 0.5700  decode.d6.loss_mask: 1.8956  decode.d6.loss_dice: 1.9339  decode.d7.loss_cls: 0.6519  decode.d7.loss_mask: 1.8636  decode.d7.loss_dice: 1.8608  decode.d8.loss_cls: 0.7629  decode.d8.loss_mask: 1.7506  decode.d8.loss_dice: 1.8402
2025/03/28 17:34:06 - mmengine - INFO - Iter(train) [ 2350/20000]  base_lr: 8.9364e-05 lr: 8.9364e-05  eta: 5:30:24  time: 1.2723  data_time: 0.0287  memory: 6827  loss: 36.9177  decode.loss_cls: 0.7061  decode.loss_mask: 1.3448  decode.loss_dice: 1.6467  decode.d0.loss_cls: 1.2317  decode.d0.loss_mask: 1.2674  decode.d0.loss_dice: 1.6857  decode.d1.loss_cls: 0.5353  decode.d1.loss_mask: 1.3773  decode.d1.loss_dice: 1.6639  decode.d2.loss_cls: 0.5181  decode.d2.loss_mask: 1.3352  decode.d2.loss_dice: 1.6676  decode.d3.loss_cls: 0.5687  decode.d3.loss_mask: 1.3956  decode.d3.loss_dice: 1.6936  decode.d4.loss_cls: 0.5751  decode.d4.loss_mask: 1.3485  decode.d4.loss_dice: 1.6770  decode.d5.loss_cls: 0.7007  decode.d5.loss_mask: 1.3695  decode.d5.loss_dice: 1.6537  decode.d6.loss_cls: 0.6886  decode.d6.loss_mask: 1.3410  decode.d6.loss_dice: 1.6324  decode.d7.loss_cls: 0.6421  decode.d7.loss_mask: 1.3981  decode.d7.loss_dice: 1.6440  decode.d8.loss_cls: 0.6420  decode.d8.loss_mask: 1.3495  decode.d8.loss_dice: 1.6178
2025/03/28 17:35:03 - mmengine - INFO - Iter(train) [ 2400/20000]  base_lr: 8.9136e-05 lr: 8.9136e-05  eta: 5:29:34  time: 1.0037  data_time: 0.0310  memory: 6819  loss: 45.8405  decode.loss_cls: 0.7870  decode.loss_mask: 1.8079  decode.loss_dice: 1.9835  decode.d0.loss_cls: 1.1199  decode.d0.loss_mask: 1.9326  decode.d0.loss_dice: 2.0733  decode.d1.loss_cls: 0.6271  decode.d1.loss_mask: 1.8709  decode.d1.loss_dice: 2.0098  decode.d2.loss_cls: 0.6119  decode.d2.loss_mask: 1.8513  decode.d2.loss_dice: 1.9723  decode.d3.loss_cls: 0.6308  decode.d3.loss_mask: 1.9003  decode.d3.loss_dice: 1.9666  decode.d4.loss_cls: 0.6455  decode.d4.loss_mask: 1.8663  decode.d4.loss_dice: 1.9416  decode.d5.loss_cls: 0.6478  decode.d5.loss_mask: 1.8987  decode.d5.loss_dice: 1.9565  decode.d6.loss_cls: 0.6750  decode.d6.loss_mask: 1.8993  decode.d6.loss_dice: 1.9467  decode.d7.loss_cls: 0.7573  decode.d7.loss_mask: 1.8942  decode.d7.loss_dice: 1.9322  decode.d8.loss_cls: 0.7689  decode.d8.loss_mask: 1.9066  decode.d8.loss_dice: 1.9585
2025/03/28 17:36:03 - mmengine - INFO - Iter(train) [ 2450/20000]  base_lr: 8.8908e-05 lr: 8.8908e-05  eta: 5:29:03  time: 1.2500  data_time: 0.0267  memory: 6808  loss: 43.2885  decode.loss_cls: 0.9463  decode.loss_mask: 1.4869  decode.loss_dice: 2.0044  decode.d0.loss_cls: 1.1143  decode.d0.loss_mask: 1.5609  decode.d0.loss_dice: 2.0735  decode.d1.loss_cls: 0.6057  decode.d1.loss_mask: 1.5865  decode.d1.loss_dice: 1.9783  decode.d2.loss_cls: 0.5740  decode.d2.loss_mask: 1.4626  decode.d2.loss_dice: 2.0036  decode.d3.loss_cls: 0.5884  decode.d3.loss_mask: 1.6113  decode.d3.loss_dice: 2.0360  decode.d4.loss_cls: 0.5980  decode.d4.loss_mask: 1.5269  decode.d4.loss_dice: 2.0594  decode.d5.loss_cls: 0.7968  decode.d5.loss_mask: 1.3870  decode.d5.loss_dice: 1.9881  decode.d6.loss_cls: 1.0164  decode.d6.loss_mask: 1.4399  decode.d6.loss_dice: 2.0393  decode.d7.loss_cls: 0.8767  decode.d7.loss_mask: 1.4493  decode.d7.loss_dice: 1.9994  decode.d8.loss_cls: 0.8940  decode.d8.loss_mask: 1.5336  decode.d8.loss_dice: 2.0510
2025/03/28 17:37:04 - mmengine - INFO - Iter(train) [ 2500/20000]  base_lr: 8.8680e-05 lr: 8.8680e-05  eta: 5:28:41  time: 1.1421  data_time: 0.0296  memory: 6829  loss: 41.5947  decode.loss_cls: 0.8194  decode.loss_mask: 1.6420  decode.loss_dice: 1.7617  decode.d0.loss_cls: 1.1778  decode.d0.loss_mask: 1.5963  decode.d0.loss_dice: 1.8091  decode.d1.loss_cls: 0.7973  decode.d1.loss_mask: 1.5157  decode.d1.loss_dice: 1.7479  decode.d2.loss_cls: 0.7998  decode.d2.loss_mask: 1.5235  decode.d2.loss_dice: 1.6990  decode.d3.loss_cls: 0.7855  decode.d3.loss_mask: 1.5155  decode.d3.loss_dice: 1.7378  decode.d4.loss_cls: 1.1016  decode.d4.loss_mask: 1.4226  decode.d4.loss_dice: 1.7864  decode.d5.loss_cls: 0.8527  decode.d5.loss_mask: 1.5561  decode.d5.loss_dice: 1.7039  decode.d6.loss_cls: 0.8631  decode.d6.loss_mask: 1.5204  decode.d6.loss_dice: 1.7120  decode.d7.loss_cls: 0.8984  decode.d7.loss_mask: 1.5150  decode.d7.loss_dice: 1.6760  decode.d8.loss_cls: 0.8224  decode.d8.loss_mask: 1.5901  decode.d8.loss_dice: 1.6460
2025/03/28 17:38:04 - mmengine - INFO - Iter(train) [ 2550/20000]  base_lr: 8.8452e-05 lr: 8.8452e-05  eta: 5:28:10  time: 1.2492  data_time: 0.0319  memory: 6835  loss: 29.7485  decode.loss_cls: 0.5434  decode.loss_mask: 1.1583  decode.loss_dice: 1.3313  decode.d0.loss_cls: 1.0438  decode.d0.loss_mask: 1.0919  decode.d0.loss_dice: 1.3527  decode.d1.loss_cls: 0.4154  decode.d1.loss_mask: 1.1434  decode.d1.loss_dice: 1.3347  decode.d2.loss_cls: 0.3650  decode.d2.loss_mask: 1.1203  decode.d2.loss_dice: 1.2975  decode.d3.loss_cls: 0.4831  decode.d3.loss_mask: 1.1438  decode.d3.loss_dice: 1.2901  decode.d4.loss_cls: 0.5122  decode.d4.loss_mask: 1.1066  decode.d4.loss_dice: 1.2552  decode.d5.loss_cls: 0.4809  decode.d5.loss_mask: 1.1528  decode.d5.loss_dice: 1.3159  decode.d6.loss_cls: 0.5162  decode.d6.loss_mask: 1.1004  decode.d6.loss_dice: 1.2844  decode.d7.loss_cls: 0.4677  decode.d7.loss_mask: 1.1154  decode.d7.loss_dice: 1.3095  decode.d8.loss_cls: 0.6376  decode.d8.loss_mask: 1.0846  decode.d8.loss_dice: 1.2942
2025/03/28 17:39:05 - mmengine - INFO - Iter(train) [ 2600/20000]  base_lr: 8.8224e-05 lr: 8.8224e-05  eta: 5:27:45  time: 1.2506  data_time: 0.0330  memory: 6822  loss: 42.5225  decode.loss_cls: 0.8574  decode.loss_mask: 1.6060  decode.loss_dice: 1.7819  decode.d0.loss_cls: 1.0818  decode.d0.loss_mask: 1.6149  decode.d0.loss_dice: 1.8995  decode.d1.loss_cls: 0.6100  decode.d1.loss_mask: 1.6806  decode.d1.loss_dice: 1.8714  decode.d2.loss_cls: 0.6302  decode.d2.loss_mask: 1.6533  decode.d2.loss_dice: 1.8752  decode.d3.loss_cls: 0.7249  decode.d3.loss_mask: 1.6143  decode.d3.loss_dice: 1.8310  decode.d4.loss_cls: 0.7971  decode.d4.loss_mask: 1.6557  decode.d4.loss_dice: 1.7985  decode.d5.loss_cls: 0.6821  decode.d5.loss_mask: 1.6721  decode.d5.loss_dice: 1.8084  decode.d6.loss_cls: 0.7197  decode.d6.loss_mask: 1.7015  decode.d6.loss_dice: 1.7966  decode.d7.loss_cls: 0.8361  decode.d7.loss_mask: 1.6662  decode.d7.loss_dice: 1.7665  decode.d8.loss_cls: 0.8393  decode.d8.loss_mask: 1.6570  decode.d8.loss_dice: 1.7931
2025/03/28 17:40:06 - mmengine - INFO - Iter(train) [ 2650/20000]  base_lr: 8.7996e-05 lr: 8.7996e-05  eta: 5:27:20  time: 1.1792  data_time: 0.0314  memory: 6825  loss: 46.1044  decode.loss_cls: 0.7939  decode.loss_mask: 1.6400  decode.loss_dice: 2.0500  decode.d0.loss_cls: 1.1155  decode.d0.loss_mask: 1.7949  decode.d0.loss_dice: 2.2012  decode.d1.loss_cls: 0.6616  decode.d1.loss_mask: 1.7412  decode.d1.loss_dice: 2.1105  decode.d2.loss_cls: 0.6080  decode.d2.loss_mask: 1.8629  decode.d2.loss_dice: 2.1785  decode.d3.loss_cls: 0.6626  decode.d3.loss_mask: 1.6782  decode.d3.loss_dice: 2.0962  decode.d4.loss_cls: 0.6248  decode.d4.loss_mask: 1.8373  decode.d4.loss_dice: 2.1450  decode.d5.loss_cls: 0.7633  decode.d5.loss_mask: 1.7647  decode.d5.loss_dice: 2.1070  decode.d6.loss_cls: 0.6865  decode.d6.loss_mask: 1.7906  decode.d6.loss_dice: 2.0955  decode.d7.loss_cls: 0.8005  decode.d7.loss_mask: 1.7160  decode.d7.loss_dice: 2.1097  decode.d8.loss_cls: 0.7271  decode.d8.loss_mask: 1.6888  decode.d8.loss_dice: 2.0526
2025/03/28 17:41:07 - mmengine - INFO - Iter(train) [ 2700/20000]  base_lr: 8.7768e-05 lr: 8.7768e-05  eta: 5:26:50  time: 1.1173  data_time: 0.0316  memory: 6831  loss: 41.0720  decode.loss_cls: 0.7156  decode.loss_mask: 1.4324  decode.loss_dice: 1.9178  decode.d0.loss_cls: 1.0864  decode.d0.loss_mask: 1.5068  decode.d0.loss_dice: 2.0209  decode.d1.loss_cls: 0.5745  decode.d1.loss_mask: 1.4657  decode.d1.loss_dice: 1.9692  decode.d2.loss_cls: 0.6781  decode.d2.loss_mask: 1.4230  decode.d2.loss_dice: 1.9110  decode.d3.loss_cls: 0.6367  decode.d3.loss_mask: 1.4439  decode.d3.loss_dice: 1.9142  decode.d4.loss_cls: 0.7425  decode.d4.loss_mask: 1.4325  decode.d4.loss_dice: 1.9038  decode.d5.loss_cls: 0.7701  decode.d5.loss_mask: 1.3976  decode.d5.loss_dice: 1.8502  decode.d6.loss_cls: 0.7939  decode.d6.loss_mask: 1.4380  decode.d6.loss_dice: 1.8827  decode.d7.loss_cls: 0.7095  decode.d7.loss_mask: 1.4661  decode.d7.loss_dice: 1.8853  decode.d8.loss_cls: 0.7412  decode.d8.loss_mask: 1.4735  decode.d8.loss_dice: 1.8888
2025/03/28 17:41:45 - mmengine - INFO - Exp name: r2u_20250328_164133
2025/03/28 17:42:04 - mmengine - INFO - Iter(train) [ 2750/20000]  base_lr: 8.7539e-05 lr: 8.7539e-05  eta: 5:25:55  time: 0.9969  data_time: 0.0286  memory: 6832  loss: 40.5578  decode.loss_cls: 0.6974  decode.loss_mask: 1.4925  decode.loss_dice: 1.6870  decode.d0.loss_cls: 1.0026  decode.d0.loss_mask: 1.5759  decode.d0.loss_dice: 1.8977  decode.d1.loss_cls: 0.5656  decode.d1.loss_mask: 1.5382  decode.d1.loss_dice: 1.8352  decode.d2.loss_cls: 0.6915  decode.d2.loss_mask: 1.5807  decode.d2.loss_dice: 1.8430  decode.d3.loss_cls: 0.7115  decode.d3.loss_mask: 1.5275  decode.d3.loss_dice: 1.7807  decode.d4.loss_cls: 0.6142  decode.d4.loss_mask: 1.5165  decode.d4.loss_dice: 1.8025  decode.d5.loss_cls: 0.6414  decode.d5.loss_mask: 1.5225  decode.d5.loss_dice: 1.7464  decode.d6.loss_cls: 0.6866  decode.d6.loss_mask: 1.6462  decode.d6.loss_dice: 1.8470  decode.d7.loss_cls: 0.8094  decode.d7.loss_mask: 1.5256  decode.d7.loss_dice: 1.7436  decode.d8.loss_cls: 0.7871  decode.d8.loss_mask: 1.5130  decode.d8.loss_dice: 1.7287
2025/03/28 17:43:03 - mmengine - INFO - Iter(train) [ 2800/20000]  base_lr: 8.7311e-05 lr: 8.7311e-05  eta: 5:25:10  time: 1.1116  data_time: 0.0342  memory: 6841  loss: 42.4472  decode.loss_cls: 0.7855  decode.loss_mask: 1.8562  decode.loss_dice: 1.7180  decode.d0.loss_cls: 1.1251  decode.d0.loss_mask: 1.7733  decode.d0.loss_dice: 1.7553  decode.d1.loss_cls: 0.5863  decode.d1.loss_mask: 1.8045  decode.d1.loss_dice: 1.7278  decode.d2.loss_cls: 0.6915  decode.d2.loss_mask: 1.7723  decode.d2.loss_dice: 1.6497  decode.d3.loss_cls: 0.6822  decode.d3.loss_mask: 1.7609  decode.d3.loss_dice: 1.6843  decode.d4.loss_cls: 0.7693  decode.d4.loss_mask: 1.7292  decode.d4.loss_dice: 1.6506  decode.d5.loss_cls: 0.6717  decode.d5.loss_mask: 1.7992  decode.d5.loss_dice: 1.7806  decode.d6.loss_cls: 0.7743  decode.d6.loss_mask: 1.7859  decode.d6.loss_dice: 1.6838  decode.d7.loss_cls: 0.8635  decode.d7.loss_mask: 1.6886  decode.d7.loss_dice: 1.6156  decode.d8.loss_cls: 0.6847  decode.d8.loss_mask: 1.8780  decode.d8.loss_dice: 1.6993
2025/03/28 17:44:00 - mmengine - INFO - Iter(train) [ 2850/20000]  base_lr: 8.7082e-05 lr: 8.7082e-05  eta: 5:24:17  time: 1.1714  data_time: 0.0287  memory: 6813  loss: 43.7896  decode.loss_cls: 0.6569  decode.loss_mask: 1.6515  decode.loss_dice: 1.9296  decode.d0.loss_cls: 1.0484  decode.d0.loss_mask: 1.6033  decode.d0.loss_dice: 1.9936  decode.d1.loss_cls: 0.6818  decode.d1.loss_mask: 1.6010  decode.d1.loss_dice: 2.0837  decode.d2.loss_cls: 0.4997  decode.d2.loss_mask: 1.7065  decode.d2.loss_dice: 2.0308  decode.d3.loss_cls: 0.6418  decode.d3.loss_mask: 1.6432  decode.d3.loss_dice: 2.0617  decode.d4.loss_cls: 0.5530  decode.d4.loss_mask: 1.7053  decode.d4.loss_dice: 2.0600  decode.d5.loss_cls: 0.6665  decode.d5.loss_mask: 1.6736  decode.d5.loss_dice: 2.0336  decode.d6.loss_cls: 0.7586  decode.d6.loss_mask: 1.7344  decode.d6.loss_dice: 2.0270  decode.d7.loss_cls: 0.6675  decode.d7.loss_mask: 1.6368  decode.d7.loss_dice: 2.0243  decode.d8.loss_cls: 0.7016  decode.d8.loss_mask: 1.6891  decode.d8.loss_dice: 2.0249
2025/03/28 17:45:01 - mmengine - INFO - Iter(train) [ 2900/20000]  base_lr: 8.6854e-05 lr: 8.6854e-05  eta: 5:23:46  time: 1.2255  data_time: 0.0314  memory: 6832  loss: 39.4218  decode.loss_cls: 0.6171  decode.loss_mask: 1.6083  decode.loss_dice: 1.6557  decode.d0.loss_cls: 0.9257  decode.d0.loss_mask: 1.7085  decode.d0.loss_dice: 1.7157  decode.d1.loss_cls: 0.4395  decode.d1.loss_mask: 1.6678  decode.d1.loss_dice: 1.6332  decode.d2.loss_cls: 0.3887  decode.d2.loss_mask: 1.7764  decode.d2.loss_dice: 1.7662  decode.d3.loss_cls: 0.5441  decode.d3.loss_mask: 1.5814  decode.d3.loss_dice: 1.6534  decode.d4.loss_cls: 0.5357  decode.d4.loss_mask: 1.6853  decode.d4.loss_dice: 1.7217  decode.d5.loss_cls: 0.5173  decode.d5.loss_mask: 1.6538  decode.d5.loss_dice: 1.7400  decode.d6.loss_cls: 0.5720  decode.d6.loss_mask: 1.7144  decode.d6.loss_dice: 1.7742  decode.d7.loss_cls: 0.6074  decode.d7.loss_mask: 1.6207  decode.d7.loss_dice: 1.6984  decode.d8.loss_cls: 0.5712  decode.d8.loss_mask: 1.5830  decode.d8.loss_dice: 1.7449
2025/03/28 17:45:52 - mmengine - INFO - Iter(train) [ 2950/20000]  base_lr: 8.6625e-05 lr: 8.6625e-05  eta: 5:22:15  time: 0.9894  data_time: 0.0289  memory: 6832  loss: 41.9604  decode.loss_cls: 0.7160  decode.loss_mask: 1.7116  decode.loss_dice: 1.6987  decode.d0.loss_cls: 0.8761  decode.d0.loss_mask: 1.7905  decode.d0.loss_dice: 1.8910  decode.d1.loss_cls: 0.3569  decode.d1.loss_mask: 1.8909  decode.d1.loss_dice: 1.9050  decode.d2.loss_cls: 0.4250  decode.d2.loss_mask: 1.8299  decode.d2.loss_dice: 1.8329  decode.d3.loss_cls: 0.4168  decode.d3.loss_mask: 1.8512  decode.d3.loss_dice: 1.8928  decode.d4.loss_cls: 0.5255  decode.d4.loss_mask: 1.7698  decode.d4.loss_dice: 1.8167  decode.d5.loss_cls: 0.5363  decode.d5.loss_mask: 1.8458  decode.d5.loss_dice: 1.8535  decode.d6.loss_cls: 0.5204  decode.d6.loss_mask: 1.8454  decode.d6.loss_dice: 1.8403  decode.d7.loss_cls: 0.5899  decode.d7.loss_mask: 1.7854  decode.d7.loss_dice: 1.8109  decode.d8.loss_cls: 0.5986  decode.d8.loss_mask: 1.8148  decode.d8.loss_dice: 1.7217
2025/03/28 17:46:43 - mmengine - INFO - Exp name: r2u_20250328_164133
2025/03/28 17:46:43 - mmengine - INFO - Iter(train) [ 3000/20000]  base_lr: 8.6397e-05 lr: 8.6397e-05  eta: 5:20:46  time: 1.1255  data_time: 0.0288  memory: 6836  loss: 39.6224  decode.loss_cls: 0.6048  decode.loss_mask: 1.5118  decode.loss_dice: 1.8438  decode.d0.loss_cls: 0.8705  decode.d0.loss_mask: 1.4574  decode.d0.loss_dice: 1.8626  decode.d1.loss_cls: 0.5326  decode.d1.loss_mask: 1.4820  decode.d1.loss_dice: 1.8706  decode.d2.loss_cls: 0.4607  decode.d2.loss_mask: 1.5257  decode.d2.loss_dice: 1.8562  decode.d3.loss_cls: 0.5539  decode.d3.loss_mask: 1.4867  decode.d3.loss_dice: 1.8438  decode.d4.loss_cls: 0.6622  decode.d4.loss_mask: 1.4710  decode.d4.loss_dice: 1.8482  decode.d5.loss_cls: 0.7219  decode.d5.loss_mask: 1.4877  decode.d5.loss_dice: 1.8671  decode.d6.loss_cls: 0.6773  decode.d6.loss_mask: 1.4982  decode.d6.loss_dice: 1.8645  decode.d7.loss_cls: 0.5635  decode.d7.loss_mask: 1.4583  decode.d7.loss_dice: 1.8506  decode.d8.loss_cls: 0.5872  decode.d8.loss_mask: 1.4690  decode.d8.loss_dice: 1.8323
2025/03/28 17:47:44 - mmengine - INFO - Iter(train) [ 3050/20000]  base_lr: 8.6168e-05 lr: 8.6168e-05  eta: 5:20:13  time: 1.1999  data_time: 0.0293  memory: 6835  loss: 41.9005  decode.loss_cls: 0.7865  decode.loss_mask: 1.6048  decode.loss_dice: 1.8966  decode.d0.loss_cls: 1.0039  decode.d0.loss_mask: 1.4849  decode.d0.loss_dice: 1.8448  decode.d1.loss_cls: 0.7539  decode.d1.loss_mask: 1.5106  decode.d1.loss_dice: 1.8237  decode.d2.loss_cls: 0.7850  decode.d2.loss_mask: 1.6070  decode.d2.loss_dice: 1.8669  decode.d3.loss_cls: 0.7696  decode.d3.loss_mask: 1.4984  decode.d3.loss_dice: 1.7617  decode.d4.loss_cls: 0.8950  decode.d4.loss_mask: 1.4772  decode.d4.loss_dice: 1.7540  decode.d5.loss_cls: 0.9083  decode.d5.loss_mask: 1.5547  decode.d5.loss_dice: 1.7197  decode.d6.loss_cls: 0.8806  decode.d6.loss_mask: 1.4612  decode.d6.loss_dice: 1.7745  decode.d7.loss_cls: 0.9274  decode.d7.loss_mask: 1.5012  decode.d7.loss_dice: 1.7861  decode.d8.loss_cls: 0.8537  decode.d8.loss_mask: 1.5891  decode.d8.loss_dice: 1.8193
2025/03/28 17:48:44 - mmengine - INFO - Iter(train) [ 3100/20000]  base_lr: 8.5939e-05 lr: 8.5939e-05  eta: 5:19:39  time: 1.2569  data_time: 0.0270  memory: 6818  loss: 42.0998  decode.loss_cls: 0.6411  decode.loss_mask: 1.8345  decode.loss_dice: 1.8346  decode.d0.loss_cls: 0.9142  decode.d0.loss_mask: 1.6791  decode.d0.loss_dice: 1.8578  decode.d1.loss_cls: 0.4980  decode.d1.loss_mask: 1.8032  decode.d1.loss_dice: 1.8276  decode.d2.loss_cls: 0.5228  decode.d2.loss_mask: 1.7845  decode.d2.loss_dice: 1.8045  decode.d3.loss_cls: 0.4273  decode.d3.loss_mask: 1.8853  decode.d3.loss_dice: 1.8713  decode.d4.loss_cls: 0.5531  decode.d4.loss_mask: 1.8296  decode.d4.loss_dice: 1.8179  decode.d5.loss_cls: 0.5551  decode.d5.loss_mask: 1.7602  decode.d5.loss_dice: 1.7718  decode.d6.loss_cls: 0.5327  decode.d6.loss_mask: 1.7274  decode.d6.loss_dice: 1.8309  decode.d7.loss_cls: 0.6038  decode.d7.loss_mask: 1.7619  decode.d7.loss_dice: 1.8584  decode.d8.loss_cls: 0.6278  decode.d8.loss_mask: 1.8391  decode.d8.loss_dice: 1.8440
2025/03/28 17:49:38 - mmengine - INFO - Iter(train) [ 3150/20000]  base_lr: 8.5710e-05 lr: 8.5710e-05  eta: 5:18:27  time: 1.2298  data_time: 0.0292  memory: 6825  loss: 42.1746  decode.loss_cls: 0.5678  decode.loss_mask: 1.8024  decode.loss_dice: 1.9242  decode.d0.loss_cls: 0.7632  decode.d0.loss_mask: 1.7412  decode.d0.loss_dice: 1.9489  decode.d1.loss_cls: 0.3781  decode.d1.loss_mask: 1.7188  decode.d1.loss_dice: 1.8842  decode.d2.loss_cls: 0.4314  decode.d2.loss_mask: 1.8210  decode.d2.loss_dice: 1.9133  decode.d3.loss_cls: 0.4779  decode.d3.loss_mask: 1.7760  decode.d3.loss_dice: 1.8729  decode.d4.loss_cls: 0.5505  decode.d4.loss_mask: 1.7487  decode.d4.loss_dice: 1.8552  decode.d5.loss_cls: 0.5631  decode.d5.loss_mask: 1.7943  decode.d5.loss_dice: 1.8375  decode.d6.loss_cls: 0.5602  decode.d6.loss_mask: 1.7648  decode.d6.loss_dice: 1.9149  decode.d7.loss_cls: 0.5381  decode.d7.loss_mask: 1.7929  decode.d7.loss_dice: 1.9485  decode.d8.loss_cls: 0.5885  decode.d8.loss_mask: 1.7674  decode.d8.loss_dice: 1.9287
2025/03/28 17:50:33 - mmengine - INFO - Iter(train) [ 3200/20000]  base_lr: 8.5481e-05 lr: 8.5481e-05  eta: 5:17:17  time: 1.0058  data_time: 0.0276  memory: 6821  loss: 39.2841  decode.loss_cls: 0.5619  decode.loss_mask: 1.5161  decode.loss_dice: 1.7952  decode.d0.loss_cls: 0.8399  decode.d0.loss_mask: 1.6222  decode.d0.loss_dice: 1.8804  decode.d1.loss_cls: 0.4951  decode.d1.loss_mask: 1.5807  decode.d1.loss_dice: 1.7811  decode.d2.loss_cls: 0.4641  decode.d2.loss_mask: 1.5691  decode.d2.loss_dice: 1.8019  decode.d3.loss_cls: 0.4271  decode.d3.loss_mask: 1.6040  decode.d3.loss_dice: 1.8064  decode.d4.loss_cls: 0.4997  decode.d4.loss_mask: 1.5025  decode.d4.loss_dice: 1.8057  decode.d5.loss_cls: 0.5150  decode.d5.loss_mask: 1.5994  decode.d5.loss_dice: 1.7587  decode.d6.loss_cls: 0.5724  decode.d6.loss_mask: 1.5641  decode.d6.loss_dice: 1.7868  decode.d7.loss_cls: 0.5638  decode.d7.loss_mask: 1.6151  decode.d7.loss_dice: 1.8276  decode.d8.loss_cls: 0.4961  decode.d8.loss_mask: 1.6166  decode.d8.loss_dice: 1.8154
2025/03/28 17:51:34 - mmengine - INFO - Iter(train) [ 3250/20000]  base_lr: 8.5252e-05 lr: 8.5252e-05  eta: 5:16:42  time: 1.2656  data_time: 0.0280  memory: 6829  loss: 41.8076  decode.loss_cls: 0.6044  decode.loss_mask: 1.7586  decode.loss_dice: 1.9268  decode.d0.loss_cls: 0.7679  decode.d0.loss_mask: 1.6772  decode.d0.loss_dice: 1.8970  decode.d1.loss_cls: 0.4741  decode.d1.loss_mask: 1.6689  decode.d1.loss_dice: 1.8686  decode.d2.loss_cls: 0.5280  decode.d2.loss_mask: 1.6867  decode.d2.loss_dice: 1.8649  decode.d3.loss_cls: 0.6074  decode.d3.loss_mask: 1.7009  decode.d3.loss_dice: 1.8674  decode.d4.loss_cls: 0.5707  decode.d4.loss_mask: 1.7336  decode.d4.loss_dice: 1.9132  decode.d5.loss_cls: 0.5913  decode.d5.loss_mask: 1.6917  decode.d5.loss_dice: 1.8472  decode.d6.loss_cls: 0.5819  decode.d6.loss_mask: 1.6887  decode.d6.loss_dice: 1.8680  decode.d7.loss_cls: 0.6380  decode.d7.loss_mask: 1.6409  decode.d7.loss_dice: 1.9354  decode.d8.loss_cls: 0.5687  decode.d8.loss_mask: 1.7073  decode.d8.loss_dice: 1.9322
2025/03/28 17:52:31 - mmengine - INFO - Iter(train) [ 3300/20000]  base_lr: 8.5023e-05 lr: 8.5023e-05  eta: 5:15:49  time: 1.1033  data_time: 0.0291  memory: 6823  loss: 44.1121  decode.loss_cls: 0.7458  decode.loss_mask: 1.7912  decode.loss_dice: 1.9079  decode.d0.loss_cls: 0.9920  decode.d0.loss_mask: 1.6930  decode.d0.loss_dice: 2.0187  decode.d1.loss_cls: 0.5835  decode.d1.loss_mask: 1.7860  decode.d1.loss_dice: 1.9658  decode.d2.loss_cls: 0.6350  decode.d2.loss_mask: 1.8333  decode.d2.loss_dice: 1.9764  decode.d3.loss_cls: 0.6310  decode.d3.loss_mask: 1.7846  decode.d3.loss_dice: 1.9518  decode.d4.loss_cls: 0.6336  decode.d4.loss_mask: 1.7591  decode.d4.loss_dice: 1.9011  decode.d5.loss_cls: 0.6250  decode.d5.loss_mask: 1.8107  decode.d5.loss_dice: 1.9622  decode.d6.loss_cls: 0.6435  decode.d6.loss_mask: 1.7562  decode.d6.loss_dice: 1.9780  decode.d7.loss_cls: 0.6117  decode.d7.loss_mask: 1.7306  decode.d7.loss_dice: 1.9542  decode.d8.loss_cls: 0.6957  decode.d8.loss_mask: 1.7869  decode.d8.loss_dice: 1.9676
2025/03/28 17:53:15 - mmengine - INFO - Iter(train) [ 3350/20000]  base_lr: 8.4794e-05 lr: 8.4794e-05  eta: 5:13:49  time: 0.5987  data_time: 0.0285  memory: 6833  loss: 46.3693  decode.loss_cls: 0.8679  decode.loss_mask: 1.7160  decode.loss_dice: 1.9223  decode.d0.loss_cls: 1.0274  decode.d0.loss_mask: 1.7263  decode.d0.loss_dice: 1.9968  decode.d1.loss_cls: 0.7556  decode.d1.loss_mask: 1.8055  decode.d1.loss_dice: 2.0239  decode.d2.loss_cls: 0.7836  decode.d2.loss_mask: 1.7066  decode.d2.loss_dice: 2.0113  decode.d3.loss_cls: 0.8776  decode.d3.loss_mask: 1.7478  decode.d3.loss_dice: 1.9842  decode.d4.loss_cls: 0.8423  decode.d4.loss_mask: 1.7907  decode.d4.loss_dice: 2.0768  decode.d5.loss_cls: 0.9723  decode.d5.loss_mask: 1.7120  decode.d5.loss_dice: 2.0312  decode.d6.loss_cls: 0.8278  decode.d6.loss_mask: 1.7459  decode.d6.loss_dice: 2.0405  decode.d7.loss_cls: 0.9109  decode.d7.loss_mask: 1.7516  decode.d7.loss_dice: 2.0366  decode.d8.loss_cls: 0.8897  decode.d8.loss_mask: 1.7760  decode.d8.loss_dice: 2.0124
2025/03/28 17:54:11 - mmengine - INFO - Iter(train) [ 3400/20000]  base_lr: 8.4565e-05 lr: 8.4565e-05  eta: 5:12:50  time: 1.2400  data_time: 0.0303  memory: 6839  loss: 39.1221  decode.loss_cls: 0.8583  decode.loss_mask: 1.5391  decode.loss_dice: 1.6072  decode.d0.loss_cls: 0.8234  decode.d0.loss_mask: 1.5026  decode.d0.loss_dice: 1.7259  decode.d1.loss_cls: 0.5804  decode.d1.loss_mask: 1.4960  decode.d1.loss_dice: 1.6557  decode.d2.loss_cls: 0.6554  decode.d2.loss_mask: 1.5583  decode.d2.loss_dice: 1.6169  decode.d3.loss_cls: 0.7070  decode.d3.loss_mask: 1.5686  decode.d3.loss_dice: 1.6049  decode.d4.loss_cls: 0.8035  decode.d4.loss_mask: 1.5409  decode.d4.loss_dice: 1.6192  decode.d5.loss_cls: 0.7002  decode.d5.loss_mask: 1.5323  decode.d5.loss_dice: 1.6666  decode.d6.loss_cls: 0.6591  decode.d6.loss_mask: 1.5547  decode.d6.loss_dice: 1.6802  decode.d7.loss_cls: 0.6630  decode.d7.loss_mask: 1.5531  decode.d7.loss_dice: 1.6790  decode.d8.loss_cls: 0.7633  decode.d8.loss_mask: 1.5536  decode.d8.loss_dice: 1.6540
2025/03/28 17:55:12 - mmengine - INFO - Iter(train) [ 3450/20000]  base_lr: 8.4336e-05 lr: 8.4336e-05  eta: 5:12:14  time: 1.2602  data_time: 0.0280  memory: 6822  loss: 38.3383  decode.loss_cls: 0.5469  decode.loss_mask: 1.6296  decode.loss_dice: 1.7001  decode.d0.loss_cls: 0.8598  decode.d0.loss_mask: 1.3852  decode.d0.loss_dice: 1.7689  decode.d1.loss_cls: 0.4439  decode.d1.loss_mask: 1.5087  decode.d1.loss_dice: 1.6870  decode.d2.loss_cls: 0.3712  decode.d2.loss_mask: 1.5094  decode.d2.loss_dice: 1.7557  decode.d3.loss_cls: 0.5037  decode.d3.loss_mask: 1.5973  decode.d3.loss_dice: 1.7752  decode.d4.loss_cls: 0.4526  decode.d4.loss_mask: 1.5238  decode.d4.loss_dice: 1.7743  decode.d5.loss_cls: 0.5354  decode.d5.loss_mask: 1.6363  decode.d5.loss_dice: 1.7136  decode.d6.loss_cls: 0.5381  decode.d6.loss_mask: 1.6093  decode.d6.loss_dice: 1.7280  decode.d7.loss_cls: 0.5554  decode.d7.loss_mask: 1.5361  decode.d7.loss_dice: 1.7097  decode.d8.loss_cls: 0.5617  decode.d8.loss_mask: 1.6786  decode.d8.loss_dice: 1.7427
2025/03/28 17:56:09 - mmengine - INFO - Iter(train) [ 3500/20000]  base_lr: 8.4106e-05 lr: 8.4106e-05  eta: 5:11:20  time: 1.2425  data_time: 0.0279  memory: 6828  loss: 46.6237  decode.loss_cls: 0.8299  decode.loss_mask: 1.7447  decode.loss_dice: 2.0662  decode.d0.loss_cls: 0.8525  decode.d0.loss_mask: 1.8824  decode.d0.loss_dice: 2.1080  decode.d1.loss_cls: 0.6464  decode.d1.loss_mask: 1.7854  decode.d1.loss_dice: 2.0575  decode.d2.loss_cls: 0.7006  decode.d2.loss_mask: 1.7872  decode.d2.loss_dice: 2.0294  decode.d3.loss_cls: 0.5762  decode.d3.loss_mask: 1.7894  decode.d3.loss_dice: 2.0341  decode.d4.loss_cls: 0.6896  decode.d4.loss_mask: 1.8235  decode.d4.loss_dice: 2.0630  decode.d5.loss_cls: 0.8164  decode.d5.loss_mask: 1.8796  decode.d5.loss_dice: 2.1724  decode.d6.loss_cls: 0.8528  decode.d6.loss_mask: 1.7834  decode.d6.loss_dice: 2.1086  decode.d7.loss_cls: 0.8203  decode.d7.loss_mask: 1.7921  decode.d7.loss_dice: 2.1339  decode.d8.loss_cls: 0.9113  decode.d8.loss_mask: 1.7690  decode.d8.loss_dice: 2.1179
2025/03/28 17:57:06 - mmengine - INFO - Iter(train) [ 3550/20000]  base_lr: 8.3877e-05 lr: 8.3877e-05  eta: 5:10:26  time: 1.2283  data_time: 0.0315  memory: 6824  loss: 39.0524  decode.loss_cls: 0.4879  decode.loss_mask: 1.8247  decode.loss_dice: 1.6347  decode.d0.loss_cls: 0.7235  decode.d0.loss_mask: 1.6650  decode.d0.loss_dice: 1.5754  decode.d1.loss_cls: 0.3708  decode.d1.loss_mask: 1.8176  decode.d1.loss_dice: 1.6737  decode.d2.loss_cls: 0.4486  decode.d2.loss_mask: 1.8211  decode.d2.loss_dice: 1.6559  decode.d3.loss_cls: 0.5071  decode.d3.loss_mask: 1.7583  decode.d3.loss_dice: 1.5879  decode.d4.loss_cls: 0.5117  decode.d4.loss_mask: 1.7872  decode.d4.loss_dice: 1.6140  decode.d5.loss_cls: 0.5473  decode.d5.loss_mask: 1.7922  decode.d5.loss_dice: 1.5595  decode.d6.loss_cls: 0.4669  decode.d6.loss_mask: 1.7655  decode.d6.loss_dice: 1.5942  decode.d7.loss_cls: 0.5952  decode.d7.loss_mask: 1.7576  decode.d7.loss_dice: 1.5602  decode.d8.loss_cls: 0.4894  decode.d8.loss_mask: 1.8016  decode.d8.loss_dice: 1.6573
2025/03/28 17:58:04 - mmengine - INFO - Iter(train) [ 3600/20000]  base_lr: 8.3647e-05 lr: 8.3647e-05  eta: 5:09:34  time: 1.2444  data_time: 0.0312  memory: 6831  loss: 36.1813  decode.loss_cls: 0.7510  decode.loss_mask: 1.2486  decode.loss_dice: 1.6395  decode.d0.loss_cls: 0.7843  decode.d0.loss_mask: 1.2728  decode.d0.loss_dice: 1.7253  decode.d1.loss_cls: 0.4442  decode.d1.loss_mask: 1.2789  decode.d1.loss_dice: 1.6528  decode.d2.loss_cls: 0.5709  decode.d2.loss_mask: 1.2768  decode.d2.loss_dice: 1.6466  decode.d3.loss_cls: 0.5715  decode.d3.loss_mask: 1.2994  decode.d3.loss_dice: 1.6907  decode.d4.loss_cls: 0.7498  decode.d4.loss_mask: 1.3237  decode.d4.loss_dice: 1.7536  decode.d5.loss_cls: 0.5710  decode.d5.loss_mask: 1.3600  decode.d5.loss_dice: 1.7058  decode.d6.loss_cls: 0.7640  decode.d6.loss_mask: 1.2668  decode.d6.loss_dice: 1.6063  decode.d7.loss_cls: 0.6147  decode.d7.loss_mask: 1.3702  decode.d7.loss_dice: 1.6938  decode.d8.loss_cls: 0.6661  decode.d8.loss_mask: 1.2641  decode.d8.loss_dice: 1.6183
2025/03/28 17:59:04 - mmengine - INFO - Iter(train) [ 3650/20000]  base_lr: 8.3418e-05 lr: 8.3418e-05  eta: 5:08:52  time: 1.1539  data_time: 0.0323  memory: 6812  loss: 33.3332  decode.loss_cls: 0.4298  decode.loss_mask: 1.4469  decode.loss_dice: 1.4634  decode.d0.loss_cls: 0.7048  decode.d0.loss_mask: 1.3908  decode.d0.loss_dice: 1.4456  decode.d1.loss_cls: 0.3666  decode.d1.loss_mask: 1.4060  decode.d1.loss_dice: 1.4710  decode.d2.loss_cls: 0.2775  decode.d2.loss_mask: 1.4531  decode.d2.loss_dice: 1.4873  decode.d3.loss_cls: 0.2686  decode.d3.loss_mask: 1.4649  decode.d3.loss_dice: 1.5086  decode.d4.loss_cls: 0.3903  decode.d4.loss_mask: 1.4512  decode.d4.loss_dice: 1.4672  decode.d5.loss_cls: 0.3998  decode.d5.loss_mask: 1.4650  decode.d5.loss_dice: 1.4958  decode.d6.loss_cls: 0.5073  decode.d6.loss_mask: 1.4218  decode.d6.loss_dice: 1.4492  decode.d7.loss_cls: 0.4297  decode.d7.loss_mask: 1.4474  decode.d7.loss_dice: 1.4597  decode.d8.loss_cls: 0.4581  decode.d8.loss_mask: 1.4100  decode.d8.loss_dice: 1.4958
2025/03/28 18:00:03 - mmengine - INFO - Iter(train) [ 3700/20000]  base_lr: 8.3188e-05 lr: 8.3188e-05  eta: 5:08:08  time: 1.2445  data_time: 0.0296  memory: 6837  loss: 40.2582  decode.loss_cls: 0.5263  decode.loss_mask: 1.7035  decode.loss_dice: 1.7705  decode.d0.loss_cls: 0.7424  decode.d0.loss_mask: 1.6939  decode.d0.loss_dice: 1.8091  decode.d1.loss_cls: 0.4474  decode.d1.loss_mask: 1.6725  decode.d1.loss_dice: 1.7661  decode.d2.loss_cls: 0.4740  decode.d2.loss_mask: 1.6608  decode.d2.loss_dice: 1.7770  decode.d3.loss_cls: 0.4446  decode.d3.loss_mask: 1.6997  decode.d3.loss_dice: 1.7752  decode.d4.loss_cls: 0.4871  decode.d4.loss_mask: 1.7440  decode.d4.loss_dice: 1.7753  decode.d5.loss_cls: 0.5655  decode.d5.loss_mask: 1.7331  decode.d5.loss_dice: 1.7273  decode.d6.loss_cls: 0.5656  decode.d6.loss_mask: 1.7474  decode.d6.loss_dice: 1.7546  decode.d7.loss_cls: 0.4552  decode.d7.loss_mask: 1.7896  decode.d7.loss_dice: 1.8242  decode.d8.loss_cls: 0.5735  decode.d8.loss_mask: 1.7842  decode.d8.loss_dice: 1.7686
2025/03/28 18:01:03 - mmengine - INFO - Iter(train) [ 3750/20000]  base_lr: 8.2958e-05 lr: 8.2958e-05  eta: 5:07:27  time: 1.2064  data_time: 0.0312  memory: 6829  loss: 41.5842  decode.loss_cls: 0.6041  decode.loss_mask: 1.6400  decode.loss_dice: 1.8446  decode.d0.loss_cls: 0.8569  decode.d0.loss_mask: 1.6041  decode.d0.loss_dice: 1.9322  decode.d1.loss_cls: 0.6229  decode.d1.loss_mask: 1.6301  decode.d1.loss_dice: 1.8706  decode.d2.loss_cls: 0.4728  decode.d2.loss_mask: 1.7460  decode.d2.loss_dice: 1.8762  decode.d3.loss_cls: 0.5407  decode.d3.loss_mask: 1.7216  decode.d3.loss_dice: 1.8425  decode.d4.loss_cls: 0.5455  decode.d4.loss_mask: 1.7737  decode.d4.loss_dice: 1.9614  decode.d5.loss_cls: 0.5406  decode.d5.loss_mask: 1.6795  decode.d5.loss_dice: 1.8732  decode.d6.loss_cls: 0.5992  decode.d6.loss_mask: 1.6269  decode.d6.loss_dice: 1.8651  decode.d7.loss_cls: 0.6611  decode.d7.loss_mask: 1.6840  decode.d7.loss_dice: 1.8625  decode.d8.loss_cls: 0.6629  decode.d8.loss_mask: 1.6617  decode.d8.loss_dice: 1.7818
2025/03/28 18:02:01 - mmengine - INFO - Iter(train) [ 3800/20000]  base_lr: 8.2729e-05 lr: 8.2729e-05  eta: 5:06:32  time: 1.1507  data_time: 0.0274  memory: 6829  loss: 37.9030  decode.loss_cls: 0.6574  decode.loss_mask: 1.5978  decode.loss_dice: 1.5012  decode.d0.loss_cls: 0.8119  decode.d0.loss_mask: 1.5280  decode.d0.loss_dice: 1.5625  decode.d1.loss_cls: 0.5822  decode.d1.loss_mask: 1.5639  decode.d1.loss_dice: 1.5677  decode.d2.loss_cls: 0.5863  decode.d2.loss_mask: 1.6048  decode.d2.loss_dice: 1.5472  decode.d3.loss_cls: 0.5512  decode.d3.loss_mask: 1.5259  decode.d3.loss_dice: 1.5053  decode.d4.loss_cls: 0.6191  decode.d4.loss_mask: 1.6597  decode.d4.loss_dice: 1.5875  decode.d5.loss_cls: 0.6306  decode.d5.loss_mask: 1.5381  decode.d5.loss_dice: 1.5777  decode.d6.loss_cls: 0.6183  decode.d6.loss_mask: 1.6264  decode.d6.loss_dice: 1.5935  decode.d7.loss_cls: 0.8076  decode.d7.loss_mask: 1.6291  decode.d7.loss_dice: 1.5346  decode.d8.loss_cls: 0.7566  decode.d8.loss_mask: 1.5429  decode.d8.loss_dice: 1.4879
2025/03/28 18:03:01 - mmengine - INFO - Iter(train) [ 3850/20000]  base_lr: 8.2499e-05 lr: 8.2499e-05  eta: 5:05:48  time: 1.1550  data_time: 0.0318  memory: 6826  loss: 34.4081  decode.loss_cls: 0.4478  decode.loss_mask: 1.2976  decode.loss_dice: 1.6845  decode.d0.loss_cls: 0.7823  decode.d0.loss_mask: 1.2252  decode.d0.loss_dice: 1.6529  decode.d1.loss_cls: 0.3842  decode.d1.loss_mask: 1.2353  decode.d1.loss_dice: 1.6517  decode.d2.loss_cls: 0.4585  decode.d2.loss_mask: 1.2681  decode.d2.loss_dice: 1.6153  decode.d3.loss_cls: 0.4325  decode.d3.loss_mask: 1.2591  decode.d3.loss_dice: 1.6333  decode.d4.loss_cls: 0.4901  decode.d4.loss_mask: 1.2324  decode.d4.loss_dice: 1.6381  decode.d5.loss_cls: 0.5147  decode.d5.loss_mask: 1.2285  decode.d5.loss_dice: 1.6593  decode.d6.loss_cls: 0.6217  decode.d6.loss_mask: 1.2652  decode.d6.loss_dice: 1.6326  decode.d7.loss_cls: 0.6208  decode.d7.loss_mask: 1.2558  decode.d7.loss_dice: 1.7476  decode.d8.loss_cls: 0.4987  decode.d8.loss_mask: 1.2998  decode.d8.loss_dice: 1.6746
2025/03/28 18:04:02 - mmengine - INFO - Iter(train) [ 3900/20000]  base_lr: 8.2269e-05 lr: 8.2269e-05  eta: 5:05:12  time: 1.2039  data_time: 0.0281  memory: 6829  loss: 47.0256  decode.loss_cls: 0.7144  decode.loss_mask: 2.0240  decode.loss_dice: 1.9597  decode.d0.loss_cls: 0.8914  decode.d0.loss_mask: 2.0241  decode.d0.loss_dice: 1.9999  decode.d1.loss_cls: 0.7789  decode.d1.loss_mask: 2.0067  decode.d1.loss_dice: 2.0123  decode.d2.loss_cls: 0.7679  decode.d2.loss_mask: 1.9379  decode.d2.loss_dice: 1.8843  decode.d3.loss_cls: 0.6879  decode.d3.loss_mask: 1.9216  decode.d3.loss_dice: 1.9898  decode.d4.loss_cls: 0.7524  decode.d4.loss_mask: 1.9254  decode.d4.loss_dice: 1.9088  decode.d5.loss_cls: 0.8328  decode.d5.loss_mask: 1.9586  decode.d5.loss_dice: 1.9059  decode.d6.loss_cls: 0.7581  decode.d6.loss_mask: 1.9710  decode.d6.loss_dice: 1.9313  decode.d7.loss_cls: 0.7450  decode.d7.loss_mask: 1.9591  decode.d7.loss_dice: 1.9350  decode.d8.loss_cls: 0.7869  decode.d8.loss_mask: 2.0288  decode.d8.loss_dice: 2.0255
2025/03/28 18:05:04 - mmengine - INFO - Iter(train) [ 3950/20000]  base_lr: 8.2039e-05 lr: 8.2039e-05  eta: 5:04:35  time: 1.2840  data_time: 0.0327  memory: 6815  loss: 41.8881  decode.loss_cls: 0.7100  decode.loss_mask: 1.7402  decode.loss_dice: 1.7576  decode.d0.loss_cls: 0.8919  decode.d0.loss_mask: 1.6698  decode.d0.loss_dice: 1.7899  decode.d1.loss_cls: 0.5942  decode.d1.loss_mask: 1.7133  decode.d1.loss_dice: 1.7580  decode.d2.loss_cls: 0.6935  decode.d2.loss_mask: 1.7183  decode.d2.loss_dice: 1.7621  decode.d3.loss_cls: 0.6816  decode.d3.loss_mask: 1.6872  decode.d3.loss_dice: 1.7410  decode.d4.loss_cls: 0.6740  decode.d4.loss_mask: 1.7317  decode.d4.loss_dice: 1.7723  decode.d5.loss_cls: 0.7269  decode.d5.loss_mask: 1.6533  decode.d5.loss_dice: 1.7497  decode.d6.loss_cls: 0.6696  decode.d6.loss_mask: 1.7035  decode.d6.loss_dice: 1.7389  decode.d7.loss_cls: 0.7351  decode.d7.loss_mask: 1.7652  decode.d7.loss_dice: 1.7670  decode.d8.loss_cls: 0.7886  decode.d8.loss_mask: 1.7203  decode.d8.loss_dice: 1.7835
2025/03/28 18:06:02 - mmengine - INFO - Exp name: r2u_20250328_164133
2025/03/28 18:06:02 - mmengine - INFO - Iter(train) [ 4000/20000]  base_lr: 8.1809e-05 lr: 8.1809e-05  eta: 5:03:40  time: 0.9721  data_time: 0.0285  memory: 6833  loss: 42.9533  decode.loss_cls: 0.5963  decode.loss_mask: 1.6992  decode.loss_dice: 2.0753  decode.d0.loss_cls: 0.7342  decode.d0.loss_mask: 1.6490  decode.d0.loss_dice: 2.0343  decode.d1.loss_cls: 0.4766  decode.d1.loss_mask: 1.6514  decode.d1.loss_dice: 2.0109  decode.d2.loss_cls: 0.4939  decode.d2.loss_mask: 1.7045  decode.d2.loss_dice: 1.9804  decode.d3.loss_cls: 0.5311  decode.d3.loss_mask: 1.7039  decode.d3.loss_dice: 2.0633  decode.d4.loss_cls: 0.5629  decode.d4.loss_mask: 1.6887  decode.d4.loss_dice: 2.0591  decode.d5.loss_cls: 0.6045  decode.d5.loss_mask: 1.6794  decode.d5.loss_dice: 2.0150  decode.d6.loss_cls: 0.5823  decode.d6.loss_mask: 1.7490  decode.d6.loss_dice: 2.0102  decode.d7.loss_cls: 0.5452  decode.d7.loss_mask: 1.7315  decode.d7.loss_dice: 2.0789  decode.d8.loss_cls: 0.5972  decode.d8.loss_mask: 1.6682  decode.d8.loss_dice: 1.9769
2025/03/28 18:06:02 - mmengine - INFO - Saving checkpoint at 4000 iterations
2025/03/28 18:06:11 - mmengine - INFO - Iter(val) [  50/2708]    eta: 0:07:21  time: 0.1904  data_time: 0.0026  memory: 3055  
2025/03/28 18:06:18 - mmengine - INFO - Iter(val) [ 100/2708]    eta: 0:06:46  time: 0.1145  data_time: 0.0022  memory: 3055  
2025/03/28 18:06:26 - mmengine - INFO - Iter(val) [ 150/2708]    eta: 0:06:31  time: 0.1438  data_time: 0.0024  memory: 3055  
2025/03/28 18:06:34 - mmengine - INFO - Iter(val) [ 200/2708]    eta: 0:06:29  time: 0.1910  data_time: 0.0021  memory: 3055  
2025/03/28 18:06:41 - mmengine - INFO - Iter(val) [ 250/2708]    eta: 0:06:16  time: 0.1185  data_time: 0.0023  memory: 3055  
2025/03/28 18:06:48 - mmengine - INFO - Iter(val) [ 300/2708]    eta: 0:06:04  time: 0.1135  data_time: 0.0018  memory: 3055  
2025/03/28 18:06:56 - mmengine - INFO - Iter(val) [ 350/2708]    eta: 0:06:00  time: 0.1866  data_time: 0.0018  memory: 3055  
2025/03/28 18:07:04 - mmengine - INFO - Iter(val) [ 400/2708]    eta: 0:05:52  time: 0.1175  data_time: 0.0023  memory: 3055  
2025/03/28 18:07:12 - mmengine - INFO - Iter(val) [ 450/2708]    eta: 0:05:44  time: 0.1556  data_time: 0.0030  memory: 3055  
2025/03/28 18:07:19 - mmengine - INFO - Iter(val) [ 500/2708]    eta: 0:05:38  time: 0.1895  data_time: 0.0028  memory: 3055  
2025/03/28 18:07:27 - mmengine - INFO - Iter(val) [ 550/2708]    eta: 0:05:29  time: 0.1299  data_time: 0.0021  memory: 3055  
2025/03/28 18:07:34 - mmengine - INFO - Iter(val) [ 600/2708]    eta: 0:05:20  time: 0.1238  data_time: 0.0022  memory: 3055  
2025/03/28 18:07:42 - mmengine - INFO - Iter(val) [ 650/2708]    eta: 0:05:14  time: 0.1916  data_time: 0.0023  memory: 3055  
2025/03/28 18:07:50 - mmengine - INFO - Iter(val) [ 700/2708]    eta: 0:05:06  time: 0.1389  data_time: 0.0024  memory: 3055  
2025/03/28 18:07:57 - mmengine - INFO - Iter(val) [ 750/2708]    eta: 0:04:56  time: 0.1084  data_time: 0.0019  memory: 3055  
2025/03/28 18:08:05 - mmengine - INFO - Iter(val) [ 800/2708]    eta: 0:04:50  time: 0.1932  data_time: 0.0029  memory: 3055  
2025/03/28 18:08:12 - mmengine - INFO - Iter(val) [ 850/2708]    eta: 0:04:43  time: 0.1140  data_time: 0.0020  memory: 3055  
2025/03/28 18:08:19 - mmengine - INFO - Iter(val) [ 900/2708]    eta: 0:04:34  time: 0.1127  data_time: 0.0019  memory: 3055  
2025/03/28 18:08:27 - mmengine - INFO - Iter(val) [ 950/2708]    eta: 0:04:27  time: 0.1890  data_time: 0.0022  memory: 3055  
2025/03/28 18:08:35 - mmengine - INFO - Iter(val) [1000/2708]    eta: 0:04:19  time: 0.1550  data_time: 0.0020  memory: 3055  
2025/03/28 18:08:42 - mmengine - INFO - Iter(val) [1050/2708]    eta: 0:04:11  time: 0.1058  data_time: 0.0018  memory: 3055  
2025/03/28 18:08:50 - mmengine - INFO - Iter(val) [1100/2708]    eta: 0:04:04  time: 0.1911  data_time: 0.0021  memory: 3055  
2025/03/28 18:08:58 - mmengine - INFO - Iter(val) [1150/2708]    eta: 0:03:57  time: 0.1737  data_time: 0.0025  memory: 3055  
2025/03/28 18:09:05 - mmengine - INFO - Iter(val) [1200/2708]    eta: 0:03:48  time: 0.1066  data_time: 0.0020  memory: 3055  
2025/03/28 18:09:13 - mmengine - INFO - Iter(val) [1250/2708]    eta: 0:03:41  time: 0.1614  data_time: 0.0024  memory: 3055  
2025/03/28 18:09:21 - mmengine - INFO - Iter(val) [1300/2708]    eta: 0:03:34  time: 0.1891  data_time: 0.0023  memory: 3055  
2025/03/28 18:09:28 - mmengine - INFO - Iter(val) [1350/2708]    eta: 0:03:26  time: 0.1076  data_time: 0.0020  memory: 3055  
2025/03/28 18:09:35 - mmengine - INFO - Iter(val) [1400/2708]    eta: 0:03:18  time: 0.1499  data_time: 0.0018  memory: 3055  
2025/03/28 18:09:44 - mmengine - INFO - Iter(val) [1450/2708]    eta: 0:03:11  time: 0.1933  data_time: 0.0020  memory: 3055  
2025/03/28 18:09:51 - mmengine - INFO - Iter(val) [1500/2708]    eta: 0:03:03  time: 0.1126  data_time: 0.0023  memory: 3055  
2025/03/28 18:09:58 - mmengine - INFO - Iter(val) [1550/2708]    eta: 0:02:55  time: 0.1631  data_time: 0.0022  memory: 3055  
2025/03/28 18:10:06 - mmengine - INFO - Iter(val) [1600/2708]    eta: 0:02:48  time: 0.1830  data_time: 0.0021  memory: 3055  
2025/03/28 18:10:14 - mmengine - INFO - Iter(val) [1650/2708]    eta: 0:02:40  time: 0.1099  data_time: 0.0022  memory: 3055  
2025/03/28 18:10:21 - mmengine - INFO - Iter(val) [1700/2708]    eta: 0:02:33  time: 0.1823  data_time: 0.0019  memory: 3055  
2025/03/28 18:10:27 - mmengine - INFO - Iter(val) [1750/2708]    eta: 0:02:24  time: 0.0971  data_time: 0.0022  memory: 3055  
2025/03/28 18:10:32 - mmengine - INFO - Iter(val) [1800/2708]    eta: 0:02:15  time: 0.0932  data_time: 0.0020  memory: 3055  
2025/03/28 18:10:38 - mmengine - INFO - Iter(val) [1850/2708]    eta: 0:02:07  time: 0.1880  data_time: 0.0020  memory: 3055  
2025/03/28 18:10:46 - mmengine - INFO - Iter(val) [1900/2708]    eta: 0:02:00  time: 0.1321  data_time: 0.0021  memory: 3055  
2025/03/28 18:10:53 - mmengine - INFO - Iter(val) [1950/2708]    eta: 0:01:52  time: 0.1206  data_time: 0.0020  memory: 3055  
2025/03/28 18:11:01 - mmengine - INFO - Iter(val) [2000/2708]    eta: 0:01:45  time: 0.1889  data_time: 0.0026  memory: 3055  
2025/03/28 18:11:09 - mmengine - INFO - Iter(val) [2050/2708]    eta: 0:01:38  time: 0.1584  data_time: 0.0020  memory: 3055  
2025/03/28 18:11:16 - mmengine - INFO - Iter(val) [2100/2708]    eta: 0:01:30  time: 0.1046  data_time: 0.0019  memory: 3055  
2025/03/28 18:11:23 - mmengine - INFO - Iter(val) [2150/2708]    eta: 0:01:22  time: 0.1359  data_time: 0.0030  memory: 3055  
2025/03/28 18:11:31 - mmengine - INFO - Iter(val) [2200/2708]    eta: 0:01:15  time: 0.1886  data_time: 0.0020  memory: 3055  
2025/03/28 18:11:38 - mmengine - INFO - Iter(val) [2250/2708]    eta: 0:01:08  time: 0.1296  data_time: 0.0019  memory: 3055  
2025/03/28 18:11:45 - mmengine - INFO - Iter(val) [2300/2708]    eta: 0:01:00  time: 0.1087  data_time: 0.0020  memory: 3055  
2025/03/28 18:11:54 - mmengine - INFO - Iter(val) [2350/2708]    eta: 0:00:53  time: 0.1890  data_time: 0.0021  memory: 3055  
2025/03/28 18:12:01 - mmengine - INFO - Iter(val) [2400/2708]    eta: 0:00:45  time: 0.1365  data_time: 0.0022  memory: 3055  
2025/03/28 18:12:08 - mmengine - INFO - Iter(val) [2450/2708]    eta: 0:00:38  time: 0.1135  data_time: 0.0025  memory: 3055  
2025/03/28 18:12:16 - mmengine - INFO - Iter(val) [2500/2708]    eta: 0:00:31  time: 0.1914  data_time: 0.0019  memory: 3055  
2025/03/28 18:12:24 - mmengine - INFO - Iter(val) [2550/2708]    eta: 0:00:23  time: 0.1436  data_time: 0.0021  memory: 3055  
2025/03/28 18:12:31 - mmengine - INFO - Iter(val) [2600/2708]    eta: 0:00:16  time: 0.1161  data_time: 0.0019  memory: 3055  
2025/03/28 18:12:39 - mmengine - INFO - Iter(val) [2650/2708]    eta: 0:00:08  time: 0.1893  data_time: 0.0030  memory: 3055  
2025/03/28 18:12:47 - mmengine - INFO - Iter(val) [2700/2708]    eta: 0:00:01  time: 0.1551  data_time: 0.0020  memory: 3055  
2025/03/28 18:12:48 - mmengine - INFO - per class results:
2025/03/28 18:12:48 - mmengine - INFO - 
+--------------+-------+-------+
|    Class     |  IoU  |  Acc  |
+--------------+-------+-------+
|  background  | 43.01 | 67.11 |
|   building   | 60.53 | 73.19 |
|     road     | 51.84 | 60.32 |
|    water     | 74.31 | 85.46 |
|    barren    | 37.59 | 48.62 |
|    forest    | 47.75 | 55.69 |
| agricultural | 63.71 |  78.9 |
+--------------+-------+-------+
2025/03/28 18:12:48 - mmengine - INFO - Iter(val) [2708/2708]    aAcc: 70.2800  mIoU: 54.1100  mAcc: 67.0400  data_time: 0.0022  time: 0.1493
2025/03/28 18:12:48 - mmengine - INFO - The previous best checkpoint /data/xiaoxinghhh/code/my_mmcv/work_dirs/r2u/DA_spatial_16_fft_cut_off_0.3_suf3_scale_0.1/e6531_seed0/best_mIoU_iter_2000.pth is removed
2025/03/28 18:12:48 - mmengine - INFO - The best checkpoint with 54.1100 mIoU at 4000 iter is saved to best_mIoU_iter_4000.pth.
2025/03/28 18:14:25 - mmengine - INFO - Iter(train) [ 4050/20000]  base_lr: 8.1579e-05 lr: 8.1579e-05  eta: 5:05:24  time: 1.8847  data_time: 0.0287  memory: 10748  loss: 60.8091  decode.loss_cls: 0.4880  decode.loss_mask: 1.5162  decode.loss_dice: 1.9481  decode.d0.loss_cls: 0.7503  decode.d0.loss_mask: 1.4653  decode.d0.loss_dice: 1.8730  decode.d1.loss_cls: 0.6052  decode.d1.loss_mask: 1.4391  decode.d1.loss_dice: 1.8558  decode.d2.loss_cls: 0.5951  decode.d2.loss_mask: 1.4335  decode.d2.loss_dice: 1.8228  decode.d3.loss_cls: 0.6121  decode.d3.loss_mask: 1.3807  decode.d3.loss_dice: 1.7759  decode.d4.loss_cls: 0.6288  decode.d4.loss_mask: 1.4981  decode.d4.loss_dice: 1.8379  decode.d5.loss_cls: 0.6964  decode.d5.loss_mask: 1.5318  decode.d5.loss_dice: 1.9113  decode.d6.loss_cls: 0.7330  decode.d6.loss_mask: 1.5051  decode.d6.loss_dice: 1.8611  decode.d7.loss_cls: 0.5440  decode.d7.loss_mask: 1.6490  decode.d7.loss_dice: 1.9626  decode.d8.loss_cls: 0.6061  decode.d8.loss_mask: 1.5602  decode.d8.loss_dice: 1.9607  mix_decode.loss_cls: 0.2740  mix_decode.loss_mask: 0.8011  mix_decode.loss_dice: 0.9506  mix_decode.d0.loss_cls: 0.4028  mix_decode.d0.loss_mask: 0.8030  mix_decode.d0.loss_dice: 0.9274  mix_decode.d1.loss_cls: 0.3493  mix_decode.d1.loss_mask: 0.7944  mix_decode.d1.loss_dice: 0.9369  mix_decode.d2.loss_cls: 0.3823  mix_decode.d2.loss_mask: 0.8570  mix_decode.d2.loss_dice: 0.9064  mix_decode.d3.loss_cls: 0.3260  mix_decode.d3.loss_mask: 0.7591  mix_decode.d3.loss_dice: 0.8631  mix_decode.d4.loss_cls: 0.3598  mix_decode.d4.loss_mask: 0.8096  mix_decode.d4.loss_dice: 0.9335  mix_decode.d5.loss_cls: 0.3528  mix_decode.d5.loss_mask: 0.7547  mix_decode.d5.loss_dice: 0.9266  mix_decode.d6.loss_cls: 0.3762  mix_decode.d6.loss_mask: 0.8131  mix_decode.d6.loss_dice: 0.9455  mix_decode.d7.loss_cls: 0.3065  mix_decode.d7.loss_mask: 0.8988  mix_decode.d7.loss_dice: 0.9472  mix_decode.d8.loss_cls: 0.2910  mix_decode.d8.loss_mask: 0.7924  mix_decode.d8.loss_dice: 0.9208
2025/03/28 18:15:59 - mmengine - INFO - Iter(train) [ 4100/20000]  base_lr: 8.1349e-05 lr: 8.1349e-05  eta: 5:06:46  time: 1.8565  data_time: 0.0301  memory: 10730  loss: 56.8712  decode.loss_cls: 0.7608  decode.loss_mask: 1.2023  decode.loss_dice: 1.6790  decode.d0.loss_cls: 0.8388  decode.d0.loss_mask: 1.3259  decode.d0.loss_dice: 1.8625  decode.d1.loss_cls: 0.5730  decode.d1.loss_mask: 1.3532  decode.d1.loss_dice: 1.7408  decode.d2.loss_cls: 0.6381  decode.d2.loss_mask: 1.2902  decode.d2.loss_dice: 1.6596  decode.d3.loss_cls: 0.6450  decode.d3.loss_mask: 1.2503  decode.d3.loss_dice: 1.6294  decode.d4.loss_cls: 0.6140  decode.d4.loss_mask: 1.2699  decode.d4.loss_dice: 1.7621  decode.d5.loss_cls: 0.6505  decode.d5.loss_mask: 1.2781  decode.d5.loss_dice: 1.7279  decode.d6.loss_cls: 0.7142  decode.d6.loss_mask: 1.2125  decode.d6.loss_dice: 1.6445  decode.d7.loss_cls: 0.6677  decode.d7.loss_mask: 1.2986  decode.d7.loss_dice: 1.7304  decode.d8.loss_cls: 0.7677  decode.d8.loss_mask: 1.2534  decode.d8.loss_dice: 1.6685  mix_decode.loss_cls: 0.3477  mix_decode.loss_mask: 0.6958  mix_decode.loss_dice: 1.0173  mix_decode.d0.loss_cls: 0.3388  mix_decode.d0.loss_mask: 0.6775  mix_decode.d0.loss_dice: 1.0380  mix_decode.d1.loss_cls: 0.2833  mix_decode.d1.loss_mask: 0.6507  mix_decode.d1.loss_dice: 0.9977  mix_decode.d2.loss_cls: 0.3652  mix_decode.d2.loss_mask: 0.6331  mix_decode.d2.loss_dice: 0.9606  mix_decode.d3.loss_cls: 0.3312  mix_decode.d3.loss_mask: 0.6930  mix_decode.d3.loss_dice: 1.0101  mix_decode.d4.loss_cls: 0.3431  mix_decode.d4.loss_mask: 0.6786  mix_decode.d4.loss_dice: 0.9950  mix_decode.d5.loss_cls: 0.3134  mix_decode.d5.loss_mask: 0.7065  mix_decode.d5.loss_dice: 1.0186  mix_decode.d6.loss_cls: 0.3132  mix_decode.d6.loss_mask: 0.6904  mix_decode.d6.loss_dice: 1.0309  mix_decode.d7.loss_cls: 0.3122  mix_decode.d7.loss_mask: 0.6547  mix_decode.d7.loss_dice: 1.0373  mix_decode.d8.loss_cls: 0.3311  mix_decode.d8.loss_mask: 0.6782  mix_decode.d8.loss_dice: 1.0189
2025/03/28 18:17:33 - mmengine - INFO - Iter(train) [ 4150/20000]  base_lr: 8.1118e-05 lr: 8.1118e-05  eta: 5:08:08  time: 1.9654  data_time: 0.0282  memory: 10747  loss: 65.8999  decode.loss_cls: 0.8096  decode.loss_mask: 1.7007  decode.loss_dice: 1.8525  decode.d0.loss_cls: 0.9006  decode.d0.loss_mask: 1.6651  decode.d0.loss_dice: 1.8829  decode.d1.loss_cls: 0.7273  decode.d1.loss_mask: 1.6504  decode.d1.loss_dice: 1.7903  decode.d2.loss_cls: 0.8951  decode.d2.loss_mask: 1.6062  decode.d2.loss_dice: 1.7665  decode.d3.loss_cls: 0.8586  decode.d3.loss_mask: 1.6317  decode.d3.loss_dice: 1.7881  decode.d4.loss_cls: 0.7760  decode.d4.loss_mask: 1.7620  decode.d4.loss_dice: 1.8726  decode.d5.loss_cls: 0.8926  decode.d5.loss_mask: 1.5811  decode.d5.loss_dice: 1.8039  decode.d6.loss_cls: 0.8750  decode.d6.loss_mask: 1.5824  decode.d6.loss_dice: 1.8250  decode.d7.loss_cls: 0.7836  decode.d7.loss_mask: 1.6594  decode.d7.loss_dice: 1.8515  decode.d8.loss_cls: 0.7813  decode.d8.loss_mask: 1.7342  decode.d8.loss_dice: 1.8682  mix_decode.loss_cls: 0.3681  mix_decode.loss_mask: 0.8260  mix_decode.loss_dice: 1.0938  mix_decode.d0.loss_cls: 0.4395  mix_decode.d0.loss_mask: 0.7628  mix_decode.d0.loss_dice: 1.0906  mix_decode.d1.loss_cls: 0.3641  mix_decode.d1.loss_mask: 0.7531  mix_decode.d1.loss_dice: 1.0419  mix_decode.d2.loss_cls: 0.3026  mix_decode.d2.loss_mask: 0.7700  mix_decode.d2.loss_dice: 1.0847  mix_decode.d3.loss_cls: 0.3552  mix_decode.d3.loss_mask: 0.7919  mix_decode.d3.loss_dice: 1.1103  mix_decode.d4.loss_cls: 0.3927  mix_decode.d4.loss_mask: 0.8093  mix_decode.d4.loss_dice: 1.1001  mix_decode.d5.loss_cls: 0.4289  mix_decode.d5.loss_mask: 0.7874  mix_decode.d5.loss_dice: 1.1043  mix_decode.d6.loss_cls: 0.3965  mix_decode.d6.loss_mask: 0.8179  mix_decode.d6.loss_dice: 1.0940  mix_decode.d7.loss_cls: 0.3904  mix_decode.d7.loss_mask: 0.8291  mix_decode.d7.loss_dice: 1.0965  mix_decode.d8.loss_cls: 0.3965  mix_decode.d8.loss_mask: 0.8241  mix_decode.d8.loss_dice: 1.1035
2025/03/28 18:19:05 - mmengine - INFO - Iter(train) [ 4200/20000]  base_lr: 8.0888e-05 lr: 8.0888e-05  eta: 5:09:13  time: 1.6295  data_time: 0.0330  memory: 10737  loss: 54.5221  decode.loss_cls: 0.5123  decode.loss_mask: 1.6574  decode.loss_dice: 1.5189  decode.d0.loss_cls: 0.7138  decode.d0.loss_mask: 1.5967  decode.d0.loss_dice: 1.4825  decode.d1.loss_cls: 0.4951  decode.d1.loss_mask: 1.5719  decode.d1.loss_dice: 1.4807  decode.d2.loss_cls: 0.4609  decode.d2.loss_mask: 1.5337  decode.d2.loss_dice: 1.5003  decode.d3.loss_cls: 0.5027  decode.d3.loss_mask: 1.5714  decode.d3.loss_dice: 1.4569  decode.d4.loss_cls: 0.4120  decode.d4.loss_mask: 1.5805  decode.d4.loss_dice: 1.4693  decode.d5.loss_cls: 0.4661  decode.d5.loss_mask: 1.6104  decode.d5.loss_dice: 1.5073  decode.d6.loss_cls: 0.5400  decode.d6.loss_mask: 1.6432  decode.d6.loss_dice: 1.5335  decode.d7.loss_cls: 0.3935  decode.d7.loss_mask: 1.7206  decode.d7.loss_dice: 1.5794  decode.d8.loss_cls: 0.3822  decode.d8.loss_mask: 1.7605  decode.d8.loss_dice: 1.5582  mix_decode.loss_cls: 0.3262  mix_decode.loss_mask: 0.6619  mix_decode.loss_dice: 0.8773  mix_decode.d0.loss_cls: 0.3763  mix_decode.d0.loss_mask: 0.6468  mix_decode.d0.loss_dice: 0.8829  mix_decode.d1.loss_cls: 0.2998  mix_decode.d1.loss_mask: 0.6087  mix_decode.d1.loss_dice: 0.8569  mix_decode.d2.loss_cls: 0.2526  mix_decode.d2.loss_mask: 0.6612  mix_decode.d2.loss_dice: 0.8764  mix_decode.d3.loss_cls: 0.2759  mix_decode.d3.loss_mask: 0.6598  mix_decode.d3.loss_dice: 0.8616  mix_decode.d4.loss_cls: 0.2940  mix_decode.d4.loss_mask: 0.6446  mix_decode.d4.loss_dice: 0.8780  mix_decode.d5.loss_cls: 0.2944  mix_decode.d5.loss_mask: 0.6390  mix_decode.d5.loss_dice: 0.8810  mix_decode.d6.loss_cls: 0.3320  mix_decode.d6.loss_mask: 0.6225  mix_decode.d6.loss_dice: 0.8794  mix_decode.d7.loss_cls: 0.2846  mix_decode.d7.loss_mask: 0.6506  mix_decode.d7.loss_dice: 0.9182  mix_decode.d8.loss_cls: 0.3103  mix_decode.d8.loss_mask: 0.6707  mix_decode.d8.loss_dice: 0.8869
2025/03/28 18:20:39 - mmengine - INFO - Iter(train) [ 4250/20000]  base_lr: 8.0658e-05 lr: 8.0658e-05  eta: 5:10:28  time: 1.9199  data_time: 0.0308  memory: 10738  loss: 65.2307  decode.loss_cls: 0.4806  decode.loss_mask: 1.8977  decode.loss_dice: 1.8892  decode.d0.loss_cls: 0.7868  decode.d0.loss_mask: 1.7731  decode.d0.loss_dice: 1.8125  decode.d1.loss_cls: 0.6153  decode.d1.loss_mask: 1.8790  decode.d1.loss_dice: 1.8160  decode.d2.loss_cls: 0.6348  decode.d2.loss_mask: 1.9229  decode.d2.loss_dice: 1.8323  decode.d3.loss_cls: 0.6223  decode.d3.loss_mask: 1.8629  decode.d3.loss_dice: 1.7648  decode.d4.loss_cls: 0.6639  decode.d4.loss_mask: 1.8525  decode.d4.loss_dice: 1.7614  decode.d5.loss_cls: 0.7451  decode.d5.loss_mask: 1.7871  decode.d5.loss_dice: 1.7717  decode.d6.loss_cls: 0.7301  decode.d6.loss_mask: 1.8119  decode.d6.loss_dice: 1.7911  decode.d7.loss_cls: 0.6257  decode.d7.loss_mask: 1.9424  decode.d7.loss_dice: 1.9113  decode.d8.loss_cls: 0.5466  decode.d8.loss_mask: 2.0139  decode.d8.loss_dice: 1.9941  mix_decode.loss_cls: 0.3014  mix_decode.loss_mask: 0.9891  mix_decode.loss_dice: 0.9629  mix_decode.d0.loss_cls: 0.3762  mix_decode.d0.loss_mask: 0.9074  mix_decode.d0.loss_dice: 0.9044  mix_decode.d1.loss_cls: 0.2857  mix_decode.d1.loss_mask: 0.9340  mix_decode.d1.loss_dice: 0.9026  mix_decode.d2.loss_cls: 0.2721  mix_decode.d2.loss_mask: 0.9175  mix_decode.d2.loss_dice: 0.9279  mix_decode.d3.loss_cls: 0.2931  mix_decode.d3.loss_mask: 0.8844  mix_decode.d3.loss_dice: 0.8907  mix_decode.d4.loss_cls: 0.2992  mix_decode.d4.loss_mask: 0.8927  mix_decode.d4.loss_dice: 0.8987  mix_decode.d5.loss_cls: 0.3434  mix_decode.d5.loss_mask: 0.8748  mix_decode.d5.loss_dice: 0.8989  mix_decode.d6.loss_cls: 0.3883  mix_decode.d6.loss_mask: 0.8999  mix_decode.d6.loss_dice: 0.9223  mix_decode.d7.loss_cls: 0.3478  mix_decode.d7.loss_mask: 0.9016  mix_decode.d7.loss_dice: 0.9534  mix_decode.d8.loss_cls: 0.3135  mix_decode.d8.loss_mask: 0.9795  mix_decode.d8.loss_dice: 1.0281
2025/03/28 18:22:14 - mmengine - INFO - Iter(train) [ 4300/20000]  base_lr: 8.0427e-05 lr: 8.0427e-05  eta: 5:11:40  time: 1.8761  data_time: 0.0277  memory: 10752  loss: 66.3809  decode.loss_cls: 0.7944  decode.loss_mask: 1.6365  decode.loss_dice: 2.0238  decode.d0.loss_cls: 0.7628  decode.d0.loss_mask: 1.7590  decode.d0.loss_dice: 2.0612  decode.d1.loss_cls: 0.7040  decode.d1.loss_mask: 1.7329  decode.d1.loss_dice: 2.0284  decode.d2.loss_cls: 0.7170  decode.d2.loss_mask: 1.6615  decode.d2.loss_dice: 1.9975  decode.d3.loss_cls: 0.7144  decode.d3.loss_mask: 1.6592  decode.d3.loss_dice: 2.0102  decode.d4.loss_cls: 0.7347  decode.d4.loss_mask: 1.6692  decode.d4.loss_dice: 1.9741  decode.d5.loss_cls: 0.7808  decode.d5.loss_mask: 1.6424  decode.d5.loss_dice: 1.9733  decode.d6.loss_cls: 0.8591  decode.d6.loss_mask: 1.6500  decode.d6.loss_dice: 1.9730  decode.d7.loss_cls: 0.7602  decode.d7.loss_mask: 1.6782  decode.d7.loss_dice: 1.9682  decode.d8.loss_cls: 0.7543  decode.d8.loss_mask: 1.6505  decode.d8.loss_dice: 1.9627  mix_decode.loss_cls: 0.3941  mix_decode.loss_mask: 0.8137  mix_decode.loss_dice: 0.9968  mix_decode.d0.loss_cls: 0.3916  mix_decode.d0.loss_mask: 0.8286  mix_decode.d0.loss_dice: 1.0143  mix_decode.d1.loss_cls: 0.3953  mix_decode.d1.loss_mask: 0.7858  mix_decode.d1.loss_dice: 0.9726  mix_decode.d2.loss_cls: 0.4088  mix_decode.d2.loss_mask: 0.7610  mix_decode.d2.loss_dice: 0.9861  mix_decode.d3.loss_cls: 0.4461  mix_decode.d3.loss_mask: 0.7890  mix_decode.d3.loss_dice: 0.9925  mix_decode.d4.loss_cls: 0.4123  mix_decode.d4.loss_mask: 0.7979  mix_decode.d4.loss_dice: 0.9772  mix_decode.d5.loss_cls: 0.4323  mix_decode.d5.loss_mask: 0.8473  mix_decode.d5.loss_dice: 1.0029  mix_decode.d6.loss_cls: 0.4377  mix_decode.d6.loss_mask: 0.7991  mix_decode.d6.loss_dice: 0.9733  mix_decode.d7.loss_cls: 0.4484  mix_decode.d7.loss_mask: 0.8084  mix_decode.d7.loss_dice: 0.9585  mix_decode.d8.loss_cls: 0.4236  mix_decode.d8.loss_mask: 0.8059  mix_decode.d8.loss_dice: 0.9866
2025/03/28 18:23:49 - mmengine - INFO - Iter(train) [ 4350/20000]  base_lr: 8.0197e-05 lr: 8.0197e-05  eta: 5:12:48  time: 1.9675  data_time: 0.0265  memory: 10733  loss: 61.7796  decode.loss_cls: 0.6834  decode.loss_mask: 1.6517  decode.loss_dice: 1.9144  decode.d0.loss_cls: 0.6703  decode.d0.loss_mask: 1.6530  decode.d0.loss_dice: 1.8538  decode.d1.loss_cls: 0.5518  decode.d1.loss_mask: 1.6158  decode.d1.loss_dice: 1.8738  decode.d2.loss_cls: 0.5211  decode.d2.loss_mask: 1.6168  decode.d2.loss_dice: 1.8056  decode.d3.loss_cls: 0.5104  decode.d3.loss_mask: 1.5662  decode.d3.loss_dice: 1.8118  decode.d4.loss_cls: 0.5535  decode.d4.loss_mask: 1.5685  decode.d4.loss_dice: 1.8707  decode.d5.loss_cls: 0.5892  decode.d5.loss_mask: 1.5831  decode.d5.loss_dice: 1.8502  decode.d6.loss_cls: 0.7040  decode.d6.loss_mask: 1.5442  decode.d6.loss_dice: 1.8444  decode.d7.loss_cls: 0.5540  decode.d7.loss_mask: 1.5929  decode.d7.loss_dice: 1.9375  decode.d8.loss_cls: 0.6131  decode.d8.loss_mask: 1.6205  decode.d8.loss_dice: 1.8946  mix_decode.loss_cls: 0.3714  mix_decode.loss_mask: 0.7801  mix_decode.loss_dice: 0.9646  mix_decode.d0.loss_cls: 0.3219  mix_decode.d0.loss_mask: 0.8396  mix_decode.d0.loss_dice: 1.0184  mix_decode.d1.loss_cls: 0.2919  mix_decode.d1.loss_mask: 0.7694  mix_decode.d1.loss_dice: 0.9854  mix_decode.d2.loss_cls: 0.3097  mix_decode.d2.loss_mask: 0.7749  mix_decode.d2.loss_dice: 0.9451  mix_decode.d3.loss_cls: 0.3173  mix_decode.d3.loss_mask: 0.8124  mix_decode.d3.loss_dice: 0.9746  mix_decode.d4.loss_cls: 0.3668  mix_decode.d4.loss_mask: 0.7818  mix_decode.d4.loss_dice: 0.9422  mix_decode.d5.loss_cls: 0.3158  mix_decode.d5.loss_mask: 0.8593  mix_decode.d5.loss_dice: 0.9822  mix_decode.d6.loss_cls: 0.3789  mix_decode.d6.loss_mask: 0.7718  mix_decode.d6.loss_dice: 0.9668  mix_decode.d7.loss_cls: 0.4142  mix_decode.d7.loss_mask: 0.7874  mix_decode.d7.loss_dice: 0.9981  mix_decode.d8.loss_cls: 0.3620  mix_decode.d8.loss_mask: 0.7748  mix_decode.d8.loss_dice: 0.9803
2025/03/28 18:25:24 - mmengine - INFO - Iter(train) [ 4400/20000]  base_lr: 7.9966e-05 lr: 7.9966e-05  eta: 5:13:52  time: 1.8593  data_time: 0.0267  memory: 10750  loss: 58.0653  decode.loss_cls: 0.5187  decode.loss_mask: 1.5603  decode.loss_dice: 1.5055  decode.d0.loss_cls: 0.7186  decode.d0.loss_mask: 1.6209  decode.d0.loss_dice: 1.6523  decode.d1.loss_cls: 0.5616  decode.d1.loss_mask: 1.6199  decode.d1.loss_dice: 1.5277  decode.d2.loss_cls: 0.4863  decode.d2.loss_mask: 1.6169  decode.d2.loss_dice: 1.5970  decode.d3.loss_cls: 0.5487  decode.d3.loss_mask: 1.6199  decode.d3.loss_dice: 1.5927  decode.d4.loss_cls: 0.4787  decode.d4.loss_mask: 1.6644  decode.d4.loss_dice: 1.6063  decode.d5.loss_cls: 0.5034  decode.d5.loss_mask: 1.5904  decode.d5.loss_dice: 1.6207  decode.d6.loss_cls: 0.5969  decode.d6.loss_mask: 1.4735  decode.d6.loss_dice: 1.5801  decode.d7.loss_cls: 0.4817  decode.d7.loss_mask: 1.6579  decode.d7.loss_dice: 1.6464  decode.d8.loss_cls: 0.6145  decode.d8.loss_mask: 1.5199  decode.d8.loss_dice: 1.5268  mix_decode.loss_cls: 0.2726  mix_decode.loss_mask: 0.9174  mix_decode.loss_dice: 0.9021  mix_decode.d0.loss_cls: 0.3716  mix_decode.d0.loss_mask: 0.8907  mix_decode.d0.loss_dice: 0.9309  mix_decode.d1.loss_cls: 0.3014  mix_decode.d1.loss_mask: 0.8918  mix_decode.d1.loss_dice: 0.8545  mix_decode.d2.loss_cls: 0.3083  mix_decode.d2.loss_mask: 0.8687  mix_decode.d2.loss_dice: 0.8494  mix_decode.d3.loss_cls: 0.3126  mix_decode.d3.loss_mask: 0.9098  mix_decode.d3.loss_dice: 0.8666  mix_decode.d4.loss_cls: 0.2904  mix_decode.d4.loss_mask: 0.9055  mix_decode.d4.loss_dice: 0.8935  mix_decode.d5.loss_cls: 0.3057  mix_decode.d5.loss_mask: 0.8612  mix_decode.d5.loss_dice: 0.8982  mix_decode.d6.loss_cls: 0.3446  mix_decode.d6.loss_mask: 0.8123  mix_decode.d6.loss_dice: 0.8540  mix_decode.d7.loss_cls: 0.2993  mix_decode.d7.loss_mask: 0.8663  mix_decode.d7.loss_dice: 0.8729  mix_decode.d8.loss_cls: 0.2667  mix_decode.d8.loss_mask: 0.9149  mix_decode.d8.loss_dice: 0.9230
2025/03/28 18:26:58 - mmengine - INFO - Iter(train) [ 4450/20000]  base_lr: 7.9735e-05 lr: 7.9735e-05  eta: 5:14:49  time: 1.8328  data_time: 0.0228  memory: 10716  loss: 62.8987  decode.loss_cls: 0.7398  decode.loss_mask: 1.7568  decode.loss_dice: 1.7419  decode.d0.loss_cls: 0.8087  decode.d0.loss_mask: 1.7961  decode.d0.loss_dice: 1.8406  decode.d1.loss_cls: 0.8225  decode.d1.loss_mask: 1.7170  decode.d1.loss_dice: 1.7544  decode.d2.loss_cls: 0.6970  decode.d2.loss_mask: 1.8260  decode.d2.loss_dice: 1.8097  decode.d3.loss_cls: 0.7825  decode.d3.loss_mask: 1.7471  decode.d3.loss_dice: 1.6996  decode.d4.loss_cls: 0.7067  decode.d4.loss_mask: 1.8515  decode.d4.loss_dice: 1.7940  decode.d5.loss_cls: 0.9020  decode.d5.loss_mask: 1.7101  decode.d5.loss_dice: 1.8182  decode.d6.loss_cls: 0.7991  decode.d6.loss_mask: 1.8087  decode.d6.loss_dice: 1.7604  decode.d7.loss_cls: 0.8705  decode.d7.loss_mask: 1.7240  decode.d7.loss_dice: 1.7821  decode.d8.loss_cls: 0.7324  decode.d8.loss_mask: 1.8053  decode.d8.loss_dice: 1.7614  mix_decode.loss_cls: 0.3626  mix_decode.loss_mask: 0.7418  mix_decode.loss_dice: 0.8785  mix_decode.d0.loss_cls: 0.3882  mix_decode.d0.loss_mask: 0.7266  mix_decode.d0.loss_dice: 0.8811  mix_decode.d1.loss_cls: 0.3670  mix_decode.d1.loss_mask: 0.7314  mix_decode.d1.loss_dice: 0.8465  mix_decode.d2.loss_cls: 0.3381  mix_decode.d2.loss_mask: 0.7173  mix_decode.d2.loss_dice: 0.8497  mix_decode.d3.loss_cls: 0.3920  mix_decode.d3.loss_mask: 0.7321  mix_decode.d3.loss_dice: 0.8225  mix_decode.d4.loss_cls: 0.3207  mix_decode.d4.loss_mask: 0.7237  mix_decode.d4.loss_dice: 0.8245  mix_decode.d5.loss_cls: 0.4169  mix_decode.d5.loss_mask: 0.7175  mix_decode.d5.loss_dice: 0.8217  mix_decode.d6.loss_cls: 0.4272  mix_decode.d6.loss_mask: 0.7374  mix_decode.d6.loss_dice: 0.8646  mix_decode.d7.loss_cls: 0.3964  mix_decode.d7.loss_mask: 0.7224  mix_decode.d7.loss_dice: 0.8194  mix_decode.d8.loss_cls: 0.3552  mix_decode.d8.loss_mask: 0.7528  mix_decode.d8.loss_dice: 0.8569
2025/03/28 18:28:34 - mmengine - INFO - Iter(train) [ 4500/20000]  base_lr: 7.9504e-05 lr: 7.9504e-05  eta: 5:15:49  time: 1.9979  data_time: 0.0271  memory: 10725  loss: 55.2692  decode.loss_cls: 0.5504  decode.loss_mask: 1.6282  decode.loss_dice: 1.7687  decode.d0.loss_cls: 0.6059  decode.d0.loss_mask: 1.5902  decode.d0.loss_dice: 1.8154  decode.d1.loss_cls: 0.4801  decode.d1.loss_mask: 1.5841  decode.d1.loss_dice: 1.7770  decode.d2.loss_cls: 0.4953  decode.d2.loss_mask: 1.6264  decode.d2.loss_dice: 1.7773  decode.d3.loss_cls: 0.6045  decode.d3.loss_mask: 1.5136  decode.d3.loss_dice: 1.7378  decode.d4.loss_cls: 0.5162  decode.d4.loss_mask: 1.6033  decode.d4.loss_dice: 1.7417  decode.d5.loss_cls: 0.5755  decode.d5.loss_mask: 1.5802  decode.d5.loss_dice: 1.6984  decode.d6.loss_cls: 0.5939  decode.d6.loss_mask: 1.5851  decode.d6.loss_dice: 1.7000  decode.d7.loss_cls: 0.4692  decode.d7.loss_mask: 1.6272  decode.d7.loss_dice: 1.7766  decode.d8.loss_cls: 0.5567  decode.d8.loss_mask: 1.5729  decode.d8.loss_dice: 1.6989  mix_decode.loss_cls: 0.2333  mix_decode.loss_mask: 0.6571  mix_decode.loss_dice: 0.7810  mix_decode.d0.loss_cls: 0.3330  mix_decode.d0.loss_mask: 0.6324  mix_decode.d0.loss_dice: 0.7720  mix_decode.d1.loss_cls: 0.2444  mix_decode.d1.loss_mask: 0.6142  mix_decode.d1.loss_dice: 0.7423  mix_decode.d2.loss_cls: 0.2484  mix_decode.d2.loss_mask: 0.6034  mix_decode.d2.loss_dice: 0.7387  mix_decode.d3.loss_cls: 0.2446  mix_decode.d3.loss_mask: 0.6092  mix_decode.d3.loss_dice: 0.7506  mix_decode.d4.loss_cls: 0.2439  mix_decode.d4.loss_mask: 0.6254  mix_decode.d4.loss_dice: 0.7586  mix_decode.d5.loss_cls: 0.2671  mix_decode.d5.loss_mask: 0.6225  mix_decode.d5.loss_dice: 0.7215  mix_decode.d6.loss_cls: 0.2628  mix_decode.d6.loss_mask: 0.6142  mix_decode.d6.loss_dice: 0.7458  mix_decode.d7.loss_cls: 0.2507  mix_decode.d7.loss_mask: 0.6499  mix_decode.d7.loss_dice: 0.7856  mix_decode.d8.loss_cls: 0.2498  mix_decode.d8.loss_mask: 0.6449  mix_decode.d8.loss_dice: 0.7711
2025/03/28 18:30:09 - mmengine - INFO - Iter(train) [ 4550/20000]  base_lr: 7.9274e-05 lr: 7.9274e-05  eta: 5:16:41  time: 1.9627  data_time: 0.0252  memory: 10729  loss: 68.5259  decode.loss_cls: 0.9122  decode.loss_mask: 1.7596  decode.loss_dice: 1.8895  decode.d0.loss_cls: 1.0735  decode.d0.loss_mask: 1.8060  decode.d0.loss_dice: 1.9770  decode.d1.loss_cls: 1.0223  decode.d1.loss_mask: 1.7400  decode.d1.loss_dice: 1.8982  decode.d2.loss_cls: 0.9622  decode.d2.loss_mask: 1.8663  decode.d2.loss_dice: 1.8600  decode.d3.loss_cls: 1.0120  decode.d3.loss_mask: 1.8092  decode.d3.loss_dice: 1.8938  decode.d4.loss_cls: 0.9164  decode.d4.loss_mask: 1.8660  decode.d4.loss_dice: 1.9338  decode.d5.loss_cls: 1.1072  decode.d5.loss_mask: 1.7365  decode.d5.loss_dice: 1.8502  decode.d6.loss_cls: 1.0135  decode.d6.loss_mask: 1.8461  decode.d6.loss_dice: 1.8847  decode.d7.loss_cls: 0.9842  decode.d7.loss_mask: 1.8235  decode.d7.loss_dice: 1.9384  decode.d8.loss_cls: 0.9247  decode.d8.loss_mask: 1.8224  decode.d8.loss_dice: 1.8931  mix_decode.loss_cls: 0.4007  mix_decode.loss_mask: 0.7520  mix_decode.loss_dice: 0.9429  mix_decode.d0.loss_cls: 0.3648  mix_decode.d0.loss_mask: 0.8458  mix_decode.d0.loss_dice: 1.0112  mix_decode.d1.loss_cls: 0.4704  mix_decode.d1.loss_mask: 0.7493  mix_decode.d1.loss_dice: 0.9776  mix_decode.d2.loss_cls: 0.4520  mix_decode.d2.loss_mask: 0.7344  mix_decode.d2.loss_dice: 0.9662  mix_decode.d3.loss_cls: 0.4467  mix_decode.d3.loss_mask: 0.7637  mix_decode.d3.loss_dice: 0.9557  mix_decode.d4.loss_cls: 0.4060  mix_decode.d4.loss_mask: 0.7760  mix_decode.d4.loss_dice: 0.9628  mix_decode.d5.loss_cls: 0.4414  mix_decode.d5.loss_mask: 0.7596  mix_decode.d5.loss_dice: 0.9750  mix_decode.d6.loss_cls: 0.3924  mix_decode.d6.loss_mask: 0.7458  mix_decode.d6.loss_dice: 0.9416  mix_decode.d7.loss_cls: 0.3766  mix_decode.d7.loss_mask: 0.7729  mix_decode.d7.loss_dice: 0.9678  mix_decode.d8.loss_cls: 0.4604  mix_decode.d8.loss_mask: 0.7459  mix_decode.d8.loss_dice: 0.9461
2025/03/28 18:31:43 - mmengine - INFO - Iter(train) [ 4600/20000]  base_lr: 7.9043e-05 lr: 7.9043e-05  eta: 5:17:31  time: 1.8702  data_time: 0.0281  memory: 10730  loss: 57.7049  decode.loss_cls: 0.5205  decode.loss_mask: 1.4719  decode.loss_dice: 1.8380  decode.d0.loss_cls: 0.7091  decode.d0.loss_mask: 1.5461  decode.d0.loss_dice: 1.8057  decode.d1.loss_cls: 0.5198  decode.d1.loss_mask: 1.4417  decode.d1.loss_dice: 1.7617  decode.d2.loss_cls: 0.5077  decode.d2.loss_mask: 1.4600  decode.d2.loss_dice: 1.8189  decode.d3.loss_cls: 0.5437  decode.d3.loss_mask: 1.4721  decode.d3.loss_dice: 1.8056  decode.d4.loss_cls: 0.5367  decode.d4.loss_mask: 1.4729  decode.d4.loss_dice: 1.8620  decode.d5.loss_cls: 0.5196  decode.d5.loss_mask: 1.4267  decode.d5.loss_dice: 1.8025  decode.d6.loss_cls: 0.6284  decode.d6.loss_mask: 1.4188  decode.d6.loss_dice: 1.7941  decode.d7.loss_cls: 0.5469  decode.d7.loss_mask: 1.4507  decode.d7.loss_dice: 1.8380  decode.d8.loss_cls: 0.5392  decode.d8.loss_mask: 1.4968  decode.d8.loss_dice: 1.8246  mix_decode.loss_cls: 0.3759  mix_decode.loss_mask: 0.6177  mix_decode.loss_dice: 0.9674  mix_decode.d0.loss_cls: 0.3932  mix_decode.d0.loss_mask: 0.6431  mix_decode.d0.loss_dice: 0.9923  mix_decode.d1.loss_cls: 0.3372  mix_decode.d1.loss_mask: 0.6554  mix_decode.d1.loss_dice: 0.9545  mix_decode.d2.loss_cls: 0.3383  mix_decode.d2.loss_mask: 0.6022  mix_decode.d2.loss_dice: 0.9464  mix_decode.d3.loss_cls: 0.3465  mix_decode.d3.loss_mask: 0.6327  mix_decode.d3.loss_dice: 0.9539  mix_decode.d4.loss_cls: 0.3342  mix_decode.d4.loss_mask: 0.6490  mix_decode.d4.loss_dice: 0.9609  mix_decode.d5.loss_cls: 0.3432  mix_decode.d5.loss_mask: 0.5771  mix_decode.d5.loss_dice: 0.9203  mix_decode.d6.loss_cls: 0.3384  mix_decode.d6.loss_mask: 0.6099  mix_decode.d6.loss_dice: 0.9421  mix_decode.d7.loss_cls: 0.3585  mix_decode.d7.loss_mask: 0.6695  mix_decode.d7.loss_dice: 0.9449  mix_decode.d8.loss_cls: 0.3843  mix_decode.d8.loss_mask: 0.6031  mix_decode.d8.loss_dice: 0.9324
2025/03/28 18:33:19 - mmengine - INFO - Iter(train) [ 4650/20000]  base_lr: 7.8812e-05 lr: 7.8812e-05  eta: 5:18:21  time: 1.9882  data_time: 0.0264  memory: 10716  loss: 57.4117  decode.loss_cls: 0.5297  decode.loss_mask: 1.5923  decode.loss_dice: 1.8621  decode.d0.loss_cls: 0.7018  decode.d0.loss_mask: 1.5444  decode.d0.loss_dice: 1.8456  decode.d1.loss_cls: 0.5555  decode.d1.loss_mask: 1.5142  decode.d1.loss_dice: 1.7881  decode.d2.loss_cls: 0.5893  decode.d2.loss_mask: 1.4513  decode.d2.loss_dice: 1.7431  decode.d3.loss_cls: 0.5924  decode.d3.loss_mask: 1.5393  decode.d3.loss_dice: 1.8005  decode.d4.loss_cls: 0.5129  decode.d4.loss_mask: 1.5615  decode.d4.loss_dice: 1.8216  decode.d5.loss_cls: 0.5953  decode.d5.loss_mask: 1.5431  decode.d5.loss_dice: 1.7995  decode.d6.loss_cls: 0.6657  decode.d6.loss_mask: 1.4997  decode.d6.loss_dice: 1.7700  decode.d7.loss_cls: 0.5768  decode.d7.loss_mask: 1.6079  decode.d7.loss_dice: 1.8222  decode.d8.loss_cls: 0.5621  decode.d8.loss_mask: 1.5414  decode.d8.loss_dice: 1.8324  mix_decode.loss_cls: 0.2077  mix_decode.loss_mask: 0.6401  mix_decode.loss_dice: 0.9567  mix_decode.d0.loss_cls: 0.2708  mix_decode.d0.loss_mask: 0.6645  mix_decode.d0.loss_dice: 0.9858  mix_decode.d1.loss_cls: 0.2192  mix_decode.d1.loss_mask: 0.6634  mix_decode.d1.loss_dice: 0.9301  mix_decode.d2.loss_cls: 0.2301  mix_decode.d2.loss_mask: 0.6296  mix_decode.d2.loss_dice: 0.9252  mix_decode.d3.loss_cls: 0.2208  mix_decode.d3.loss_mask: 0.6579  mix_decode.d3.loss_dice: 0.9373  mix_decode.d4.loss_cls: 0.2198  mix_decode.d4.loss_mask: 0.6546  mix_decode.d4.loss_dice: 0.9236  mix_decode.d5.loss_cls: 0.2151  mix_decode.d5.loss_mask: 0.6226  mix_decode.d5.loss_dice: 0.9146  mix_decode.d6.loss_cls: 0.2503  mix_decode.d6.loss_mask: 0.6190  mix_decode.d6.loss_dice: 0.9196  mix_decode.d7.loss_cls: 0.1968  mix_decode.d7.loss_mask: 0.6445  mix_decode.d7.loss_dice: 0.9342  mix_decode.d8.loss_cls: 0.1668  mix_decode.d8.loss_mask: 0.6603  mix_decode.d8.loss_dice: 0.9692
2025/03/28 18:34:55 - mmengine - INFO - Iter(train) [ 4700/20000]  base_lr: 7.8581e-05 lr: 7.8581e-05  eta: 5:19:08  time: 1.9589  data_time: 0.0262  memory: 10723  loss: 62.8372  decode.loss_cls: 0.5406  decode.loss_mask: 1.7462  decode.loss_dice: 1.9860  decode.d0.loss_cls: 0.5449  decode.d0.loss_mask: 1.8160  decode.d0.loss_dice: 2.0315  decode.d1.loss_cls: 0.5590  decode.d1.loss_mask: 1.7912  decode.d1.loss_dice: 1.9651  decode.d2.loss_cls: 0.5318  decode.d2.loss_mask: 1.7701  decode.d2.loss_dice: 1.9343  decode.d3.loss_cls: 0.5584  decode.d3.loss_mask: 1.7323  decode.d3.loss_dice: 1.9363  decode.d4.loss_cls: 0.5680  decode.d4.loss_mask: 1.6881  decode.d4.loss_dice: 1.9452  decode.d5.loss_cls: 0.5111  decode.d5.loss_mask: 1.7631  decode.d5.loss_dice: 1.9901  decode.d6.loss_cls: 0.5095  decode.d6.loss_mask: 1.7376  decode.d6.loss_dice: 1.9973  decode.d7.loss_cls: 0.3766  decode.d7.loss_mask: 1.8166  decode.d7.loss_dice: 2.0490  decode.d8.loss_cls: 0.5229  decode.d8.loss_mask: 1.7963  decode.d8.loss_dice: 1.9302  mix_decode.loss_cls: 0.2716  mix_decode.loss_mask: 0.6615  mix_decode.loss_dice: 1.0422  mix_decode.d0.loss_cls: 0.3338  mix_decode.d0.loss_mask: 0.6941  mix_decode.d0.loss_dice: 1.0909  mix_decode.d1.loss_cls: 0.2597  mix_decode.d1.loss_mask: 0.6593  mix_decode.d1.loss_dice: 1.0736  mix_decode.d2.loss_cls: 0.2871  mix_decode.d2.loss_mask: 0.7149  mix_decode.d2.loss_dice: 1.0829  mix_decode.d3.loss_cls: 0.2527  mix_decode.d3.loss_mask: 0.6782  mix_decode.d3.loss_dice: 1.0785  mix_decode.d4.loss_cls: 0.2194  mix_decode.d4.loss_mask: 0.6913  mix_decode.d4.loss_dice: 1.0936  mix_decode.d5.loss_cls: 0.2721  mix_decode.d5.loss_mask: 0.6416  mix_decode.d5.loss_dice: 1.0625  mix_decode.d6.loss_cls: 0.2613  mix_decode.d6.loss_mask: 0.7137  mix_decode.d6.loss_dice: 1.0792  mix_decode.d7.loss_cls: 0.2336  mix_decode.d7.loss_mask: 0.6774  mix_decode.d7.loss_dice: 1.0780  mix_decode.d8.loss_cls: 0.2326  mix_decode.d8.loss_mask: 0.6815  mix_decode.d8.loss_dice: 1.0732
2025/03/28 18:36:30 - mmengine - INFO - Iter(train) [ 4750/20000]  base_lr: 7.8349e-05 lr: 7.8349e-05  eta: 5:19:51  time: 1.9649  data_time: 0.0288  memory: 10736  loss: 55.4298  decode.loss_cls: 0.5210  decode.loss_mask: 1.5766  decode.loss_dice: 1.8013  decode.d0.loss_cls: 0.6202  decode.d0.loss_mask: 1.5366  decode.d0.loss_dice: 1.7906  decode.d1.loss_cls: 0.5274  decode.d1.loss_mask: 1.5859  decode.d1.loss_dice: 1.7717  decode.d2.loss_cls: 0.4848  decode.d2.loss_mask: 1.5484  decode.d2.loss_dice: 1.7772  decode.d3.loss_cls: 0.5180  decode.d3.loss_mask: 1.5373  decode.d3.loss_dice: 1.7293  decode.d4.loss_cls: 0.5243  decode.d4.loss_mask: 1.5477  decode.d4.loss_dice: 1.7875  decode.d5.loss_cls: 0.4409  decode.d5.loss_mask: 1.5615  decode.d5.loss_dice: 1.8347  decode.d6.loss_cls: 0.6011  decode.d6.loss_mask: 1.5113  decode.d6.loss_dice: 1.7043  decode.d7.loss_cls: 0.4665  decode.d7.loss_mask: 1.5658  decode.d7.loss_dice: 1.7817  decode.d8.loss_cls: 0.5455  decode.d8.loss_mask: 1.5164  decode.d8.loss_dice: 1.7289  mix_decode.loss_cls: 0.2572  mix_decode.loss_mask: 0.6162  mix_decode.loss_dice: 0.8363  mix_decode.d0.loss_cls: 0.2565  mix_decode.d0.loss_mask: 0.6512  mix_decode.d0.loss_dice: 0.8675  mix_decode.d1.loss_cls: 0.2171  mix_decode.d1.loss_mask: 0.6664  mix_decode.d1.loss_dice: 0.8292  mix_decode.d2.loss_cls: 0.2343  mix_decode.d2.loss_mask: 0.6159  mix_decode.d2.loss_dice: 0.8230  mix_decode.d3.loss_cls: 0.2302  mix_decode.d3.loss_mask: 0.6375  mix_decode.d3.loss_dice: 0.8344  mix_decode.d4.loss_cls: 0.2400  mix_decode.d4.loss_mask: 0.6502  mix_decode.d4.loss_dice: 0.8341  mix_decode.d5.loss_cls: 0.1957  mix_decode.d5.loss_mask: 0.6288  mix_decode.d5.loss_dice: 0.8034  mix_decode.d6.loss_cls: 0.2598  mix_decode.d6.loss_mask: 0.6230  mix_decode.d6.loss_dice: 0.8065  mix_decode.d7.loss_cls: 0.2096  mix_decode.d7.loss_mask: 0.6257  mix_decode.d7.loss_dice: 0.8260  mix_decode.d8.loss_cls: 0.2624  mix_decode.d8.loss_mask: 0.6304  mix_decode.d8.loss_dice: 0.8169
2025/03/28 18:38:04 - mmengine - INFO - Iter(train) [ 4800/20000]  base_lr: 7.8118e-05 lr: 7.8118e-05  eta: 5:20:27  time: 1.8606  data_time: 0.0294  memory: 10741  loss: 59.2870  decode.loss_cls: 0.5807  decode.loss_mask: 1.8275  decode.loss_dice: 1.7554  decode.d0.loss_cls: 0.7044  decode.d0.loss_mask: 1.6970  decode.d0.loss_dice: 1.8050  decode.d1.loss_cls: 0.5957  decode.d1.loss_mask: 1.7017  decode.d1.loss_dice: 1.6991  decode.d2.loss_cls: 0.5923  decode.d2.loss_mask: 1.8389  decode.d2.loss_dice: 1.6863  decode.d3.loss_cls: 0.5622  decode.d3.loss_mask: 1.8933  decode.d3.loss_dice: 1.6769  decode.d4.loss_cls: 0.5987  decode.d4.loss_mask: 1.7950  decode.d4.loss_dice: 1.6572  decode.d5.loss_cls: 0.5633  decode.d5.loss_mask: 1.8914  decode.d5.loss_dice: 1.7186  decode.d6.loss_cls: 0.6922  decode.d6.loss_mask: 1.9003  decode.d6.loss_dice: 1.7106  decode.d7.loss_cls: 0.5946  decode.d7.loss_mask: 1.7801  decode.d7.loss_dice: 1.7624  decode.d8.loss_cls: 0.4892  decode.d8.loss_mask: 1.8246  decode.d8.loss_dice: 1.7261  mix_decode.loss_cls: 0.3377  mix_decode.loss_mask: 0.6453  mix_decode.loss_dice: 0.7961  mix_decode.d0.loss_cls: 0.2968  mix_decode.d0.loss_mask: 0.7045  mix_decode.d0.loss_dice: 0.8628  mix_decode.d1.loss_cls: 0.2519  mix_decode.d1.loss_mask: 0.6927  mix_decode.d1.loss_dice: 0.7771  mix_decode.d2.loss_cls: 0.2608  mix_decode.d2.loss_mask: 0.7092  mix_decode.d2.loss_dice: 0.8074  mix_decode.d3.loss_cls: 0.2471  mix_decode.d3.loss_mask: 0.7298  mix_decode.d3.loss_dice: 0.8117  mix_decode.d4.loss_cls: 0.3155  mix_decode.d4.loss_mask: 0.6694  mix_decode.d4.loss_dice: 0.7690  mix_decode.d5.loss_cls: 0.2665  mix_decode.d5.loss_mask: 0.6892  mix_decode.d5.loss_dice: 0.8156  mix_decode.d6.loss_cls: 0.2823  mix_decode.d6.loss_mask: 0.7597  mix_decode.d6.loss_dice: 0.8168  mix_decode.d7.loss_cls: 0.2960  mix_decode.d7.loss_mask: 0.7187  mix_decode.d7.loss_dice: 0.8323  mix_decode.d8.loss_cls: 0.2308  mix_decode.d8.loss_mask: 0.7398  mix_decode.d8.loss_dice: 0.8337
2025/03/28 18:39:40 - mmengine - INFO - Iter(train) [ 4850/20000]  base_lr: 7.7887e-05 lr: 7.7887e-05  eta: 5:21:05  time: 1.9522  data_time: 0.0273  memory: 10759  loss: 56.1269  decode.loss_cls: 0.5469  decode.loss_mask: 1.5440  decode.loss_dice: 1.7662  decode.d0.loss_cls: 0.5946  decode.d0.loss_mask: 1.6148  decode.d0.loss_dice: 1.8501  decode.d1.loss_cls: 0.5038  decode.d1.loss_mask: 1.5537  decode.d1.loss_dice: 1.7353  decode.d2.loss_cls: 0.5490  decode.d2.loss_mask: 1.5585  decode.d2.loss_dice: 1.7442  decode.d3.loss_cls: 0.5320  decode.d3.loss_mask: 1.5329  decode.d3.loss_dice: 1.7515  decode.d4.loss_cls: 0.4900  decode.d4.loss_mask: 1.5696  decode.d4.loss_dice: 1.7657  decode.d5.loss_cls: 0.5427  decode.d5.loss_mask: 1.5605  decode.d5.loss_dice: 1.7147  decode.d6.loss_cls: 0.5075  decode.d6.loss_mask: 1.5486  decode.d6.loss_dice: 1.7518  decode.d7.loss_cls: 0.4268  decode.d7.loss_mask: 1.6040  decode.d7.loss_dice: 1.7844  decode.d8.loss_cls: 0.4913  decode.d8.loss_mask: 1.5635  decode.d8.loss_dice: 1.7953  mix_decode.loss_cls: 0.2242  mix_decode.loss_mask: 0.7369  mix_decode.loss_dice: 0.8167  mix_decode.d0.loss_cls: 0.2571  mix_decode.d0.loss_mask: 0.7562  mix_decode.d0.loss_dice: 0.8741  mix_decode.d1.loss_cls: 0.1785  mix_decode.d1.loss_mask: 0.7498  mix_decode.d1.loss_dice: 0.8351  mix_decode.d2.loss_cls: 0.1968  mix_decode.d2.loss_mask: 0.6968  mix_decode.d2.loss_dice: 0.7995  mix_decode.d3.loss_cls: 0.2013  mix_decode.d3.loss_mask: 0.7223  mix_decode.d3.loss_dice: 0.8030  mix_decode.d4.loss_cls: 0.1983  mix_decode.d4.loss_mask: 0.7208  mix_decode.d4.loss_dice: 0.8111  mix_decode.d5.loss_cls: 0.1971  mix_decode.d5.loss_mask: 0.7313  mix_decode.d5.loss_dice: 0.8274  mix_decode.d6.loss_cls: 0.2368  mix_decode.d6.loss_mask: 0.7185  mix_decode.d6.loss_dice: 0.8231  mix_decode.d7.loss_cls: 0.2094  mix_decode.d7.loss_mask: 0.7318  mix_decode.d7.loss_dice: 0.8269  mix_decode.d8.loss_cls: 0.1983  mix_decode.d8.loss_mask: 0.7337  mix_decode.d8.loss_dice: 0.8202
2025/03/28 18:41:15 - mmengine - INFO - Iter(train) [ 4900/20000]  base_lr: 7.7655e-05 lr: 7.7655e-05  eta: 5:21:38  time: 1.8524  data_time: 0.0284  memory: 10740  loss: 57.2699  decode.loss_cls: 0.6384  decode.loss_mask: 1.5050  decode.loss_dice: 1.6441  decode.d0.loss_cls: 0.7997  decode.d0.loss_mask: 1.4351  decode.d0.loss_dice: 1.6620  decode.d1.loss_cls: 0.6912  decode.d1.loss_mask: 1.4445  decode.d1.loss_dice: 1.5947  decode.d2.loss_cls: 0.6779  decode.d2.loss_mask: 1.5062  decode.d2.loss_dice: 1.6473  decode.d3.loss_cls: 0.6988  decode.d3.loss_mask: 1.4265  decode.d3.loss_dice: 1.6326  decode.d4.loss_cls: 0.6863  decode.d4.loss_mask: 1.5033  decode.d4.loss_dice: 1.6783  decode.d5.loss_cls: 0.7292  decode.d5.loss_mask: 1.4938  decode.d5.loss_dice: 1.6931  decode.d6.loss_cls: 0.7412  decode.d6.loss_mask: 1.5346  decode.d6.loss_dice: 1.7446  decode.d7.loss_cls: 0.6570  decode.d7.loss_mask: 1.5308  decode.d7.loss_dice: 1.7064  decode.d8.loss_cls: 0.6999  decode.d8.loss_mask: 1.4976  decode.d8.loss_dice: 1.6187  mix_decode.loss_cls: 0.3915  mix_decode.loss_mask: 0.5799  mix_decode.loss_dice: 0.8648  mix_decode.d0.loss_cls: 0.3813  mix_decode.d0.loss_mask: 0.6201  mix_decode.d0.loss_dice: 0.9052  mix_decode.d1.loss_cls: 0.3496  mix_decode.d1.loss_mask: 0.6235  mix_decode.d1.loss_dice: 0.8869  mix_decode.d2.loss_cls: 0.3846  mix_decode.d2.loss_mask: 0.6083  mix_decode.d2.loss_dice: 0.8763  mix_decode.d3.loss_cls: 0.4436  mix_decode.d3.loss_mask: 0.5970  mix_decode.d3.loss_dice: 0.8902  mix_decode.d4.loss_cls: 0.4313  mix_decode.d4.loss_mask: 0.6042  mix_decode.d4.loss_dice: 0.8662  mix_decode.d5.loss_cls: 0.3650  mix_decode.d5.loss_mask: 0.5748  mix_decode.d5.loss_dice: 0.8802  mix_decode.d6.loss_cls: 0.3941  mix_decode.d6.loss_mask: 0.5869  mix_decode.d6.loss_dice: 0.8827  mix_decode.d7.loss_cls: 0.3451  mix_decode.d7.loss_mask: 0.6379  mix_decode.d7.loss_dice: 0.8929  mix_decode.d8.loss_cls: 0.3666  mix_decode.d8.loss_mask: 0.6129  mix_decode.d8.loss_dice: 0.9076
2025/03/28 18:42:50 - mmengine - INFO - Iter(train) [ 4950/20000]  base_lr: 7.7424e-05 lr: 7.7424e-05  eta: 5:22:10  time: 1.8976  data_time: 0.0255  memory: 10735  loss: 63.0141  decode.loss_cls: 0.5593  decode.loss_mask: 2.0132  decode.loss_dice: 1.7904  decode.d0.loss_cls: 0.6985  decode.d0.loss_mask: 2.0364  decode.d0.loss_dice: 1.8075  decode.d1.loss_cls: 0.5750  decode.d1.loss_mask: 2.0037  decode.d1.loss_dice: 1.7654  decode.d2.loss_cls: 0.6472  decode.d2.loss_mask: 2.1428  decode.d2.loss_dice: 1.8852  decode.d3.loss_cls: 0.6122  decode.d3.loss_mask: 2.1025  decode.d3.loss_dice: 1.8071  decode.d4.loss_cls: 0.6123  decode.d4.loss_mask: 2.0731  decode.d4.loss_dice: 1.8352  decode.d5.loss_cls: 0.6309  decode.d5.loss_mask: 1.9989  decode.d5.loss_dice: 1.8026  decode.d6.loss_cls: 0.5052  decode.d6.loss_mask: 2.0811  decode.d6.loss_dice: 1.7914  decode.d7.loss_cls: 0.5632  decode.d7.loss_mask: 2.0664  decode.d7.loss_dice: 1.8123  decode.d8.loss_cls: 0.5717  decode.d8.loss_mask: 2.1198  decode.d8.loss_dice: 1.8628  mix_decode.loss_cls: 0.1843  mix_decode.loss_mask: 0.7137  mix_decode.loss_dice: 0.9073  mix_decode.d0.loss_cls: 0.2693  mix_decode.d0.loss_mask: 0.7155  mix_decode.d0.loss_dice: 0.9151  mix_decode.d1.loss_cls: 0.2100  mix_decode.d1.loss_mask: 0.6995  mix_decode.d1.loss_dice: 0.8958  mix_decode.d2.loss_cls: 0.2089  mix_decode.d2.loss_mask: 0.7486  mix_decode.d2.loss_dice: 0.9230  mix_decode.d3.loss_cls: 0.1996  mix_decode.d3.loss_mask: 0.7096  mix_decode.d3.loss_dice: 0.9073  mix_decode.d4.loss_cls: 0.1978  mix_decode.d4.loss_mask: 0.6991  mix_decode.d4.loss_dice: 0.9123  mix_decode.d5.loss_cls: 0.2128  mix_decode.d5.loss_mask: 0.6992  mix_decode.d5.loss_dice: 0.8910  mix_decode.d6.loss_cls: 0.2096  mix_decode.d6.loss_mask: 0.6886  mix_decode.d6.loss_dice: 0.8879  mix_decode.d7.loss_cls: 0.2061  mix_decode.d7.loss_mask: 0.7221  mix_decode.d7.loss_dice: 0.8931  mix_decode.d8.loss_cls: 0.1797  mix_decode.d8.loss_mask: 0.7324  mix_decode.d8.loss_dice: 0.9015
2025/03/28 18:44:18 - mmengine - INFO - Exp name: r2u_20250328_164133
2025/03/28 18:44:18 - mmengine - INFO - Iter(train) [ 5000/20000]  base_lr: 7.7192e-05 lr: 7.7192e-05  eta: 5:22:16  time: 1.8494  data_time: 0.0300  memory: 10728  loss: 57.3637  decode.loss_cls: 0.7221  decode.loss_mask: 1.4990  decode.loss_dice: 1.7337  decode.d0.loss_cls: 0.7547  decode.d0.loss_mask: 1.5011  decode.d0.loss_dice: 1.7675  decode.d1.loss_cls: 0.7013  decode.d1.loss_mask: 1.5142  decode.d1.loss_dice: 1.6665  decode.d2.loss_cls: 0.5968  decode.d2.loss_mask: 1.5686  decode.d2.loss_dice: 1.6990  decode.d3.loss_cls: 0.6275  decode.d3.loss_mask: 1.5547  decode.d3.loss_dice: 1.7655  decode.d4.loss_cls: 0.6272  decode.d4.loss_mask: 1.5580  decode.d4.loss_dice: 1.7648  decode.d5.loss_cls: 0.6342  decode.d5.loss_mask: 1.5801  decode.d5.loss_dice: 1.6655  decode.d6.loss_cls: 0.6432  decode.d6.loss_mask: 1.5525  decode.d6.loss_dice: 1.7370  decode.d7.loss_cls: 0.6377  decode.d7.loss_mask: 1.5224  decode.d7.loss_dice: 1.7926  decode.d8.loss_cls: 0.7569  decode.d8.loss_mask: 1.4847  decode.d8.loss_dice: 1.7438  mix_decode.loss_cls: 0.3170  mix_decode.loss_mask: 0.6135  mix_decode.loss_dice: 0.8547  mix_decode.d0.loss_cls: 0.3124  mix_decode.d0.loss_mask: 0.6364  mix_decode.d0.loss_dice: 0.9007  mix_decode.d1.loss_cls: 0.2707  mix_decode.d1.loss_mask: 0.6443  mix_decode.d1.loss_dice: 0.8626  mix_decode.d2.loss_cls: 0.3355  mix_decode.d2.loss_mask: 0.6098  mix_decode.d2.loss_dice: 0.8242  mix_decode.d3.loss_cls: 0.2946  mix_decode.d3.loss_mask: 0.6191  mix_decode.d3.loss_dice: 0.8544  mix_decode.d4.loss_cls: 0.3551  mix_decode.d4.loss_mask: 0.6164  mix_decode.d4.loss_dice: 0.8701  mix_decode.d5.loss_cls: 0.3162  mix_decode.d5.loss_mask: 0.6051  mix_decode.d5.loss_dice: 0.8732  mix_decode.d6.loss_cls: 0.3086  mix_decode.d6.loss_mask: 0.6104  mix_decode.d6.loss_dice: 0.8647  mix_decode.d7.loss_cls: 0.3719  mix_decode.d7.loss_mask: 0.5867  mix_decode.d7.loss_dice: 0.8738  mix_decode.d8.loss_cls: 0.2658  mix_decode.d8.loss_mask: 0.6189  mix_decode.d8.loss_dice: 0.9041
2025/03/28 18:45:50 - mmengine - INFO - Iter(train) [ 5050/20000]  base_lr: 7.6961e-05 lr: 7.6961e-05  eta: 5:22:32  time: 1.9140  data_time: 0.0265  memory: 10725  loss: 64.8017  decode.loss_cls: 0.6147  decode.loss_mask: 2.0382  decode.loss_dice: 1.6616  decode.d0.loss_cls: 0.7125  decode.d0.loss_mask: 1.9977  decode.d0.loss_dice: 1.8284  decode.d1.loss_cls: 0.6113  decode.d1.loss_mask: 2.0427  decode.d1.loss_dice: 1.7632  decode.d2.loss_cls: 0.5961  decode.d2.loss_mask: 1.9978  decode.d2.loss_dice: 1.7226  decode.d3.loss_cls: 0.5369  decode.d3.loss_mask: 2.0358  decode.d3.loss_dice: 1.7086  decode.d4.loss_cls: 0.6547  decode.d4.loss_mask: 2.0141  decode.d4.loss_dice: 1.7274  decode.d5.loss_cls: 0.5700  decode.d5.loss_mask: 2.0634  decode.d5.loss_dice: 1.7214  decode.d6.loss_cls: 0.4938  decode.d6.loss_mask: 2.1252  decode.d6.loss_dice: 1.7959  decode.d7.loss_cls: 0.6046  decode.d7.loss_mask: 1.9745  decode.d7.loss_dice: 1.7162  decode.d8.loss_cls: 0.6756  decode.d8.loss_mask: 2.0331  decode.d8.loss_dice: 1.7634  mix_decode.loss_cls: 0.3979  mix_decode.loss_mask: 0.8008  mix_decode.loss_dice: 0.9554  mix_decode.d0.loss_cls: 0.3616  mix_decode.d0.loss_mask: 0.7832  mix_decode.d0.loss_dice: 1.0112  mix_decode.d1.loss_cls: 0.3607  mix_decode.d1.loss_mask: 0.7749  mix_decode.d1.loss_dice: 0.9574  mix_decode.d2.loss_cls: 0.3264  mix_decode.d2.loss_mask: 0.7702  mix_decode.d2.loss_dice: 0.9608  mix_decode.d3.loss_cls: 0.2749  mix_decode.d3.loss_mask: 0.8080  mix_decode.d3.loss_dice: 0.9815  mix_decode.d4.loss_cls: 0.3478  mix_decode.d4.loss_mask: 0.7847  mix_decode.d4.loss_dice: 0.9656  mix_decode.d5.loss_cls: 0.2830  mix_decode.d5.loss_mask: 0.8393  mix_decode.d5.loss_dice: 0.9761  mix_decode.d6.loss_cls: 0.2871  mix_decode.d6.loss_mask: 0.8070  mix_decode.d6.loss_dice: 0.9669  mix_decode.d7.loss_cls: 0.3086  mix_decode.d7.loss_mask: 0.8227  mix_decode.d7.loss_dice: 0.9742  mix_decode.d8.loss_cls: 0.3250  mix_decode.d8.loss_mask: 0.8198  mix_decode.d8.loss_dice: 0.9678
2025/03/28 18:47:24 - mmengine - INFO - Iter(train) [ 5100/20000]  base_lr: 7.6729e-05 lr: 7.6729e-05  eta: 5:22:53  time: 1.8991  data_time: 0.0253  memory: 10727  loss: 54.4473  decode.loss_cls: 0.6615  decode.loss_mask: 1.3524  decode.loss_dice: 1.6611  decode.d0.loss_cls: 0.7344  decode.d0.loss_mask: 1.3757  decode.d0.loss_dice: 1.6740  decode.d1.loss_cls: 0.6692  decode.d1.loss_mask: 1.3326  decode.d1.loss_dice: 1.6625  decode.d2.loss_cls: 0.6448  decode.d2.loss_mask: 1.3569  decode.d2.loss_dice: 1.6083  decode.d3.loss_cls: 0.4928  decode.d3.loss_mask: 1.4283  decode.d3.loss_dice: 1.6714  decode.d4.loss_cls: 0.4881  decode.d4.loss_mask: 1.4295  decode.d4.loss_dice: 1.6859  decode.d5.loss_cls: 0.5761  decode.d5.loss_mask: 1.3497  decode.d5.loss_dice: 1.6937  decode.d6.loss_cls: 0.5494  decode.d6.loss_mask: 1.3618  decode.d6.loss_dice: 1.6880  decode.d7.loss_cls: 0.5688  decode.d7.loss_mask: 1.4698  decode.d7.loss_dice: 1.7009  decode.d8.loss_cls: 0.5797  decode.d8.loss_mask: 1.4328  decode.d8.loss_dice: 1.7243  mix_decode.loss_cls: 0.3726  mix_decode.loss_mask: 0.5550  mix_decode.loss_dice: 0.8041  mix_decode.d0.loss_cls: 0.3903  mix_decode.d0.loss_mask: 0.5765  mix_decode.d0.loss_dice: 0.8446  mix_decode.d1.loss_cls: 0.3352  mix_decode.d1.loss_mask: 0.6062  mix_decode.d1.loss_dice: 0.8506  mix_decode.d2.loss_cls: 0.4073  mix_decode.d2.loss_mask: 0.5662  mix_decode.d2.loss_dice: 0.8338  mix_decode.d3.loss_cls: 0.3607  mix_decode.d3.loss_mask: 0.5851  mix_decode.d3.loss_dice: 0.8240  mix_decode.d4.loss_cls: 0.3609  mix_decode.d4.loss_mask: 0.5768  mix_decode.d4.loss_dice: 0.8350  mix_decode.d5.loss_cls: 0.3828  mix_decode.d5.loss_mask: 0.5952  mix_decode.d5.loss_dice: 0.8425  mix_decode.d6.loss_cls: 0.3743  mix_decode.d6.loss_mask: 0.5459  mix_decode.d6.loss_dice: 0.8550  mix_decode.d7.loss_cls: 0.3949  mix_decode.d7.loss_mask: 0.5715  mix_decode.d7.loss_dice: 0.8082  mix_decode.d8.loss_cls: 0.3538  mix_decode.d8.loss_mask: 0.5675  mix_decode.d8.loss_dice: 0.8461
2025/03/28 18:49:00 - mmengine - INFO - Iter(train) [ 5150/20000]  base_lr: 7.6497e-05 lr: 7.6497e-05  eta: 5:23:17  time: 1.8624  data_time: 0.0257  memory: 10732  loss: 58.1187  decode.loss_cls: 0.6389  decode.loss_mask: 1.6584  decode.loss_dice: 1.5417  decode.d0.loss_cls: 0.6914  decode.d0.loss_mask: 1.6917  decode.d0.loss_dice: 1.6698  decode.d1.loss_cls: 0.4928  decode.d1.loss_mask: 1.6646  decode.d1.loss_dice: 1.5670  decode.d2.loss_cls: 0.6166  decode.d2.loss_mask: 1.7116  decode.d2.loss_dice: 1.6369  decode.d3.loss_cls: 0.5678  decode.d3.loss_mask: 1.6783  decode.d3.loss_dice: 1.5302  decode.d4.loss_cls: 0.5522  decode.d4.loss_mask: 1.6980  decode.d4.loss_dice: 1.5367  decode.d5.loss_cls: 0.6584  decode.d5.loss_mask: 1.6769  decode.d5.loss_dice: 1.6430  decode.d6.loss_cls: 0.6160  decode.d6.loss_mask: 1.6816  decode.d6.loss_dice: 1.5860  decode.d7.loss_cls: 0.6462  decode.d7.loss_mask: 1.6673  decode.d7.loss_dice: 1.5478  decode.d8.loss_cls: 0.5827  decode.d8.loss_mask: 1.7303  decode.d8.loss_dice: 1.5180  mix_decode.loss_cls: 0.3986  mix_decode.loss_mask: 0.6650  mix_decode.loss_dice: 0.8430  mix_decode.d0.loss_cls: 0.2746  mix_decode.d0.loss_mask: 0.6706  mix_decode.d0.loss_dice: 0.9322  mix_decode.d1.loss_cls: 0.2999  mix_decode.d1.loss_mask: 0.7251  mix_decode.d1.loss_dice: 0.9256  mix_decode.d2.loss_cls: 0.3646  mix_decode.d2.loss_mask: 0.6643  mix_decode.d2.loss_dice: 0.8584  mix_decode.d3.loss_cls: 0.3224  mix_decode.d3.loss_mask: 0.7057  mix_decode.d3.loss_dice: 0.8887  mix_decode.d4.loss_cls: 0.4034  mix_decode.d4.loss_mask: 0.6684  mix_decode.d4.loss_dice: 0.8884  mix_decode.d5.loss_cls: 0.4022  mix_decode.d5.loss_mask: 0.6840  mix_decode.d5.loss_dice: 0.9362  mix_decode.d6.loss_cls: 0.3959  mix_decode.d6.loss_mask: 0.6860  mix_decode.d6.loss_dice: 0.9090  mix_decode.d7.loss_cls: 0.3764  mix_decode.d7.loss_mask: 0.6859  mix_decode.d7.loss_dice: 0.8928  mix_decode.d8.loss_cls: 0.3138  mix_decode.d8.loss_mask: 0.7214  mix_decode.d8.loss_dice: 0.9171
2025/03/28 18:50:35 - mmengine - INFO - Iter(train) [ 5200/20000]  base_lr: 7.6265e-05 lr: 7.6265e-05  eta: 5:23:36  time: 1.9446  data_time: 0.0270  memory: 10728  loss: 62.7028  decode.loss_cls: 0.5472  decode.loss_mask: 1.6299  decode.loss_dice: 2.0293  decode.d0.loss_cls: 0.5895  decode.d0.loss_mask: 1.6976  decode.d0.loss_dice: 2.0895  decode.d1.loss_cls: 0.5149  decode.d1.loss_mask: 1.6844  decode.d1.loss_dice: 2.0050  decode.d2.loss_cls: 0.5858  decode.d2.loss_mask: 1.5691  decode.d2.loss_dice: 1.9634  decode.d3.loss_cls: 0.5175  decode.d3.loss_mask: 1.7314  decode.d3.loss_dice: 2.0683  decode.d4.loss_cls: 0.6152  decode.d4.loss_mask: 1.6340  decode.d4.loss_dice: 2.0128  decode.d5.loss_cls: 0.6206  decode.d5.loss_mask: 1.6356  decode.d5.loss_dice: 1.9705  decode.d6.loss_cls: 0.4562  decode.d6.loss_mask: 1.6915  decode.d6.loss_dice: 2.0495  decode.d7.loss_cls: 0.5813  decode.d7.loss_mask: 1.6730  decode.d7.loss_dice: 2.0330  decode.d8.loss_cls: 0.5001  decode.d8.loss_mask: 1.6565  decode.d8.loss_dice: 2.0610  mix_decode.loss_cls: 0.3743  mix_decode.loss_mask: 0.6816  mix_decode.loss_dice: 1.0025  mix_decode.d0.loss_cls: 0.3368  mix_decode.d0.loss_mask: 0.7386  mix_decode.d0.loss_dice: 1.0479  mix_decode.d1.loss_cls: 0.2730  mix_decode.d1.loss_mask: 0.7286  mix_decode.d1.loss_dice: 1.0117  mix_decode.d2.loss_cls: 0.3489  mix_decode.d2.loss_mask: 0.6927  mix_decode.d2.loss_dice: 0.9777  mix_decode.d3.loss_cls: 0.3034  mix_decode.d3.loss_mask: 0.6827  mix_decode.d3.loss_dice: 1.0128  mix_decode.d4.loss_cls: 0.3619  mix_decode.d4.loss_mask: 0.6770  mix_decode.d4.loss_dice: 0.9748  mix_decode.d5.loss_cls: 0.3668  mix_decode.d5.loss_mask: 0.6572  mix_decode.d5.loss_dice: 1.0050  mix_decode.d6.loss_cls: 0.3169  mix_decode.d6.loss_mask: 0.6653  mix_decode.d6.loss_dice: 0.9925  mix_decode.d7.loss_cls: 0.3643  mix_decode.d7.loss_mask: 0.6674  mix_decode.d7.loss_dice: 0.9750  mix_decode.d8.loss_cls: 0.3850  mix_decode.d8.loss_mask: 0.6793  mix_decode.d8.loss_dice: 0.9876
2025/03/28 18:52:10 - mmengine - INFO - Iter(train) [ 5250/20000]  base_lr: 7.6034e-05 lr: 7.6034e-05  eta: 5:23:53  time: 1.9362  data_time: 0.0261  memory: 10730  loss: 60.1565  decode.loss_cls: 0.7063  decode.loss_mask: 1.5727  decode.loss_dice: 1.8595  decode.d0.loss_cls: 0.7991  decode.d0.loss_mask: 1.5636  decode.d0.loss_dice: 1.9406  decode.d1.loss_cls: 0.7073  decode.d1.loss_mask: 1.6186  decode.d1.loss_dice: 1.9062  decode.d2.loss_cls: 0.7181  decode.d2.loss_mask: 1.5461  decode.d2.loss_dice: 1.8184  decode.d3.loss_cls: 0.7588  decode.d3.loss_mask: 1.5859  decode.d3.loss_dice: 1.8569  decode.d4.loss_cls: 0.6814  decode.d4.loss_mask: 1.6681  decode.d4.loss_dice: 1.8663  decode.d5.loss_cls: 0.7521  decode.d5.loss_mask: 1.5987  decode.d5.loss_dice: 1.8647  decode.d6.loss_cls: 0.7475  decode.d6.loss_mask: 1.6236  decode.d6.loss_dice: 1.9308  decode.d7.loss_cls: 0.7042  decode.d7.loss_mask: 1.5663  decode.d7.loss_dice: 1.9089  decode.d8.loss_cls: 0.7291  decode.d8.loss_mask: 1.5452  decode.d8.loss_dice: 1.8396  mix_decode.loss_cls: 0.3218  mix_decode.loss_mask: 0.6717  mix_decode.loss_dice: 0.8330  mix_decode.d0.loss_cls: 0.3513  mix_decode.d0.loss_mask: 0.6875  mix_decode.d0.loss_dice: 0.8874  mix_decode.d1.loss_cls: 0.3264  mix_decode.d1.loss_mask: 0.6310  mix_decode.d1.loss_dice: 0.8450  mix_decode.d2.loss_cls: 0.3378  mix_decode.d2.loss_mask: 0.6276  mix_decode.d2.loss_dice: 0.8188  mix_decode.d3.loss_cls: 0.3100  mix_decode.d3.loss_mask: 0.6687  mix_decode.d3.loss_dice: 0.8366  mix_decode.d4.loss_cls: 0.3050  mix_decode.d4.loss_mask: 0.6397  mix_decode.d4.loss_dice: 0.8440  mix_decode.d5.loss_cls: 0.3320  mix_decode.d5.loss_mask: 0.6241  mix_decode.d5.loss_dice: 0.8478  mix_decode.d6.loss_cls: 0.3102  mix_decode.d6.loss_mask: 0.6241  mix_decode.d6.loss_dice: 0.8456  mix_decode.d7.loss_cls: 0.2634  mix_decode.d7.loss_mask: 0.7189  mix_decode.d7.loss_dice: 0.8743  mix_decode.d8.loss_cls: 0.2678  mix_decode.d8.loss_mask: 0.6819  mix_decode.d8.loss_dice: 0.8386
2025/03/28 18:53:45 - mmengine - INFO - Iter(train) [ 5300/20000]  base_lr: 7.5802e-05 lr: 7.5802e-05  eta: 5:24:08  time: 1.8823  data_time: 0.0266  memory: 10737  loss: 55.5359  decode.loss_cls: 0.5389  decode.loss_mask: 1.3082  decode.loss_dice: 1.8866  decode.d0.loss_cls: 0.6515  decode.d0.loss_mask: 1.3220  decode.d0.loss_dice: 1.9091  decode.d1.loss_cls: 0.5290  decode.d1.loss_mask: 1.2638  decode.d1.loss_dice: 1.8583  decode.d2.loss_cls: 0.6701  decode.d2.loss_mask: 1.2442  decode.d2.loss_dice: 1.8067  decode.d3.loss_cls: 0.6379  decode.d3.loss_mask: 1.2949  decode.d3.loss_dice: 1.8797  decode.d4.loss_cls: 0.6911  decode.d4.loss_mask: 1.2820  decode.d4.loss_dice: 1.8587  decode.d5.loss_cls: 0.6684  decode.d5.loss_mask: 1.2981  decode.d5.loss_dice: 1.8579  decode.d6.loss_cls: 0.6328  decode.d6.loss_mask: 1.2656  decode.d6.loss_dice: 1.8583  decode.d7.loss_cls: 0.7199  decode.d7.loss_mask: 1.2773  decode.d7.loss_dice: 1.7951  decode.d8.loss_cls: 0.5791  decode.d8.loss_mask: 1.3081  decode.d8.loss_dice: 1.8548  mix_decode.loss_cls: 0.3171  mix_decode.loss_mask: 0.6496  mix_decode.loss_dice: 0.8177  mix_decode.d0.loss_cls: 0.3158  mix_decode.d0.loss_mask: 0.6155  mix_decode.d0.loss_dice: 0.8221  mix_decode.d1.loss_cls: 0.3354  mix_decode.d1.loss_mask: 0.6346  mix_decode.d1.loss_dice: 0.7690  mix_decode.d2.loss_cls: 0.3864  mix_decode.d2.loss_mask: 0.6054  mix_decode.d2.loss_dice: 0.7538  mix_decode.d3.loss_cls: 0.3524  mix_decode.d3.loss_mask: 0.6495  mix_decode.d3.loss_dice: 0.8079  mix_decode.d4.loss_cls: 0.3271  mix_decode.d4.loss_mask: 0.6758  mix_decode.d4.loss_dice: 0.8383  mix_decode.d5.loss_cls: 0.3820  mix_decode.d5.loss_mask: 0.6162  mix_decode.d5.loss_dice: 0.8119  mix_decode.d6.loss_cls: 0.4244  mix_decode.d6.loss_mask: 0.6076  mix_decode.d6.loss_dice: 0.7763  mix_decode.d7.loss_cls: 0.3742  mix_decode.d7.loss_mask: 0.6091  mix_decode.d7.loss_dice: 0.7666  mix_decode.d8.loss_cls: 0.3946  mix_decode.d8.loss_mask: 0.5934  mix_decode.d8.loss_dice: 0.7582
2025/03/28 18:55:19 - mmengine - INFO - Iter(train) [ 5350/20000]  base_lr: 7.5569e-05 lr: 7.5569e-05  eta: 5:24:19  time: 1.8945  data_time: 0.0269  memory: 10729  loss: 62.7201  decode.loss_cls: 0.7186  decode.loss_mask: 1.7707  decode.loss_dice: 1.8064  decode.d0.loss_cls: 0.7385  decode.d0.loss_mask: 1.7280  decode.d0.loss_dice: 1.8818  decode.d1.loss_cls: 0.5925  decode.d1.loss_mask: 1.7230  decode.d1.loss_dice: 1.7881  decode.d2.loss_cls: 0.6851  decode.d2.loss_mask: 1.7158  decode.d2.loss_dice: 1.7972  decode.d3.loss_cls: 0.6331  decode.d3.loss_mask: 1.8102  decode.d3.loss_dice: 1.8157  decode.d4.loss_cls: 0.6942  decode.d4.loss_mask: 1.7335  decode.d4.loss_dice: 1.7697  decode.d5.loss_cls: 0.6459  decode.d5.loss_mask: 1.6948  decode.d5.loss_dice: 1.8111  decode.d6.loss_cls: 0.7603  decode.d6.loss_mask: 1.7226  decode.d6.loss_dice: 1.8083  decode.d7.loss_cls: 0.7301  decode.d7.loss_mask: 1.7577  decode.d7.loss_dice: 1.8155  decode.d8.loss_cls: 0.7626  decode.d8.loss_mask: 1.7595  decode.d8.loss_dice: 1.8060  mix_decode.loss_cls: 0.3637  mix_decode.loss_mask: 0.6711  mix_decode.loss_dice: 0.9610  mix_decode.d0.loss_cls: 0.3525  mix_decode.d0.loss_mask: 0.6868  mix_decode.d0.loss_dice: 1.0190  mix_decode.d1.loss_cls: 0.3375  mix_decode.d1.loss_mask: 0.6822  mix_decode.d1.loss_dice: 0.9935  mix_decode.d2.loss_cls: 0.3600  mix_decode.d2.loss_mask: 0.6592  mix_decode.d2.loss_dice: 0.9502  mix_decode.d3.loss_cls: 0.3735  mix_decode.d3.loss_mask: 0.7215  mix_decode.d3.loss_dice: 0.9566  mix_decode.d4.loss_cls: 0.3274  mix_decode.d4.loss_mask: 0.7486  mix_decode.d4.loss_dice: 1.0079  mix_decode.d5.loss_cls: 0.3911  mix_decode.d5.loss_mask: 0.6889  mix_decode.d5.loss_dice: 0.9748  mix_decode.d6.loss_cls: 0.4004  mix_decode.d6.loss_mask: 0.6652  mix_decode.d6.loss_dice: 0.9392  mix_decode.d7.loss_cls: 0.3823  mix_decode.d7.loss_mask: 0.6911  mix_decode.d7.loss_dice: 0.9472  mix_decode.d8.loss_cls: 0.3697  mix_decode.d8.loss_mask: 0.6828  mix_decode.d8.loss_dice: 0.9392
2025/03/28 18:56:55 - mmengine - INFO - Iter(train) [ 5400/20000]  base_lr: 7.5337e-05 lr: 7.5337e-05  eta: 5:24:32  time: 1.9528  data_time: 0.0286  memory: 10737  loss: 60.9677  decode.loss_cls: 0.6034  decode.loss_mask: 1.6699  decode.loss_dice: 1.8413  decode.d0.loss_cls: 0.6487  decode.d0.loss_mask: 1.6646  decode.d0.loss_dice: 1.8330  decode.d1.loss_cls: 0.4854  decode.d1.loss_mask: 1.6255  decode.d1.loss_dice: 1.8587  decode.d2.loss_cls: 0.5871  decode.d2.loss_mask: 1.6187  decode.d2.loss_dice: 1.8372  decode.d3.loss_cls: 0.5541  decode.d3.loss_mask: 1.6818  decode.d3.loss_dice: 1.8878  decode.d4.loss_cls: 0.5429  decode.d4.loss_mask: 1.6727  decode.d4.loss_dice: 1.8127  decode.d5.loss_cls: 0.6409  decode.d5.loss_mask: 1.5788  decode.d5.loss_dice: 1.8171  decode.d6.loss_cls: 0.6054  decode.d6.loss_mask: 1.6488  decode.d6.loss_dice: 1.8206  decode.d7.loss_cls: 0.4943  decode.d7.loss_mask: 1.6877  decode.d7.loss_dice: 1.8495  decode.d8.loss_cls: 0.5379  decode.d8.loss_mask: 1.6708  decode.d8.loss_dice: 1.8208  mix_decode.loss_cls: 0.3434  mix_decode.loss_mask: 0.8023  mix_decode.loss_dice: 0.9733  mix_decode.d0.loss_cls: 0.3018  mix_decode.d0.loss_mask: 0.8120  mix_decode.d0.loss_dice: 1.0031  mix_decode.d1.loss_cls: 0.2508  mix_decode.d1.loss_mask: 0.7471  mix_decode.d1.loss_dice: 0.9433  mix_decode.d2.loss_cls: 0.3194  mix_decode.d2.loss_mask: 0.7494  mix_decode.d2.loss_dice: 0.9512  mix_decode.d3.loss_cls: 0.2774  mix_decode.d3.loss_mask: 0.7660  mix_decode.d3.loss_dice: 0.9976  mix_decode.d4.loss_cls: 0.2945  mix_decode.d4.loss_mask: 0.7681  mix_decode.d4.loss_dice: 0.9588  mix_decode.d5.loss_cls: 0.3307  mix_decode.d5.loss_mask: 0.7632  mix_decode.d5.loss_dice: 0.9366  mix_decode.d6.loss_cls: 0.3297  mix_decode.d6.loss_mask: 0.7758  mix_decode.d6.loss_dice: 0.9436  mix_decode.d7.loss_cls: 0.2715  mix_decode.d7.loss_mask: 0.8138  mix_decode.d7.loss_dice: 0.9508  mix_decode.d8.loss_cls: 0.2922  mix_decode.d8.loss_mask: 0.7642  mix_decode.d8.loss_dice: 0.9380
2025/03/28 18:58:30 - mmengine - INFO - Iter(train) [ 5450/20000]  base_lr: 7.5105e-05 lr: 7.5105e-05  eta: 5:24:42  time: 1.9597  data_time: 0.0269  memory: 10730  loss: 53.1837  decode.loss_cls: 0.4007  decode.loss_mask: 1.5693  decode.loss_dice: 1.7498  decode.d0.loss_cls: 0.6043  decode.d0.loss_mask: 1.4767  decode.d0.loss_dice: 1.7162  decode.d1.loss_cls: 0.5045  decode.d1.loss_mask: 1.5319  decode.d1.loss_dice: 1.7347  decode.d2.loss_cls: 0.5135  decode.d2.loss_mask: 1.4962  decode.d2.loss_dice: 1.6877  decode.d3.loss_cls: 0.5877  decode.d3.loss_mask: 1.4555  decode.d3.loss_dice: 1.6717  decode.d4.loss_cls: 0.4447  decode.d4.loss_mask: 1.4715  decode.d4.loss_dice: 1.7095  decode.d5.loss_cls: 0.4134  decode.d5.loss_mask: 1.5437  decode.d5.loss_dice: 1.7301  decode.d6.loss_cls: 0.3908  decode.d6.loss_mask: 1.4819  decode.d6.loss_dice: 1.7098  decode.d7.loss_cls: 0.3936  decode.d7.loss_mask: 1.5354  decode.d7.loss_dice: 1.7397  decode.d8.loss_cls: 0.4122  decode.d8.loss_mask: 1.5006  decode.d8.loss_dice: 1.6781  mix_decode.loss_cls: 0.2273  mix_decode.loss_mask: 0.6212  mix_decode.loss_dice: 0.8195  mix_decode.d0.loss_cls: 0.2737  mix_decode.d0.loss_mask: 0.5887  mix_decode.d0.loss_dice: 0.7952  mix_decode.d1.loss_cls: 0.2188  mix_decode.d1.loss_mask: 0.6077  mix_decode.d1.loss_dice: 0.7864  mix_decode.d2.loss_cls: 0.2628  mix_decode.d2.loss_mask: 0.5951  mix_decode.d2.loss_dice: 0.7775  mix_decode.d3.loss_cls: 0.2693  mix_decode.d3.loss_mask: 0.5783  mix_decode.d3.loss_dice: 0.7813  mix_decode.d4.loss_cls: 0.2575  mix_decode.d4.loss_mask: 0.5883  mix_decode.d4.loss_dice: 0.7888  mix_decode.d5.loss_cls: 0.2055  mix_decode.d5.loss_mask: 0.5972  mix_decode.d5.loss_dice: 0.8301  mix_decode.d6.loss_cls: 0.1955  mix_decode.d6.loss_mask: 0.5853  mix_decode.d6.loss_dice: 0.8139  mix_decode.d7.loss_cls: 0.1923  mix_decode.d7.loss_mask: 0.6135  mix_decode.d7.loss_dice: 0.8135  mix_decode.d8.loss_cls: 0.2359  mix_decode.d8.loss_mask: 0.6087  mix_decode.d8.loss_dice: 0.7999
2025/03/28 19:00:04 - mmengine - INFO - Iter(train) [ 5500/20000]  base_lr: 7.4873e-05 lr: 7.4873e-05  eta: 5:24:47  time: 1.8345  data_time: 0.0237  memory: 10740  loss: 56.4603  decode.loss_cls: 0.6489  decode.loss_mask: 1.5826  decode.loss_dice: 1.7301  decode.d0.loss_cls: 0.7645  decode.d0.loss_mask: 1.5553  decode.d0.loss_dice: 1.7264  decode.d1.loss_cls: 0.7455  decode.d1.loss_mask: 1.5196  decode.d1.loss_dice: 1.6092  decode.d2.loss_cls: 0.6771  decode.d2.loss_mask: 1.5961  decode.d2.loss_dice: 1.6760  decode.d3.loss_cls: 0.6934  decode.d3.loss_mask: 1.5765  decode.d3.loss_dice: 1.6676  decode.d4.loss_cls: 0.7744  decode.d4.loss_mask: 1.4696  decode.d4.loss_dice: 1.6584  decode.d5.loss_cls: 0.7453  decode.d5.loss_mask: 1.5856  decode.d5.loss_dice: 1.7345  decode.d6.loss_cls: 0.6774  decode.d6.loss_mask: 1.6639  decode.d6.loss_dice: 1.7487  decode.d7.loss_cls: 0.5943  decode.d7.loss_mask: 1.6418  decode.d7.loss_dice: 1.7831  decode.d8.loss_cls: 0.6413  decode.d8.loss_mask: 1.6475  decode.d8.loss_dice: 1.7287  mix_decode.loss_cls: 0.3030  mix_decode.loss_mask: 0.6201  mix_decode.loss_dice: 0.7160  mix_decode.d0.loss_cls: 0.3264  mix_decode.d0.loss_mask: 0.6215  mix_decode.d0.loss_dice: 0.7078  mix_decode.d1.loss_cls: 0.3012  mix_decode.d1.loss_mask: 0.6420  mix_decode.d1.loss_dice: 0.6937  mix_decode.d2.loss_cls: 0.3047  mix_decode.d2.loss_mask: 0.6554  mix_decode.d2.loss_dice: 0.7026  mix_decode.d3.loss_cls: 0.3039  mix_decode.d3.loss_mask: 0.6571  mix_decode.d3.loss_dice: 0.7294  mix_decode.d4.loss_cls: 0.3218  mix_decode.d4.loss_mask: 0.6598  mix_decode.d4.loss_dice: 0.7242  mix_decode.d5.loss_cls: 0.3113  mix_decode.d5.loss_mask: 0.6417  mix_decode.d5.loss_dice: 0.7280  mix_decode.d6.loss_cls: 0.2761  mix_decode.d6.loss_mask: 0.6437  mix_decode.d6.loss_dice: 0.6703  mix_decode.d7.loss_cls: 0.2953  mix_decode.d7.loss_mask: 0.6736  mix_decode.d7.loss_dice: 0.7169  mix_decode.d8.loss_cls: 0.2844  mix_decode.d8.loss_mask: 0.6465  mix_decode.d8.loss_dice: 0.7188
2025/03/28 19:01:39 - mmengine - INFO - Iter(train) [ 5550/20000]  base_lr: 7.4640e-05 lr: 7.4640e-05  eta: 5:24:51  time: 1.8393  data_time: 0.0253  memory: 10761  loss: 60.7854  decode.loss_cls: 0.6511  decode.loss_mask: 1.7642  decode.loss_dice: 1.8256  decode.d0.loss_cls: 0.7366  decode.d0.loss_mask: 1.7570  decode.d0.loss_dice: 1.9005  decode.d1.loss_cls: 0.6287  decode.d1.loss_mask: 1.7588  decode.d1.loss_dice: 1.8494  decode.d2.loss_cls: 0.5710  decode.d2.loss_mask: 1.8113  decode.d2.loss_dice: 1.7992  decode.d3.loss_cls: 0.5937  decode.d3.loss_mask: 1.7718  decode.d3.loss_dice: 1.7981  decode.d4.loss_cls: 0.6041  decode.d4.loss_mask: 1.7971  decode.d4.loss_dice: 1.8150  decode.d5.loss_cls: 0.6172  decode.d5.loss_mask: 1.8901  decode.d5.loss_dice: 1.8582  decode.d6.loss_cls: 0.5466  decode.d6.loss_mask: 1.7757  decode.d6.loss_dice: 1.8425  decode.d7.loss_cls: 0.5603  decode.d7.loss_mask: 1.7612  decode.d7.loss_dice: 1.7877  decode.d8.loss_cls: 0.6113  decode.d8.loss_mask: 1.7731  decode.d8.loss_dice: 1.8225  mix_decode.loss_cls: 0.3817  mix_decode.loss_mask: 0.6447  mix_decode.loss_dice: 0.8264  mix_decode.d0.loss_cls: 0.3643  mix_decode.d0.loss_mask: 0.6439  mix_decode.d0.loss_dice: 0.8739  mix_decode.d1.loss_cls: 0.4130  mix_decode.d1.loss_mask: 0.6422  mix_decode.d1.loss_dice: 0.8535  mix_decode.d2.loss_cls: 0.3722  mix_decode.d2.loss_mask: 0.6591  mix_decode.d2.loss_dice: 0.7955  mix_decode.d3.loss_cls: 0.4047  mix_decode.d3.loss_mask: 0.6319  mix_decode.d3.loss_dice: 0.8217  mix_decode.d4.loss_cls: 0.3602  mix_decode.d4.loss_mask: 0.6165  mix_decode.d4.loss_dice: 0.8146  mix_decode.d5.loss_cls: 0.3965  mix_decode.d5.loss_mask: 0.6298  mix_decode.d5.loss_dice: 0.8005  mix_decode.d6.loss_cls: 0.3718  mix_decode.d6.loss_mask: 0.6553  mix_decode.d6.loss_dice: 0.8461  mix_decode.d7.loss_cls: 0.3864  mix_decode.d7.loss_mask: 0.6318  mix_decode.d7.loss_dice: 0.8242  mix_decode.d8.loss_cls: 0.3733  mix_decode.d8.loss_mask: 0.6427  mix_decode.d8.loss_dice: 0.8274
2025/03/28 19:03:11 - mmengine - INFO - Iter(train) [ 5600/20000]  base_lr: 7.4408e-05 lr: 7.4408e-05  eta: 5:24:47  time: 1.8409  data_time: 0.0240  memory: 10737  loss: 65.2524  decode.loss_cls: 0.8352  decode.loss_mask: 1.4857  decode.loss_dice: 2.0467  decode.d0.loss_cls: 0.7527  decode.d0.loss_mask: 1.4911  decode.d0.loss_dice: 2.1521  decode.d1.loss_cls: 0.7766  decode.d1.loss_mask: 1.4267  decode.d1.loss_dice: 2.0798  decode.d2.loss_cls: 0.9611  decode.d2.loss_mask: 1.4729  decode.d2.loss_dice: 2.0506  decode.d3.loss_cls: 0.8452  decode.d3.loss_mask: 1.4761  decode.d3.loss_dice: 2.0582  decode.d4.loss_cls: 0.7750  decode.d4.loss_mask: 1.4880  decode.d4.loss_dice: 2.0857  decode.d5.loss_cls: 0.8325  decode.d5.loss_mask: 1.4259  decode.d5.loss_dice: 2.0118  decode.d6.loss_cls: 0.7966  decode.d6.loss_mask: 1.4553  decode.d6.loss_dice: 2.0252  decode.d7.loss_cls: 0.8018  decode.d7.loss_mask: 1.4158  decode.d7.loss_dice: 2.0699  decode.d8.loss_cls: 0.8413  decode.d8.loss_mask: 1.4676  decode.d8.loss_dice: 2.0150  mix_decode.loss_cls: 0.4727  mix_decode.loss_mask: 0.6457  mix_decode.loss_dice: 1.1070  mix_decode.d0.loss_cls: 0.4296  mix_decode.d0.loss_mask: 0.6166  mix_decode.d0.loss_dice: 1.1551  mix_decode.d1.loss_cls: 0.4377  mix_decode.d1.loss_mask: 0.6136  mix_decode.d1.loss_dice: 1.0836  mix_decode.d2.loss_cls: 0.4106  mix_decode.d2.loss_mask: 0.6557  mix_decode.d2.loss_dice: 1.0861  mix_decode.d3.loss_cls: 0.4724  mix_decode.d3.loss_mask: 0.6440  mix_decode.d3.loss_dice: 1.0587  mix_decode.d4.loss_cls: 0.4829  mix_decode.d4.loss_mask: 0.6676  mix_decode.d4.loss_dice: 1.0754  mix_decode.d5.loss_cls: 0.5015  mix_decode.d5.loss_mask: 0.6467  mix_decode.d5.loss_dice: 1.0614  mix_decode.d6.loss_cls: 0.4645  mix_decode.d6.loss_mask: 0.6257  mix_decode.d6.loss_dice: 1.0687  mix_decode.d7.loss_cls: 0.4987  mix_decode.d7.loss_mask: 0.5939  mix_decode.d7.loss_dice: 1.0331  mix_decode.d8.loss_cls: 0.4693  mix_decode.d8.loss_mask: 0.6406  mix_decode.d8.loss_dice: 1.1153
2025/03/28 19:04:45 - mmengine - INFO - Iter(train) [ 5650/20000]  base_lr: 7.4175e-05 lr: 7.4175e-05  eta: 5:24:47  time: 1.8607  data_time: 0.0274  memory: 10727  loss: 56.7512  decode.loss_cls: 0.4433  decode.loss_mask: 1.5883  decode.loss_dice: 1.7570  decode.d0.loss_cls: 0.6724  decode.d0.loss_mask: 1.5613  decode.d0.loss_dice: 1.7221  decode.d1.loss_cls: 0.4752  decode.d1.loss_mask: 1.6190  decode.d1.loss_dice: 1.7129  decode.d2.loss_cls: 0.4036  decode.d2.loss_mask: 1.5927  decode.d2.loss_dice: 1.7173  decode.d3.loss_cls: 0.4150  decode.d3.loss_mask: 1.6351  decode.d3.loss_dice: 1.7055  decode.d4.loss_cls: 0.4023  decode.d4.loss_mask: 1.6591  decode.d4.loss_dice: 1.7461  decode.d5.loss_cls: 0.4226  decode.d5.loss_mask: 1.5923  decode.d5.loss_dice: 1.7200  decode.d6.loss_cls: 0.4976  decode.d6.loss_mask: 1.6454  decode.d6.loss_dice: 1.6939  decode.d7.loss_cls: 0.5227  decode.d7.loss_mask: 1.6050  decode.d7.loss_dice: 1.7712  decode.d8.loss_cls: 0.3815  decode.d8.loss_mask: 1.6133  decode.d8.loss_dice: 1.7432  mix_decode.loss_cls: 0.2730  mix_decode.loss_mask: 0.6980  mix_decode.loss_dice: 0.8957  mix_decode.d0.loss_cls: 0.2885  mix_decode.d0.loss_mask: 0.7025  mix_decode.d0.loss_dice: 0.9287  mix_decode.d1.loss_cls: 0.2446  mix_decode.d1.loss_mask: 0.6946  mix_decode.d1.loss_dice: 0.8934  mix_decode.d2.loss_cls: 0.2933  mix_decode.d2.loss_mask: 0.6810  mix_decode.d2.loss_dice: 0.8893  mix_decode.d3.loss_cls: 0.3451  mix_decode.d3.loss_mask: 0.6592  mix_decode.d3.loss_dice: 0.8665  mix_decode.d4.loss_cls: 0.2623  mix_decode.d4.loss_mask: 0.7020  mix_decode.d4.loss_dice: 0.9326  mix_decode.d5.loss_cls: 0.2269  mix_decode.d5.loss_mask: 0.6990  mix_decode.d5.loss_dice: 0.9233  mix_decode.d6.loss_cls: 0.3183  mix_decode.d6.loss_mask: 0.6638  mix_decode.d6.loss_dice: 0.9017  mix_decode.d7.loss_cls: 0.2554  mix_decode.d7.loss_mask: 0.6897  mix_decode.d7.loss_dice: 0.9244  mix_decode.d8.loss_cls: 0.2791  mix_decode.d8.loss_mask: 0.6796  mix_decode.d8.loss_dice: 0.9032
2025/03/28 19:06:20 - mmengine - INFO - Iter(train) [ 5700/20000]  base_lr: 7.3943e-05 lr: 7.3943e-05  eta: 5:24:45  time: 1.8675  data_time: 0.0244  memory: 10742  loss: 59.3542  decode.loss_cls: 0.5025  decode.loss_mask: 1.5339  decode.loss_dice: 1.9643  decode.d0.loss_cls: 0.6357  decode.d0.loss_mask: 1.4968  decode.d0.loss_dice: 1.9455  decode.d1.loss_cls: 0.5393  decode.d1.loss_mask: 1.5006  decode.d1.loss_dice: 1.9380  decode.d2.loss_cls: 0.5276  decode.d2.loss_mask: 1.5145  decode.d2.loss_dice: 1.9633  decode.d3.loss_cls: 0.5301  decode.d3.loss_mask: 1.4851  decode.d3.loss_dice: 1.9527  decode.d4.loss_cls: 0.5107  decode.d4.loss_mask: 1.5383  decode.d4.loss_dice: 2.0138  decode.d5.loss_cls: 0.4968  decode.d5.loss_mask: 1.5863  decode.d5.loss_dice: 2.0042  decode.d6.loss_cls: 0.5690  decode.d6.loss_mask: 1.5443  decode.d6.loss_dice: 1.9407  decode.d7.loss_cls: 0.5733  decode.d7.loss_mask: 1.5226  decode.d7.loss_dice: 1.9555  decode.d8.loss_cls: 0.5749  decode.d8.loss_mask: 1.4605  decode.d8.loss_dice: 1.9421  mix_decode.loss_cls: 0.2789  mix_decode.loss_mask: 0.5824  mix_decode.loss_dice: 1.0149  mix_decode.d0.loss_cls: 0.3223  mix_decode.d0.loss_mask: 0.5934  mix_decode.d0.loss_dice: 1.0476  mix_decode.d1.loss_cls: 0.3188  mix_decode.d1.loss_mask: 0.5987  mix_decode.d1.loss_dice: 0.9809  mix_decode.d2.loss_cls: 0.3157  mix_decode.d2.loss_mask: 0.5894  mix_decode.d2.loss_dice: 0.9861  mix_decode.d3.loss_cls: 0.3279  mix_decode.d3.loss_mask: 0.5628  mix_decode.d3.loss_dice: 0.9851  mix_decode.d4.loss_cls: 0.3250  mix_decode.d4.loss_mask: 0.5995  mix_decode.d4.loss_dice: 0.9770  mix_decode.d5.loss_cls: 0.3094  mix_decode.d5.loss_mask: 0.6008  mix_decode.d5.loss_dice: 1.0106  mix_decode.d6.loss_cls: 0.3234  mix_decode.d6.loss_mask: 0.6294  mix_decode.d6.loss_dice: 0.9916  mix_decode.d7.loss_cls: 0.3000  mix_decode.d7.loss_mask: 0.5942  mix_decode.d7.loss_dice: 0.9977  mix_decode.d8.loss_cls: 0.3130  mix_decode.d8.loss_mask: 0.5972  mix_decode.d8.loss_dice: 1.0176
2025/03/28 19:07:52 - mmengine - INFO - Iter(train) [ 5750/20000]  base_lr: 7.3710e-05 lr: 7.3710e-05  eta: 5:24:37  time: 1.9540  data_time: 0.0288  memory: 10737  loss: 59.8575  decode.loss_cls: 0.7076  decode.loss_mask: 1.8301  decode.loss_dice: 1.7319  decode.d0.loss_cls: 0.7540  decode.d0.loss_mask: 1.7177  decode.d0.loss_dice: 1.6660  decode.d1.loss_cls: 0.6273  decode.d1.loss_mask: 1.7761  decode.d1.loss_dice: 1.6828  decode.d2.loss_cls: 0.6684  decode.d2.loss_mask: 1.7567  decode.d2.loss_dice: 1.7330  decode.d3.loss_cls: 0.6864  decode.d3.loss_mask: 1.7789  decode.d3.loss_dice: 1.6916  decode.d4.loss_cls: 0.6609  decode.d4.loss_mask: 1.7030  decode.d4.loss_dice: 1.7231  decode.d5.loss_cls: 0.6797  decode.d5.loss_mask: 1.6737  decode.d5.loss_dice: 1.6537  decode.d6.loss_cls: 0.6463  decode.d6.loss_mask: 1.7934  decode.d6.loss_dice: 1.7233  decode.d7.loss_cls: 0.6038  decode.d7.loss_mask: 1.8180  decode.d7.loss_dice: 1.7581  decode.d8.loss_cls: 0.6118  decode.d8.loss_mask: 1.8141  decode.d8.loss_dice: 1.6933  mix_decode.loss_cls: 0.3364  mix_decode.loss_mask: 0.7347  mix_decode.loss_dice: 0.7420  mix_decode.d0.loss_cls: 0.4324  mix_decode.d0.loss_mask: 0.6794  mix_decode.d0.loss_dice: 0.7420  mix_decode.d1.loss_cls: 0.3874  mix_decode.d1.loss_mask: 0.6724  mix_decode.d1.loss_dice: 0.7542  mix_decode.d2.loss_cls: 0.3966  mix_decode.d2.loss_mask: 0.6829  mix_decode.d2.loss_dice: 0.7531  mix_decode.d3.loss_cls: 0.3862  mix_decode.d3.loss_mask: 0.7320  mix_decode.d3.loss_dice: 0.7770  mix_decode.d4.loss_cls: 0.3863  mix_decode.d4.loss_mask: 0.6993  mix_decode.d4.loss_dice: 0.7734  mix_decode.d5.loss_cls: 0.3711  mix_decode.d5.loss_mask: 0.6989  mix_decode.d5.loss_dice: 0.7731  mix_decode.d6.loss_cls: 0.3910  mix_decode.d6.loss_mask: 0.7564  mix_decode.d6.loss_dice: 0.7794  mix_decode.d7.loss_cls: 0.3109  mix_decode.d7.loss_mask: 0.7640  mix_decode.d7.loss_dice: 0.7538  mix_decode.d8.loss_cls: 0.3699  mix_decode.d8.loss_mask: 0.7195  mix_decode.d8.loss_dice: 0.7368
2025/03/28 19:09:26 - mmengine - INFO - Iter(train) [ 5800/20000]  base_lr: 7.3477e-05 lr: 7.3477e-05  eta: 5:24:32  time: 1.9093  data_time: 0.0261  memory: 10736  loss: 54.8022  decode.loss_cls: 0.4778  decode.loss_mask: 1.4808  decode.loss_dice: 1.6309  decode.d0.loss_cls: 0.6587  decode.d0.loss_mask: 1.3435  decode.d0.loss_dice: 1.6721  decode.d1.loss_cls: 0.4503  decode.d1.loss_mask: 1.4134  decode.d1.loss_dice: 1.7222  decode.d2.loss_cls: 0.5532  decode.d2.loss_mask: 1.4304  decode.d2.loss_dice: 1.6410  decode.d3.loss_cls: 0.6310  decode.d3.loss_mask: 1.3880  decode.d3.loss_dice: 1.6127  decode.d4.loss_cls: 0.5902  decode.d4.loss_mask: 1.4117  decode.d4.loss_dice: 1.6052  decode.d5.loss_cls: 0.6041  decode.d5.loss_mask: 1.4737  decode.d5.loss_dice: 1.6507  decode.d6.loss_cls: 0.6114  decode.d6.loss_mask: 1.3893  decode.d6.loss_dice: 1.5942  decode.d7.loss_cls: 0.5122  decode.d7.loss_mask: 1.4302  decode.d7.loss_dice: 1.6406  decode.d8.loss_cls: 0.5157  decode.d8.loss_mask: 1.4271  decode.d8.loss_dice: 1.6181  mix_decode.loss_cls: 0.3603  mix_decode.loss_mask: 0.5812  mix_decode.loss_dice: 0.8947  mix_decode.d0.loss_cls: 0.3717  mix_decode.d0.loss_mask: 0.5788  mix_decode.d0.loss_dice: 0.9655  mix_decode.d1.loss_cls: 0.3338  mix_decode.d1.loss_mask: 0.5970  mix_decode.d1.loss_dice: 0.9142  mix_decode.d2.loss_cls: 0.3178  mix_decode.d2.loss_mask: 0.5996  mix_decode.d2.loss_dice: 0.9029  mix_decode.d3.loss_cls: 0.3867  mix_decode.d3.loss_mask: 0.6022  mix_decode.d3.loss_dice: 0.8808  mix_decode.d4.loss_cls: 0.3684  mix_decode.d4.loss_mask: 0.6040  mix_decode.d4.loss_dice: 0.8787  mix_decode.d5.loss_cls: 0.3223  mix_decode.d5.loss_mask: 0.6196  mix_decode.d5.loss_dice: 0.9171  mix_decode.d6.loss_cls: 0.3698  mix_decode.d6.loss_mask: 0.6062  mix_decode.d6.loss_dice: 0.9137  mix_decode.d7.loss_cls: 0.3251  mix_decode.d7.loss_mask: 0.6279  mix_decode.d7.loss_dice: 0.9202  mix_decode.d8.loss_cls: 0.3437  mix_decode.d8.loss_mask: 0.6108  mix_decode.d8.loss_dice: 0.9068
2025/03/28 19:11:01 - mmengine - INFO - Iter(train) [ 5850/20000]  base_lr: 7.3244e-05 lr: 7.3244e-05  eta: 5:24:27  time: 1.8775  data_time: 0.0279  memory: 10734  loss: 53.4471  decode.loss_cls: 0.2764  decode.loss_mask: 1.6700  decode.loss_dice: 1.7181  decode.d0.loss_cls: 0.5162  decode.d0.loss_mask: 1.6278  decode.d0.loss_dice: 1.6615  decode.d1.loss_cls: 0.4032  decode.d1.loss_mask: 1.6332  decode.d1.loss_dice: 1.6683  decode.d2.loss_cls: 0.3029  decode.d2.loss_mask: 1.6834  decode.d2.loss_dice: 1.6951  decode.d3.loss_cls: 0.2906  decode.d3.loss_mask: 1.7385  decode.d3.loss_dice: 1.7245  decode.d4.loss_cls: 0.2965  decode.d4.loss_mask: 1.7211  decode.d4.loss_dice: 1.7398  decode.d5.loss_cls: 0.3780  decode.d5.loss_mask: 1.5952  decode.d5.loss_dice: 1.6101  decode.d6.loss_cls: 0.3527  decode.d6.loss_mask: 1.5794  decode.d6.loss_dice: 1.6538  decode.d7.loss_cls: 0.2905  decode.d7.loss_mask: 1.6434  decode.d7.loss_dice: 1.7256  decode.d8.loss_cls: 0.3475  decode.d8.loss_mask: 1.6484  decode.d8.loss_dice: 1.6616  mix_decode.loss_cls: 0.1775  mix_decode.loss_mask: 0.7367  mix_decode.loss_dice: 0.8041  mix_decode.d0.loss_cls: 0.2508  mix_decode.d0.loss_mask: 0.6623  mix_decode.d0.loss_dice: 0.7782  mix_decode.d1.loss_cls: 0.1938  mix_decode.d1.loss_mask: 0.6973  mix_decode.d1.loss_dice: 0.7538  mix_decode.d2.loss_cls: 0.1928  mix_decode.d2.loss_mask: 0.6619  mix_decode.d2.loss_dice: 0.7460  mix_decode.d3.loss_cls: 0.1725  mix_decode.d3.loss_mask: 0.6825  mix_decode.d3.loss_dice: 0.7845  mix_decode.d4.loss_cls: 0.1633  mix_decode.d4.loss_mask: 0.7014  mix_decode.d4.loss_dice: 0.7905  mix_decode.d5.loss_cls: 0.1831  mix_decode.d5.loss_mask: 0.6474  mix_decode.d5.loss_dice: 0.7721  mix_decode.d6.loss_cls: 0.1755  mix_decode.d6.loss_mask: 0.6925  mix_decode.d6.loss_dice: 0.8042  mix_decode.d7.loss_cls: 0.1543  mix_decode.d7.loss_mask: 0.7136  mix_decode.d7.loss_dice: 0.8094  mix_decode.d8.loss_cls: 0.1699  mix_decode.d8.loss_mask: 0.7112  mix_decode.d8.loss_dice: 0.8108
2025/03/28 19:12:37 - mmengine - INFO - Iter(train) [ 5900/20000]  base_lr: 7.3011e-05 lr: 7.3011e-05  eta: 5:24:23  time: 1.8835  data_time: 0.0256  memory: 10734  loss: 59.5228  decode.loss_cls: 0.5844  decode.loss_mask: 1.7932  decode.loss_dice: 1.7339  decode.d0.loss_cls: 0.7562  decode.d0.loss_mask: 1.7403  decode.d0.loss_dice: 1.7846  decode.d1.loss_cls: 0.6910  decode.d1.loss_mask: 1.6942  decode.d1.loss_dice: 1.7111  decode.d2.loss_cls: 0.6353  decode.d2.loss_mask: 1.8176  decode.d2.loss_dice: 1.7419  decode.d3.loss_cls: 0.6789  decode.d3.loss_mask: 1.7760  decode.d3.loss_dice: 1.7041  decode.d4.loss_cls: 0.6910  decode.d4.loss_mask: 1.7327  decode.d4.loss_dice: 1.6346  decode.d5.loss_cls: 0.6625  decode.d5.loss_mask: 1.6362  decode.d5.loss_dice: 1.5844  decode.d6.loss_cls: 0.5494  decode.d6.loss_mask: 1.7942  decode.d6.loss_dice: 1.7026  decode.d7.loss_cls: 0.6105  decode.d7.loss_mask: 1.7213  decode.d7.loss_dice: 1.7389  decode.d8.loss_cls: 0.5479  decode.d8.loss_mask: 1.7336  decode.d8.loss_dice: 1.7440  mix_decode.loss_cls: 0.2025  mix_decode.loss_mask: 0.7703  mix_decode.loss_dice: 0.8318  mix_decode.d0.loss_cls: 0.2511  mix_decode.d0.loss_mask: 0.7734  mix_decode.d0.loss_dice: 0.8501  mix_decode.d1.loss_cls: 0.2093  mix_decode.d1.loss_mask: 0.7875  mix_decode.d1.loss_dice: 0.8671  mix_decode.d2.loss_cls: 0.1981  mix_decode.d2.loss_mask: 0.8341  mix_decode.d2.loss_dice: 0.8663  mix_decode.d3.loss_cls: 0.2043  mix_decode.d3.loss_mask: 0.8251  mix_decode.d3.loss_dice: 0.8710  mix_decode.d4.loss_cls: 0.2099  mix_decode.d4.loss_mask: 0.7667  mix_decode.d4.loss_dice: 0.8426  mix_decode.d5.loss_cls: 0.2512  mix_decode.d5.loss_mask: 0.8065  mix_decode.d5.loss_dice: 0.8541  mix_decode.d6.loss_cls: 0.2047  mix_decode.d6.loss_mask: 0.7962  mix_decode.d6.loss_dice: 0.8581  mix_decode.d7.loss_cls: 0.2010  mix_decode.d7.loss_mask: 0.7677  mix_decode.d7.loss_dice: 0.8650  mix_decode.d8.loss_cls: 0.2036  mix_decode.d8.loss_mask: 0.7548  mix_decode.d8.loss_dice: 0.8724
2025/03/28 19:14:07 - mmengine - INFO - Iter(train) [ 5950/20000]  base_lr: 7.2778e-05 lr: 7.2778e-05  eta: 5:24:04  time: 1.7663  data_time: 0.0330  memory: 10738  loss: 56.2159  decode.loss_cls: 0.4765  decode.loss_mask: 1.4524  decode.loss_dice: 1.7890  decode.d0.loss_cls: 0.6461  decode.d0.loss_mask: 1.3047  decode.d0.loss_dice: 1.7432  decode.d1.loss_cls: 0.5155  decode.d1.loss_mask: 1.4819  decode.d1.loss_dice: 1.7518  decode.d2.loss_cls: 0.4943  decode.d2.loss_mask: 1.5102  decode.d2.loss_dice: 1.7437  decode.d3.loss_cls: 0.4789  decode.d3.loss_mask: 1.5107  decode.d3.loss_dice: 1.7677  decode.d4.loss_cls: 0.4921  decode.d4.loss_mask: 1.3386  decode.d4.loss_dice: 1.8058  decode.d5.loss_cls: 0.5125  decode.d5.loss_mask: 1.3461  decode.d5.loss_dice: 1.7290  decode.d6.loss_cls: 0.5406  decode.d6.loss_mask: 1.3494  decode.d6.loss_dice: 1.7867  decode.d7.loss_cls: 0.5330  decode.d7.loss_mask: 1.3711  decode.d7.loss_dice: 1.7846  decode.d8.loss_cls: 0.4919  decode.d8.loss_mask: 1.3535  decode.d8.loss_dice: 1.7686  mix_decode.loss_cls: 0.3681  mix_decode.loss_mask: 0.6310  mix_decode.loss_dice: 0.9131  mix_decode.d0.loss_cls: 0.3577  mix_decode.d0.loss_mask: 0.6523  mix_decode.d0.loss_dice: 0.9963  mix_decode.d1.loss_cls: 0.4021  mix_decode.d1.loss_mask: 0.6550  mix_decode.d1.loss_dice: 0.9222  mix_decode.d2.loss_cls: 0.3705  mix_decode.d2.loss_mask: 0.6588  mix_decode.d2.loss_dice: 0.9264  mix_decode.d3.loss_cls: 0.3475  mix_decode.d3.loss_mask: 0.6303  mix_decode.d3.loss_dice: 0.9504  mix_decode.d4.loss_cls: 0.3639  mix_decode.d4.loss_mask: 0.6369  mix_decode.d4.loss_dice: 0.9146  mix_decode.d5.loss_cls: 0.3346  mix_decode.d5.loss_mask: 0.6482  mix_decode.d5.loss_dice: 0.9322  mix_decode.d6.loss_cls: 0.3115  mix_decode.d6.loss_mask: 0.6503  mix_decode.d6.loss_dice: 0.9315  mix_decode.d7.loss_cls: 0.3500  mix_decode.d7.loss_mask: 0.6346  mix_decode.d7.loss_dice: 0.9150  mix_decode.d8.loss_cls: 0.2985  mix_decode.d8.loss_mask: 0.6828  mix_decode.d8.loss_dice: 0.9591
2025/03/28 19:15:41 - mmengine - INFO - Exp name: r2u_20250328_164133
2025/03/28 19:15:41 - mmengine - INFO - Iter(train) [ 6000/20000]  base_lr: 7.2545e-05 lr: 7.2545e-05  eta: 5:23:52  time: 1.8548  data_time: 0.0251  memory: 10725  loss: 58.8062  decode.loss_cls: 0.5647  decode.loss_mask: 1.6132  decode.loss_dice: 1.7361  decode.d0.loss_cls: 0.6477  decode.d0.loss_mask: 1.6533  decode.d0.loss_dice: 1.8176  decode.d1.loss_cls: 0.5928  decode.d1.loss_mask: 1.5685  decode.d1.loss_dice: 1.8133  decode.d2.loss_cls: 0.4698  decode.d2.loss_mask: 1.7166  decode.d2.loss_dice: 1.8306  decode.d3.loss_cls: 0.5548  decode.d3.loss_mask: 1.6450  decode.d3.loss_dice: 1.7952  decode.d4.loss_cls: 0.4741  decode.d4.loss_mask: 1.6907  decode.d4.loss_dice: 1.8611  decode.d5.loss_cls: 0.5347  decode.d5.loss_mask: 1.6023  decode.d5.loss_dice: 1.7746  decode.d6.loss_cls: 0.5016  decode.d6.loss_mask: 1.6483  decode.d6.loss_dice: 1.7901  decode.d7.loss_cls: 0.4971  decode.d7.loss_mask: 1.6163  decode.d7.loss_dice: 1.7840  decode.d8.loss_cls: 0.6718  decode.d8.loss_mask: 1.6020  decode.d8.loss_dice: 1.7582  mix_decode.loss_cls: 0.3131  mix_decode.loss_mask: 0.6963  mix_decode.loss_dice: 0.8647  mix_decode.d0.loss_cls: 0.4162  mix_decode.d0.loss_mask: 0.6511  mix_decode.d0.loss_dice: 0.8919  mix_decode.d1.loss_cls: 0.3620  mix_decode.d1.loss_mask: 0.6787  mix_decode.d1.loss_dice: 0.8779  mix_decode.d2.loss_cls: 0.3428  mix_decode.d2.loss_mask: 0.6957  mix_decode.d2.loss_dice: 0.8842  mix_decode.d3.loss_cls: 0.3687  mix_decode.d3.loss_mask: 0.6473  mix_decode.d3.loss_dice: 0.8443  mix_decode.d4.loss_cls: 0.3798  mix_decode.d4.loss_mask: 0.6961  mix_decode.d4.loss_dice: 0.8628  mix_decode.d5.loss_cls: 0.3520  mix_decode.d5.loss_mask: 0.6695  mix_decode.d5.loss_dice: 0.8503  mix_decode.d6.loss_cls: 0.2981  mix_decode.d6.loss_mask: 0.7080  mix_decode.d6.loss_dice: 0.8410  mix_decode.d7.loss_cls: 0.3247  mix_decode.d7.loss_mask: 0.7077  mix_decode.d7.loss_dice: 0.8520  mix_decode.d8.loss_cls: 0.3762  mix_decode.d8.loss_mask: 0.6869  mix_decode.d8.loss_dice: 0.8401
2025/03/28 19:15:41 - mmengine - INFO - Saving checkpoint at 6000 iterations
2025/03/28 19:15:50 - mmengine - INFO - Iter(val) [  50/2708]    eta: 0:06:55  time: 0.1905  data_time: 0.0030  memory: 3055  
2025/03/28 19:15:57 - mmengine - INFO - Iter(val) [ 100/2708]    eta: 0:06:34  time: 0.1083  data_time: 0.0020  memory: 3055  
2025/03/28 19:16:04 - mmengine - INFO - Iter(val) [ 150/2708]    eta: 0:06:21  time: 0.1330  data_time: 0.0023  memory: 3055  
2025/03/28 19:16:12 - mmengine - INFO - Iter(val) [ 200/2708]    eta: 0:06:19  time: 0.1885  data_time: 0.0020  memory: 3055  
2025/03/28 19:16:20 - mmengine - INFO - Iter(val) [ 250/2708]    eta: 0:06:11  time: 0.1228  data_time: 0.0021  memory: 3055  
2025/03/28 19:16:27 - mmengine - INFO - Iter(val) [ 300/2708]    eta: 0:05:58  time: 0.1064  data_time: 0.0020  memory: 3055  
2025/03/28 19:16:35 - mmengine - INFO - Iter(val) [ 350/2708]    eta: 0:05:54  time: 0.1908  data_time: 0.0018  memory: 3055  
2025/03/28 19:16:42 - mmengine - INFO - Iter(val) [ 400/2708]    eta: 0:05:48  time: 0.1600  data_time: 0.0021  memory: 3055  
2025/03/28 19:16:49 - mmengine - INFO - Iter(val) [ 450/2708]    eta: 0:05:37  time: 0.1032  data_time: 0.0018  memory: 3055  
2025/03/28 19:16:57 - mmengine - INFO - Iter(val) [ 500/2708]    eta: 0:05:29  time: 0.1463  data_time: 0.0019  memory: 3055  
2025/03/28 19:17:05 - mmengine - INFO - Iter(val) [ 550/2708]    eta: 0:05:24  time: 0.1896  data_time: 0.0021  memory: 3055  
2025/03/28 19:17:12 - mmengine - INFO - Iter(val) [ 600/2708]    eta: 0:05:15  time: 0.1384  data_time: 0.0021  memory: 3055  
2025/03/28 19:17:19 - mmengine - INFO - Iter(val) [ 650/2708]    eta: 0:05:07  time: 0.1144  data_time: 0.0023  memory: 3055  
2025/03/28 19:17:27 - mmengine - INFO - Iter(val) [ 700/2708]    eta: 0:05:00  time: 0.1866  data_time: 0.0022  memory: 3055  
2025/03/28 19:17:35 - mmengine - INFO - Iter(val) [ 750/2708]    eta: 0:04:53  time: 0.1643  data_time: 0.0020  memory: 3055  
2025/03/28 19:17:42 - mmengine - INFO - Iter(val) [ 800/2708]    eta: 0:04:45  time: 0.1058  data_time: 0.0020  memory: 3055  
2025/03/28 19:17:49 - mmengine - INFO - Iter(val) [ 850/2708]    eta: 0:04:38  time: 0.1737  data_time: 0.0030  memory: 3055  
2025/03/28 19:17:57 - mmengine - INFO - Iter(val) [ 900/2708]    eta: 0:04:31  time: 0.1869  data_time: 0.0023  memory: 3055  
2025/03/28 19:18:04 - mmengine - INFO - Iter(val) [ 950/2708]    eta: 0:04:23  time: 0.1145  data_time: 0.0019  memory: 3055  
2025/03/28 19:18:12 - mmengine - INFO - Iter(val) [1000/2708]    eta: 0:04:14  time: 0.1124  data_time: 0.0018  memory: 3055  
2025/03/28 19:18:19 - mmengine - INFO - Iter(val) [1050/2708]    eta: 0:04:08  time: 0.1896  data_time: 0.0023  memory: 3055  
2025/03/28 19:18:27 - mmengine - INFO - Iter(val) [1100/2708]    eta: 0:04:00  time: 0.1537  data_time: 0.0018  memory: 3055  
2025/03/28 19:18:34 - mmengine - INFO - Iter(val) [1150/2708]    eta: 0:03:52  time: 0.1040  data_time: 0.0020  memory: 3055  
2025/03/28 19:18:42 - mmengine - INFO - Iter(val) [1200/2708]    eta: 0:03:45  time: 0.1717  data_time: 0.0020  memory: 3055  
2025/03/28 19:18:50 - mmengine - INFO - Iter(val) [1250/2708]    eta: 0:03:38  time: 0.1890  data_time: 0.0019  memory: 3055  
2025/03/28 19:18:57 - mmengine - INFO - Iter(val) [1300/2708]    eta: 0:03:30  time: 0.1085  data_time: 0.0025  memory: 3055  
2025/03/28 19:19:04 - mmengine - INFO - Iter(val) [1350/2708]    eta: 0:03:23  time: 0.1700  data_time: 0.0024  memory: 3055  
2025/03/28 19:19:13 - mmengine - INFO - Iter(val) [1400/2708]    eta: 0:03:16  time: 0.1907  data_time: 0.0032  memory: 3055  
2025/03/28 19:19:20 - mmengine - INFO - Iter(val) [1450/2708]    eta: 0:03:08  time: 0.1122  data_time: 0.0030  memory: 3055  
2025/03/28 19:19:28 - mmengine - INFO - Iter(val) [1500/2708]    eta: 0:03:01  time: 0.1901  data_time: 0.0027  memory: 3055  
2025/03/28 19:19:36 - mmengine - INFO - Iter(val) [1550/2708]    eta: 0:02:54  time: 0.1789  data_time: 0.0023  memory: 3055  
2025/03/28 19:19:43 - mmengine - INFO - Iter(val) [1600/2708]    eta: 0:02:46  time: 0.1074  data_time: 0.0029  memory: 3055  
2025/03/28 19:19:50 - mmengine - INFO - Iter(val) [1650/2708]    eta: 0:02:38  time: 0.1751  data_time: 0.0025  memory: 3055  
2025/03/28 19:19:58 - mmengine - INFO - Iter(val) [1700/2708]    eta: 0:02:31  time: 0.1890  data_time: 0.0023  memory: 3055  
2025/03/28 19:20:05 - mmengine - INFO - Iter(val) [1750/2708]    eta: 0:02:23  time: 0.1036  data_time: 0.0018  memory: 3055  
2025/03/28 19:20:13 - mmengine - INFO - Iter(val) [1800/2708]    eta: 0:02:16  time: 0.1659  data_time: 0.0027  memory: 3055  
2025/03/28 19:20:21 - mmengine - INFO - Iter(val) [1850/2708]    eta: 0:02:09  time: 0.1899  data_time: 0.0031  memory: 3055  
2025/03/28 19:20:28 - mmengine - INFO - Iter(val) [1900/2708]    eta: 0:02:01  time: 0.1080  data_time: 0.0022  memory: 3055  
2025/03/28 19:20:36 - mmengine - INFO - Iter(val) [1950/2708]    eta: 0:01:54  time: 0.1549  data_time: 0.0024  memory: 3055  
2025/03/28 19:20:44 - mmengine - INFO - Iter(val) [2000/2708]    eta: 0:01:46  time: 0.1922  data_time: 0.0026  memory: 3055  
2025/03/28 19:20:51 - mmengine - INFO - Iter(val) [2050/2708]    eta: 0:01:39  time: 0.1094  data_time: 0.0024  memory: 3055  
2025/03/28 19:20:59 - mmengine - INFO - Iter(val) [2100/2708]    eta: 0:01:31  time: 0.1795  data_time: 0.0029  memory: 3055  
2025/03/28 19:21:07 - mmengine - INFO - Iter(val) [2150/2708]    eta: 0:01:24  time: 0.1731  data_time: 0.0031  memory: 3055  
2025/03/28 19:21:14 - mmengine - INFO - Iter(val) [2200/2708]    eta: 0:01:16  time: 0.1153  data_time: 0.0024  memory: 3055  
2025/03/28 19:21:23 - mmengine - INFO - Iter(val) [2250/2708]    eta: 0:01:09  time: 0.1906  data_time: 0.0022  memory: 3055  
2025/03/28 19:21:30 - mmengine - INFO - Iter(val) [2300/2708]    eta: 0:01:01  time: 0.1188  data_time: 0.0026  memory: 3055  
2025/03/28 19:21:37 - mmengine - INFO - Iter(val) [2350/2708]    eta: 0:00:54  time: 0.1394  data_time: 0.0033  memory: 3055  
2025/03/28 19:21:46 - mmengine - INFO - Iter(val) [2400/2708]    eta: 0:00:46  time: 0.1916  data_time: 0.0025  memory: 3055  
2025/03/28 19:21:53 - mmengine - INFO - Iter(val) [2450/2708]    eta: 0:00:39  time: 0.1085  data_time: 0.0023  memory: 3055  
2025/03/28 19:22:01 - mmengine - INFO - Iter(val) [2500/2708]    eta: 0:00:31  time: 0.1929  data_time: 0.0034  memory: 3055  
2025/03/28 19:22:09 - mmengine - INFO - Iter(val) [2550/2708]    eta: 0:00:23  time: 0.1616  data_time: 0.0025  memory: 3055  
2025/03/28 19:22:16 - mmengine - INFO - Iter(val) [2600/2708]    eta: 0:00:16  time: 0.1072  data_time: 0.0023  memory: 3055  
2025/03/28 19:22:24 - mmengine - INFO - Iter(val) [2650/2708]    eta: 0:00:08  time: 0.1918  data_time: 0.0027  memory: 3055  
2025/03/28 19:22:32 - mmengine - INFO - Iter(val) [2700/2708]    eta: 0:00:01  time: 0.1530  data_time: 0.0028  memory: 3055  
2025/03/28 19:22:33 - mmengine - INFO - per class results:
2025/03/28 19:22:33 - mmengine - INFO - 
+--------------+-------+-------+
|    Class     |  IoU  |  Acc  |
+--------------+-------+-------+
|  background  | 42.23 | 82.26 |
|   building   | 55.83 | 62.74 |
|     road     | 35.06 | 36.17 |
|    water     | 74.77 | 82.79 |
|    barren    | 41.65 | 59.15 |
|    forest    | 47.33 | 53.22 |
| agricultural |  57.3 | 61.86 |
+--------------+-------+-------+
2025/03/28 19:22:33 - mmengine - INFO - Iter(val) [2708/2708]    aAcc: 66.6600  mIoU: 50.6000  mAcc: 62.6000  data_time: 0.0024  time: 0.1514
2025/03/28 19:24:10 - mmengine - INFO - Iter(train) [ 6050/20000]  base_lr: 7.2312e-05 lr: 7.2312e-05  eta: 5:23:48  time: 1.8638  data_time: 0.0293  memory: 10752  loss: 55.7741  decode.loss_cls: 0.4265  decode.loss_mask: 1.4701  decode.loss_dice: 1.7275  decode.d0.loss_cls: 0.6202  decode.d0.loss_mask: 1.4636  decode.d0.loss_dice: 1.7709  decode.d1.loss_cls: 0.4093  decode.d1.loss_mask: 1.4563  decode.d1.loss_dice: 1.7166  decode.d2.loss_cls: 0.3962  decode.d2.loss_mask: 1.4977  decode.d2.loss_dice: 1.7663  decode.d3.loss_cls: 0.4577  decode.d3.loss_mask: 1.4759  decode.d3.loss_dice: 1.7248  decode.d4.loss_cls: 0.3847  decode.d4.loss_mask: 1.5486  decode.d4.loss_dice: 1.7972  decode.d5.loss_cls: 0.4197  decode.d5.loss_mask: 1.5044  decode.d5.loss_dice: 1.6914  decode.d6.loss_cls: 0.4030  decode.d6.loss_mask: 1.4859  decode.d6.loss_dice: 1.7336  decode.d7.loss_cls: 0.4089  decode.d7.loss_mask: 1.5094  decode.d7.loss_dice: 1.7415  decode.d8.loss_cls: 0.3669  decode.d8.loss_mask: 1.4736  decode.d8.loss_dice: 1.7720  mix_decode.loss_cls: 0.3162  mix_decode.loss_mask: 0.6779  mix_decode.loss_dice: 0.9062  mix_decode.d0.loss_cls: 0.3618  mix_decode.d0.loss_mask: 0.6873  mix_decode.d0.loss_dice: 0.9344  mix_decode.d1.loss_cls: 0.3272  mix_decode.d1.loss_mask: 0.6560  mix_decode.d1.loss_dice: 0.8807  mix_decode.d2.loss_cls: 0.3197  mix_decode.d2.loss_mask: 0.6826  mix_decode.d2.loss_dice: 0.9096  mix_decode.d3.loss_cls: 0.3377  mix_decode.d3.loss_mask: 0.6866  mix_decode.d3.loss_dice: 0.8959  mix_decode.d4.loss_cls: 0.3446  mix_decode.d4.loss_mask: 0.6867  mix_decode.d4.loss_dice: 0.8876  mix_decode.d5.loss_cls: 0.3200  mix_decode.d5.loss_mask: 0.7022  mix_decode.d5.loss_dice: 0.8961  mix_decode.d6.loss_cls: 0.2957  mix_decode.d6.loss_mask: 0.7243  mix_decode.d6.loss_dice: 0.9095  mix_decode.d7.loss_cls: 0.3117  mix_decode.d7.loss_mask: 0.7155  mix_decode.d7.loss_dice: 0.8957  mix_decode.d8.loss_cls: 0.2821  mix_decode.d8.loss_mask: 0.6894  mix_decode.d8.loss_dice: 0.9130
2025/03/28 19:25:45 - mmengine - INFO - Iter(train) [ 6100/20000]  base_lr: 7.2079e-05 lr: 7.2079e-05  eta: 5:23:36  time: 2.0020  data_time: 0.0312  memory: 10751  loss: 64.0745  decode.loss_cls: 0.7919  decode.loss_mask: 1.8059  decode.loss_dice: 1.9389  decode.d0.loss_cls: 0.7124  decode.d0.loss_mask: 1.8817  decode.d0.loss_dice: 1.9494  decode.d1.loss_cls: 0.7192  decode.d1.loss_mask: 1.8485  decode.d1.loss_dice: 1.9776  decode.d2.loss_cls: 0.7463  decode.d2.loss_mask: 1.8282  decode.d2.loss_dice: 1.9478  decode.d3.loss_cls: 0.7954  decode.d3.loss_mask: 1.8191  decode.d3.loss_dice: 1.9973  decode.d4.loss_cls: 0.7124  decode.d4.loss_mask: 1.8292  decode.d4.loss_dice: 1.9756  decode.d5.loss_cls: 0.7288  decode.d5.loss_mask: 1.8217  decode.d5.loss_dice: 1.9807  decode.d6.loss_cls: 0.7137  decode.d6.loss_mask: 1.8619  decode.d6.loss_dice: 1.9837  decode.d7.loss_cls: 0.7622  decode.d7.loss_mask: 1.8542  decode.d7.loss_dice: 1.9580  decode.d8.loss_cls: 0.7447  decode.d8.loss_mask: 1.8429  decode.d8.loss_dice: 1.9717  mix_decode.loss_cls: 0.3193  mix_decode.loss_mask: 0.5769  mix_decode.loss_dice: 0.9847  mix_decode.d0.loss_cls: 0.3400  mix_decode.d0.loss_mask: 0.5712  mix_decode.d0.loss_dice: 0.9557  mix_decode.d1.loss_cls: 0.3622  mix_decode.d1.loss_mask: 0.5593  mix_decode.d1.loss_dice: 0.9197  mix_decode.d2.loss_cls: 0.3530  mix_decode.d2.loss_mask: 0.5606  mix_decode.d2.loss_dice: 0.9481  mix_decode.d3.loss_cls: 0.3511  mix_decode.d3.loss_mask: 0.5678  mix_decode.d3.loss_dice: 0.9413  mix_decode.d4.loss_cls: 0.3565  mix_decode.d4.loss_mask: 0.5493  mix_decode.d4.loss_dice: 0.9405  mix_decode.d5.loss_cls: 0.3737  mix_decode.d5.loss_mask: 0.5691  mix_decode.d5.loss_dice: 0.9589  mix_decode.d6.loss_cls: 0.3088  mix_decode.d6.loss_mask: 0.5631  mix_decode.d6.loss_dice: 0.9735  mix_decode.d7.loss_cls: 0.3399  mix_decode.d7.loss_mask: 0.5620  mix_decode.d7.loss_dice: 0.9637  mix_decode.d8.loss_cls: 0.3306  mix_decode.d8.loss_mask: 0.5396  mix_decode.d8.loss_dice: 0.9339
2025/03/28 19:27:23 - mmengine - INFO - Iter(train) [ 6150/20000]  base_lr: 7.1845e-05 lr: 7.1845e-05  eta: 5:23:29  time: 1.9815  data_time: 0.0299  memory: 10739  loss: 54.4508  decode.loss_cls: 0.3683  decode.loss_mask: 1.2974  decode.loss_dice: 1.9226  decode.d0.loss_cls: 0.5104  decode.d0.loss_mask: 1.3061  decode.d0.loss_dice: 1.9752  decode.d1.loss_cls: 0.4217  decode.d1.loss_mask: 1.3419  decode.d1.loss_dice: 1.9381  decode.d2.loss_cls: 0.3861  decode.d2.loss_mask: 1.3098  decode.d2.loss_dice: 1.9155  decode.d3.loss_cls: 0.4335  decode.d3.loss_mask: 1.3255  decode.d3.loss_dice: 1.9098  decode.d4.loss_cls: 0.3755  decode.d4.loss_mask: 1.2947  decode.d4.loss_dice: 1.8771  decode.d5.loss_cls: 0.3877  decode.d5.loss_mask: 1.3090  decode.d5.loss_dice: 1.8882  decode.d6.loss_cls: 0.3997  decode.d6.loss_mask: 1.3116  decode.d6.loss_dice: 1.9181  decode.d7.loss_cls: 0.3630  decode.d7.loss_mask: 1.2771  decode.d7.loss_dice: 1.9456  decode.d8.loss_cls: 0.3942  decode.d8.loss_mask: 1.2906  decode.d8.loss_dice: 1.9105  mix_decode.loss_cls: 0.2527  mix_decode.loss_mask: 0.5772  mix_decode.loss_dice: 1.0058  mix_decode.d0.loss_cls: 0.2813  mix_decode.d0.loss_mask: 0.5708  mix_decode.d0.loss_dice: 1.0184  mix_decode.d1.loss_cls: 0.2489  mix_decode.d1.loss_mask: 0.5861  mix_decode.d1.loss_dice: 0.9754  mix_decode.d2.loss_cls: 0.2714  mix_decode.d2.loss_mask: 0.5651  mix_decode.d2.loss_dice: 0.9954  mix_decode.d3.loss_cls: 0.2543  mix_decode.d3.loss_mask: 0.5619  mix_decode.d3.loss_dice: 0.9789  mix_decode.d4.loss_cls: 0.2774  mix_decode.d4.loss_mask: 0.5705  mix_decode.d4.loss_dice: 0.9841  mix_decode.d5.loss_cls: 0.2809  mix_decode.d5.loss_mask: 0.5580  mix_decode.d5.loss_dice: 0.9696  mix_decode.d6.loss_cls: 0.2699  mix_decode.d6.loss_mask: 0.5377  mix_decode.d6.loss_dice: 0.9691  mix_decode.d7.loss_cls: 0.2562  mix_decode.d7.loss_mask: 0.5567  mix_decode.d7.loss_dice: 0.9868  mix_decode.d8.loss_cls: 0.2367  mix_decode.d8.loss_mask: 0.5580  mix_decode.d8.loss_dice: 0.9909
2025/03/28 19:29:01 - mmengine - INFO - Iter(train) [ 6200/20000]  base_lr: 7.1612e-05 lr: 7.1612e-05  eta: 5:23:21  time: 1.8852  data_time: 0.0300  memory: 10734  loss: 56.4815  decode.loss_cls: 0.8123  decode.loss_mask: 1.4458  decode.loss_dice: 1.7649  decode.d0.loss_cls: 0.6379  decode.d0.loss_mask: 1.4554  decode.d0.loss_dice: 1.8167  decode.d1.loss_cls: 0.6848  decode.d1.loss_mask: 1.4395  decode.d1.loss_dice: 1.7709  decode.d2.loss_cls: 0.7671  decode.d2.loss_mask: 1.3854  decode.d2.loss_dice: 1.7682  decode.d3.loss_cls: 0.8638  decode.d3.loss_mask: 1.4481  decode.d3.loss_dice: 1.7447  decode.d4.loss_cls: 0.8483  decode.d4.loss_mask: 1.3692  decode.d4.loss_dice: 1.7141  decode.d5.loss_cls: 0.9322  decode.d5.loss_mask: 1.3959  decode.d5.loss_dice: 1.7247  decode.d6.loss_cls: 0.8889  decode.d6.loss_mask: 1.4320  decode.d6.loss_dice: 1.6978  decode.d7.loss_cls: 0.8298  decode.d7.loss_mask: 1.4527  decode.d7.loss_dice: 1.7669  decode.d8.loss_cls: 0.8042  decode.d8.loss_mask: 1.5254  decode.d8.loss_dice: 1.7673  mix_decode.loss_cls: 0.2410  mix_decode.loss_mask: 0.5771  mix_decode.loss_dice: 0.8019  mix_decode.d0.loss_cls: 0.2569  mix_decode.d0.loss_mask: 0.5835  mix_decode.d0.loss_dice: 0.8389  mix_decode.d1.loss_cls: 0.2221  mix_decode.d1.loss_mask: 0.5955  mix_decode.d1.loss_dice: 0.8262  mix_decode.d2.loss_cls: 0.2254  mix_decode.d2.loss_mask: 0.5824  mix_decode.d2.loss_dice: 0.8079  mix_decode.d3.loss_cls: 0.2819  mix_decode.d3.loss_mask: 0.5719  mix_decode.d3.loss_dice: 0.8092  mix_decode.d4.loss_cls: 0.3109  mix_decode.d4.loss_mask: 0.5943  mix_decode.d4.loss_dice: 0.8080  mix_decode.d5.loss_cls: 0.2911  mix_decode.d5.loss_mask: 0.5715  mix_decode.d5.loss_dice: 0.7931  mix_decode.d6.loss_cls: 0.2875  mix_decode.d6.loss_mask: 0.5705  mix_decode.d6.loss_dice: 0.8046  mix_decode.d7.loss_cls: 0.2426  mix_decode.d7.loss_mask: 0.5843  mix_decode.d7.loss_dice: 0.8122  mix_decode.d8.loss_cls: 0.2517  mix_decode.d8.loss_mask: 0.5884  mix_decode.d8.loss_dice: 0.7943
2025/03/28 19:30:38 - mmengine - INFO - Iter(train) [ 6250/20000]  base_lr: 7.1378e-05 lr: 7.1378e-05  eta: 5:23:09  time: 1.8874  data_time: 0.0302  memory: 10768  loss: 56.3873  decode.loss_cls: 0.5342  decode.loss_mask: 1.5158  decode.loss_dice: 1.9606  decode.d0.loss_cls: 0.5593  decode.d0.loss_mask: 1.4990  decode.d0.loss_dice: 2.0006  decode.d1.loss_cls: 0.6286  decode.d1.loss_mask: 1.4206  decode.d1.loss_dice: 1.9489  decode.d2.loss_cls: 0.5390  decode.d2.loss_mask: 1.4571  decode.d2.loss_dice: 1.8668  decode.d3.loss_cls: 0.5462  decode.d3.loss_mask: 1.4513  decode.d3.loss_dice: 1.9830  decode.d4.loss_cls: 0.4906  decode.d4.loss_mask: 1.4550  decode.d4.loss_dice: 1.9275  decode.d5.loss_cls: 0.5027  decode.d5.loss_mask: 1.5131  decode.d5.loss_dice: 1.9092  decode.d6.loss_cls: 0.5509  decode.d6.loss_mask: 1.4709  decode.d6.loss_dice: 1.9204  decode.d7.loss_cls: 0.4879  decode.d7.loss_mask: 1.4911  decode.d7.loss_dice: 1.9893  decode.d8.loss_cls: 0.3932  decode.d8.loss_mask: 1.5190  decode.d8.loss_dice: 1.9698  mix_decode.loss_cls: 0.1868  mix_decode.loss_mask: 0.6593  mix_decode.loss_dice: 0.8041  mix_decode.d0.loss_cls: 0.2275  mix_decode.d0.loss_mask: 0.6933  mix_decode.d0.loss_dice: 0.8348  mix_decode.d1.loss_cls: 0.2168  mix_decode.d1.loss_mask: 0.6547  mix_decode.d1.loss_dice: 0.7957  mix_decode.d2.loss_cls: 0.1929  mix_decode.d2.loss_mask: 0.6746  mix_decode.d2.loss_dice: 0.7761  mix_decode.d3.loss_cls: 0.2243  mix_decode.d3.loss_mask: 0.6602  mix_decode.d3.loss_dice: 0.7690  mix_decode.d4.loss_cls: 0.2235  mix_decode.d4.loss_mask: 0.6542  mix_decode.d4.loss_dice: 0.8053  mix_decode.d5.loss_cls: 0.2872  mix_decode.d5.loss_mask: 0.6498  mix_decode.d5.loss_dice: 0.7864  mix_decode.d6.loss_cls: 0.2395  mix_decode.d6.loss_mask: 0.6742  mix_decode.d6.loss_dice: 0.7961  mix_decode.d7.loss_cls: 0.2267  mix_decode.d7.loss_mask: 0.6688  mix_decode.d7.loss_dice: 0.8043  mix_decode.d8.loss_cls: 0.1873  mix_decode.d8.loss_mask: 0.6927  mix_decode.d8.loss_dice: 0.8191
2025/03/28 19:32:14 - mmengine - INFO - Iter(train) [ 6300/20000]  base_lr: 7.1144e-05 lr: 7.1144e-05  eta: 5:22:55  time: 1.9807  data_time: 0.0314  memory: 10743  loss: 56.9052  decode.loss_cls: 0.6239  decode.loss_mask: 1.6447  decode.loss_dice: 1.6686  decode.d0.loss_cls: 0.6603  decode.d0.loss_mask: 1.7144  decode.d0.loss_dice: 1.7394  decode.d1.loss_cls: 0.5707  decode.d1.loss_mask: 1.6882  decode.d1.loss_dice: 1.6734  decode.d2.loss_cls: 0.5036  decode.d2.loss_mask: 1.7078  decode.d2.loss_dice: 1.7209  decode.d3.loss_cls: 0.4872  decode.d3.loss_mask: 1.6520  decode.d3.loss_dice: 1.6677  decode.d4.loss_cls: 0.6036  decode.d4.loss_mask: 1.6538  decode.d4.loss_dice: 1.6859  decode.d5.loss_cls: 0.5014  decode.d5.loss_mask: 1.6800  decode.d5.loss_dice: 1.6990  decode.d6.loss_cls: 0.5344  decode.d6.loss_mask: 1.6695  decode.d6.loss_dice: 1.6978  decode.d7.loss_cls: 0.5287  decode.d7.loss_mask: 1.6902  decode.d7.loss_dice: 1.7059  decode.d8.loss_cls: 0.6094  decode.d8.loss_mask: 1.6361  decode.d8.loss_dice: 1.6262  mix_decode.loss_cls: 0.2452  mix_decode.loss_mask: 0.6825  mix_decode.loss_dice: 0.8317  mix_decode.d0.loss_cls: 0.2911  mix_decode.d0.loss_mask: 0.7281  mix_decode.d0.loss_dice: 0.8143  mix_decode.d1.loss_cls: 0.2192  mix_decode.d1.loss_mask: 0.7117  mix_decode.d1.loss_dice: 0.8144  mix_decode.d2.loss_cls: 0.2431  mix_decode.d2.loss_mask: 0.7114  mix_decode.d2.loss_dice: 0.8486  mix_decode.d3.loss_cls: 0.2661  mix_decode.d3.loss_mask: 0.6813  mix_decode.d3.loss_dice: 0.7987  mix_decode.d4.loss_cls: 0.2732  mix_decode.d4.loss_mask: 0.6634  mix_decode.d4.loss_dice: 0.7934  mix_decode.d5.loss_cls: 0.2877  mix_decode.d5.loss_mask: 0.6713  mix_decode.d5.loss_dice: 0.7918  mix_decode.d6.loss_cls: 0.2656  mix_decode.d6.loss_mask: 0.6693  mix_decode.d6.loss_dice: 0.8110  mix_decode.d7.loss_cls: 0.2626  mix_decode.d7.loss_mask: 0.6969  mix_decode.d7.loss_dice: 0.8235  mix_decode.d8.loss_cls: 0.2732  mix_decode.d8.loss_mask: 0.6799  mix_decode.d8.loss_dice: 0.8102
2025/03/28 19:33:44 - mmengine - INFO - Iter(train) [ 6350/20000]  base_lr: 7.0911e-05 lr: 7.0911e-05  eta: 5:22:26  time: 1.2918  data_time: 0.0305  memory: 10728  loss: 49.7163  decode.loss_cls: 0.3944  decode.loss_mask: 1.3851  decode.loss_dice: 1.5483  decode.d0.loss_cls: 0.5345  decode.d0.loss_mask: 1.3135  decode.d0.loss_dice: 1.5962  decode.d1.loss_cls: 0.3912  decode.d1.loss_mask: 1.3642  decode.d1.loss_dice: 1.5796  decode.d2.loss_cls: 0.3277  decode.d2.loss_mask: 1.3703  decode.d2.loss_dice: 1.5132  decode.d3.loss_cls: 0.3817  decode.d3.loss_mask: 1.3078  decode.d3.loss_dice: 1.5198  decode.d4.loss_cls: 0.3480  decode.d4.loss_mask: 1.3327  decode.d4.loss_dice: 1.5254  decode.d5.loss_cls: 0.3259  decode.d5.loss_mask: 1.3753  decode.d5.loss_dice: 1.5543  decode.d6.loss_cls: 0.3341  decode.d6.loss_mask: 1.3466  decode.d6.loss_dice: 1.5565  decode.d7.loss_cls: 0.4275  decode.d7.loss_mask: 1.3161  decode.d7.loss_dice: 1.5087  decode.d8.loss_cls: 0.3674  decode.d8.loss_mask: 1.3020  decode.d8.loss_dice: 1.4907  mix_decode.loss_cls: 0.2311  mix_decode.loss_mask: 0.5858  mix_decode.loss_dice: 0.8679  mix_decode.d0.loss_cls: 0.3210  mix_decode.d0.loss_mask: 0.6044  mix_decode.d0.loss_dice: 0.8956  mix_decode.d1.loss_cls: 0.2291  mix_decode.d1.loss_mask: 0.5603  mix_decode.d1.loss_dice: 0.8474  mix_decode.d2.loss_cls: 0.2331  mix_decode.d2.loss_mask: 0.5910  mix_decode.d2.loss_dice: 0.8733  mix_decode.d3.loss_cls: 0.2806  mix_decode.d3.loss_mask: 0.5844  mix_decode.d3.loss_dice: 0.8654  mix_decode.d4.loss_cls: 0.2406  mix_decode.d4.loss_mask: 0.5723  mix_decode.d4.loss_dice: 0.8735  mix_decode.d5.loss_cls: 0.2465  mix_decode.d5.loss_mask: 0.5934  mix_decode.d5.loss_dice: 0.8726  mix_decode.d6.loss_cls: 0.2197  mix_decode.d6.loss_mask: 0.5930  mix_decode.d6.loss_dice: 0.8838  mix_decode.d7.loss_cls: 0.2241  mix_decode.d7.loss_mask: 0.5900  mix_decode.d7.loss_dice: 0.8714  mix_decode.d8.loss_cls: 0.2405  mix_decode.d8.loss_mask: 0.5975  mix_decode.d8.loss_dice: 0.8883
2025/03/28 19:35:21 - mmengine - INFO - Iter(train) [ 6400/20000]  base_lr: 7.0677e-05 lr: 7.0677e-05  eta: 5:22:10  time: 1.8735  data_time: 0.0316  memory: 10734  loss: 52.1311  decode.loss_cls: 0.4672  decode.loss_mask: 1.5902  decode.loss_dice: 1.5644  decode.d0.loss_cls: 0.5677  decode.d0.loss_mask: 1.5321  decode.d0.loss_dice: 1.5753  decode.d1.loss_cls: 0.4610  decode.d1.loss_mask: 1.5188  decode.d1.loss_dice: 1.5944  decode.d2.loss_cls: 0.5778  decode.d2.loss_mask: 1.4796  decode.d2.loss_dice: 1.5212  decode.d3.loss_cls: 0.5671  decode.d3.loss_mask: 1.5383  decode.d3.loss_dice: 1.5123  decode.d4.loss_cls: 0.4857  decode.d4.loss_mask: 1.6694  decode.d4.loss_dice: 1.6391  decode.d5.loss_cls: 0.5370  decode.d5.loss_mask: 1.5513  decode.d5.loss_dice: 1.5612  decode.d6.loss_cls: 0.5322  decode.d6.loss_mask: 1.5295  decode.d6.loss_dice: 1.5787  decode.d7.loss_cls: 0.5128  decode.d7.loss_mask: 1.5442  decode.d7.loss_dice: 1.5342  decode.d8.loss_cls: 0.5024  decode.d8.loss_mask: 1.4856  decode.d8.loss_dice: 1.5352  mix_decode.loss_cls: 0.2289  mix_decode.loss_mask: 0.6015  mix_decode.loss_dice: 0.7663  mix_decode.d0.loss_cls: 0.2947  mix_decode.d0.loss_mask: 0.5978  mix_decode.d0.loss_dice: 0.7752  mix_decode.d1.loss_cls: 0.2826  mix_decode.d1.loss_mask: 0.5812  mix_decode.d1.loss_dice: 0.7338  mix_decode.d2.loss_cls: 0.2753  mix_decode.d2.loss_mask: 0.5634  mix_decode.d2.loss_dice: 0.7040  mix_decode.d3.loss_cls: 0.2911  mix_decode.d3.loss_mask: 0.5782  mix_decode.d3.loss_dice: 0.7050  mix_decode.d4.loss_cls: 0.2747  mix_decode.d4.loss_mask: 0.5767  mix_decode.d4.loss_dice: 0.7212  mix_decode.d5.loss_cls: 0.2707  mix_decode.d5.loss_mask: 0.5775  mix_decode.d5.loss_dice: 0.7522  mix_decode.d6.loss_cls: 0.2905  mix_decode.d6.loss_mask: 0.5639  mix_decode.d6.loss_dice: 0.7154  mix_decode.d7.loss_cls: 0.2497  mix_decode.d7.loss_mask: 0.5931  mix_decode.d7.loss_dice: 0.7474  mix_decode.d8.loss_cls: 0.2372  mix_decode.d8.loss_mask: 0.5737  mix_decode.d8.loss_dice: 0.7424
2025/03/28 19:36:59 - mmengine - INFO - Iter(train) [ 6450/20000]  base_lr: 7.0443e-05 lr: 7.0443e-05  eta: 5:21:55  time: 1.8894  data_time: 0.0317  memory: 10736  loss: 50.4821  decode.loss_cls: 0.2477  decode.loss_mask: 1.2892  decode.loss_dice: 1.7140  decode.d0.loss_cls: 0.3544  decode.d0.loss_mask: 1.2952  decode.d0.loss_dice: 1.8120  decode.d1.loss_cls: 0.2825  decode.d1.loss_mask: 1.2851  decode.d1.loss_dice: 1.7782  decode.d2.loss_cls: 0.3225  decode.d2.loss_mask: 1.3383  decode.d2.loss_dice: 1.7916  decode.d3.loss_cls: 0.2902  decode.d3.loss_mask: 1.3523  decode.d3.loss_dice: 1.7486  decode.d4.loss_cls: 0.2933  decode.d4.loss_mask: 1.3701  decode.d4.loss_dice: 1.8142  decode.d5.loss_cls: 0.3722  decode.d5.loss_mask: 1.3273  decode.d5.loss_dice: 1.7709  decode.d6.loss_cls: 0.3871  decode.d6.loss_mask: 1.2834  decode.d6.loss_dice: 1.7526  decode.d7.loss_cls: 0.3189  decode.d7.loss_mask: 1.3297  decode.d7.loss_dice: 1.7658  decode.d8.loss_cls: 0.2613  decode.d8.loss_mask: 1.3343  decode.d8.loss_dice: 1.7463  mix_decode.loss_cls: 0.2801  mix_decode.loss_mask: 0.5491  mix_decode.loss_dice: 0.7852  mix_decode.d0.loss_cls: 0.2633  mix_decode.d0.loss_mask: 0.5651  mix_decode.d0.loss_dice: 0.8110  mix_decode.d1.loss_cls: 0.2516  mix_decode.d1.loss_mask: 0.5066  mix_decode.d1.loss_dice: 0.7795  mix_decode.d2.loss_cls: 0.2844  mix_decode.d2.loss_mask: 0.5317  mix_decode.d2.loss_dice: 0.7901  mix_decode.d3.loss_cls: 0.3105  mix_decode.d3.loss_mask: 0.6128  mix_decode.d3.loss_dice: 0.8090  mix_decode.d4.loss_cls: 0.2935  mix_decode.d4.loss_mask: 0.5689  mix_decode.d4.loss_dice: 0.8037  mix_decode.d5.loss_cls: 0.2801  mix_decode.d5.loss_mask: 0.5702  mix_decode.d5.loss_dice: 0.8059  mix_decode.d6.loss_cls: 0.2775  mix_decode.d6.loss_mask: 0.5317  mix_decode.d6.loss_dice: 0.7767  mix_decode.d7.loss_cls: 0.2944  mix_decode.d7.loss_mask: 0.5858  mix_decode.d7.loss_dice: 0.8142  mix_decode.d8.loss_cls: 0.2915  mix_decode.d8.loss_mask: 0.6143  mix_decode.d8.loss_dice: 0.8143
2025/03/28 19:38:38 - mmengine - INFO - Iter(train) [ 6500/20000]  base_lr: 7.0209e-05 lr: 7.0209e-05  eta: 5:21:41  time: 1.9957  data_time: 0.0340  memory: 10746  loss: 51.6719  decode.loss_cls: 0.5286  decode.loss_mask: 1.4447  decode.loss_dice: 1.6360  decode.d0.loss_cls: 0.6509  decode.d0.loss_mask: 1.3869  decode.d0.loss_dice: 1.6040  decode.d1.loss_cls: 0.5307  decode.d1.loss_mask: 1.3678  decode.d1.loss_dice: 1.4800  decode.d2.loss_cls: 0.5349  decode.d2.loss_mask: 1.3985  decode.d2.loss_dice: 1.4926  decode.d3.loss_cls: 0.5545  decode.d3.loss_mask: 1.3727  decode.d3.loss_dice: 1.5257  decode.d4.loss_cls: 0.4798  decode.d4.loss_mask: 1.4145  decode.d4.loss_dice: 1.6404  decode.d5.loss_cls: 0.4999  decode.d5.loss_mask: 1.3643  decode.d5.loss_dice: 1.5681  decode.d6.loss_cls: 0.5126  decode.d6.loss_mask: 1.4990  decode.d6.loss_dice: 1.5534  decode.d7.loss_cls: 0.5344  decode.d7.loss_mask: 1.4031  decode.d7.loss_dice: 1.6160  decode.d8.loss_cls: 0.4820  decode.d8.loss_mask: 1.4507  decode.d8.loss_dice: 1.6642  mix_decode.loss_cls: 0.2956  mix_decode.loss_mask: 0.5595  mix_decode.loss_dice: 0.8111  mix_decode.d0.loss_cls: 0.3465  mix_decode.d0.loss_mask: 0.5635  mix_decode.d0.loss_dice: 0.8482  mix_decode.d1.loss_cls: 0.2937  mix_decode.d1.loss_mask: 0.5473  mix_decode.d1.loss_dice: 0.7816  mix_decode.d2.loss_cls: 0.2600  mix_decode.d2.loss_mask: 0.5699  mix_decode.d2.loss_dice: 0.7773  mix_decode.d3.loss_cls: 0.2723  mix_decode.d3.loss_mask: 0.5549  mix_decode.d3.loss_dice: 0.7601  mix_decode.d4.loss_cls: 0.3218  mix_decode.d4.loss_mask: 0.5473  mix_decode.d4.loss_dice: 0.8021  mix_decode.d5.loss_cls: 0.2995  mix_decode.d5.loss_mask: 0.5479  mix_decode.d5.loss_dice: 0.7788  mix_decode.d6.loss_cls: 0.2605  mix_decode.d6.loss_mask: 0.5617  mix_decode.d6.loss_dice: 0.7930  mix_decode.d7.loss_cls: 0.2693  mix_decode.d7.loss_mask: 0.5665  mix_decode.d7.loss_dice: 0.8076  mix_decode.d8.loss_cls: 0.2766  mix_decode.d8.loss_mask: 0.5792  mix_decode.d8.loss_dice: 0.8273
2025/03/28 19:40:15 - mmengine - INFO - Iter(train) [ 6550/20000]  base_lr: 6.9975e-05 lr: 6.9975e-05  eta: 5:21:22  time: 1.9648  data_time: 0.0293  memory: 10731  loss: 60.4987  decode.loss_cls: 0.4337  decode.loss_mask: 1.7086  decode.loss_dice: 1.8677  decode.d0.loss_cls: 0.5431  decode.d0.loss_mask: 1.7633  decode.d0.loss_dice: 1.9109  decode.d1.loss_cls: 0.4694  decode.d1.loss_mask: 1.7426  decode.d1.loss_dice: 1.8812  decode.d2.loss_cls: 0.4735  decode.d2.loss_mask: 1.7507  decode.d2.loss_dice: 1.8409  decode.d3.loss_cls: 0.4658  decode.d3.loss_mask: 1.7330  decode.d3.loss_dice: 1.8855  decode.d4.loss_cls: 0.4026  decode.d4.loss_mask: 1.7168  decode.d4.loss_dice: 1.8490  decode.d5.loss_cls: 0.4193  decode.d5.loss_mask: 1.7448  decode.d5.loss_dice: 1.8894  decode.d6.loss_cls: 0.3696  decode.d6.loss_mask: 1.7465  decode.d6.loss_dice: 1.9031  decode.d7.loss_cls: 0.3753  decode.d7.loss_mask: 1.8078  decode.d7.loss_dice: 1.9541  decode.d8.loss_cls: 0.4156  decode.d8.loss_mask: 1.7226  decode.d8.loss_dice: 1.8631  mix_decode.loss_cls: 0.3325  mix_decode.loss_mask: 0.7789  mix_decode.loss_dice: 0.8258  mix_decode.d0.loss_cls: 0.3773  mix_decode.d0.loss_mask: 0.7881  mix_decode.d0.loss_dice: 0.8743  mix_decode.d1.loss_cls: 0.3297  mix_decode.d1.loss_mask: 0.7620  mix_decode.d1.loss_dice: 0.8068  mix_decode.d2.loss_cls: 0.2812  mix_decode.d2.loss_mask: 0.7855  mix_decode.d2.loss_dice: 0.8477  mix_decode.d3.loss_cls: 0.3770  mix_decode.d3.loss_mask: 0.8089  mix_decode.d3.loss_dice: 0.8691  mix_decode.d4.loss_cls: 0.3461  mix_decode.d4.loss_mask: 0.7876  mix_decode.d4.loss_dice: 0.8552  mix_decode.d5.loss_cls: 0.3339  mix_decode.d5.loss_mask: 0.8484  mix_decode.d5.loss_dice: 0.8533  mix_decode.d6.loss_cls: 0.3591  mix_decode.d6.loss_mask: 0.8133  mix_decode.d6.loss_dice: 0.8425  mix_decode.d7.loss_cls: 0.2669  mix_decode.d7.loss_mask: 0.8410  mix_decode.d7.loss_dice: 0.8724  mix_decode.d8.loss_cls: 0.3601  mix_decode.d8.loss_mask: 0.7885  mix_decode.d8.loss_dice: 0.8364
2025/03/28 19:41:52 - mmengine - INFO - Iter(train) [ 6600/20000]  base_lr: 6.9741e-05 lr: 6.9741e-05  eta: 5:21:03  time: 2.0041  data_time: 0.0326  memory: 10737  loss: 51.2008  decode.loss_cls: 0.4127  decode.loss_mask: 1.2941  decode.loss_dice: 1.4091  decode.d0.loss_cls: 0.5651  decode.d0.loss_mask: 1.3176  decode.d0.loss_dice: 1.4680  decode.d1.loss_cls: 0.3969  decode.d1.loss_mask: 1.3363  decode.d1.loss_dice: 1.4328  decode.d2.loss_cls: 0.4197  decode.d2.loss_mask: 1.3317  decode.d2.loss_dice: 1.4503  decode.d3.loss_cls: 0.4972  decode.d3.loss_mask: 1.3070  decode.d3.loss_dice: 1.3692  decode.d4.loss_cls: 0.4744  decode.d4.loss_mask: 1.3238  decode.d4.loss_dice: 1.4526  decode.d5.loss_cls: 0.4638  decode.d5.loss_mask: 1.3495  decode.d5.loss_dice: 1.4590  decode.d6.loss_cls: 0.4661  decode.d6.loss_mask: 1.3906  decode.d6.loss_dice: 1.5034  decode.d7.loss_cls: 0.4298  decode.d7.loss_mask: 1.3267  decode.d7.loss_dice: 1.4731  decode.d8.loss_cls: 0.4265  decode.d8.loss_mask: 1.3158  decode.d8.loss_dice: 1.4606  mix_decode.loss_cls: 0.3014  mix_decode.loss_mask: 0.7637  mix_decode.loss_dice: 0.7938  mix_decode.d0.loss_cls: 0.3498  mix_decode.d0.loss_mask: 0.8437  mix_decode.d0.loss_dice: 0.8373  mix_decode.d1.loss_cls: 0.2946  mix_decode.d1.loss_mask: 0.8020  mix_decode.d1.loss_dice: 0.7967  mix_decode.d2.loss_cls: 0.2684  mix_decode.d2.loss_mask: 0.7514  mix_decode.d2.loss_dice: 0.7663  mix_decode.d3.loss_cls: 0.3091  mix_decode.d3.loss_mask: 0.7739  mix_decode.d3.loss_dice: 0.8066  mix_decode.d4.loss_cls: 0.2815  mix_decode.d4.loss_mask: 0.7863  mix_decode.d4.loss_dice: 0.7860  mix_decode.d5.loss_cls: 0.2976  mix_decode.d5.loss_mask: 0.7956  mix_decode.d5.loss_dice: 0.8047  mix_decode.d6.loss_cls: 0.2823  mix_decode.d6.loss_mask: 0.7718  mix_decode.d6.loss_dice: 0.8002  mix_decode.d7.loss_cls: 0.2801  mix_decode.d7.loss_mask: 0.8123  mix_decode.d7.loss_dice: 0.8085  mix_decode.d8.loss_cls: 0.3189  mix_decode.d8.loss_mask: 0.7900  mix_decode.d8.loss_dice: 0.8030
2025/03/28 19:43:19 - mmengine - INFO - Iter(train) [ 6650/20000]  base_lr: 6.9507e-05 lr: 6.9507e-05  eta: 5:20:21  time: 1.6546  data_time: 0.0350  memory: 10760  loss: 58.5459  decode.loss_cls: 0.5550  decode.loss_mask: 1.5595  decode.loss_dice: 1.8380  decode.d0.loss_cls: 0.6651  decode.d0.loss_mask: 1.4891  decode.d0.loss_dice: 1.8574  decode.d1.loss_cls: 0.5406  decode.d1.loss_mask: 1.5133  decode.d1.loss_dice: 1.8039  decode.d2.loss_cls: 0.5651  decode.d2.loss_mask: 1.5885  decode.d2.loss_dice: 1.8465  decode.d3.loss_cls: 0.5165  decode.d3.loss_mask: 1.5226  decode.d3.loss_dice: 1.8446  decode.d4.loss_cls: 0.5689  decode.d4.loss_mask: 1.5574  decode.d4.loss_dice: 1.8672  decode.d5.loss_cls: 0.5981  decode.d5.loss_mask: 1.5174  decode.d5.loss_dice: 1.8346  decode.d6.loss_cls: 0.5968  decode.d6.loss_mask: 1.5476  decode.d6.loss_dice: 1.7886  decode.d7.loss_cls: 0.6655  decode.d7.loss_mask: 1.6039  decode.d7.loss_dice: 1.8318  decode.d8.loss_cls: 0.5531  decode.d8.loss_mask: 1.6005  decode.d8.loss_dice: 1.8805  mix_decode.loss_cls: 0.2830  mix_decode.loss_mask: 0.6868  mix_decode.loss_dice: 0.9059  mix_decode.d0.loss_cls: 0.2918  mix_decode.d0.loss_mask: 0.6972  mix_decode.d0.loss_dice: 0.9843  mix_decode.d1.loss_cls: 0.2636  mix_decode.d1.loss_mask: 0.6461  mix_decode.d1.loss_dice: 0.8552  mix_decode.d2.loss_cls: 0.2911  mix_decode.d2.loss_mask: 0.6864  mix_decode.d2.loss_dice: 0.8800  mix_decode.d3.loss_cls: 0.2803  mix_decode.d3.loss_mask: 0.6831  mix_decode.d3.loss_dice: 0.8957  mix_decode.d4.loss_cls: 0.3069  mix_decode.d4.loss_mask: 0.6895  mix_decode.d4.loss_dice: 0.9138  mix_decode.d5.loss_cls: 0.2727  mix_decode.d5.loss_mask: 0.6879  mix_decode.d5.loss_dice: 0.9242  mix_decode.d6.loss_cls: 0.3312  mix_decode.d6.loss_mask: 0.6835  mix_decode.d6.loss_dice: 0.9299  mix_decode.d7.loss_cls: 0.2759  mix_decode.d7.loss_mask: 0.6930  mix_decode.d7.loss_dice: 0.9116  mix_decode.d8.loss_cls: 0.2941  mix_decode.d8.loss_mask: 0.6889  mix_decode.d8.loss_dice: 0.8948
2025/03/28 19:44:52 - mmengine - INFO - Iter(train) [ 6700/20000]  base_lr: 6.9272e-05 lr: 6.9272e-05  eta: 5:19:51  time: 1.9611  data_time: 0.0315  memory: 10760  loss: 56.0470  decode.loss_cls: 0.5879  decode.loss_mask: 1.5465  decode.loss_dice: 1.7373  decode.d0.loss_cls: 0.6744  decode.d0.loss_mask: 1.5351  decode.d0.loss_dice: 1.7193  decode.d1.loss_cls: 0.5565  decode.d1.loss_mask: 1.5108  decode.d1.loss_dice: 1.7340  decode.d2.loss_cls: 0.6149  decode.d2.loss_mask: 1.5336  decode.d2.loss_dice: 1.7334  decode.d3.loss_cls: 0.6059  decode.d3.loss_mask: 1.5287  decode.d3.loss_dice: 1.6924  decode.d4.loss_cls: 0.5744  decode.d4.loss_mask: 1.5759  decode.d4.loss_dice: 1.7444  decode.d5.loss_cls: 0.5698  decode.d5.loss_mask: 1.5679  decode.d5.loss_dice: 1.7300  decode.d6.loss_cls: 0.6104  decode.d6.loss_mask: 1.5602  decode.d6.loss_dice: 1.6881  decode.d7.loss_cls: 0.6706  decode.d7.loss_mask: 1.5420  decode.d7.loss_dice: 1.6721  decode.d8.loss_cls: 0.5766  decode.d8.loss_mask: 1.5562  decode.d8.loss_dice: 1.7391  mix_decode.loss_cls: 0.3133  mix_decode.loss_mask: 0.5851  mix_decode.loss_dice: 0.8208  mix_decode.d0.loss_cls: 0.3490  mix_decode.d0.loss_mask: 0.5950  mix_decode.d0.loss_dice: 0.8804  mix_decode.d1.loss_cls: 0.3054  mix_decode.d1.loss_mask: 0.5953  mix_decode.d1.loss_dice: 0.8414  mix_decode.d2.loss_cls: 0.3258  mix_decode.d2.loss_mask: 0.5637  mix_decode.d2.loss_dice: 0.8240  mix_decode.d3.loss_cls: 0.3501  mix_decode.d3.loss_mask: 0.5777  mix_decode.d3.loss_dice: 0.8027  mix_decode.d4.loss_cls: 0.3113  mix_decode.d4.loss_mask: 0.6187  mix_decode.d4.loss_dice: 0.8520  mix_decode.d5.loss_cls: 0.2824  mix_decode.d5.loss_mask: 0.5764  mix_decode.d5.loss_dice: 0.8384  mix_decode.d6.loss_cls: 0.2965  mix_decode.d6.loss_mask: 0.5727  mix_decode.d6.loss_dice: 0.8224  mix_decode.d7.loss_cls: 0.2855  mix_decode.d7.loss_mask: 0.6008  mix_decode.d7.loss_dice: 0.8652  mix_decode.d8.loss_cls: 0.3022  mix_decode.d8.loss_mask: 0.5871  mix_decode.d8.loss_dice: 0.8176
2025/03/28 19:46:28 - mmengine - INFO - Iter(train) [ 6750/20000]  base_lr: 6.9038e-05 lr: 6.9038e-05  eta: 5:19:25  time: 1.8655  data_time: 0.0263  memory: 10740  loss: 57.8468  decode.loss_cls: 0.4703  decode.loss_mask: 1.7861  decode.loss_dice: 1.6679  decode.d0.loss_cls: 0.5937  decode.d0.loss_mask: 1.7236  decode.d0.loss_dice: 1.6823  decode.d1.loss_cls: 0.4510  decode.d1.loss_mask: 1.6830  decode.d1.loss_dice: 1.6767  decode.d2.loss_cls: 0.4412  decode.d2.loss_mask: 1.7484  decode.d2.loss_dice: 1.6964  decode.d3.loss_cls: 0.5091  decode.d3.loss_mask: 1.7910  decode.d3.loss_dice: 1.6541  decode.d4.loss_cls: 0.4782  decode.d4.loss_mask: 1.7758  decode.d4.loss_dice: 1.6860  decode.d5.loss_cls: 0.5066  decode.d5.loss_mask: 1.7566  decode.d5.loss_dice: 1.7035  decode.d6.loss_cls: 0.5540  decode.d6.loss_mask: 1.7136  decode.d6.loss_dice: 1.7098  decode.d7.loss_cls: 0.4482  decode.d7.loss_mask: 1.7117  decode.d7.loss_dice: 1.7084  decode.d8.loss_cls: 0.4558  decode.d8.loss_mask: 1.8168  decode.d8.loss_dice: 1.7020  mix_decode.loss_cls: 0.2572  mix_decode.loss_mask: 0.7314  mix_decode.loss_dice: 0.8720  mix_decode.d0.loss_cls: 0.2828  mix_decode.d0.loss_mask: 0.7268  mix_decode.d0.loss_dice: 0.9048  mix_decode.d1.loss_cls: 0.2794  mix_decode.d1.loss_mask: 0.7143  mix_decode.d1.loss_dice: 0.8734  mix_decode.d2.loss_cls: 0.2421  mix_decode.d2.loss_mask: 0.7375  mix_decode.d2.loss_dice: 0.8571  mix_decode.d3.loss_cls: 0.2444  mix_decode.d3.loss_mask: 0.7276  mix_decode.d3.loss_dice: 0.8547  mix_decode.d4.loss_cls: 0.2837  mix_decode.d4.loss_mask: 0.7109  mix_decode.d4.loss_dice: 0.8605  mix_decode.d5.loss_cls: 0.2761  mix_decode.d5.loss_mask: 0.7151  mix_decode.d5.loss_dice: 0.8534  mix_decode.d6.loss_cls: 0.2562  mix_decode.d6.loss_mask: 0.7373  mix_decode.d6.loss_dice: 0.8703  mix_decode.d7.loss_cls: 0.2614  mix_decode.d7.loss_mask: 0.7148  mix_decode.d7.loss_dice: 0.8535  mix_decode.d8.loss_cls: 0.2514  mix_decode.d8.loss_mask: 0.7358  mix_decode.d8.loss_dice: 0.8591
2025/03/28 19:48:05 - mmengine - INFO - Iter(train) [ 6800/20000]  base_lr: 6.8803e-05 lr: 6.8803e-05  eta: 5:19:01  time: 1.9068  data_time: 0.0325  memory: 10735  loss: 51.6694  decode.loss_cls: 0.4734  decode.loss_mask: 1.4764  decode.loss_dice: 1.5898  decode.d0.loss_cls: 0.5307  decode.d0.loss_mask: 1.5654  decode.d0.loss_dice: 1.5969  decode.d1.loss_cls: 0.4814  decode.d1.loss_mask: 1.4693  decode.d1.loss_dice: 1.5936  decode.d2.loss_cls: 0.4675  decode.d2.loss_mask: 1.5090  decode.d2.loss_dice: 1.6002  decode.d3.loss_cls: 0.4665  decode.d3.loss_mask: 1.5321  decode.d3.loss_dice: 1.6135  decode.d4.loss_cls: 0.4946  decode.d4.loss_mask: 1.4825  decode.d4.loss_dice: 1.5674  decode.d5.loss_cls: 0.3884  decode.d5.loss_mask: 1.5397  decode.d5.loss_dice: 1.5534  decode.d6.loss_cls: 0.3960  decode.d6.loss_mask: 1.5735  decode.d6.loss_dice: 1.6195  decode.d7.loss_cls: 0.3405  decode.d7.loss_mask: 1.5658  decode.d7.loss_dice: 1.6027  decode.d8.loss_cls: 0.4283  decode.d8.loss_mask: 1.5663  decode.d8.loss_dice: 1.6103  mix_decode.loss_cls: 0.2803  mix_decode.loss_mask: 0.4895  mix_decode.loss_dice: 0.8080  mix_decode.d0.loss_cls: 0.2967  mix_decode.d0.loss_mask: 0.5063  mix_decode.d0.loss_dice: 0.8262  mix_decode.d1.loss_cls: 0.3051  mix_decode.d1.loss_mask: 0.4807  mix_decode.d1.loss_dice: 0.7761  mix_decode.d2.loss_cls: 0.3566  mix_decode.d2.loss_mask: 0.4822  mix_decode.d2.loss_dice: 0.7753  mix_decode.d3.loss_cls: 0.2884  mix_decode.d3.loss_mask: 0.4959  mix_decode.d3.loss_dice: 0.8027  mix_decode.d4.loss_cls: 0.2988  mix_decode.d4.loss_mask: 0.4879  mix_decode.d4.loss_dice: 0.8000  mix_decode.d5.loss_cls: 0.3516  mix_decode.d5.loss_mask: 0.4707  mix_decode.d5.loss_dice: 0.7759  mix_decode.d6.loss_cls: 0.3312  mix_decode.d6.loss_mask: 0.4797  mix_decode.d6.loss_dice: 0.7895  mix_decode.d7.loss_cls: 0.2889  mix_decode.d7.loss_mask: 0.4941  mix_decode.d7.loss_dice: 0.8119  mix_decode.d8.loss_cls: 0.2751  mix_decode.d8.loss_mask: 0.5155  mix_decode.d8.loss_dice: 0.8339
2025/03/28 19:49:43 - mmengine - INFO - Iter(train) [ 6850/20000]  base_lr: 6.8569e-05 lr: 6.8569e-05  eta: 5:18:37  time: 1.8865  data_time: 0.0301  memory: 10748  loss: 56.1003  decode.loss_cls: 0.4545  decode.loss_mask: 1.5701  decode.loss_dice: 1.7600  decode.d0.loss_cls: 0.6326  decode.d0.loss_mask: 1.5076  decode.d0.loss_dice: 1.7597  decode.d1.loss_cls: 0.6565  decode.d1.loss_mask: 1.4699  decode.d1.loss_dice: 1.6936  decode.d2.loss_cls: 0.5369  decode.d2.loss_mask: 1.4872  decode.d2.loss_dice: 1.6926  decode.d3.loss_cls: 0.5343  decode.d3.loss_mask: 1.4850  decode.d3.loss_dice: 1.6874  decode.d4.loss_cls: 0.5268  decode.d4.loss_mask: 1.4409  decode.d4.loss_dice: 1.6981  decode.d5.loss_cls: 0.5207  decode.d5.loss_mask: 1.4910  decode.d5.loss_dice: 1.7550  decode.d6.loss_cls: 0.5290  decode.d6.loss_mask: 1.4973  decode.d6.loss_dice: 1.7431  decode.d7.loss_cls: 0.5182  decode.d7.loss_mask: 1.5571  decode.d7.loss_dice: 1.7062  decode.d8.loss_cls: 0.4747  decode.d8.loss_mask: 1.5449  decode.d8.loss_dice: 1.6866  mix_decode.loss_cls: 0.3499  mix_decode.loss_mask: 0.6117  mix_decode.loss_dice: 0.8851  mix_decode.d0.loss_cls: 0.3709  mix_decode.d0.loss_mask: 0.6342  mix_decode.d0.loss_dice: 0.9417  mix_decode.d1.loss_cls: 0.3979  mix_decode.d1.loss_mask: 0.5831  mix_decode.d1.loss_dice: 0.8570  mix_decode.d2.loss_cls: 0.4092  mix_decode.d2.loss_mask: 0.5710  mix_decode.d2.loss_dice: 0.8665  mix_decode.d3.loss_cls: 0.3971  mix_decode.d3.loss_mask: 0.5585  mix_decode.d3.loss_dice: 0.8650  mix_decode.d4.loss_cls: 0.3997  mix_decode.d4.loss_mask: 0.5660  mix_decode.d4.loss_dice: 0.8631  mix_decode.d5.loss_cls: 0.4155  mix_decode.d5.loss_mask: 0.5556  mix_decode.d5.loss_dice: 0.8411  mix_decode.d6.loss_cls: 0.4016  mix_decode.d6.loss_mask: 0.5941  mix_decode.d6.loss_dice: 0.8525  mix_decode.d7.loss_cls: 0.3742  mix_decode.d7.loss_mask: 0.6021  mix_decode.d7.loss_dice: 0.8768  mix_decode.d8.loss_cls: 0.3417  mix_decode.d8.loss_mask: 0.6127  mix_decode.d8.loss_dice: 0.8872
2025/03/28 19:51:18 - mmengine - INFO - Iter(train) [ 6900/20000]  base_lr: 6.8334e-05 lr: 6.8334e-05  eta: 5:18:07  time: 1.8490  data_time: 0.0270  memory: 10764  loss: 57.0868  decode.loss_cls: 0.6192  decode.loss_mask: 1.4849  decode.loss_dice: 1.7730  decode.d0.loss_cls: 0.5434  decode.d0.loss_mask: 1.5615  decode.d0.loss_dice: 1.8773  decode.d1.loss_cls: 0.6107  decode.d1.loss_mask: 1.5107  decode.d1.loss_dice: 1.7458  decode.d2.loss_cls: 0.5905  decode.d2.loss_mask: 1.5223  decode.d2.loss_dice: 1.7619  decode.d3.loss_cls: 0.5977  decode.d3.loss_mask: 1.5511  decode.d3.loss_dice: 1.8355  decode.d4.loss_cls: 0.5721  decode.d4.loss_mask: 1.5793  decode.d4.loss_dice: 1.8027  decode.d5.loss_cls: 0.6883  decode.d5.loss_mask: 1.5260  decode.d5.loss_dice: 1.8194  decode.d6.loss_cls: 0.6124  decode.d6.loss_mask: 1.5867  decode.d6.loss_dice: 1.8578  decode.d7.loss_cls: 0.5883  decode.d7.loss_mask: 1.5653  decode.d7.loss_dice: 1.8062  decode.d8.loss_cls: 0.6553  decode.d8.loss_mask: 1.5255  decode.d8.loss_dice: 1.8067  mix_decode.loss_cls: 0.2863  mix_decode.loss_mask: 0.5920  mix_decode.loss_dice: 0.8574  mix_decode.d0.loss_cls: 0.2825  mix_decode.d0.loss_mask: 0.6120  mix_decode.d0.loss_dice: 0.9002  mix_decode.d1.loss_cls: 0.2732  mix_decode.d1.loss_mask: 0.6265  mix_decode.d1.loss_dice: 0.8478  mix_decode.d2.loss_cls: 0.2957  mix_decode.d2.loss_mask: 0.5540  mix_decode.d2.loss_dice: 0.8373  mix_decode.d3.loss_cls: 0.3126  mix_decode.d3.loss_mask: 0.5522  mix_decode.d3.loss_dice: 0.8464  mix_decode.d4.loss_cls: 0.3315  mix_decode.d4.loss_mask: 0.5631  mix_decode.d4.loss_dice: 0.8563  mix_decode.d5.loss_cls: 0.3183  mix_decode.d5.loss_mask: 0.5891  mix_decode.d5.loss_dice: 0.8815  mix_decode.d6.loss_cls: 0.2894  mix_decode.d6.loss_mask: 0.5911  mix_decode.d6.loss_dice: 0.8844  mix_decode.d7.loss_cls: 0.2575  mix_decode.d7.loss_mask: 0.6378  mix_decode.d7.loss_dice: 0.8782  mix_decode.d8.loss_cls: 0.2753  mix_decode.d8.loss_mask: 0.5896  mix_decode.d8.loss_dice: 0.8905
2025/03/28 19:52:52 - mmengine - INFO - Iter(train) [ 6950/20000]  base_lr: 6.8099e-05 lr: 6.8099e-05  eta: 5:17:34  time: 1.9157  data_time: 0.0288  memory: 10740  loss: 54.7187  decode.loss_cls: 0.4478  decode.loss_mask: 1.4474  decode.loss_dice: 1.6240  decode.d0.loss_cls: 0.5471  decode.d0.loss_mask: 1.5634  decode.d0.loss_dice: 1.6744  decode.d1.loss_cls: 0.4729  decode.d1.loss_mask: 1.5035  decode.d1.loss_dice: 1.6432  decode.d2.loss_cls: 0.5529  decode.d2.loss_mask: 1.4636  decode.d2.loss_dice: 1.5493  decode.d3.loss_cls: 0.5055  decode.d3.loss_mask: 1.5342  decode.d3.loss_dice: 1.6128  decode.d4.loss_cls: 0.4216  decode.d4.loss_mask: 1.5695  decode.d4.loss_dice: 1.6804  decode.d5.loss_cls: 0.5106  decode.d5.loss_mask: 1.5296  decode.d5.loss_dice: 1.6196  decode.d6.loss_cls: 0.4576  decode.d6.loss_mask: 1.5707  decode.d6.loss_dice: 1.6871  decode.d7.loss_cls: 0.5018  decode.d7.loss_mask: 1.4864  decode.d7.loss_dice: 1.6654  decode.d8.loss_cls: 0.4903  decode.d8.loss_mask: 1.5434  decode.d8.loss_dice: 1.6349  mix_decode.loss_cls: 0.3767  mix_decode.loss_mask: 0.6327  mix_decode.loss_dice: 0.8159  mix_decode.d0.loss_cls: 0.3111  mix_decode.d0.loss_mask: 0.6536  mix_decode.d0.loss_dice: 0.9040  mix_decode.d1.loss_cls: 0.3510  mix_decode.d1.loss_mask: 0.6081  mix_decode.d1.loss_dice: 0.8135  mix_decode.d2.loss_cls: 0.3848  mix_decode.d2.loss_mask: 0.6133  mix_decode.d2.loss_dice: 0.8417  mix_decode.d3.loss_cls: 0.3958  mix_decode.d3.loss_mask: 0.6057  mix_decode.d3.loss_dice: 0.8256  mix_decode.d4.loss_cls: 0.3100  mix_decode.d4.loss_mask: 0.6536  mix_decode.d4.loss_dice: 0.8451  mix_decode.d5.loss_cls: 0.3452  mix_decode.d5.loss_mask: 0.6472  mix_decode.d5.loss_dice: 0.8332  mix_decode.d6.loss_cls: 0.3042  mix_decode.d6.loss_mask: 0.6302  mix_decode.d6.loss_dice: 0.8371  mix_decode.d7.loss_cls: 0.3399  mix_decode.d7.loss_mask: 0.6500  mix_decode.d7.loss_dice: 0.8349  mix_decode.d8.loss_cls: 0.3332  mix_decode.d8.loss_mask: 0.6752  mix_decode.d8.loss_dice: 0.8352
2025/03/28 19:54:25 - mmengine - INFO - Exp name: r2u_20250328_164133
2025/03/28 19:54:25 - mmengine - INFO - Iter(train) [ 7000/20000]  base_lr: 6.7864e-05 lr: 6.7864e-05  eta: 5:16:57  time: 1.8476  data_time: 0.0287  memory: 10736  loss: 57.4202  decode.loss_cls: 0.4893  decode.loss_mask: 1.6687  decode.loss_dice: 1.7668  decode.d0.loss_cls: 0.6356  decode.d0.loss_mask: 1.6796  decode.d0.loss_dice: 1.8167  decode.d1.loss_cls: 0.5372  decode.d1.loss_mask: 1.6504  decode.d1.loss_dice: 1.7857  decode.d2.loss_cls: 0.5302  decode.d2.loss_mask: 1.6346  decode.d2.loss_dice: 1.7432  decode.d3.loss_cls: 0.4659  decode.d3.loss_mask: 1.6470  decode.d3.loss_dice: 1.7718  decode.d4.loss_cls: 0.4908  decode.d4.loss_mask: 1.6672  decode.d4.loss_dice: 1.7776  decode.d5.loss_cls: 0.5166  decode.d5.loss_mask: 1.6323  decode.d5.loss_dice: 1.8034  decode.d6.loss_cls: 0.5056  decode.d6.loss_mask: 1.6319  decode.d6.loss_dice: 1.8156  decode.d7.loss_cls: 0.4956  decode.d7.loss_mask: 1.6845  decode.d7.loss_dice: 1.8298  decode.d8.loss_cls: 0.4973  decode.d8.loss_mask: 1.6606  decode.d8.loss_dice: 1.8099  mix_decode.loss_cls: 0.2940  mix_decode.loss_mask: 0.6375  mix_decode.loss_dice: 0.8537  mix_decode.d0.loss_cls: 0.2329  mix_decode.d0.loss_mask: 0.6655  mix_decode.d0.loss_dice: 0.8858  mix_decode.d1.loss_cls: 0.2184  mix_decode.d1.loss_mask: 0.6738  mix_decode.d1.loss_dice: 0.8606  mix_decode.d2.loss_cls: 0.2924  mix_decode.d2.loss_mask: 0.6236  mix_decode.d2.loss_dice: 0.8366  mix_decode.d3.loss_cls: 0.2848  mix_decode.d3.loss_mask: 0.6536  mix_decode.d3.loss_dice: 0.8429  mix_decode.d4.loss_cls: 0.2606  mix_decode.d4.loss_mask: 0.6599  mix_decode.d4.loss_dice: 0.8502  mix_decode.d5.loss_cls: 0.2907  mix_decode.d5.loss_mask: 0.6345  mix_decode.d5.loss_dice: 0.8567  mix_decode.d6.loss_cls: 0.3010  mix_decode.d6.loss_mask: 0.6122  mix_decode.d6.loss_dice: 0.8643  mix_decode.d7.loss_cls: 0.2971  mix_decode.d7.loss_mask: 0.6358  mix_decode.d7.loss_dice: 0.8767  mix_decode.d8.loss_cls: 0.3169  mix_decode.d8.loss_mask: 0.6181  mix_decode.d8.loss_dice: 0.8478
2025/03/28 19:55:59 - mmengine - INFO - Iter(train) [ 7050/20000]  base_lr: 6.7629e-05 lr: 6.7629e-05  eta: 5:16:23  time: 1.8860  data_time: 0.0245  memory: 10726  loss: 57.6319  decode.loss_cls: 0.5520  decode.loss_mask: 1.7641  decode.loss_dice: 1.6676  decode.d0.loss_cls: 0.5899  decode.d0.loss_mask: 1.7987  decode.d0.loss_dice: 1.6884  decode.d1.loss_cls: 0.5101  decode.d1.loss_mask: 1.7453  decode.d1.loss_dice: 1.6029  decode.d2.loss_cls: 0.4826  decode.d2.loss_mask: 1.7649  decode.d2.loss_dice: 1.5990  decode.d3.loss_cls: 0.5612  decode.d3.loss_mask: 1.7189  decode.d3.loss_dice: 1.6270  decode.d4.loss_cls: 0.4934  decode.d4.loss_mask: 1.7439  decode.d4.loss_dice: 1.6488  decode.d5.loss_cls: 0.5193  decode.d5.loss_mask: 1.7534  decode.d5.loss_dice: 1.7239  decode.d6.loss_cls: 0.5177  decode.d6.loss_mask: 1.7482  decode.d6.loss_dice: 1.6754  decode.d7.loss_cls: 0.5188  decode.d7.loss_mask: 1.7628  decode.d7.loss_dice: 1.6917  decode.d8.loss_cls: 0.5657  decode.d8.loss_mask: 1.7733  decode.d8.loss_dice: 1.6473  mix_decode.loss_cls: 0.2704  mix_decode.loss_mask: 0.6858  mix_decode.loss_dice: 0.8931  mix_decode.d0.loss_cls: 0.3230  mix_decode.d0.loss_mask: 0.6709  mix_decode.d0.loss_dice: 0.8958  mix_decode.d1.loss_cls: 0.2955  mix_decode.d1.loss_mask: 0.6551  mix_decode.d1.loss_dice: 0.8534  mix_decode.d2.loss_cls: 0.2576  mix_decode.d2.loss_mask: 0.6724  mix_decode.d2.loss_dice: 0.8727  mix_decode.d3.loss_cls: 0.2785  mix_decode.d3.loss_mask: 0.6535  mix_decode.d3.loss_dice: 0.8435  mix_decode.d4.loss_cls: 0.2529  mix_decode.d4.loss_mask: 0.6581  mix_decode.d4.loss_dice: 0.8627  mix_decode.d5.loss_cls: 0.2391  mix_decode.d5.loss_mask: 0.6813  mix_decode.d5.loss_dice: 0.8723  mix_decode.d6.loss_cls: 0.2720  mix_decode.d6.loss_mask: 0.6485  mix_decode.d6.loss_dice: 0.8918  mix_decode.d7.loss_cls: 0.2642  mix_decode.d7.loss_mask: 0.7077  mix_decode.d7.loss_dice: 0.9213  mix_decode.d8.loss_cls: 0.2662  mix_decode.d8.loss_mask: 0.6693  mix_decode.d8.loss_dice: 0.8469
2025/03/28 19:57:35 - mmengine - INFO - Iter(train) [ 7100/20000]  base_lr: 6.7394e-05 lr: 6.7394e-05  eta: 5:15:52  time: 1.9576  data_time: 0.0263  memory: 10761  loss: 50.4039  decode.loss_cls: 0.3710  decode.loss_mask: 1.2530  decode.loss_dice: 1.5901  decode.d0.loss_cls: 0.4867  decode.d0.loss_mask: 1.2837  decode.d0.loss_dice: 1.6486  decode.d1.loss_cls: 0.3755  decode.d1.loss_mask: 1.2606  decode.d1.loss_dice: 1.6366  decode.d2.loss_cls: 0.3673  decode.d2.loss_mask: 1.2923  decode.d2.loss_dice: 1.6110  decode.d3.loss_cls: 0.4417  decode.d3.loss_mask: 1.2783  decode.d3.loss_dice: 1.5929  decode.d4.loss_cls: 0.4991  decode.d4.loss_mask: 1.1951  decode.d4.loss_dice: 1.5543  decode.d5.loss_cls: 0.3617  decode.d5.loss_mask: 1.2525  decode.d5.loss_dice: 1.6235  decode.d6.loss_cls: 0.4170  decode.d6.loss_mask: 1.2244  decode.d6.loss_dice: 1.6749  decode.d7.loss_cls: 0.3863  decode.d7.loss_mask: 1.3126  decode.d7.loss_dice: 1.6466  decode.d8.loss_cls: 0.4066  decode.d8.loss_mask: 1.2750  decode.d8.loss_dice: 1.6114  mix_decode.loss_cls: 0.2905  mix_decode.loss_mask: 0.5926  mix_decode.loss_dice: 0.8793  mix_decode.d0.loss_cls: 0.2512  mix_decode.d0.loss_mask: 0.6098  mix_decode.d0.loss_dice: 0.9087  mix_decode.d1.loss_cls: 0.2887  mix_decode.d1.loss_mask: 0.6075  mix_decode.d1.loss_dice: 0.8428  mix_decode.d2.loss_cls: 0.2421  mix_decode.d2.loss_mask: 0.6225  mix_decode.d2.loss_dice: 0.8558  mix_decode.d3.loss_cls: 0.2923  mix_decode.d3.loss_mask: 0.6183  mix_decode.d3.loss_dice: 0.8508  mix_decode.d4.loss_cls: 0.2734  mix_decode.d4.loss_mask: 0.6068  mix_decode.d4.loss_dice: 0.8580  mix_decode.d5.loss_cls: 0.2482  mix_decode.d5.loss_mask: 0.6167  mix_decode.d5.loss_dice: 0.8473  mix_decode.d6.loss_cls: 0.2425  mix_decode.d6.loss_mask: 0.6075  mix_decode.d6.loss_dice: 0.8905  mix_decode.d7.loss_cls: 0.2862  mix_decode.d7.loss_mask: 0.6065  mix_decode.d7.loss_dice: 0.8785  mix_decode.d8.loss_cls: 0.2817  mix_decode.d8.loss_mask: 0.6066  mix_decode.d8.loss_dice: 0.8702
2025/03/28 19:59:10 - mmengine - INFO - Iter(train) [ 7150/20000]  base_lr: 6.7159e-05 lr: 6.7159e-05  eta: 5:15:16  time: 1.8495  data_time: 0.0269  memory: 10758  loss: 56.8037  decode.loss_cls: 0.3750  decode.loss_mask: 1.7780  decode.loss_dice: 1.8194  decode.d0.loss_cls: 0.5373  decode.d0.loss_mask: 1.7740  decode.d0.loss_dice: 1.7956  decode.d1.loss_cls: 0.5162  decode.d1.loss_mask: 1.6951  decode.d1.loss_dice: 1.7481  decode.d2.loss_cls: 0.4494  decode.d2.loss_mask: 1.6953  decode.d2.loss_dice: 1.7867  decode.d3.loss_cls: 0.4502  decode.d3.loss_mask: 1.6724  decode.d3.loss_dice: 1.7461  decode.d4.loss_cls: 0.4102  decode.d4.loss_mask: 1.7181  decode.d4.loss_dice: 1.7993  decode.d5.loss_cls: 0.4299  decode.d5.loss_mask: 1.7061  decode.d5.loss_dice: 1.7490  decode.d6.loss_cls: 0.4174  decode.d6.loss_mask: 1.6701  decode.d6.loss_dice: 1.7371  decode.d7.loss_cls: 0.4485  decode.d7.loss_mask: 1.7012  decode.d7.loss_dice: 1.7520  decode.d8.loss_cls: 0.4854  decode.d8.loss_mask: 1.7216  decode.d8.loss_dice: 1.7686  mix_decode.loss_cls: 0.2660  mix_decode.loss_mask: 0.7807  mix_decode.loss_dice: 0.7091  mix_decode.d0.loss_cls: 0.3037  mix_decode.d0.loss_mask: 0.7462  mix_decode.d0.loss_dice: 0.7428  mix_decode.d1.loss_cls: 0.2898  mix_decode.d1.loss_mask: 0.7248  mix_decode.d1.loss_dice: 0.6948  mix_decode.d2.loss_cls: 0.3028  mix_decode.d2.loss_mask: 0.7263  mix_decode.d2.loss_dice: 0.7054  mix_decode.d3.loss_cls: 0.2759  mix_decode.d3.loss_mask: 0.7614  mix_decode.d3.loss_dice: 0.6863  mix_decode.d4.loss_cls: 0.2803  mix_decode.d4.loss_mask: 0.7482  mix_decode.d4.loss_dice: 0.7032  mix_decode.d5.loss_cls: 0.3038  mix_decode.d5.loss_mask: 0.7204  mix_decode.d5.loss_dice: 0.6931  mix_decode.d6.loss_cls: 0.2751  mix_decode.d6.loss_mask: 0.7697  mix_decode.d6.loss_dice: 0.7196  mix_decode.d7.loss_cls: 0.2776  mix_decode.d7.loss_mask: 0.7669  mix_decode.d7.loss_dice: 0.7074  mix_decode.d8.loss_cls: 0.2630  mix_decode.d8.loss_mask: 0.7856  mix_decode.d8.loss_dice: 0.7210
2025/03/28 20:00:45 - mmengine - INFO - Iter(train) [ 7200/20000]  base_lr: 6.6924e-05 lr: 6.6924e-05  eta: 5:14:41  time: 1.9574  data_time: 0.0296  memory: 10765  loss: 57.5744  decode.loss_cls: 0.6579  decode.loss_mask: 1.7083  decode.loss_dice: 1.7505  decode.d0.loss_cls: 0.7806  decode.d0.loss_mask: 1.6939  decode.d0.loss_dice: 1.7525  decode.d1.loss_cls: 0.6108  decode.d1.loss_mask: 1.6576  decode.d1.loss_dice: 1.7296  decode.d2.loss_cls: 0.6197  decode.d2.loss_mask: 1.6606  decode.d2.loss_dice: 1.6238  decode.d3.loss_cls: 0.6727  decode.d3.loss_mask: 1.7130  decode.d3.loss_dice: 1.6692  decode.d4.loss_cls: 0.6368  decode.d4.loss_mask: 1.7213  decode.d4.loss_dice: 1.7020  decode.d5.loss_cls: 0.6329  decode.d5.loss_mask: 1.6763  decode.d5.loss_dice: 1.7404  decode.d6.loss_cls: 0.5993  decode.d6.loss_mask: 1.6745  decode.d6.loss_dice: 1.6738  decode.d7.loss_cls: 0.6851  decode.d7.loss_mask: 1.6552  decode.d7.loss_dice: 1.7195  decode.d8.loss_cls: 0.6451  decode.d8.loss_mask: 1.6886  decode.d8.loss_dice: 1.7367  mix_decode.loss_cls: 0.2781  mix_decode.loss_mask: 0.6175  mix_decode.loss_dice: 0.7882  mix_decode.d0.loss_cls: 0.3608  mix_decode.d0.loss_mask: 0.6040  mix_decode.d0.loss_dice: 0.8013  mix_decode.d1.loss_cls: 0.3053  mix_decode.d1.loss_mask: 0.6098  mix_decode.d1.loss_dice: 0.7843  mix_decode.d2.loss_cls: 0.2896  mix_decode.d2.loss_mask: 0.6146  mix_decode.d2.loss_dice: 0.7995  mix_decode.d3.loss_cls: 0.3090  mix_decode.d3.loss_mask: 0.6087  mix_decode.d3.loss_dice: 0.8099  mix_decode.d4.loss_cls: 0.3021  mix_decode.d4.loss_mask: 0.6082  mix_decode.d4.loss_dice: 0.8093  mix_decode.d5.loss_cls: 0.2982  mix_decode.d5.loss_mask: 0.6074  mix_decode.d5.loss_dice: 0.7976  mix_decode.d6.loss_cls: 0.2899  mix_decode.d6.loss_mask: 0.6142  mix_decode.d6.loss_dice: 0.8134  mix_decode.d7.loss_cls: 0.2937  mix_decode.d7.loss_mask: 0.6014  mix_decode.d7.loss_dice: 0.8164  mix_decode.d8.loss_cls: 0.3115  mix_decode.d8.loss_mask: 0.5698  mix_decode.d8.loss_dice: 0.7725
2025/03/28 20:02:16 - mmengine - INFO - Iter(train) [ 7250/20000]  base_lr: 6.6689e-05 lr: 6.6689e-05  eta: 5:13:57  time: 1.8722  data_time: 0.0245  memory: 10737  loss: 56.5314  decode.loss_cls: 0.3696  decode.loss_mask: 1.5212  decode.loss_dice: 1.8947  decode.d0.loss_cls: 0.6360  decode.d0.loss_mask: 1.4916  decode.d0.loss_dice: 1.8896  decode.d1.loss_cls: 0.3287  decode.d1.loss_mask: 1.4835  decode.d1.loss_dice: 1.8822  decode.d2.loss_cls: 0.3143  decode.d2.loss_mask: 1.4961  decode.d2.loss_dice: 1.8865  decode.d3.loss_cls: 0.3390  decode.d3.loss_mask: 1.5298  decode.d3.loss_dice: 1.8795  decode.d4.loss_cls: 0.3877  decode.d4.loss_mask: 1.4664  decode.d4.loss_dice: 1.8700  decode.d5.loss_cls: 0.4108  decode.d5.loss_mask: 1.5337  decode.d5.loss_dice: 1.8980  decode.d6.loss_cls: 0.3583  decode.d6.loss_mask: 1.5351  decode.d6.loss_dice: 1.8745  decode.d7.loss_cls: 0.3722  decode.d7.loss_mask: 1.6117  decode.d7.loss_dice: 1.9247  decode.d8.loss_cls: 0.3686  decode.d8.loss_mask: 1.5554  decode.d8.loss_dice: 1.8779  mix_decode.loss_cls: 0.3304  mix_decode.loss_mask: 0.6711  mix_decode.loss_dice: 0.8561  mix_decode.d0.loss_cls: 0.3393  mix_decode.d0.loss_mask: 0.6526  mix_decode.d0.loss_dice: 0.9013  mix_decode.d1.loss_cls: 0.3283  mix_decode.d1.loss_mask: 0.6614  mix_decode.d1.loss_dice: 0.8475  mix_decode.d2.loss_cls: 0.2914  mix_decode.d2.loss_mask: 0.6781  mix_decode.d2.loss_dice: 0.8521  mix_decode.d3.loss_cls: 0.2745  mix_decode.d3.loss_mask: 0.6645  mix_decode.d3.loss_dice: 0.8759  mix_decode.d4.loss_cls: 0.2949  mix_decode.d4.loss_mask: 0.6679  mix_decode.d4.loss_dice: 0.8931  mix_decode.d5.loss_cls: 0.3170  mix_decode.d5.loss_mask: 0.6924  mix_decode.d5.loss_dice: 0.8780  mix_decode.d6.loss_cls: 0.3418  mix_decode.d6.loss_mask: 0.6898  mix_decode.d6.loss_dice: 0.8655  mix_decode.d7.loss_cls: 0.2970  mix_decode.d7.loss_mask: 0.6809  mix_decode.d7.loss_dice: 0.8344  mix_decode.d8.loss_cls: 0.3418  mix_decode.d8.loss_mask: 0.6734  mix_decode.d8.loss_dice: 0.8520
2025/03/28 20:03:50 - mmengine - INFO - Iter(train) [ 7300/20000]  base_lr: 6.6453e-05 lr: 6.6453e-05  eta: 5:13:19  time: 1.9361  data_time: 0.0233  memory: 10767  loss: 59.0838  decode.loss_cls: 0.7367  decode.loss_mask: 1.3401  decode.loss_dice: 1.9306  decode.d0.loss_cls: 0.4825  decode.d0.loss_mask: 1.2867  decode.d0.loss_dice: 2.1134  decode.d1.loss_cls: 0.5827  decode.d1.loss_mask: 1.2475  decode.d1.loss_dice: 2.0294  decode.d2.loss_cls: 0.6313  decode.d2.loss_mask: 1.2664  decode.d2.loss_dice: 1.9891  decode.d3.loss_cls: 0.6392  decode.d3.loss_mask: 1.2902  decode.d3.loss_dice: 1.9964  decode.d4.loss_cls: 0.5547  decode.d4.loss_mask: 1.2795  decode.d4.loss_dice: 2.0850  decode.d5.loss_cls: 0.6865  decode.d5.loss_mask: 1.2588  decode.d5.loss_dice: 2.0095  decode.d6.loss_cls: 0.5902  decode.d6.loss_mask: 1.3011  decode.d6.loss_dice: 1.9934  decode.d7.loss_cls: 0.7857  decode.d7.loss_mask: 1.2878  decode.d7.loss_dice: 1.9470  decode.d8.loss_cls: 0.7154  decode.d8.loss_mask: 1.3587  decode.d8.loss_dice: 2.0523  mix_decode.loss_cls: 0.3770  mix_decode.loss_mask: 0.6321  mix_decode.loss_dice: 0.9801  mix_decode.d0.loss_cls: 0.3192  mix_decode.d0.loss_mask: 0.6609  mix_decode.d0.loss_dice: 1.0309  mix_decode.d1.loss_cls: 0.3137  mix_decode.d1.loss_mask: 0.6164  mix_decode.d1.loss_dice: 0.9652  mix_decode.d2.loss_cls: 0.3547  mix_decode.d2.loss_mask: 0.6267  mix_decode.d2.loss_dice: 0.9858  mix_decode.d3.loss_cls: 0.3365  mix_decode.d3.loss_mask: 0.6414  mix_decode.d3.loss_dice: 0.9925  mix_decode.d4.loss_cls: 0.3227  mix_decode.d4.loss_mask: 0.6374  mix_decode.d4.loss_dice: 0.9872  mix_decode.d5.loss_cls: 0.3785  mix_decode.d5.loss_mask: 0.6541  mix_decode.d5.loss_dice: 0.9583  mix_decode.d6.loss_cls: 0.2695  mix_decode.d6.loss_mask: 0.6518  mix_decode.d6.loss_dice: 1.0069  mix_decode.d7.loss_cls: 0.3811  mix_decode.d7.loss_mask: 0.6417  mix_decode.d7.loss_dice: 0.9710  mix_decode.d8.loss_cls: 0.2909  mix_decode.d8.loss_mask: 0.6451  mix_decode.d8.loss_dice: 0.9864
2025/03/28 20:05:25 - mmengine - INFO - Iter(train) [ 7350/20000]  base_lr: 6.6218e-05 lr: 6.6218e-05  eta: 5:12:40  time: 1.8427  data_time: 0.0258  memory: 10743  loss: 56.5779  decode.loss_cls: 0.5145  decode.loss_mask: 1.6086  decode.loss_dice: 1.7207  decode.d0.loss_cls: 0.7029  decode.d0.loss_mask: 1.5399  decode.d0.loss_dice: 1.8170  decode.d1.loss_cls: 0.5298  decode.d1.loss_mask: 1.5738  decode.d1.loss_dice: 1.7021  decode.d2.loss_cls: 0.5173  decode.d2.loss_mask: 1.5516  decode.d2.loss_dice: 1.6443  decode.d3.loss_cls: 0.5299  decode.d3.loss_mask: 1.5705  decode.d3.loss_dice: 1.6613  decode.d4.loss_cls: 0.5068  decode.d4.loss_mask: 1.5761  decode.d4.loss_dice: 1.6626  decode.d5.loss_cls: 0.5320  decode.d5.loss_mask: 1.5422  decode.d5.loss_dice: 1.6999  decode.d6.loss_cls: 0.5247  decode.d6.loss_mask: 1.5529  decode.d6.loss_dice: 1.7247  decode.d7.loss_cls: 0.5366  decode.d7.loss_mask: 1.5764  decode.d7.loss_dice: 1.7391  decode.d8.loss_cls: 0.5245  decode.d8.loss_mask: 1.5151  decode.d8.loss_dice: 1.7246  mix_decode.loss_cls: 0.3362  mix_decode.loss_mask: 0.6534  mix_decode.loss_dice: 0.8903  mix_decode.d0.loss_cls: 0.3344  mix_decode.d0.loss_mask: 0.6115  mix_decode.d0.loss_dice: 0.9361  mix_decode.d1.loss_cls: 0.2838  mix_decode.d1.loss_mask: 0.6308  mix_decode.d1.loss_dice: 0.8735  mix_decode.d2.loss_cls: 0.2847  mix_decode.d2.loss_mask: 0.6521  mix_decode.d2.loss_dice: 0.9006  mix_decode.d3.loss_cls: 0.2960  mix_decode.d3.loss_mask: 0.6605  mix_decode.d3.loss_dice: 0.9048  mix_decode.d4.loss_cls: 0.3333  mix_decode.d4.loss_mask: 0.6124  mix_decode.d4.loss_dice: 0.8798  mix_decode.d5.loss_cls: 0.3476  mix_decode.d5.loss_mask: 0.6170  mix_decode.d5.loss_dice: 0.8742  mix_decode.d6.loss_cls: 0.3394  mix_decode.d6.loss_mask: 0.6175  mix_decode.d6.loss_dice: 0.8992  mix_decode.d7.loss_cls: 0.3045  mix_decode.d7.loss_mask: 0.6357  mix_decode.d7.loss_dice: 0.8976  mix_decode.d8.loss_cls: 0.3268  mix_decode.d8.loss_mask: 0.6335  mix_decode.d8.loss_dice: 0.8881
2025/03/28 20:07:01 - mmengine - INFO - Iter(train) [ 7400/20000]  base_lr: 6.5982e-05 lr: 6.5982e-05  eta: 5:12:04  time: 1.8543  data_time: 0.0258  memory: 10753  loss: 58.5622  decode.loss_cls: 0.4408  decode.loss_mask: 1.7928  decode.loss_dice: 1.6760  decode.d0.loss_cls: 0.4860  decode.d0.loss_mask: 1.8606  decode.d0.loss_dice: 1.7207  decode.d1.loss_cls: 0.3530  decode.d1.loss_mask: 1.8078  decode.d1.loss_dice: 1.6560  decode.d2.loss_cls: 0.3864  decode.d2.loss_mask: 1.8706  decode.d2.loss_dice: 1.6734  decode.d3.loss_cls: 0.3909  decode.d3.loss_mask: 1.7772  decode.d3.loss_dice: 1.6916  decode.d4.loss_cls: 0.3507  decode.d4.loss_mask: 1.8329  decode.d4.loss_dice: 1.7129  decode.d5.loss_cls: 0.3439  decode.d5.loss_mask: 1.8282  decode.d5.loss_dice: 1.7058  decode.d6.loss_cls: 0.3406  decode.d6.loss_mask: 1.8653  decode.d6.loss_dice: 1.6938  decode.d7.loss_cls: 0.3657  decode.d7.loss_mask: 1.8125  decode.d7.loss_dice: 1.6888  decode.d8.loss_cls: 0.4133  decode.d8.loss_mask: 1.7820  decode.d8.loss_dice: 1.6900  mix_decode.loss_cls: 0.3080  mix_decode.loss_mask: 0.7174  mix_decode.loss_dice: 0.9137  mix_decode.d0.loss_cls: 0.3668  mix_decode.d0.loss_mask: 0.7138  mix_decode.d0.loss_dice: 0.9276  mix_decode.d1.loss_cls: 0.2735  mix_decode.d1.loss_mask: 0.7361  mix_decode.d1.loss_dice: 0.9119  mix_decode.d2.loss_cls: 0.3200  mix_decode.d2.loss_mask: 0.7296  mix_decode.d2.loss_dice: 0.9176  mix_decode.d3.loss_cls: 0.3151  mix_decode.d3.loss_mask: 0.7438  mix_decode.d3.loss_dice: 0.9070  mix_decode.d4.loss_cls: 0.3033  mix_decode.d4.loss_mask: 0.7340  mix_decode.d4.loss_dice: 0.9383  mix_decode.d5.loss_cls: 0.2886  mix_decode.d5.loss_mask: 0.7342  mix_decode.d5.loss_dice: 0.9424  mix_decode.d6.loss_cls: 0.3051  mix_decode.d6.loss_mask: 0.7444  mix_decode.d6.loss_dice: 0.9184  mix_decode.d7.loss_cls: 0.2956  mix_decode.d7.loss_mask: 0.7108  mix_decode.d7.loss_dice: 0.9180  mix_decode.d8.loss_cls: 0.2868  mix_decode.d8.loss_mask: 0.7193  mix_decode.d8.loss_dice: 0.9109
2025/03/28 20:08:37 - mmengine - INFO - Iter(train) [ 7450/20000]  base_lr: 6.5746e-05 lr: 6.5746e-05  eta: 5:11:26  time: 2.0050  data_time: 0.0274  memory: 10751  loss: 63.7794  decode.loss_cls: 0.6601  decode.loss_mask: 1.7762  decode.loss_dice: 1.8227  decode.d0.loss_cls: 0.5662  decode.d0.loss_mask: 1.7786  decode.d0.loss_dice: 1.8281  decode.d1.loss_cls: 0.5901  decode.d1.loss_mask: 1.8287  decode.d1.loss_dice: 1.8153  decode.d2.loss_cls: 0.6412  decode.d2.loss_mask: 1.7884  decode.d2.loss_dice: 1.7937  decode.d3.loss_cls: 0.5162  decode.d3.loss_mask: 1.8771  decode.d3.loss_dice: 1.7994  decode.d4.loss_cls: 0.5759  decode.d4.loss_mask: 1.8604  decode.d4.loss_dice: 1.8450  decode.d5.loss_cls: 0.6340  decode.d5.loss_mask: 1.8657  decode.d5.loss_dice: 1.8101  decode.d6.loss_cls: 0.6099  decode.d6.loss_mask: 1.8423  decode.d6.loss_dice: 1.8450  decode.d7.loss_cls: 0.6521  decode.d7.loss_mask: 1.7755  decode.d7.loss_dice: 1.8225  decode.d8.loss_cls: 0.6640  decode.d8.loss_mask: 1.8114  decode.d8.loss_dice: 1.8488  mix_decode.loss_cls: 0.3563  mix_decode.loss_mask: 0.7788  mix_decode.loss_dice: 1.0156  mix_decode.d0.loss_cls: 0.3137  mix_decode.d0.loss_mask: 0.7556  mix_decode.d0.loss_dice: 1.0922  mix_decode.d1.loss_cls: 0.3251  mix_decode.d1.loss_mask: 0.7644  mix_decode.d1.loss_dice: 1.0468  mix_decode.d2.loss_cls: 0.3845  mix_decode.d2.loss_mask: 0.6666  mix_decode.d2.loss_dice: 0.9973  mix_decode.d3.loss_cls: 0.3884  mix_decode.d3.loss_mask: 0.6941  mix_decode.d3.loss_dice: 0.9939  mix_decode.d4.loss_cls: 0.4130  mix_decode.d4.loss_mask: 0.7215  mix_decode.d4.loss_dice: 1.0075  mix_decode.d5.loss_cls: 0.4060  mix_decode.d5.loss_mask: 0.7255  mix_decode.d5.loss_dice: 1.0168  mix_decode.d6.loss_cls: 0.3478  mix_decode.d6.loss_mask: 0.7533  mix_decode.d6.loss_dice: 1.0540  mix_decode.d7.loss_cls: 0.3282  mix_decode.d7.loss_mask: 0.7615  mix_decode.d7.loss_dice: 1.0714  mix_decode.d8.loss_cls: 0.2976  mix_decode.d8.loss_mask: 0.7190  mix_decode.d8.loss_dice: 1.0382
2025/03/28 20:10:11 - mmengine - INFO - Iter(train) [ 7500/20000]  base_lr: 6.5511e-05 lr: 6.5511e-05  eta: 5:10:44  time: 1.9744  data_time: 0.0267  memory: 10749  loss: 55.5421  decode.loss_cls: 0.5474  decode.loss_mask: 1.5435  decode.loss_dice: 1.7217  decode.d0.loss_cls: 0.6369  decode.d0.loss_mask: 1.4889  decode.d0.loss_dice: 1.7709  decode.d1.loss_cls: 0.5667  decode.d1.loss_mask: 1.4999  decode.d1.loss_dice: 1.6521  decode.d2.loss_cls: 0.5640  decode.d2.loss_mask: 1.5265  decode.d2.loss_dice: 1.7656  decode.d3.loss_cls: 0.5192  decode.d3.loss_mask: 1.5395  decode.d3.loss_dice: 1.7429  decode.d4.loss_cls: 0.5939  decode.d4.loss_mask: 1.4531  decode.d4.loss_dice: 1.7101  decode.d5.loss_cls: 0.5418  decode.d5.loss_mask: 1.5299  decode.d5.loss_dice: 1.7270  decode.d6.loss_cls: 0.5239  decode.d6.loss_mask: 1.5450  decode.d6.loss_dice: 1.7931  decode.d7.loss_cls: 0.5399  decode.d7.loss_mask: 1.6202  decode.d7.loss_dice: 1.8065  decode.d8.loss_cls: 0.5521  decode.d8.loss_mask: 1.5822  decode.d8.loss_dice: 1.7566  mix_decode.loss_cls: 0.2254  mix_decode.loss_mask: 0.5664  mix_decode.loss_dice: 0.8829  mix_decode.d0.loss_cls: 0.3070  mix_decode.d0.loss_mask: 0.5843  mix_decode.d0.loss_dice: 0.9021  mix_decode.d1.loss_cls: 0.2360  mix_decode.d1.loss_mask: 0.6033  mix_decode.d1.loss_dice: 0.8745  mix_decode.d2.loss_cls: 0.2806  mix_decode.d2.loss_mask: 0.5678  mix_decode.d2.loss_dice: 0.8761  mix_decode.d3.loss_cls: 0.3274  mix_decode.d3.loss_mask: 0.5570  mix_decode.d3.loss_dice: 0.8247  mix_decode.d4.loss_cls: 0.2917  mix_decode.d4.loss_mask: 0.5583  mix_decode.d4.loss_dice: 0.8421  mix_decode.d5.loss_cls: 0.2753  mix_decode.d5.loss_mask: 0.5678  mix_decode.d5.loss_dice: 0.8454  mix_decode.d6.loss_cls: 0.2807  mix_decode.d6.loss_mask: 0.6172  mix_decode.d6.loss_dice: 0.8769  mix_decode.d7.loss_cls: 0.3074  mix_decode.d7.loss_mask: 0.5610  mix_decode.d7.loss_dice: 0.8392  mix_decode.d8.loss_cls: 0.2583  mix_decode.d8.loss_mask: 0.5695  mix_decode.d8.loss_dice: 0.8747
2025/03/28 20:11:47 - mmengine - INFO - Iter(train) [ 7550/20000]  base_lr: 6.5275e-05 lr: 6.5275e-05  eta: 5:10:04  time: 1.8536  data_time: 0.0266  memory: 10740  loss: 55.4946  decode.loss_cls: 0.6627  decode.loss_mask: 1.5018  decode.loss_dice: 1.4530  decode.d0.loss_cls: 0.7341  decode.d0.loss_mask: 1.5866  decode.d0.loss_dice: 1.5742  decode.d1.loss_cls: 0.6940  decode.d1.loss_mask: 1.4920  decode.d1.loss_dice: 1.4779  decode.d2.loss_cls: 0.7550  decode.d2.loss_mask: 1.4360  decode.d2.loss_dice: 1.3831  decode.d3.loss_cls: 0.6621  decode.d3.loss_mask: 1.5543  decode.d3.loss_dice: 1.4899  decode.d4.loss_cls: 0.6425  decode.d4.loss_mask: 1.5296  decode.d4.loss_dice: 1.5138  decode.d5.loss_cls: 0.6468  decode.d5.loss_mask: 1.5384  decode.d5.loss_dice: 1.5033  decode.d6.loss_cls: 0.6880  decode.d6.loss_mask: 1.5381  decode.d6.loss_dice: 1.4882  decode.d7.loss_cls: 0.6239  decode.d7.loss_mask: 1.5656  decode.d7.loss_dice: 1.5172  decode.d8.loss_cls: 0.6679  decode.d8.loss_mask: 1.5093  decode.d8.loss_dice: 1.4879  mix_decode.loss_cls: 0.3069  mix_decode.loss_mask: 0.6967  mix_decode.loss_dice: 0.8299  mix_decode.d0.loss_cls: 0.3204  mix_decode.d0.loss_mask: 0.7398  mix_decode.d0.loss_dice: 0.8707  mix_decode.d1.loss_cls: 0.2960  mix_decode.d1.loss_mask: 0.6900  mix_decode.d1.loss_dice: 0.8656  mix_decode.d2.loss_cls: 0.3054  mix_decode.d2.loss_mask: 0.7077  mix_decode.d2.loss_dice: 0.8586  mix_decode.d3.loss_cls: 0.2687  mix_decode.d3.loss_mask: 0.7006  mix_decode.d3.loss_dice: 0.8536  mix_decode.d4.loss_cls: 0.2835  mix_decode.d4.loss_mask: 0.7303  mix_decode.d4.loss_dice: 0.8536  mix_decode.d5.loss_cls: 0.3214  mix_decode.d5.loss_mask: 0.7087  mix_decode.d5.loss_dice: 0.8308  mix_decode.d6.loss_cls: 0.2830  mix_decode.d6.loss_mask: 0.7022  mix_decode.d6.loss_dice: 0.8509  mix_decode.d7.loss_cls: 0.3201  mix_decode.d7.loss_mask: 0.6768  mix_decode.d7.loss_dice: 0.8387  mix_decode.d8.loss_cls: 0.2990  mix_decode.d8.loss_mask: 0.7118  mix_decode.d8.loss_dice: 0.8557
2025/03/28 20:13:19 - mmengine - INFO - Iter(train) [ 7600/20000]  base_lr: 6.5039e-05 lr: 6.5039e-05  eta: 5:09:18  time: 1.9182  data_time: 0.0274  memory: 10747  loss: 50.2969  decode.loss_cls: 0.3161  decode.loss_mask: 1.3813  decode.loss_dice: 1.5031  decode.d0.loss_cls: 0.5181  decode.d0.loss_mask: 1.3706  decode.d0.loss_dice: 1.5198  decode.d1.loss_cls: 0.3655  decode.d1.loss_mask: 1.3398  decode.d1.loss_dice: 1.4989  decode.d2.loss_cls: 0.3521  decode.d2.loss_mask: 1.3133  decode.d2.loss_dice: 1.4677  decode.d3.loss_cls: 0.3649  decode.d3.loss_mask: 1.3541  decode.d3.loss_dice: 1.4926  decode.d4.loss_cls: 0.3771  decode.d4.loss_mask: 1.3536  decode.d4.loss_dice: 1.4855  decode.d5.loss_cls: 0.3987  decode.d5.loss_mask: 1.3405  decode.d5.loss_dice: 1.4822  decode.d6.loss_cls: 0.3503  decode.d6.loss_mask: 1.3776  decode.d6.loss_dice: 1.4934  decode.d7.loss_cls: 0.3433  decode.d7.loss_mask: 1.4058  decode.d7.loss_dice: 1.5335  decode.d8.loss_cls: 0.3429  decode.d8.loss_mask: 1.3404  decode.d8.loss_dice: 1.4588  mix_decode.loss_cls: 0.3472  mix_decode.loss_mask: 0.5625  mix_decode.loss_dice: 0.8847  mix_decode.d0.loss_cls: 0.3412  mix_decode.d0.loss_mask: 0.5408  mix_decode.d0.loss_dice: 0.9501  mix_decode.d1.loss_cls: 0.3397  mix_decode.d1.loss_mask: 0.5457  mix_decode.d1.loss_dice: 0.8753  mix_decode.d2.loss_cls: 0.3093  mix_decode.d2.loss_mask: 0.5516  mix_decode.d2.loss_dice: 0.8750  mix_decode.d3.loss_cls: 0.3575  mix_decode.d3.loss_mask: 0.5461  mix_decode.d3.loss_dice: 0.8747  mix_decode.d4.loss_cls: 0.3675  mix_decode.d4.loss_mask: 0.5813  mix_decode.d4.loss_dice: 0.8818  mix_decode.d5.loss_cls: 0.3418  mix_decode.d5.loss_mask: 0.5746  mix_decode.d5.loss_dice: 0.8958  mix_decode.d6.loss_cls: 0.3627  mix_decode.d6.loss_mask: 0.5990  mix_decode.d6.loss_dice: 0.9112  mix_decode.d7.loss_cls: 0.3804  mix_decode.d7.loss_mask: 0.5562  mix_decode.d7.loss_dice: 0.8843  mix_decode.d8.loss_cls: 0.3721  mix_decode.d8.loss_mask: 0.5549  mix_decode.d8.loss_dice: 0.8904
2025/03/28 20:14:54 - mmengine - INFO - Iter(train) [ 7650/20000]  base_lr: 6.4803e-05 lr: 6.4803e-05  eta: 5:08:35  time: 1.9582  data_time: 0.0261  memory: 10765  loss: 60.1715  decode.loss_cls: 0.4625  decode.loss_mask: 1.8025  decode.loss_dice: 1.8519  decode.d0.loss_cls: 0.5208  decode.d0.loss_mask: 1.7902  decode.d0.loss_dice: 1.8727  decode.d1.loss_cls: 0.4843  decode.d1.loss_mask: 1.7567  decode.d1.loss_dice: 1.7467  decode.d2.loss_cls: 0.5129  decode.d2.loss_mask: 1.7301  decode.d2.loss_dice: 1.7466  decode.d3.loss_cls: 0.5012  decode.d3.loss_mask: 1.7833  decode.d3.loss_dice: 1.7685  decode.d4.loss_cls: 0.4972  decode.d4.loss_mask: 1.7611  decode.d4.loss_dice: 1.7955  decode.d5.loss_cls: 0.4906  decode.d5.loss_mask: 1.7484  decode.d5.loss_dice: 1.7769  decode.d6.loss_cls: 0.5437  decode.d6.loss_mask: 1.6885  decode.d6.loss_dice: 1.7527  decode.d7.loss_cls: 0.5709  decode.d7.loss_mask: 1.7162  decode.d7.loss_dice: 1.7539  decode.d8.loss_cls: 0.5711  decode.d8.loss_mask: 1.8014  decode.d8.loss_dice: 1.8263  mix_decode.loss_cls: 0.3859  mix_decode.loss_mask: 0.6548  mix_decode.loss_dice: 0.8531  mix_decode.d0.loss_cls: 0.3885  mix_decode.d0.loss_mask: 0.6969  mix_decode.d0.loss_dice: 0.9208  mix_decode.d1.loss_cls: 0.3506  mix_decode.d1.loss_mask: 0.6843  mix_decode.d1.loss_dice: 0.8792  mix_decode.d2.loss_cls: 0.4181  mix_decode.d2.loss_mask: 0.6690  mix_decode.d2.loss_dice: 0.8786  mix_decode.d3.loss_cls: 0.4624  mix_decode.d3.loss_mask: 0.6492  mix_decode.d3.loss_dice: 0.8198  mix_decode.d4.loss_cls: 0.4253  mix_decode.d4.loss_mask: 0.6792  mix_decode.d4.loss_dice: 0.8465  mix_decode.d5.loss_cls: 0.4253  mix_decode.d5.loss_mask: 0.6695  mix_decode.d5.loss_dice: 0.8461  mix_decode.d6.loss_cls: 0.4133  mix_decode.d6.loss_mask: 0.7021  mix_decode.d6.loss_dice: 0.8861  mix_decode.d7.loss_cls: 0.4479  mix_decode.d7.loss_mask: 0.6796  mix_decode.d7.loss_dice: 0.8704  mix_decode.d8.loss_cls: 0.4061  mix_decode.d8.loss_mask: 0.6759  mix_decode.d8.loss_dice: 0.8619
2025/03/28 20:16:29 - mmengine - INFO - Iter(train) [ 7700/20000]  base_lr: 6.4566e-05 lr: 6.4566e-05  eta: 5:07:52  time: 1.8748  data_time: 0.0281  memory: 10754  loss: 50.4620  decode.loss_cls: 0.3931  decode.loss_mask: 1.3759  decode.loss_dice: 1.5063  decode.d0.loss_cls: 0.5441  decode.d0.loss_mask: 1.3204  decode.d0.loss_dice: 1.4850  decode.d1.loss_cls: 0.3440  decode.d1.loss_mask: 1.3281  decode.d1.loss_dice: 1.5184  decode.d2.loss_cls: 0.4247  decode.d2.loss_mask: 1.3560  decode.d2.loss_dice: 1.4984  decode.d3.loss_cls: 0.3805  decode.d3.loss_mask: 1.3405  decode.d3.loss_dice: 1.4884  decode.d4.loss_cls: 0.4257  decode.d4.loss_mask: 1.3638  decode.d4.loss_dice: 1.4870  decode.d5.loss_cls: 0.4804  decode.d5.loss_mask: 1.3093  decode.d5.loss_dice: 1.4378  decode.d6.loss_cls: 0.4195  decode.d6.loss_mask: 1.3562  decode.d6.loss_dice: 1.5000  decode.d7.loss_cls: 0.4102  decode.d7.loss_mask: 1.3688  decode.d7.loss_dice: 1.5132  decode.d8.loss_cls: 0.4215  decode.d8.loss_mask: 1.3789  decode.d8.loss_dice: 1.4852  mix_decode.loss_cls: 0.2673  mix_decode.loss_mask: 0.6329  mix_decode.loss_dice: 0.8731  mix_decode.d0.loss_cls: 0.3023  mix_decode.d0.loss_mask: 0.6262  mix_decode.d0.loss_dice: 0.8949  mix_decode.d1.loss_cls: 0.2344  mix_decode.d1.loss_mask: 0.6367  mix_decode.d1.loss_dice: 0.8764  mix_decode.d2.loss_cls: 0.2555  mix_decode.d2.loss_mask: 0.6155  mix_decode.d2.loss_dice: 0.8967  mix_decode.d3.loss_cls: 0.2607  mix_decode.d3.loss_mask: 0.6157  mix_decode.d3.loss_dice: 0.8710  mix_decode.d4.loss_cls: 0.2781  mix_decode.d4.loss_mask: 0.6342  mix_decode.d4.loss_dice: 0.8814  mix_decode.d5.loss_cls: 0.2681  mix_decode.d5.loss_mask: 0.6350  mix_decode.d5.loss_dice: 0.8764  mix_decode.d6.loss_cls: 0.2817  mix_decode.d6.loss_mask: 0.6393  mix_decode.d6.loss_dice: 0.8576  mix_decode.d7.loss_cls: 0.2817  mix_decode.d7.loss_mask: 0.6421  mix_decode.d7.loss_dice: 0.8717  mix_decode.d8.loss_cls: 0.2923  mix_decode.d8.loss_mask: 0.6339  mix_decode.d8.loss_dice: 0.8675
2025/03/28 20:18:03 - mmengine - INFO - Iter(train) [ 7750/20000]  base_lr: 6.4330e-05 lr: 6.4330e-05  eta: 5:07:07  time: 1.8660  data_time: 0.0264  memory: 10742  loss: 55.4328  decode.loss_cls: 0.2967  decode.loss_mask: 1.6082  decode.loss_dice: 1.6585  decode.d0.loss_cls: 0.5047  decode.d0.loss_mask: 1.6430  decode.d0.loss_dice: 1.6132  decode.d1.loss_cls: 0.3183  decode.d1.loss_mask: 1.6092  decode.d1.loss_dice: 1.6253  decode.d2.loss_cls: 0.4020  decode.d2.loss_mask: 1.5904  decode.d2.loss_dice: 1.5668  decode.d3.loss_cls: 0.3970  decode.d3.loss_mask: 1.6124  decode.d3.loss_dice: 1.6248  decode.d4.loss_cls: 0.3918  decode.d4.loss_mask: 1.6887  decode.d4.loss_dice: 1.6483  decode.d5.loss_cls: 0.3530  decode.d5.loss_mask: 1.6061  decode.d5.loss_dice: 1.6106  decode.d6.loss_cls: 0.3647  decode.d6.loss_mask: 1.6428  decode.d6.loss_dice: 1.6376  decode.d7.loss_cls: 0.3620  decode.d7.loss_mask: 1.6787  decode.d7.loss_dice: 1.6214  decode.d8.loss_cls: 0.3217  decode.d8.loss_mask: 1.6619  decode.d8.loss_dice: 1.6373  mix_decode.loss_cls: 0.2813  mix_decode.loss_mask: 0.7213  mix_decode.loss_dice: 0.9493  mix_decode.d0.loss_cls: 0.2692  mix_decode.d0.loss_mask: 0.7138  mix_decode.d0.loss_dice: 0.9441  mix_decode.d1.loss_cls: 0.2337  mix_decode.d1.loss_mask: 0.7350  mix_decode.d1.loss_dice: 0.9321  mix_decode.d2.loss_cls: 0.2553  mix_decode.d2.loss_mask: 0.7290  mix_decode.d2.loss_dice: 0.9109  mix_decode.d3.loss_cls: 0.2866  mix_decode.d3.loss_mask: 0.7046  mix_decode.d3.loss_dice: 0.8991  mix_decode.d4.loss_cls: 0.3309  mix_decode.d4.loss_mask: 0.7355  mix_decode.d4.loss_dice: 0.8845  mix_decode.d5.loss_cls: 0.2852  mix_decode.d5.loss_mask: 0.6824  mix_decode.d5.loss_dice: 0.8978  mix_decode.d6.loss_cls: 0.2680  mix_decode.d6.loss_mask: 0.7034  mix_decode.d6.loss_dice: 0.9184  mix_decode.d7.loss_cls: 0.2323  mix_decode.d7.loss_mask: 0.7556  mix_decode.d7.loss_dice: 0.9357  mix_decode.d8.loss_cls: 0.2746  mix_decode.d8.loss_mask: 0.7611  mix_decode.d8.loss_dice: 0.9050
2025/03/28 20:19:33 - mmengine - INFO - Iter(train) [ 7800/20000]  base_lr: 6.4094e-05 lr: 6.4094e-05  eta: 5:06:16  time: 1.6537  data_time: 0.0302  memory: 10761  loss: 59.3245  decode.loss_cls: 0.6660  decode.loss_mask: 1.6284  decode.loss_dice: 1.7474  decode.d0.loss_cls: 0.6978  decode.d0.loss_mask: 1.6235  decode.d0.loss_dice: 1.7424  decode.d1.loss_cls: 0.6887  decode.d1.loss_mask: 1.6031  decode.d1.loss_dice: 1.7043  decode.d2.loss_cls: 0.6984  decode.d2.loss_mask: 1.6363  decode.d2.loss_dice: 1.6757  decode.d3.loss_cls: 0.6459  decode.d3.loss_mask: 1.7249  decode.d3.loss_dice: 1.7417  decode.d4.loss_cls: 0.6918  decode.d4.loss_mask: 1.6243  decode.d4.loss_dice: 1.7185  decode.d5.loss_cls: 0.6557  decode.d5.loss_mask: 1.6029  decode.d5.loss_dice: 1.7715  decode.d6.loss_cls: 0.7331  decode.d6.loss_mask: 1.5998  decode.d6.loss_dice: 1.6741  decode.d7.loss_cls: 0.7626  decode.d7.loss_mask: 1.5968  decode.d7.loss_dice: 1.7225  decode.d8.loss_cls: 0.6412  decode.d8.loss_mask: 1.8008  decode.d8.loss_dice: 1.7891  mix_decode.loss_cls: 0.2637  mix_decode.loss_mask: 0.6677  mix_decode.loss_dice: 0.9419  mix_decode.d0.loss_cls: 0.3170  mix_decode.d0.loss_mask: 0.6992  mix_decode.d0.loss_dice: 0.9610  mix_decode.d1.loss_cls: 0.3059  mix_decode.d1.loss_mask: 0.6444  mix_decode.d1.loss_dice: 0.9061  mix_decode.d2.loss_cls: 0.3104  mix_decode.d2.loss_mask: 0.6675  mix_decode.d2.loss_dice: 0.9125  mix_decode.d3.loss_cls: 0.3020  mix_decode.d3.loss_mask: 0.6594  mix_decode.d3.loss_dice: 0.9071  mix_decode.d4.loss_cls: 0.3253  mix_decode.d4.loss_mask: 0.6540  mix_decode.d4.loss_dice: 0.8912  mix_decode.d5.loss_cls: 0.2887  mix_decode.d5.loss_mask: 0.6645  mix_decode.d5.loss_dice: 0.8881  mix_decode.d6.loss_cls: 0.2742  mix_decode.d6.loss_mask: 0.6464  mix_decode.d6.loss_dice: 0.9051  mix_decode.d7.loss_cls: 0.2842  mix_decode.d7.loss_mask: 0.6516  mix_decode.d7.loss_dice: 0.9037  mix_decode.d8.loss_cls: 0.2832  mix_decode.d8.loss_mask: 0.6699  mix_decode.d8.loss_dice: 0.9191
2025/03/28 20:21:08 - mmengine - INFO - Iter(train) [ 7850/20000]  base_lr: 6.3857e-05 lr: 6.3857e-05  eta: 5:05:31  time: 1.9435  data_time: 0.0264  memory: 10759  loss: 60.4604  decode.loss_cls: 0.6373  decode.loss_mask: 1.4291  decode.loss_dice: 2.0296  decode.d0.loss_cls: 0.6460  decode.d0.loss_mask: 1.3704  decode.d0.loss_dice: 2.0068  decode.d1.loss_cls: 0.6022  decode.d1.loss_mask: 1.3554  decode.d1.loss_dice: 1.9958  decode.d2.loss_cls: 0.7276  decode.d2.loss_mask: 1.3976  decode.d2.loss_dice: 1.9517  decode.d3.loss_cls: 0.6546  decode.d3.loss_mask: 1.3969  decode.d3.loss_dice: 1.9698  decode.d4.loss_cls: 0.6950  decode.d4.loss_mask: 1.4215  decode.d4.loss_dice: 1.9307  decode.d5.loss_cls: 0.7911  decode.d5.loss_mask: 1.3905  decode.d5.loss_dice: 1.8958  decode.d6.loss_cls: 0.7614  decode.d6.loss_mask: 1.4132  decode.d6.loss_dice: 1.9248  decode.d7.loss_cls: 0.7163  decode.d7.loss_mask: 1.3400  decode.d7.loss_dice: 1.9325  decode.d8.loss_cls: 0.7547  decode.d8.loss_mask: 1.3772  decode.d8.loss_dice: 1.9448  mix_decode.loss_cls: 0.3555  mix_decode.loss_mask: 0.6814  mix_decode.loss_dice: 0.9476  mix_decode.d0.loss_cls: 0.3557  mix_decode.d0.loss_mask: 0.6653  mix_decode.d0.loss_dice: 1.0189  mix_decode.d1.loss_cls: 0.3811  mix_decode.d1.loss_mask: 0.6468  mix_decode.d1.loss_dice: 0.9115  mix_decode.d2.loss_cls: 0.3816  mix_decode.d2.loss_mask: 0.6852  mix_decode.d2.loss_dice: 0.9235  mix_decode.d3.loss_cls: 0.3730  mix_decode.d3.loss_mask: 0.6877  mix_decode.d3.loss_dice: 0.9560  mix_decode.d4.loss_cls: 0.3988  mix_decode.d4.loss_mask: 0.6798  mix_decode.d4.loss_dice: 0.9118  mix_decode.d5.loss_cls: 0.4102  mix_decode.d5.loss_mask: 0.6831  mix_decode.d5.loss_dice: 0.9281  mix_decode.d6.loss_cls: 0.3825  mix_decode.d6.loss_mask: 0.6910  mix_decode.d6.loss_dice: 0.9335  mix_decode.d7.loss_cls: 0.3914  mix_decode.d7.loss_mask: 0.6619  mix_decode.d7.loss_dice: 0.9430  mix_decode.d8.loss_cls: 0.3636  mix_decode.d8.loss_mask: 0.7061  mix_decode.d8.loss_dice: 0.9445
2025/03/28 20:22:42 - mmengine - INFO - Iter(train) [ 7900/20000]  base_lr: 6.3621e-05 lr: 6.3621e-05  eta: 5:04:43  time: 1.9118  data_time: 0.0270  memory: 10734  loss: 53.4972  decode.loss_cls: 0.4731  decode.loss_mask: 1.6866  decode.loss_dice: 1.5423  decode.d0.loss_cls: 0.6137  decode.d0.loss_mask: 1.6159  decode.d0.loss_dice: 1.5016  decode.d1.loss_cls: 0.4082  decode.d1.loss_mask: 1.7771  decode.d1.loss_dice: 1.5533  decode.d2.loss_cls: 0.4807  decode.d2.loss_mask: 1.6629  decode.d2.loss_dice: 1.5055  decode.d3.loss_cls: 0.4072  decode.d3.loss_mask: 1.7520  decode.d3.loss_dice: 1.5686  decode.d4.loss_cls: 0.5088  decode.d4.loss_mask: 1.6280  decode.d4.loss_dice: 1.5077  decode.d5.loss_cls: 0.4715  decode.d5.loss_mask: 1.5967  decode.d5.loss_dice: 1.4717  decode.d6.loss_cls: 0.4281  decode.d6.loss_mask: 1.6764  decode.d6.loss_dice: 1.5688  decode.d7.loss_cls: 0.4226  decode.d7.loss_mask: 1.6454  decode.d7.loss_dice: 1.5441  decode.d8.loss_cls: 0.5065  decode.d8.loss_mask: 1.7330  decode.d8.loss_dice: 1.5533  mix_decode.loss_cls: 0.2828  mix_decode.loss_mask: 0.5290  mix_decode.loss_dice: 0.7882  mix_decode.d0.loss_cls: 0.3487  mix_decode.d0.loss_mask: 0.5609  mix_decode.d0.loss_dice: 0.8127  mix_decode.d1.loss_cls: 0.3342  mix_decode.d1.loss_mask: 0.5541  mix_decode.d1.loss_dice: 0.7966  mix_decode.d2.loss_cls: 0.3187  mix_decode.d2.loss_mask: 0.5501  mix_decode.d2.loss_dice: 0.7779  mix_decode.d3.loss_cls: 0.3258  mix_decode.d3.loss_mask: 0.5739  mix_decode.d3.loss_dice: 0.7823  mix_decode.d4.loss_cls: 0.3124  mix_decode.d4.loss_mask: 0.5739  mix_decode.d4.loss_dice: 0.8066  mix_decode.d5.loss_cls: 0.3171  mix_decode.d5.loss_mask: 0.5571  mix_decode.d5.loss_dice: 0.7881  mix_decode.d6.loss_cls: 0.3076  mix_decode.d6.loss_mask: 0.5770  mix_decode.d6.loss_dice: 0.8054  mix_decode.d7.loss_cls: 0.3704  mix_decode.d7.loss_mask: 0.5302  mix_decode.d7.loss_dice: 0.7873  mix_decode.d8.loss_cls: 0.2941  mix_decode.d8.loss_mask: 0.5358  mix_decode.d8.loss_dice: 0.7871
2025/03/28 20:24:16 - mmengine - INFO - Iter(train) [ 7950/20000]  base_lr: 6.3384e-05 lr: 6.3384e-05  eta: 5:03:56  time: 1.8978  data_time: 0.0265  memory: 10744  loss: 60.5496  decode.loss_cls: 0.6336  decode.loss_mask: 1.6522  decode.loss_dice: 1.8450  decode.d0.loss_cls: 0.5198  decode.d0.loss_mask: 1.6586  decode.d0.loss_dice: 1.9631  decode.d1.loss_cls: 0.5231  decode.d1.loss_mask: 1.6495  decode.d1.loss_dice: 1.8552  decode.d2.loss_cls: 0.5404  decode.d2.loss_mask: 1.6745  decode.d2.loss_dice: 1.8701  decode.d3.loss_cls: 0.5053  decode.d3.loss_mask: 1.6842  decode.d3.loss_dice: 1.8984  decode.d4.loss_cls: 0.5143  decode.d4.loss_mask: 1.6988  decode.d4.loss_dice: 1.8553  decode.d5.loss_cls: 0.5406  decode.d5.loss_mask: 1.6307  decode.d5.loss_dice: 1.8575  decode.d6.loss_cls: 0.5658  decode.d6.loss_mask: 1.6961  decode.d6.loss_dice: 1.9018  decode.d7.loss_cls: 0.6170  decode.d7.loss_mask: 1.6741  decode.d7.loss_dice: 1.8418  decode.d8.loss_cls: 0.5170  decode.d8.loss_mask: 1.6979  decode.d8.loss_dice: 1.9346  mix_decode.loss_cls: 0.3822  mix_decode.loss_mask: 0.6253  mix_decode.loss_dice: 0.9187  mix_decode.d0.loss_cls: 0.3949  mix_decode.d0.loss_mask: 0.6223  mix_decode.d0.loss_dice: 1.0139  mix_decode.d1.loss_cls: 0.3630  mix_decode.d1.loss_mask: 0.6441  mix_decode.d1.loss_dice: 0.9320  mix_decode.d2.loss_cls: 0.3544  mix_decode.d2.loss_mask: 0.6419  mix_decode.d2.loss_dice: 0.9460  mix_decode.d3.loss_cls: 0.4195  mix_decode.d3.loss_mask: 0.6385  mix_decode.d3.loss_dice: 0.9280  mix_decode.d4.loss_cls: 0.3927  mix_decode.d4.loss_mask: 0.6354  mix_decode.d4.loss_dice: 0.9220  mix_decode.d5.loss_cls: 0.3829  mix_decode.d5.loss_mask: 0.6345  mix_decode.d5.loss_dice: 0.9136  mix_decode.d6.loss_cls: 0.4138  mix_decode.d6.loss_mask: 0.6344  mix_decode.d6.loss_dice: 0.9053  mix_decode.d7.loss_cls: 0.3640  mix_decode.d7.loss_mask: 0.6236  mix_decode.d7.loss_dice: 0.9339  mix_decode.d8.loss_cls: 0.3834  mix_decode.d8.loss_mask: 0.6375  mix_decode.d8.loss_dice: 0.9317
2025/03/28 20:25:50 - mmengine - INFO - Exp name: r2u_20250328_164133
2025/03/28 20:25:50 - mmengine - INFO - Iter(train) [ 8000/20000]  base_lr: 6.3147e-05 lr: 6.3147e-05  eta: 5:03:07  time: 1.8332  data_time: 0.0232  memory: 10749  loss: 65.7392  decode.loss_cls: 0.6958  decode.loss_mask: 1.8849  decode.loss_dice: 1.8080  decode.d0.loss_cls: 0.9000  decode.d0.loss_mask: 1.8812  decode.d0.loss_dice: 1.8366  decode.d1.loss_cls: 0.7911  decode.d1.loss_mask: 1.9678  decode.d1.loss_dice: 1.8305  decode.d2.loss_cls: 0.7651  decode.d2.loss_mask: 1.9526  decode.d2.loss_dice: 1.8093  decode.d3.loss_cls: 0.7318  decode.d3.loss_mask: 1.9908  decode.d3.loss_dice: 1.8314  decode.d4.loss_cls: 0.7821  decode.d4.loss_mask: 1.9412  decode.d4.loss_dice: 1.8693  decode.d5.loss_cls: 0.7665  decode.d5.loss_mask: 1.8607  decode.d5.loss_dice: 1.8513  decode.d6.loss_cls: 0.7662  decode.d6.loss_mask: 1.9711  decode.d6.loss_dice: 1.8397  decode.d7.loss_cls: 0.7232  decode.d7.loss_mask: 1.8920  decode.d7.loss_dice: 1.8452  decode.d8.loss_cls: 0.6670  decode.d8.loss_mask: 2.0041  decode.d8.loss_dice: 1.7958  mix_decode.loss_cls: 0.4138  mix_decode.loss_mask: 0.7619  mix_decode.loss_dice: 0.8234  mix_decode.d0.loss_cls: 0.4901  mix_decode.d0.loss_mask: 0.7553  mix_decode.d0.loss_dice: 0.8132  mix_decode.d1.loss_cls: 0.4616  mix_decode.d1.loss_mask: 0.7712  mix_decode.d1.loss_dice: 0.7672  mix_decode.d2.loss_cls: 0.4804  mix_decode.d2.loss_mask: 0.7714  mix_decode.d2.loss_dice: 0.7814  mix_decode.d3.loss_cls: 0.5311  mix_decode.d3.loss_mask: 0.7562  mix_decode.d3.loss_dice: 0.7896  mix_decode.d4.loss_cls: 0.5270  mix_decode.d4.loss_mask: 0.8121  mix_decode.d4.loss_dice: 0.7859  mix_decode.d5.loss_cls: 0.4724  mix_decode.d5.loss_mask: 0.8045  mix_decode.d5.loss_dice: 0.7845  mix_decode.d6.loss_cls: 0.5052  mix_decode.d6.loss_mask: 0.7905  mix_decode.d6.loss_dice: 0.8007  mix_decode.d7.loss_cls: 0.4739  mix_decode.d7.loss_mask: 0.7832  mix_decode.d7.loss_dice: 0.8155  mix_decode.d8.loss_cls: 0.4121  mix_decode.d8.loss_mask: 0.7475  mix_decode.d8.loss_dice: 0.8042
2025/03/28 20:25:50 - mmengine - INFO - Saving checkpoint at 8000 iterations
2025/03/28 20:25:59 - mmengine - INFO - Iter(val) [  50/2708]    eta: 0:06:49  time: 0.1873  data_time: 0.0020  memory: 3056  
2025/03/28 20:26:06 - mmengine - INFO - Iter(val) [ 100/2708]    eta: 0:06:26  time: 0.1190  data_time: 0.0021  memory: 3056  
2025/03/28 20:26:13 - mmengine - INFO - Iter(val) [ 150/2708]    eta: 0:06:13  time: 0.1157  data_time: 0.0019  memory: 3056  
2025/03/28 20:26:21 - mmengine - INFO - Iter(val) [ 200/2708]    eta: 0:06:13  time: 0.1876  data_time: 0.0022  memory: 3056  
2025/03/28 20:26:28 - mmengine - INFO - Iter(val) [ 250/2708]    eta: 0:06:07  time: 0.1807  data_time: 0.0020  memory: 3056  
2025/03/28 20:26:35 - mmengine - INFO - Iter(val) [ 300/2708]    eta: 0:05:55  time: 0.1016  data_time: 0.0018  memory: 3056  
2025/03/28 20:26:42 - mmengine - INFO - Iter(val) [ 350/2708]    eta: 0:05:45  time: 0.1127  data_time: 0.0017  memory: 3056  
2025/03/28 20:26:50 - mmengine - INFO - Iter(val) [ 400/2708]    eta: 0:05:40  time: 0.1884  data_time: 0.0017  memory: 3056  
2025/03/28 20:26:58 - mmengine - INFO - Iter(val) [ 450/2708]    eta: 0:05:34  time: 0.1886  data_time: 0.0019  memory: 3056  
2025/03/28 20:27:05 - mmengine - INFO - Iter(val) [ 500/2708]    eta: 0:05:25  time: 0.1156  data_time: 0.0020  memory: 3056  
2025/03/28 20:27:12 - mmengine - INFO - Iter(val) [ 550/2708]    eta: 0:05:16  time: 0.1034  data_time: 0.0018  memory: 3056  
2025/03/28 20:27:19 - mmengine - INFO - Iter(val) [ 600/2708]    eta: 0:05:09  time: 0.1583  data_time: 0.0022  memory: 3056  
2025/03/28 20:27:27 - mmengine - INFO - Iter(val) [ 650/2708]    eta: 0:05:03  time: 0.1895  data_time: 0.0022  memory: 3056  
2025/03/28 20:27:34 - mmengine - INFO - Iter(val) [ 700/2708]    eta: 0:04:55  time: 0.1088  data_time: 0.0018  memory: 3056  
2025/03/28 20:27:41 - mmengine - INFO - Iter(val) [ 750/2708]    eta: 0:04:48  time: 0.1341  data_time: 0.0020  memory: 3056  
2025/03/28 20:27:49 - mmengine - INFO - Iter(val) [ 800/2708]    eta: 0:04:42  time: 0.1878  data_time: 0.0021  memory: 3056  
2025/03/28 20:27:57 - mmengine - INFO - Iter(val) [ 850/2708]    eta: 0:04:34  time: 0.1264  data_time: 0.0021  memory: 3056  
2025/03/28 20:28:04 - mmengine - INFO - Iter(val) [ 900/2708]    eta: 0:04:26  time: 0.1037  data_time: 0.0020  memory: 3056  
2025/03/28 20:28:11 - mmengine - INFO - Iter(val) [ 950/2708]    eta: 0:04:19  time: 0.1833  data_time: 0.0020  memory: 3056  
2025/03/28 20:28:19 - mmengine - INFO - Iter(val) [1000/2708]    eta: 0:04:12  time: 0.1890  data_time: 0.0018  memory: 3056  
2025/03/28 20:28:26 - mmengine - INFO - Iter(val) [1050/2708]    eta: 0:04:04  time: 0.1086  data_time: 0.0019  memory: 3056  
2025/03/28 20:28:33 - mmengine - INFO - Iter(val) [1100/2708]    eta: 0:03:56  time: 0.1059  data_time: 0.0020  memory: 3056  
2025/03/28 20:28:41 - mmengine - INFO - Iter(val) [1150/2708]    eta: 0:03:50  time: 0.1890  data_time: 0.0021  memory: 3056  
2025/03/28 20:28:49 - mmengine - INFO - Iter(val) [1200/2708]    eta: 0:03:43  time: 0.1575  data_time: 0.0020  memory: 3056  
2025/03/28 20:28:56 - mmengine - INFO - Iter(val) [1250/2708]    eta: 0:03:35  time: 0.1020  data_time: 0.0018  memory: 3056  
2025/03/28 20:29:03 - mmengine - INFO - Iter(val) [1300/2708]    eta: 0:03:28  time: 0.1783  data_time: 0.0020  memory: 3056  
2025/03/28 20:29:11 - mmengine - INFO - Iter(val) [1350/2708]    eta: 0:03:21  time: 0.1892  data_time: 0.0019  memory: 3056  
2025/03/28 20:29:18 - mmengine - INFO - Iter(val) [1400/2708]    eta: 0:03:13  time: 0.1082  data_time: 0.0018  memory: 3056  
2025/03/28 20:29:25 - mmengine - INFO - Iter(val) [1450/2708]    eta: 0:03:05  time: 0.1039  data_time: 0.0019  memory: 3056  
2025/03/28 20:29:33 - mmengine - INFO - Iter(val) [1500/2708]    eta: 0:02:58  time: 0.1880  data_time: 0.0022  memory: 3056  
2025/03/28 20:29:41 - mmengine - INFO - Iter(val) [1550/2708]    eta: 0:02:51  time: 0.1726  data_time: 0.0019  memory: 3056  
2025/03/28 20:29:48 - mmengine - INFO - Iter(val) [1600/2708]    eta: 0:02:43  time: 0.1042  data_time: 0.0021  memory: 3056  
2025/03/28 20:29:55 - mmengine - INFO - Iter(val) [1650/2708]    eta: 0:02:36  time: 0.1273  data_time: 0.0019  memory: 3056  
2025/03/28 20:30:03 - mmengine - INFO - Iter(val) [1700/2708]    eta: 0:02:29  time: 0.1883  data_time: 0.0020  memory: 3056  
2025/03/28 20:30:10 - mmengine - INFO - Iter(val) [1750/2708]    eta: 0:02:21  time: 0.1577  data_time: 0.0020  memory: 3056  
2025/03/28 20:30:17 - mmengine - INFO - Iter(val) [1800/2708]    eta: 0:02:14  time: 0.1027  data_time: 0.0018  memory: 3056  
2025/03/28 20:30:25 - mmengine - INFO - Iter(val) [1850/2708]    eta: 0:02:07  time: 0.1794  data_time: 0.0018  memory: 3056  
2025/03/28 20:30:33 - mmengine - INFO - Iter(val) [1900/2708]    eta: 0:01:59  time: 0.1872  data_time: 0.0019  memory: 3056  
2025/03/28 20:30:40 - mmengine - INFO - Iter(val) [1950/2708]    eta: 0:01:52  time: 0.1157  data_time: 0.0019  memory: 3056  
2025/03/28 20:30:47 - mmengine - INFO - Iter(val) [2000/2708]    eta: 0:01:44  time: 0.1024  data_time: 0.0017  memory: 3056  
2025/03/28 20:30:55 - mmengine - INFO - Iter(val) [2050/2708]    eta: 0:01:37  time: 0.1883  data_time: 0.0020  memory: 3056  
2025/03/28 20:31:03 - mmengine - INFO - Iter(val) [2100/2708]    eta: 0:01:30  time: 0.1863  data_time: 0.0021  memory: 3056  
2025/03/28 20:31:10 - mmengine - INFO - Iter(val) [2150/2708]    eta: 0:01:22  time: 0.1024  data_time: 0.0018  memory: 3056  
2025/03/28 20:31:17 - mmengine - INFO - Iter(val) [2200/2708]    eta: 0:01:15  time: 0.1692  data_time: 0.0022  memory: 3056  
2025/03/28 20:31:25 - mmengine - INFO - Iter(val) [2250/2708]    eta: 0:01:07  time: 0.1884  data_time: 0.0019  memory: 3056  
2025/03/28 20:31:32 - mmengine - INFO - Iter(val) [2300/2708]    eta: 0:01:00  time: 0.1051  data_time: 0.0018  memory: 3056  
2025/03/28 20:31:39 - mmengine - INFO - Iter(val) [2350/2708]    eta: 0:00:52  time: 0.1088  data_time: 0.0019  memory: 3056  
2025/03/28 20:31:47 - mmengine - INFO - Iter(val) [2400/2708]    eta: 0:00:45  time: 0.1890  data_time: 0.0020  memory: 3056  
2025/03/28 20:31:55 - mmengine - INFO - Iter(val) [2450/2708]    eta: 0:00:38  time: 0.1835  data_time: 0.0019  memory: 3056  
2025/03/28 20:32:02 - mmengine - INFO - Iter(val) [2500/2708]    eta: 0:00:30  time: 0.1076  data_time: 0.0022  memory: 3056  
2025/03/28 20:32:09 - mmengine - INFO - Iter(val) [2550/2708]    eta: 0:00:23  time: 0.1608  data_time: 0.0019  memory: 3056  
2025/03/28 20:32:17 - mmengine - INFO - Iter(val) [2600/2708]    eta: 0:00:16  time: 0.1872  data_time: 0.0020  memory: 3056  
2025/03/28 20:32:24 - mmengine - INFO - Iter(val) [2650/2708]    eta: 0:00:08  time: 0.1121  data_time: 0.0020  memory: 3056  
2025/03/28 20:32:32 - mmengine - INFO - Iter(val) [2700/2708]    eta: 0:00:01  time: 0.1372  data_time: 0.0023  memory: 3056  
2025/03/28 20:32:33 - mmengine - INFO - per class results:
2025/03/28 20:32:33 - mmengine - INFO - 
+--------------+-------+-------+
|    Class     |  IoU  |  Acc  |
+--------------+-------+-------+
|  background  | 43.95 | 65.43 |
|   building   | 61.51 | 71.21 |
|     road     | 46.61 | 49.37 |
|    water     | 74.91 | 80.65 |
|    barren    | 37.35 | 69.95 |
|    forest    | 48.36 | 58.38 |
| agricultural | 64.23 | 81.14 |
+--------------+-------+-------+
2025/03/28 20:32:33 - mmengine - INFO - Iter(val) [2708/2708]    aAcc: 70.2100  mIoU: 53.8400  mAcc: 68.0200  data_time: 0.0020  time: 0.1483
2025/03/28 20:34:09 - mmengine - INFO - Iter(train) [ 8050/20000]  base_lr: 6.2911e-05 lr: 6.2911e-05  eta: 5:02:21  time: 1.9407  data_time: 0.0241  memory: 10748  loss: 57.9510  decode.loss_cls: 0.5062  decode.loss_mask: 1.6676  decode.loss_dice: 1.6730  decode.d0.loss_cls: 0.4422  decode.d0.loss_mask: 1.6667  decode.d0.loss_dice: 1.7507  decode.d1.loss_cls: 0.3760  decode.d1.loss_mask: 1.7211  decode.d1.loss_dice: 1.7327  decode.d2.loss_cls: 0.4082  decode.d2.loss_mask: 1.6190  decode.d2.loss_dice: 1.6613  decode.d3.loss_cls: 0.4370  decode.d3.loss_mask: 1.7072  decode.d3.loss_dice: 1.7034  decode.d4.loss_cls: 0.4046  decode.d4.loss_mask: 1.7618  decode.d4.loss_dice: 1.7497  decode.d5.loss_cls: 0.4263  decode.d5.loss_mask: 1.7060  decode.d5.loss_dice: 1.7045  decode.d6.loss_cls: 0.4256  decode.d6.loss_mask: 1.6289  decode.d6.loss_dice: 1.6754  decode.d7.loss_cls: 0.4305  decode.d7.loss_mask: 1.6281  decode.d7.loss_dice: 1.7130  decode.d8.loss_cls: 0.4486  decode.d8.loss_mask: 1.6740  decode.d8.loss_dice: 1.6789  mix_decode.loss_cls: 0.3191  mix_decode.loss_mask: 0.8186  mix_decode.loss_dice: 0.8806  mix_decode.d0.loss_cls: 0.3616  mix_decode.d0.loss_mask: 0.7845  mix_decode.d0.loss_dice: 0.9182  mix_decode.d1.loss_cls: 0.3733  mix_decode.d1.loss_mask: 0.8029  mix_decode.d1.loss_dice: 0.8633  mix_decode.d2.loss_cls: 0.3614  mix_decode.d2.loss_mask: 0.7655  mix_decode.d2.loss_dice: 0.8156  mix_decode.d3.loss_cls: 0.3878  mix_decode.d3.loss_mask: 0.7471  mix_decode.d3.loss_dice: 0.7923  mix_decode.d4.loss_cls: 0.3825  mix_decode.d4.loss_mask: 0.7628  mix_decode.d4.loss_dice: 0.8207  mix_decode.d5.loss_cls: 0.3609  mix_decode.d5.loss_mask: 0.7742  mix_decode.d5.loss_dice: 0.8263  mix_decode.d6.loss_cls: 0.3370  mix_decode.d6.loss_mask: 0.7626  mix_decode.d6.loss_dice: 0.8342  mix_decode.d7.loss_cls: 0.3759  mix_decode.d7.loss_mask: 0.7490  mix_decode.d7.loss_dice: 0.8281  mix_decode.d8.loss_cls: 0.3749  mix_decode.d8.loss_mask: 0.7687  mix_decode.d8.loss_dice: 0.8730
2025/03/28 20:35:43 - mmengine - INFO - Iter(train) [ 8100/20000]  base_lr: 6.2674e-05 lr: 6.2674e-05  eta: 5:01:32  time: 1.8417  data_time: 0.0256  memory: 10752  loss: 61.9920  decode.loss_cls: 0.7141  decode.loss_mask: 1.6765  decode.loss_dice: 1.8141  decode.d0.loss_cls: 0.7947  decode.d0.loss_mask: 1.5901  decode.d0.loss_dice: 1.9443  decode.d1.loss_cls: 0.7383  decode.d1.loss_mask: 1.6764  decode.d1.loss_dice: 1.8406  decode.d2.loss_cls: 0.7047  decode.d2.loss_mask: 1.7041  decode.d2.loss_dice: 1.8933  decode.d3.loss_cls: 0.6868  decode.d3.loss_mask: 1.6642  decode.d3.loss_dice: 1.8753  decode.d4.loss_cls: 0.6097  decode.d4.loss_mask: 1.7653  decode.d4.loss_dice: 1.8998  decode.d5.loss_cls: 0.7251  decode.d5.loss_mask: 1.6618  decode.d5.loss_dice: 1.8799  decode.d6.loss_cls: 0.7084  decode.d6.loss_mask: 1.6900  decode.d6.loss_dice: 1.8583  decode.d7.loss_cls: 0.8041  decode.d7.loss_mask: 1.5989  decode.d7.loss_dice: 1.7736  decode.d8.loss_cls: 0.7484  decode.d8.loss_mask: 1.6077  decode.d8.loss_dice: 1.7918  mix_decode.loss_cls: 0.3828  mix_decode.loss_mask: 0.7031  mix_decode.loss_dice: 0.8853  mix_decode.d0.loss_cls: 0.4367  mix_decode.d0.loss_mask: 0.6843  mix_decode.d0.loss_dice: 0.9084  mix_decode.d1.loss_cls: 0.3646  mix_decode.d1.loss_mask: 0.6732  mix_decode.d1.loss_dice: 0.8362  mix_decode.d2.loss_cls: 0.3595  mix_decode.d2.loss_mask: 0.7220  mix_decode.d2.loss_dice: 0.8369  mix_decode.d3.loss_cls: 0.2922  mix_decode.d3.loss_mask: 0.7355  mix_decode.d3.loss_dice: 0.8914  mix_decode.d4.loss_cls: 0.3728  mix_decode.d4.loss_mask: 0.7442  mix_decode.d4.loss_dice: 0.8766  mix_decode.d5.loss_cls: 0.3704  mix_decode.d5.loss_mask: 0.7372  mix_decode.d5.loss_dice: 0.8612  mix_decode.d6.loss_cls: 0.4205  mix_decode.d6.loss_mask: 0.6939  mix_decode.d6.loss_dice: 0.8594  mix_decode.d7.loss_cls: 0.3735  mix_decode.d7.loss_mask: 0.7029  mix_decode.d7.loss_dice: 0.8811  mix_decode.d8.loss_cls: 0.3575  mix_decode.d8.loss_mask: 0.7151  mix_decode.d8.loss_dice: 0.8734
2025/03/28 20:37:17 - mmengine - INFO - Iter(train) [ 8150/20000]  base_lr: 6.2437e-05 lr: 6.2437e-05  eta: 5:00:43  time: 1.8128  data_time: 0.0302  memory: 10754  loss: 60.3623  decode.loss_cls: 0.5896  decode.loss_mask: 1.9035  decode.loss_dice: 1.7785  decode.d0.loss_cls: 0.6457  decode.d0.loss_mask: 1.8811  decode.d0.loss_dice: 1.8337  decode.d1.loss_cls: 0.4791  decode.d1.loss_mask: 1.8809  decode.d1.loss_dice: 1.8264  decode.d2.loss_cls: 0.5746  decode.d2.loss_mask: 1.8332  decode.d2.loss_dice: 1.7945  decode.d3.loss_cls: 0.5789  decode.d3.loss_mask: 1.8598  decode.d3.loss_dice: 1.7945  decode.d4.loss_cls: 0.4936  decode.d4.loss_mask: 1.7994  decode.d4.loss_dice: 1.7716  decode.d5.loss_cls: 0.4920  decode.d5.loss_mask: 1.9115  decode.d5.loss_dice: 1.8059  decode.d6.loss_cls: 0.5563  decode.d6.loss_mask: 1.9459  decode.d6.loss_dice: 1.8105  decode.d7.loss_cls: 0.4670  decode.d7.loss_mask: 1.9542  decode.d7.loss_dice: 1.8208  decode.d8.loss_cls: 0.5087  decode.d8.loss_mask: 1.9316  decode.d8.loss_dice: 1.7944  mix_decode.loss_cls: 0.3084  mix_decode.loss_mask: 0.6631  mix_decode.loss_dice: 0.8245  mix_decode.d0.loss_cls: 0.3418  mix_decode.d0.loss_mask: 0.6596  mix_decode.d0.loss_dice: 0.8726  mix_decode.d1.loss_cls: 0.2833  mix_decode.d1.loss_mask: 0.6699  mix_decode.d1.loss_dice: 0.8134  mix_decode.d2.loss_cls: 0.2907  mix_decode.d2.loss_mask: 0.6404  mix_decode.d2.loss_dice: 0.8318  mix_decode.d3.loss_cls: 0.3110  mix_decode.d3.loss_mask: 0.6733  mix_decode.d3.loss_dice: 0.8296  mix_decode.d4.loss_cls: 0.2977  mix_decode.d4.loss_mask: 0.6734  mix_decode.d4.loss_dice: 0.8341  mix_decode.d5.loss_cls: 0.3027  mix_decode.d5.loss_mask: 0.6986  mix_decode.d5.loss_dice: 0.8251  mix_decode.d6.loss_cls: 0.3194  mix_decode.d6.loss_mask: 0.6804  mix_decode.d6.loss_dice: 0.8088  mix_decode.d7.loss_cls: 0.3154  mix_decode.d7.loss_mask: 0.6646  mix_decode.d7.loss_dice: 0.8423  mix_decode.d8.loss_cls: 0.2978  mix_decode.d8.loss_mask: 0.6529  mix_decode.d8.loss_dice: 0.8186
2025/03/28 20:38:50 - mmengine - INFO - Iter(train) [ 8200/20000]  base_lr: 6.2199e-05 lr: 6.2199e-05  eta: 4:59:50  time: 1.8498  data_time: 0.0258  memory: 10748  loss: 51.9530  decode.loss_cls: 0.5060  decode.loss_mask: 1.2330  decode.loss_dice: 1.7107  decode.d0.loss_cls: 0.5392  decode.d0.loss_mask: 1.2281  decode.d0.loss_dice: 1.8011  decode.d1.loss_cls: 0.5697  decode.d1.loss_mask: 1.2111  decode.d1.loss_dice: 1.6294  decode.d2.loss_cls: 0.5331  decode.d2.loss_mask: 1.2347  decode.d2.loss_dice: 1.6595  decode.d3.loss_cls: 0.5485  decode.d3.loss_mask: 1.2419  decode.d3.loss_dice: 1.6690  decode.d4.loss_cls: 0.4418  decode.d4.loss_mask: 1.2797  decode.d4.loss_dice: 1.7466  decode.d5.loss_cls: 0.5010  decode.d5.loss_mask: 1.2401  decode.d5.loss_dice: 1.7012  decode.d6.loss_cls: 0.4863  decode.d6.loss_mask: 1.2761  decode.d6.loss_dice: 1.7317  decode.d7.loss_cls: 0.4815  decode.d7.loss_mask: 1.2897  decode.d7.loss_dice: 1.7079  decode.d8.loss_cls: 0.5590  decode.d8.loss_mask: 1.2419  decode.d8.loss_dice: 1.7112  mix_decode.loss_cls: 0.2877  mix_decode.loss_mask: 0.5630  mix_decode.loss_dice: 0.8635  mix_decode.d0.loss_cls: 0.3326  mix_decode.d0.loss_mask: 0.5574  mix_decode.d0.loss_dice: 0.9145  mix_decode.d1.loss_cls: 0.2006  mix_decode.d1.loss_mask: 0.6302  mix_decode.d1.loss_dice: 0.8881  mix_decode.d2.loss_cls: 0.2409  mix_decode.d2.loss_mask: 0.5806  mix_decode.d2.loss_dice: 0.8834  mix_decode.d3.loss_cls: 0.2709  mix_decode.d3.loss_mask: 0.5457  mix_decode.d3.loss_dice: 0.8506  mix_decode.d4.loss_cls: 0.3045  mix_decode.d4.loss_mask: 0.5613  mix_decode.d4.loss_dice: 0.8650  mix_decode.d5.loss_cls: 0.2791  mix_decode.d5.loss_mask: 0.5536  mix_decode.d5.loss_dice: 0.8724  mix_decode.d6.loss_cls: 0.2786  mix_decode.d6.loss_mask: 0.5530  mix_decode.d6.loss_dice: 0.8584  mix_decode.d7.loss_cls: 0.3392  mix_decode.d7.loss_mask: 0.5914  mix_decode.d7.loss_dice: 0.8562  mix_decode.d8.loss_cls: 0.2880  mix_decode.d8.loss_mask: 0.5609  mix_decode.d8.loss_dice: 0.8709
2025/03/28 20:40:25 - mmengine - INFO - Iter(train) [ 8250/20000]  base_lr: 6.1962e-05 lr: 6.1962e-05  eta: 4:59:00  time: 1.8775  data_time: 0.0262  memory: 10758  loss: 56.0537  decode.loss_cls: 0.4995  decode.loss_mask: 1.4960  decode.loss_dice: 1.9293  decode.d0.loss_cls: 0.4833  decode.d0.loss_mask: 1.4895  decode.d0.loss_dice: 1.9565  decode.d1.loss_cls: 0.5999  decode.d1.loss_mask: 1.4133  decode.d1.loss_dice: 1.8786  decode.d2.loss_cls: 0.5178  decode.d2.loss_mask: 1.4272  decode.d2.loss_dice: 1.8735  decode.d3.loss_cls: 0.5562  decode.d3.loss_mask: 1.4464  decode.d3.loss_dice: 1.8756  decode.d4.loss_cls: 0.4580  decode.d4.loss_mask: 1.4386  decode.d4.loss_dice: 1.8766  decode.d5.loss_cls: 0.4638  decode.d5.loss_mask: 1.5013  decode.d5.loss_dice: 1.9027  decode.d6.loss_cls: 0.5791  decode.d6.loss_mask: 1.4104  decode.d6.loss_dice: 1.8884  decode.d7.loss_cls: 0.4998  decode.d7.loss_mask: 1.4464  decode.d7.loss_dice: 1.9272  decode.d8.loss_cls: 0.5443  decode.d8.loss_mask: 1.4150  decode.d8.loss_dice: 1.8531  mix_decode.loss_cls: 0.2714  mix_decode.loss_mask: 0.5663  mix_decode.loss_dice: 0.8645  mix_decode.d0.loss_cls: 0.3197  mix_decode.d0.loss_mask: 0.5839  mix_decode.d0.loss_dice: 0.8879  mix_decode.d1.loss_cls: 0.3584  mix_decode.d1.loss_mask: 0.5545  mix_decode.d1.loss_dice: 0.8432  mix_decode.d2.loss_cls: 0.2954  mix_decode.d2.loss_mask: 0.5833  mix_decode.d2.loss_dice: 0.8528  mix_decode.d3.loss_cls: 0.3539  mix_decode.d3.loss_mask: 0.5542  mix_decode.d3.loss_dice: 0.8374  mix_decode.d4.loss_cls: 0.2613  mix_decode.d4.loss_mask: 0.5980  mix_decode.d4.loss_dice: 0.8925  mix_decode.d5.loss_cls: 0.2894  mix_decode.d5.loss_mask: 0.5848  mix_decode.d5.loss_dice: 0.8804  mix_decode.d6.loss_cls: 0.3248  mix_decode.d6.loss_mask: 0.5877  mix_decode.d6.loss_dice: 0.8509  mix_decode.d7.loss_cls: 0.2945  mix_decode.d7.loss_mask: 0.5846  mix_decode.d7.loss_dice: 0.8527  mix_decode.d8.loss_cls: 0.2830  mix_decode.d8.loss_mask: 0.5619  mix_decode.d8.loss_dice: 0.8330
2025/03/28 20:41:56 - mmengine - INFO - Iter(train) [ 8300/20000]  base_lr: 6.1725e-05 lr: 6.1725e-05  eta: 4:58:05  time: 1.7784  data_time: 0.0287  memory: 10751  loss: 59.1196  decode.loss_cls: 0.5347  decode.loss_mask: 1.6688  decode.loss_dice: 1.6774  decode.d0.loss_cls: 0.6667  decode.d0.loss_mask: 1.5869  decode.d0.loss_dice: 1.6436  decode.d1.loss_cls: 0.5317  decode.d1.loss_mask: 1.6081  decode.d1.loss_dice: 1.6130  decode.d2.loss_cls: 0.5294  decode.d2.loss_mask: 1.6563  decode.d2.loss_dice: 1.5940  decode.d3.loss_cls: 0.6027  decode.d3.loss_mask: 1.5875  decode.d3.loss_dice: 1.5825  decode.d4.loss_cls: 0.4967  decode.d4.loss_mask: 1.7012  decode.d4.loss_dice: 1.6524  decode.d5.loss_cls: 0.4858  decode.d5.loss_mask: 1.6774  decode.d5.loss_dice: 1.6736  decode.d6.loss_cls: 0.5901  decode.d6.loss_mask: 1.6489  decode.d6.loss_dice: 1.6288  decode.d7.loss_cls: 0.6095  decode.d7.loss_mask: 1.6686  decode.d7.loss_dice: 1.6197  decode.d8.loss_cls: 0.6179  decode.d8.loss_mask: 1.6797  decode.d8.loss_dice: 1.6196  mix_decode.loss_cls: 0.3109  mix_decode.loss_mask: 0.8106  mix_decode.loss_dice: 0.9371  mix_decode.d0.loss_cls: 0.3879  mix_decode.d0.loss_mask: 0.7898  mix_decode.d0.loss_dice: 0.9544  mix_decode.d1.loss_cls: 0.3319  mix_decode.d1.loss_mask: 0.7860  mix_decode.d1.loss_dice: 0.9261  mix_decode.d2.loss_cls: 0.3465  mix_decode.d2.loss_mask: 0.7653  mix_decode.d2.loss_dice: 0.9289  mix_decode.d3.loss_cls: 0.3491  mix_decode.d3.loss_mask: 0.7875  mix_decode.d3.loss_dice: 0.9332  mix_decode.d4.loss_cls: 0.3568  mix_decode.d4.loss_mask: 0.7699  mix_decode.d4.loss_dice: 0.9258  mix_decode.d5.loss_cls: 0.3590  mix_decode.d5.loss_mask: 0.7725  mix_decode.d5.loss_dice: 0.9153  mix_decode.d6.loss_cls: 0.3632  mix_decode.d6.loss_mask: 0.7929  mix_decode.d6.loss_dice: 0.9299  mix_decode.d7.loss_cls: 0.3578  mix_decode.d7.loss_mask: 0.7795  mix_decode.d7.loss_dice: 0.9337  mix_decode.d8.loss_cls: 0.3431  mix_decode.d8.loss_mask: 0.7875  mix_decode.d8.loss_dice: 0.9346
2025/03/28 20:43:31 - mmengine - INFO - Iter(train) [ 8350/20000]  base_lr: 6.1487e-05 lr: 6.1487e-05  eta: 4:57:15  time: 1.9080  data_time: 0.0249  memory: 10758  loss: 45.7543  decode.loss_cls: 0.4097  decode.loss_mask: 1.2754  decode.loss_dice: 1.5126  decode.d0.loss_cls: 0.6280  decode.d0.loss_mask: 1.2596  decode.d0.loss_dice: 1.4798  decode.d1.loss_cls: 0.4363  decode.d1.loss_mask: 1.2201  decode.d1.loss_dice: 1.4530  decode.d2.loss_cls: 0.4403  decode.d2.loss_mask: 1.2904  decode.d2.loss_dice: 1.4434  decode.d3.loss_cls: 0.4329  decode.d3.loss_mask: 1.2693  decode.d3.loss_dice: 1.4584  decode.d4.loss_cls: 0.4378  decode.d4.loss_mask: 1.2895  decode.d4.loss_dice: 1.4861  decode.d5.loss_cls: 0.4860  decode.d5.loss_mask: 1.3177  decode.d5.loss_dice: 1.5002  decode.d6.loss_cls: 0.4537  decode.d6.loss_mask: 1.2844  decode.d6.loss_dice: 1.4754  decode.d7.loss_cls: 0.4774  decode.d7.loss_mask: 1.2605  decode.d7.loss_dice: 1.4564  decode.d8.loss_cls: 0.4479  decode.d8.loss_mask: 1.2358  decode.d8.loss_dice: 1.4567  mix_decode.loss_cls: 0.2656  mix_decode.loss_mask: 0.4465  mix_decode.loss_dice: 0.6443  mix_decode.d0.loss_cls: 0.3024  mix_decode.d0.loss_mask: 0.4701  mix_decode.d0.loss_dice: 0.6280  mix_decode.d1.loss_cls: 0.3129  mix_decode.d1.loss_mask: 0.5177  mix_decode.d1.loss_dice: 0.6406  mix_decode.d2.loss_cls: 0.2457  mix_decode.d2.loss_mask: 0.4779  mix_decode.d2.loss_dice: 0.6384  mix_decode.d3.loss_cls: 0.2601  mix_decode.d3.loss_mask: 0.4604  mix_decode.d3.loss_dice: 0.6042  mix_decode.d4.loss_cls: 0.2673  mix_decode.d4.loss_mask: 0.4415  mix_decode.d4.loss_dice: 0.6336  mix_decode.d5.loss_cls: 0.2687  mix_decode.d5.loss_mask: 0.4638  mix_decode.d5.loss_dice: 0.6220  mix_decode.d6.loss_cls: 0.2873  mix_decode.d6.loss_mask: 0.4333  mix_decode.d6.loss_dice: 0.6168  mix_decode.d7.loss_cls: 0.2762  mix_decode.d7.loss_mask: 0.4814  mix_decode.d7.loss_dice: 0.5942  mix_decode.d8.loss_cls: 0.2792  mix_decode.d8.loss_mask: 0.4668  mix_decode.d8.loss_dice: 0.6329
2025/03/28 20:45:06 - mmengine - INFO - Iter(train) [ 8400/20000]  base_lr: 6.1250e-05 lr: 6.1250e-05  eta: 4:56:23  time: 1.8547  data_time: 0.0267  memory: 10736  loss: 51.9240  decode.loss_cls: 0.3533  decode.loss_mask: 1.4202  decode.loss_dice: 1.6098  decode.d0.loss_cls: 0.4454  decode.d0.loss_mask: 1.4859  decode.d0.loss_dice: 1.6495  decode.d1.loss_cls: 0.3379  decode.d1.loss_mask: 1.4579  decode.d1.loss_dice: 1.6338  decode.d2.loss_cls: 0.2744  decode.d2.loss_mask: 1.4694  decode.d2.loss_dice: 1.6498  decode.d3.loss_cls: 0.3545  decode.d3.loss_mask: 1.4417  decode.d3.loss_dice: 1.6493  decode.d4.loss_cls: 0.3443  decode.d4.loss_mask: 1.4324  decode.d4.loss_dice: 1.6639  decode.d5.loss_cls: 0.3644  decode.d5.loss_mask: 1.4413  decode.d5.loss_dice: 1.6295  decode.d6.loss_cls: 0.3724  decode.d6.loss_mask: 1.4529  decode.d6.loss_dice: 1.6170  decode.d7.loss_cls: 0.3764  decode.d7.loss_mask: 1.4594  decode.d7.loss_dice: 1.6452  decode.d8.loss_cls: 0.3539  decode.d8.loss_mask: 1.4730  decode.d8.loss_dice: 1.6574  mix_decode.loss_cls: 0.3741  mix_decode.loss_mask: 0.5615  mix_decode.loss_dice: 0.8092  mix_decode.d0.loss_cls: 0.3508  mix_decode.d0.loss_mask: 0.5713  mix_decode.d0.loss_dice: 0.8529  mix_decode.d1.loss_cls: 0.3016  mix_decode.d1.loss_mask: 0.6098  mix_decode.d1.loss_dice: 0.8452  mix_decode.d2.loss_cls: 0.3132  mix_decode.d2.loss_mask: 0.5747  mix_decode.d2.loss_dice: 0.8095  mix_decode.d3.loss_cls: 0.3093  mix_decode.d3.loss_mask: 0.5759  mix_decode.d3.loss_dice: 0.8123  mix_decode.d4.loss_cls: 0.3435  mix_decode.d4.loss_mask: 0.5705  mix_decode.d4.loss_dice: 0.7981  mix_decode.d5.loss_cls: 0.3335  mix_decode.d5.loss_mask: 0.5749  mix_decode.d5.loss_dice: 0.8233  mix_decode.d6.loss_cls: 0.3271  mix_decode.d6.loss_mask: 0.5693  mix_decode.d6.loss_dice: 0.8425  mix_decode.d7.loss_cls: 0.3279  mix_decode.d7.loss_mask: 0.6073  mix_decode.d7.loss_dice: 0.8425  mix_decode.d8.loss_cls: 0.3722  mix_decode.d8.loss_mask: 0.5906  mix_decode.d8.loss_dice: 0.8132
2025/03/28 20:46:40 - mmengine - INFO - Iter(train) [ 8450/20000]  base_lr: 6.1012e-05 lr: 6.1012e-05  eta: 4:55:31  time: 1.8365  data_time: 0.0246  memory: 10739  loss: 51.4800  decode.loss_cls: 0.3555  decode.loss_mask: 1.5022  decode.loss_dice: 1.4650  decode.d0.loss_cls: 0.4761  decode.d0.loss_mask: 1.5647  decode.d0.loss_dice: 1.5543  decode.d1.loss_cls: 0.4069  decode.d1.loss_mask: 1.5398  decode.d1.loss_dice: 1.5055  decode.d2.loss_cls: 0.3930  decode.d2.loss_mask: 1.5088  decode.d2.loss_dice: 1.4694  decode.d3.loss_cls: 0.4354  decode.d3.loss_mask: 1.4915  decode.d3.loss_dice: 1.4363  decode.d4.loss_cls: 0.3768  decode.d4.loss_mask: 1.5004  decode.d4.loss_dice: 1.4596  decode.d5.loss_cls: 0.3984  decode.d5.loss_mask: 1.5134  decode.d5.loss_dice: 1.4848  decode.d6.loss_cls: 0.4107  decode.d6.loss_mask: 1.5088  decode.d6.loss_dice: 1.4552  decode.d7.loss_cls: 0.3645  decode.d7.loss_mask: 1.5377  decode.d7.loss_dice: 1.4757  decode.d8.loss_cls: 0.3543  decode.d8.loss_mask: 1.5284  decode.d8.loss_dice: 1.4729  mix_decode.loss_cls: 0.2479  mix_decode.loss_mask: 0.6502  mix_decode.loss_dice: 0.8888  mix_decode.d0.loss_cls: 0.2429  mix_decode.d0.loss_mask: 0.5990  mix_decode.d0.loss_dice: 0.9076  mix_decode.d1.loss_cls: 0.2185  mix_decode.d1.loss_mask: 0.6133  mix_decode.d1.loss_dice: 0.8900  mix_decode.d2.loss_cls: 0.2800  mix_decode.d2.loss_mask: 0.5776  mix_decode.d2.loss_dice: 0.8455  mix_decode.d3.loss_cls: 0.2883  mix_decode.d3.loss_mask: 0.5804  mix_decode.d3.loss_dice: 0.8448  mix_decode.d4.loss_cls: 0.3379  mix_decode.d4.loss_mask: 0.5927  mix_decode.d4.loss_dice: 0.8671  mix_decode.d5.loss_cls: 0.3272  mix_decode.d5.loss_mask: 0.5667  mix_decode.d5.loss_dice: 0.8786  mix_decode.d6.loss_cls: 0.3340  mix_decode.d6.loss_mask: 0.5759  mix_decode.d6.loss_dice: 0.8583  mix_decode.d7.loss_cls: 0.2906  mix_decode.d7.loss_mask: 0.6171  mix_decode.d7.loss_dice: 0.8707  mix_decode.d8.loss_cls: 0.2840  mix_decode.d8.loss_mask: 0.6054  mix_decode.d8.loss_dice: 0.8532
2025/03/28 20:48:16 - mmengine - INFO - Iter(train) [ 8500/20000]  base_lr: 6.0774e-05 lr: 6.0774e-05  eta: 4:54:39  time: 1.9509  data_time: 0.0285  memory: 10750  loss: 55.8291  decode.loss_cls: 0.6628  decode.loss_mask: 1.6135  decode.loss_dice: 1.6137  decode.d0.loss_cls: 0.6211  decode.d0.loss_mask: 1.6593  decode.d0.loss_dice: 1.6816  decode.d1.loss_cls: 0.6502  decode.d1.loss_mask: 1.6476  decode.d1.loss_dice: 1.6178  decode.d2.loss_cls: 0.6828  decode.d2.loss_mask: 1.6422  decode.d2.loss_dice: 1.5817  decode.d3.loss_cls: 0.7089  decode.d3.loss_mask: 1.6112  decode.d3.loss_dice: 1.6214  decode.d4.loss_cls: 0.6759  decode.d4.loss_mask: 1.6280  decode.d4.loss_dice: 1.6243  decode.d5.loss_cls: 0.6351  decode.d5.loss_mask: 1.6119  decode.d5.loss_dice: 1.6592  decode.d6.loss_cls: 0.6440  decode.d6.loss_mask: 1.6539  decode.d6.loss_dice: 1.6748  decode.d7.loss_cls: 0.6375  decode.d7.loss_mask: 1.5665  decode.d7.loss_dice: 1.5872  decode.d8.loss_cls: 0.6739  decode.d8.loss_mask: 1.6293  decode.d8.loss_dice: 1.5732  mix_decode.loss_cls: 0.3209  mix_decode.loss_mask: 0.6134  mix_decode.loss_dice: 0.7021  mix_decode.d0.loss_cls: 0.3137  mix_decode.d0.loss_mask: 0.6313  mix_decode.d0.loss_dice: 0.7893  mix_decode.d1.loss_cls: 0.2690  mix_decode.d1.loss_mask: 0.6443  mix_decode.d1.loss_dice: 0.7586  mix_decode.d2.loss_cls: 0.2938  mix_decode.d2.loss_mask: 0.6192  mix_decode.d2.loss_dice: 0.7504  mix_decode.d3.loss_cls: 0.3370  mix_decode.d3.loss_mask: 0.6051  mix_decode.d3.loss_dice: 0.6965  mix_decode.d4.loss_cls: 0.3640  mix_decode.d4.loss_mask: 0.5902  mix_decode.d4.loss_dice: 0.7102  mix_decode.d5.loss_cls: 0.3523  mix_decode.d5.loss_mask: 0.5828  mix_decode.d5.loss_dice: 0.7117  mix_decode.d6.loss_cls: 0.3509  mix_decode.d6.loss_mask: 0.6213  mix_decode.d6.loss_dice: 0.7383  mix_decode.d7.loss_cls: 0.3364  mix_decode.d7.loss_mask: 0.6322  mix_decode.d7.loss_dice: 0.6979  mix_decode.d8.loss_cls: 0.3345  mix_decode.d8.loss_mask: 0.6471  mix_decode.d8.loss_dice: 0.7245
2025/03/28 20:49:51 - mmengine - INFO - Iter(train) [ 8550/20000]  base_lr: 6.0537e-05 lr: 6.0537e-05  eta: 4:53:48  time: 1.9470  data_time: 0.0246  memory: 10755  loss: 55.1185  decode.loss_cls: 0.4134  decode.loss_mask: 1.5946  decode.loss_dice: 1.8543  decode.d0.loss_cls: 0.4593  decode.d0.loss_mask: 1.6931  decode.d0.loss_dice: 2.0010  decode.d1.loss_cls: 0.3843  decode.d1.loss_mask: 1.5751  decode.d1.loss_dice: 1.8335  decode.d2.loss_cls: 0.3990  decode.d2.loss_mask: 1.6147  decode.d2.loss_dice: 1.8178  decode.d3.loss_cls: 0.3858  decode.d3.loss_mask: 1.5956  decode.d3.loss_dice: 1.8059  decode.d4.loss_cls: 0.3668  decode.d4.loss_mask: 1.6499  decode.d4.loss_dice: 1.8643  decode.d5.loss_cls: 0.3293  decode.d5.loss_mask: 1.6407  decode.d5.loss_dice: 1.9181  decode.d6.loss_cls: 0.3717  decode.d6.loss_mask: 1.6700  decode.d6.loss_dice: 1.9418  decode.d7.loss_cls: 0.3977  decode.d7.loss_mask: 1.6224  decode.d7.loss_dice: 1.8492  decode.d8.loss_cls: 0.4215  decode.d8.loss_mask: 1.5997  decode.d8.loss_dice: 1.8292  mix_decode.loss_cls: 0.3374  mix_decode.loss_mask: 0.5346  mix_decode.loss_dice: 0.7363  mix_decode.d0.loss_cls: 0.3639  mix_decode.d0.loss_mask: 0.5381  mix_decode.d0.loss_dice: 0.8197  mix_decode.d1.loss_cls: 0.2382  mix_decode.d1.loss_mask: 0.5669  mix_decode.d1.loss_dice: 0.7568  mix_decode.d2.loss_cls: 0.2822  mix_decode.d2.loss_mask: 0.5794  mix_decode.d2.loss_dice: 0.7816  mix_decode.d3.loss_cls: 0.3404  mix_decode.d3.loss_mask: 0.5383  mix_decode.d3.loss_dice: 0.7583  mix_decode.d4.loss_cls: 0.3089  mix_decode.d4.loss_mask: 0.5746  mix_decode.d4.loss_dice: 0.7797  mix_decode.d5.loss_cls: 0.2810  mix_decode.d5.loss_mask: 0.5485  mix_decode.d5.loss_dice: 0.7798  mix_decode.d6.loss_cls: 0.2861  mix_decode.d6.loss_mask: 0.5175  mix_decode.d6.loss_dice: 0.7286  mix_decode.d7.loss_cls: 0.2946  mix_decode.d7.loss_mask: 0.5558  mix_decode.d7.loss_dice: 0.7744  mix_decode.d8.loss_cls: 0.3116  mix_decode.d8.loss_mask: 0.5476  mix_decode.d8.loss_dice: 0.7580
2025/03/28 20:51:27 - mmengine - INFO - Iter(train) [ 8600/20000]  base_lr: 6.0299e-05 lr: 6.0299e-05  eta: 4:52:55  time: 1.9262  data_time: 0.0281  memory: 10751  loss: 49.7760  decode.loss_cls: 0.2906  decode.loss_mask: 1.4409  decode.loss_dice: 1.4852  decode.d0.loss_cls: 0.4406  decode.d0.loss_mask: 1.4865  decode.d0.loss_dice: 1.5303  decode.d1.loss_cls: 0.3272  decode.d1.loss_mask: 1.4392  decode.d1.loss_dice: 1.4847  decode.d2.loss_cls: 0.3034  decode.d2.loss_mask: 1.4560  decode.d2.loss_dice: 1.5051  decode.d3.loss_cls: 0.3034  decode.d3.loss_mask: 1.4720  decode.d3.loss_dice: 1.4924  decode.d4.loss_cls: 0.3067  decode.d4.loss_mask: 1.4339  decode.d4.loss_dice: 1.4735  decode.d5.loss_cls: 0.2377  decode.d5.loss_mask: 1.4830  decode.d5.loss_dice: 1.5221  decode.d6.loss_cls: 0.2847  decode.d6.loss_mask: 1.4645  decode.d6.loss_dice: 1.4701  decode.d7.loss_cls: 0.3002  decode.d7.loss_mask: 1.4328  decode.d7.loss_dice: 1.4847  decode.d8.loss_cls: 0.2689  decode.d8.loss_mask: 1.4484  decode.d8.loss_dice: 1.4786  mix_decode.loss_cls: 0.2702  mix_decode.loss_mask: 0.6886  mix_decode.loss_dice: 0.7915  mix_decode.d0.loss_cls: 0.2648  mix_decode.d0.loss_mask: 0.7214  mix_decode.d0.loss_dice: 0.8285  mix_decode.d1.loss_cls: 0.1970  mix_decode.d1.loss_mask: 0.6939  mix_decode.d1.loss_dice: 0.7584  mix_decode.d2.loss_cls: 0.2691  mix_decode.d2.loss_mask: 0.6704  mix_decode.d2.loss_dice: 0.7584  mix_decode.d3.loss_cls: 0.2564  mix_decode.d3.loss_mask: 0.6913  mix_decode.d3.loss_dice: 0.7578  mix_decode.d4.loss_cls: 0.2525  mix_decode.d4.loss_mask: 0.6766  mix_decode.d4.loss_dice: 0.7758  mix_decode.d5.loss_cls: 0.2594  mix_decode.d5.loss_mask: 0.6617  mix_decode.d5.loss_dice: 0.7709  mix_decode.d6.loss_cls: 0.2285  mix_decode.d6.loss_mask: 0.7018  mix_decode.d6.loss_dice: 0.7942  mix_decode.d7.loss_cls: 0.2210  mix_decode.d7.loss_mask: 0.7030  mix_decode.d7.loss_dice: 0.8081  mix_decode.d8.loss_cls: 0.2795  mix_decode.d8.loss_mask: 0.6928  mix_decode.d8.loss_dice: 0.7855
2025/03/28 20:53:02 - mmengine - INFO - Iter(train) [ 8650/20000]  base_lr: 6.0060e-05 lr: 6.0060e-05  eta: 4:52:03  time: 1.8541  data_time: 0.0257  memory: 10764  loss: 52.3305  decode.loss_cls: 0.4723  decode.loss_mask: 1.4515  decode.loss_dice: 1.4956  decode.d0.loss_cls: 0.5512  decode.d0.loss_mask: 1.4864  decode.d0.loss_dice: 1.6104  decode.d1.loss_cls: 0.4480  decode.d1.loss_mask: 1.4660  decode.d1.loss_dice: 1.5362  decode.d2.loss_cls: 0.4525  decode.d2.loss_mask: 1.4540  decode.d2.loss_dice: 1.5053  decode.d3.loss_cls: 0.4496  decode.d3.loss_mask: 1.5070  decode.d3.loss_dice: 1.5692  decode.d4.loss_cls: 0.4606  decode.d4.loss_mask: 1.4655  decode.d4.loss_dice: 1.5721  decode.d5.loss_cls: 0.4371  decode.d5.loss_mask: 1.5330  decode.d5.loss_dice: 1.5757  decode.d6.loss_cls: 0.4037  decode.d6.loss_mask: 1.4623  decode.d6.loss_dice: 1.5697  decode.d7.loss_cls: 0.5077  decode.d7.loss_mask: 1.4188  decode.d7.loss_dice: 1.5213  decode.d8.loss_cls: 0.4568  decode.d8.loss_mask: 1.4874  decode.d8.loss_dice: 1.5141  mix_decode.loss_cls: 0.3327  mix_decode.loss_mask: 0.5576  mix_decode.loss_dice: 0.8438  mix_decode.d0.loss_cls: 0.3510  mix_decode.d0.loss_mask: 0.5504  mix_decode.d0.loss_dice: 0.8968  mix_decode.d1.loss_cls: 0.2785  mix_decode.d1.loss_mask: 0.5478  mix_decode.d1.loss_dice: 0.8435  mix_decode.d2.loss_cls: 0.3150  mix_decode.d2.loss_mask: 0.5576  mix_decode.d2.loss_dice: 0.8395  mix_decode.d3.loss_cls: 0.3361  mix_decode.d3.loss_mask: 0.5623  mix_decode.d3.loss_dice: 0.8531  mix_decode.d4.loss_cls: 0.3302  mix_decode.d4.loss_mask: 0.5934  mix_decode.d4.loss_dice: 0.8787  mix_decode.d5.loss_cls: 0.3237  mix_decode.d5.loss_mask: 0.5783  mix_decode.d5.loss_dice: 0.8770  mix_decode.d6.loss_cls: 0.3130  mix_decode.d6.loss_mask: 0.5659  mix_decode.d6.loss_dice: 0.8609  mix_decode.d7.loss_cls: 0.3090  mix_decode.d7.loss_mask: 0.5703  mix_decode.d7.loss_dice: 0.8655  mix_decode.d8.loss_cls: 0.3204  mix_decode.d8.loss_mask: 0.5796  mix_decode.d8.loss_dice: 0.8576
2025/03/28 20:54:38 - mmengine - INFO - Iter(train) [ 8700/20000]  base_lr: 5.9822e-05 lr: 5.9822e-05  eta: 4:51:10  time: 1.8969  data_time: 0.0241  memory: 10738  loss: 52.0833  decode.loss_cls: 0.7068  decode.loss_mask: 1.2534  decode.loss_dice: 1.5187  decode.d0.loss_cls: 0.5337  decode.d0.loss_mask: 1.3207  decode.d0.loss_dice: 1.6778  decode.d1.loss_cls: 0.5991  decode.d1.loss_mask: 1.2862  decode.d1.loss_dice: 1.4969  decode.d2.loss_cls: 0.6941  decode.d2.loss_mask: 1.3316  decode.d2.loss_dice: 1.4940  decode.d3.loss_cls: 0.6998  decode.d3.loss_mask: 1.2774  decode.d3.loss_dice: 1.5600  decode.d4.loss_cls: 0.6509  decode.d4.loss_mask: 1.3175  decode.d4.loss_dice: 1.5494  decode.d5.loss_cls: 0.6251  decode.d5.loss_mask: 1.3046  decode.d5.loss_dice: 1.5744  decode.d6.loss_cls: 0.6828  decode.d6.loss_mask: 1.2085  decode.d6.loss_dice: 1.5626  decode.d7.loss_cls: 0.6048  decode.d7.loss_mask: 1.2874  decode.d7.loss_dice: 1.5404  decode.d8.loss_cls: 0.6482  decode.d8.loss_mask: 1.2240  decode.d8.loss_dice: 1.5437  mix_decode.loss_cls: 0.2674  mix_decode.loss_mask: 0.5869  mix_decode.loss_dice: 0.8210  mix_decode.d0.loss_cls: 0.2795  mix_decode.d0.loss_mask: 0.6339  mix_decode.d0.loss_dice: 0.8850  mix_decode.d1.loss_cls: 0.2422  mix_decode.d1.loss_mask: 0.6493  mix_decode.d1.loss_dice: 0.8969  mix_decode.d2.loss_cls: 0.2912  mix_decode.d2.loss_mask: 0.5843  mix_decode.d2.loss_dice: 0.8342  mix_decode.d3.loss_cls: 0.2700  mix_decode.d3.loss_mask: 0.6182  mix_decode.d3.loss_dice: 0.8448  mix_decode.d4.loss_cls: 0.2836  mix_decode.d4.loss_mask: 0.6669  mix_decode.d4.loss_dice: 0.8288  mix_decode.d5.loss_cls: 0.2846  mix_decode.d5.loss_mask: 0.6248  mix_decode.d5.loss_dice: 0.8400  mix_decode.d6.loss_cls: 0.2935  mix_decode.d6.loss_mask: 0.6168  mix_decode.d6.loss_dice: 0.8410  mix_decode.d7.loss_cls: 0.2751  mix_decode.d7.loss_mask: 0.5894  mix_decode.d7.loss_dice: 0.8252  mix_decode.d8.loss_cls: 0.2543  mix_decode.d8.loss_mask: 0.5729  mix_decode.d8.loss_dice: 0.8069
2025/03/28 20:56:09 - mmengine - INFO - Iter(train) [ 8750/20000]  base_lr: 5.9584e-05 lr: 5.9584e-05  eta: 4:50:09  time: 1.8956  data_time: 0.0274  memory: 10753  loss: 56.3283  decode.loss_cls: 0.6510  decode.loss_mask: 1.3957  decode.loss_dice: 1.8331  decode.d0.loss_cls: 0.6711  decode.d0.loss_mask: 1.4210  decode.d0.loss_dice: 1.9323  decode.d1.loss_cls: 0.6549  decode.d1.loss_mask: 1.4820  decode.d1.loss_dice: 1.8771  decode.d2.loss_cls: 0.4983  decode.d2.loss_mask: 1.4854  decode.d2.loss_dice: 1.8581  decode.d3.loss_cls: 0.5531  decode.d3.loss_mask: 1.4648  decode.d3.loss_dice: 1.8709  decode.d4.loss_cls: 0.5224  decode.d4.loss_mask: 1.4922  decode.d4.loss_dice: 1.8843  decode.d5.loss_cls: 0.6288  decode.d5.loss_mask: 1.4935  decode.d5.loss_dice: 1.8668  decode.d6.loss_cls: 0.5807  decode.d6.loss_mask: 1.5035  decode.d6.loss_dice: 1.8720  decode.d7.loss_cls: 0.5689  decode.d7.loss_mask: 1.5022  decode.d7.loss_dice: 1.9036  decode.d8.loss_cls: 0.5862  decode.d8.loss_mask: 1.4712  decode.d8.loss_dice: 1.8488  mix_decode.loss_cls: 0.3018  mix_decode.loss_mask: 0.6353  mix_decode.loss_dice: 0.7633  mix_decode.d0.loss_cls: 0.2982  mix_decode.d0.loss_mask: 0.6325  mix_decode.d0.loss_dice: 0.8026  mix_decode.d1.loss_cls: 0.2579  mix_decode.d1.loss_mask: 0.6199  mix_decode.d1.loss_dice: 0.7551  mix_decode.d2.loss_cls: 0.2892  mix_decode.d2.loss_mask: 0.6436  mix_decode.d2.loss_dice: 0.7806  mix_decode.d3.loss_cls: 0.2697  mix_decode.d3.loss_mask: 0.6457  mix_decode.d3.loss_dice: 0.7765  mix_decode.d4.loss_cls: 0.2997  mix_decode.d4.loss_mask: 0.6331  mix_decode.d4.loss_dice: 0.7913  mix_decode.d5.loss_cls: 0.3242  mix_decode.d5.loss_mask: 0.6077  mix_decode.d5.loss_dice: 0.7589  mix_decode.d6.loss_cls: 0.3010  mix_decode.d6.loss_mask: 0.6333  mix_decode.d6.loss_dice: 0.7661  mix_decode.d7.loss_cls: 0.3135  mix_decode.d7.loss_mask: 0.6192  mix_decode.d7.loss_dice: 0.7430  mix_decode.d8.loss_cls: 0.2881  mix_decode.d8.loss_mask: 0.6401  mix_decode.d8.loss_dice: 0.7635
2025/03/28 20:57:38 - mmengine - INFO - Iter(train) [ 8800/20000]  base_lr: 5.9346e-05 lr: 5.9346e-05  eta: 4:49:07  time: 1.9042  data_time: 0.0257  memory: 10766  loss: 57.3954  decode.loss_cls: 0.5241  decode.loss_mask: 1.7928  decode.loss_dice: 1.8376  decode.d0.loss_cls: 0.6924  decode.d0.loss_mask: 1.7667  decode.d0.loss_dice: 1.8265  decode.d1.loss_cls: 0.6042  decode.d1.loss_mask: 1.6750  decode.d1.loss_dice: 1.6749  decode.d2.loss_cls: 0.5444  decode.d2.loss_mask: 1.8142  decode.d2.loss_dice: 1.7870  decode.d3.loss_cls: 0.6084  decode.d3.loss_mask: 1.6866  decode.d3.loss_dice: 1.7144  decode.d4.loss_cls: 0.5724  decode.d4.loss_mask: 1.8382  decode.d4.loss_dice: 1.7667  decode.d5.loss_cls: 0.6264  decode.d5.loss_mask: 1.6746  decode.d5.loss_dice: 1.7243  decode.d6.loss_cls: 0.5931  decode.d6.loss_mask: 1.6945  decode.d6.loss_dice: 1.7860  decode.d7.loss_cls: 0.4881  decode.d7.loss_mask: 1.7617  decode.d7.loss_dice: 1.8861  decode.d8.loss_cls: 0.5276  decode.d8.loss_mask: 1.7123  decode.d8.loss_dice: 1.7678  mix_decode.loss_cls: 0.3115  mix_decode.loss_mask: 0.6047  mix_decode.loss_dice: 0.7481  mix_decode.d0.loss_cls: 0.3140  mix_decode.d0.loss_mask: 0.5825  mix_decode.d0.loss_dice: 0.7896  mix_decode.d1.loss_cls: 0.2948  mix_decode.d1.loss_mask: 0.6238  mix_decode.d1.loss_dice: 0.7541  mix_decode.d2.loss_cls: 0.2620  mix_decode.d2.loss_mask: 0.6043  mix_decode.d2.loss_dice: 0.7440  mix_decode.d3.loss_cls: 0.2970  mix_decode.d3.loss_mask: 0.5914  mix_decode.d3.loss_dice: 0.7454  mix_decode.d4.loss_cls: 0.3274  mix_decode.d4.loss_mask: 0.5703  mix_decode.d4.loss_dice: 0.7356  mix_decode.d5.loss_cls: 0.3026  mix_decode.d5.loss_mask: 0.5957  mix_decode.d5.loss_dice: 0.7576  mix_decode.d6.loss_cls: 0.2777  mix_decode.d6.loss_mask: 0.5860  mix_decode.d6.loss_dice: 0.7802  mix_decode.d7.loss_cls: 0.2517  mix_decode.d7.loss_mask: 0.5858  mix_decode.d7.loss_dice: 0.7825  mix_decode.d8.loss_cls: 0.2855  mix_decode.d8.loss_mask: 0.5825  mix_decode.d8.loss_dice: 0.7382
2025/03/28 20:59:15 - mmengine - INFO - Iter(train) [ 8850/20000]  base_lr: 5.9107e-05 lr: 5.9107e-05  eta: 4:48:14  time: 1.9578  data_time: 0.0248  memory: 10755  loss: 58.1235  decode.loss_cls: 0.5193  decode.loss_mask: 1.6805  decode.loss_dice: 1.9270  decode.d0.loss_cls: 0.5827  decode.d0.loss_mask: 1.6186  decode.d0.loss_dice: 1.9251  decode.d1.loss_cls: 0.7320  decode.d1.loss_mask: 1.5326  decode.d1.loss_dice: 1.7790  decode.d2.loss_cls: 0.6266  decode.d2.loss_mask: 1.5830  decode.d2.loss_dice: 1.8254  decode.d3.loss_cls: 0.6288  decode.d3.loss_mask: 1.5997  decode.d3.loss_dice: 1.7711  decode.d4.loss_cls: 0.4843  decode.d4.loss_mask: 1.6065  decode.d4.loss_dice: 1.8143  decode.d5.loss_cls: 0.5977  decode.d5.loss_mask: 1.6350  decode.d5.loss_dice: 1.7641  decode.d6.loss_cls: 0.5694  decode.d6.loss_mask: 1.6405  decode.d6.loss_dice: 1.8382  decode.d7.loss_cls: 0.4933  decode.d7.loss_mask: 1.6933  decode.d7.loss_dice: 1.8847  decode.d8.loss_cls: 0.5212  decode.d8.loss_mask: 1.6777  decode.d8.loss_dice: 1.9134  mix_decode.loss_cls: 0.2855  mix_decode.loss_mask: 0.6342  mix_decode.loss_dice: 0.8655  mix_decode.d0.loss_cls: 0.2998  mix_decode.d0.loss_mask: 0.6205  mix_decode.d0.loss_dice: 0.8966  mix_decode.d1.loss_cls: 0.2514  mix_decode.d1.loss_mask: 0.6234  mix_decode.d1.loss_dice: 0.8296  mix_decode.d2.loss_cls: 0.2851  mix_decode.d2.loss_mask: 0.6333  mix_decode.d2.loss_dice: 0.8611  mix_decode.d3.loss_cls: 0.2995  mix_decode.d3.loss_mask: 0.6310  mix_decode.d3.loss_dice: 0.8515  mix_decode.d4.loss_cls: 0.3059  mix_decode.d4.loss_mask: 0.6069  mix_decode.d4.loss_dice: 0.8258  mix_decode.d5.loss_cls: 0.3210  mix_decode.d5.loss_mask: 0.6217  mix_decode.d5.loss_dice: 0.8260  mix_decode.d6.loss_cls: 0.2689  mix_decode.d6.loss_mask: 0.6129  mix_decode.d6.loss_dice: 0.8486  mix_decode.d7.loss_cls: 0.2411  mix_decode.d7.loss_mask: 0.6497  mix_decode.d7.loss_dice: 0.8649  mix_decode.d8.loss_cls: 0.2786  mix_decode.d8.loss_mask: 0.6356  mix_decode.d8.loss_dice: 0.8830
2025/03/28 21:00:49 - mmengine - INFO - Iter(train) [ 8900/20000]  base_lr: 5.8869e-05 lr: 5.8869e-05  eta: 4:47:17  time: 1.8390  data_time: 0.0242  memory: 10743  loss: 58.0754  decode.loss_cls: 0.3660  decode.loss_mask: 1.6576  decode.loss_dice: 1.9094  decode.d0.loss_cls: 0.4734  decode.d0.loss_mask: 1.5953  decode.d0.loss_dice: 1.8934  decode.d1.loss_cls: 0.3852  decode.d1.loss_mask: 1.6540  decode.d1.loss_dice: 1.8716  decode.d2.loss_cls: 0.4152  decode.d2.loss_mask: 1.6346  decode.d2.loss_dice: 1.8994  decode.d3.loss_cls: 0.4075  decode.d3.loss_mask: 1.6283  decode.d3.loss_dice: 1.8810  decode.d4.loss_cls: 0.3891  decode.d4.loss_mask: 1.6103  decode.d4.loss_dice: 1.8683  decode.d5.loss_cls: 0.4153  decode.d5.loss_mask: 1.6303  decode.d5.loss_dice: 1.8991  decode.d6.loss_cls: 0.4471  decode.d6.loss_mask: 1.6464  decode.d6.loss_dice: 1.8619  decode.d7.loss_cls: 0.3888  decode.d7.loss_mask: 1.6380  decode.d7.loss_dice: 1.8732  decode.d8.loss_cls: 0.4208  decode.d8.loss_mask: 1.6956  decode.d8.loss_dice: 1.8768  mix_decode.loss_cls: 0.3665  mix_decode.loss_mask: 0.6442  mix_decode.loss_dice: 0.8856  mix_decode.d0.loss_cls: 0.3612  mix_decode.d0.loss_mask: 0.6268  mix_decode.d0.loss_dice: 0.9242  mix_decode.d1.loss_cls: 0.3631  mix_decode.d1.loss_mask: 0.5984  mix_decode.d1.loss_dice: 0.8392  mix_decode.d2.loss_cls: 0.3305  mix_decode.d2.loss_mask: 0.6169  mix_decode.d2.loss_dice: 0.8626  mix_decode.d3.loss_cls: 0.3362  mix_decode.d3.loss_mask: 0.6677  mix_decode.d3.loss_dice: 0.8858  mix_decode.d4.loss_cls: 0.3658  mix_decode.d4.loss_mask: 0.6183  mix_decode.d4.loss_dice: 0.8487  mix_decode.d5.loss_cls: 0.3460  mix_decode.d5.loss_mask: 0.6378  mix_decode.d5.loss_dice: 0.8803  mix_decode.d6.loss_cls: 0.3011  mix_decode.d6.loss_mask: 0.6591  mix_decode.d6.loss_dice: 0.8962  mix_decode.d7.loss_cls: 0.3728  mix_decode.d7.loss_mask: 0.6831  mix_decode.d7.loss_dice: 0.9001  mix_decode.d8.loss_cls: 0.3679  mix_decode.d8.loss_mask: 0.6494  mix_decode.d8.loss_dice: 0.9070
2025/03/28 21:02:25 - mmengine - INFO - Iter(train) [ 8950/20000]  base_lr: 5.8630e-05 lr: 5.8630e-05  eta: 4:46:22  time: 1.9449  data_time: 0.0247  memory: 10754  loss: 56.2120  decode.loss_cls: 0.4401  decode.loss_mask: 1.5813  decode.loss_dice: 1.8287  decode.d0.loss_cls: 0.5746  decode.d0.loss_mask: 1.5698  decode.d0.loss_dice: 1.8124  decode.d1.loss_cls: 0.4850  decode.d1.loss_mask: 1.5906  decode.d1.loss_dice: 1.7890  decode.d2.loss_cls: 0.4583  decode.d2.loss_mask: 1.5983  decode.d2.loss_dice: 1.7907  decode.d3.loss_cls: 0.4017  decode.d3.loss_mask: 1.5454  decode.d3.loss_dice: 1.7811  decode.d4.loss_cls: 0.4485  decode.d4.loss_mask: 1.5551  decode.d4.loss_dice: 1.7610  decode.d5.loss_cls: 0.4604  decode.d5.loss_mask: 1.5778  decode.d5.loss_dice: 1.7975  decode.d6.loss_cls: 0.4875  decode.d6.loss_mask: 1.5372  decode.d6.loss_dice: 1.7448  decode.d7.loss_cls: 0.4894  decode.d7.loss_mask: 1.5712  decode.d7.loss_dice: 1.8020  decode.d8.loss_cls: 0.4470  decode.d8.loss_mask: 1.5871  decode.d8.loss_dice: 1.8465  mix_decode.loss_cls: 0.2892  mix_decode.loss_mask: 0.6675  mix_decode.loss_dice: 0.8620  mix_decode.d0.loss_cls: 0.2963  mix_decode.d0.loss_mask: 0.6519  mix_decode.d0.loss_dice: 0.8756  mix_decode.d1.loss_cls: 0.2696  mix_decode.d1.loss_mask: 0.6488  mix_decode.d1.loss_dice: 0.8278  mix_decode.d2.loss_cls: 0.2695  mix_decode.d2.loss_mask: 0.6521  mix_decode.d2.loss_dice: 0.7973  mix_decode.d3.loss_cls: 0.2883  mix_decode.d3.loss_mask: 0.6728  mix_decode.d3.loss_dice: 0.8153  mix_decode.d4.loss_cls: 0.3083  mix_decode.d4.loss_mask: 0.6460  mix_decode.d4.loss_dice: 0.8100  mix_decode.d5.loss_cls: 0.3175  mix_decode.d5.loss_mask: 0.6506  mix_decode.d5.loss_dice: 0.8384  mix_decode.d6.loss_cls: 0.2901  mix_decode.d6.loss_mask: 0.6738  mix_decode.d6.loss_dice: 0.8214  mix_decode.d7.loss_cls: 0.3398  mix_decode.d7.loss_mask: 0.6538  mix_decode.d7.loss_dice: 0.8215  mix_decode.d8.loss_cls: 0.3133  mix_decode.d8.loss_mask: 0.6547  mix_decode.d8.loss_dice: 0.8287
2025/03/28 21:03:59 - mmengine - INFO - Exp name: r2u_20250328_164133
2025/03/28 21:03:59 - mmengine - INFO - Iter(train) [ 9000/20000]  base_lr: 5.8391e-05 lr: 5.8391e-05  eta: 4:45:25  time: 1.9091  data_time: 0.0269  memory: 10761  loss: 51.2632  decode.loss_cls: 0.5971  decode.loss_mask: 1.3808  decode.loss_dice: 1.4321  decode.d0.loss_cls: 0.6986  decode.d0.loss_mask: 1.3358  decode.d0.loss_dice: 1.4653  decode.d1.loss_cls: 0.5424  decode.d1.loss_mask: 1.2997  decode.d1.loss_dice: 1.4599  decode.d2.loss_cls: 0.5095  decode.d2.loss_mask: 1.3850  decode.d2.loss_dice: 1.5185  decode.d3.loss_cls: 0.5687  decode.d3.loss_mask: 1.3745  decode.d3.loss_dice: 1.4456  decode.d4.loss_cls: 0.5847  decode.d4.loss_mask: 1.3076  decode.d4.loss_dice: 1.4454  decode.d5.loss_cls: 0.5324  decode.d5.loss_mask: 1.3321  decode.d5.loss_dice: 1.4260  decode.d6.loss_cls: 0.5879  decode.d6.loss_mask: 1.2957  decode.d6.loss_dice: 1.4278  decode.d7.loss_cls: 0.6210  decode.d7.loss_mask: 1.3065  decode.d7.loss_dice: 1.4299  decode.d8.loss_cls: 0.6281  decode.d8.loss_mask: 1.3569  decode.d8.loss_dice: 1.4511  mix_decode.loss_cls: 0.3348  mix_decode.loss_mask: 0.6337  mix_decode.loss_dice: 0.7689  mix_decode.d0.loss_cls: 0.3431  mix_decode.d0.loss_mask: 0.6360  mix_decode.d0.loss_dice: 0.8453  mix_decode.d1.loss_cls: 0.2773  mix_decode.d1.loss_mask: 0.6391  mix_decode.d1.loss_dice: 0.7943  mix_decode.d2.loss_cls: 0.2706  mix_decode.d2.loss_mask: 0.6332  mix_decode.d2.loss_dice: 0.7859  mix_decode.d3.loss_cls: 0.2536  mix_decode.d3.loss_mask: 0.6566  mix_decode.d3.loss_dice: 0.7916  mix_decode.d4.loss_cls: 0.3736  mix_decode.d4.loss_mask: 0.6321  mix_decode.d4.loss_dice: 0.7761  mix_decode.d5.loss_cls: 0.3353  mix_decode.d5.loss_mask: 0.6279  mix_decode.d5.loss_dice: 0.7864  mix_decode.d6.loss_cls: 0.3545  mix_decode.d6.loss_mask: 0.6258  mix_decode.d6.loss_dice: 0.7933  mix_decode.d7.loss_cls: 0.3222  mix_decode.d7.loss_mask: 0.6171  mix_decode.d7.loss_dice: 0.7955  mix_decode.d8.loss_cls: 0.3922  mix_decode.d8.loss_mask: 0.6333  mix_decode.d8.loss_dice: 0.7873
2025/03/28 21:05:35 - mmengine - INFO - Iter(train) [ 9050/20000]  base_lr: 5.8152e-05 lr: 5.8152e-05  eta: 4:44:29  time: 1.9966  data_time: 0.0283  memory: 10750  loss: 51.1867  decode.loss_cls: 0.6501  decode.loss_mask: 1.2454  decode.loss_dice: 1.5019  decode.d0.loss_cls: 0.6062  decode.d0.loss_mask: 1.1958  decode.d0.loss_dice: 1.5915  decode.d1.loss_cls: 0.5478  decode.d1.loss_mask: 1.2230  decode.d1.loss_dice: 1.5046  decode.d2.loss_cls: 0.6442  decode.d2.loss_mask: 1.2062  decode.d2.loss_dice: 1.4674  decode.d3.loss_cls: 0.6691  decode.d3.loss_mask: 1.1933  decode.d3.loss_dice: 1.4071  decode.d4.loss_cls: 0.6829  decode.d4.loss_mask: 1.2280  decode.d4.loss_dice: 1.5234  decode.d5.loss_cls: 0.6197  decode.d5.loss_mask: 1.1892  decode.d5.loss_dice: 1.5259  decode.d6.loss_cls: 0.6456  decode.d6.loss_mask: 1.2487  decode.d6.loss_dice: 1.5161  decode.d7.loss_cls: 0.6516  decode.d7.loss_mask: 1.2488  decode.d7.loss_dice: 1.4910  decode.d8.loss_cls: 0.6332  decode.d8.loss_mask: 1.2546  decode.d8.loss_dice: 1.5140  mix_decode.loss_cls: 0.3608  mix_decode.loss_mask: 0.6276  mix_decode.loss_dice: 0.7613  mix_decode.d0.loss_cls: 0.3485  mix_decode.d0.loss_mask: 0.6516  mix_decode.d0.loss_dice: 0.8288  mix_decode.d1.loss_cls: 0.3376  mix_decode.d1.loss_mask: 0.6674  mix_decode.d1.loss_dice: 0.7572  mix_decode.d2.loss_cls: 0.3013  mix_decode.d2.loss_mask: 0.6494  mix_decode.d2.loss_dice: 0.7482  mix_decode.d3.loss_cls: 0.3620  mix_decode.d3.loss_mask: 0.6335  mix_decode.d3.loss_dice: 0.7359  mix_decode.d4.loss_cls: 0.3193  mix_decode.d4.loss_mask: 0.6680  mix_decode.d4.loss_dice: 0.7521  mix_decode.d5.loss_cls: 0.3475  mix_decode.d5.loss_mask: 0.6717  mix_decode.d5.loss_dice: 0.7468  mix_decode.d6.loss_cls: 0.3603  mix_decode.d6.loss_mask: 0.6646  mix_decode.d6.loss_dice: 0.7363  mix_decode.d7.loss_cls: 0.3468  mix_decode.d7.loss_mask: 0.6808  mix_decode.d7.loss_dice: 0.7638  mix_decode.d8.loss_cls: 0.3697  mix_decode.d8.loss_mask: 0.6228  mix_decode.d8.loss_dice: 0.7392
2025/03/28 21:07:10 - mmengine - INFO - Iter(train) [ 9100/20000]  base_lr: 5.7913e-05 lr: 5.7913e-05  eta: 4:43:31  time: 1.8657  data_time: 0.0281  memory: 10760  loss: 63.8236  decode.loss_cls: 0.7670  decode.loss_mask: 1.6923  decode.loss_dice: 1.9672  decode.d0.loss_cls: 0.6553  decode.d0.loss_mask: 1.7504  decode.d0.loss_dice: 2.0143  decode.d1.loss_cls: 0.7104  decode.d1.loss_mask: 1.7523  decode.d1.loss_dice: 1.9972  decode.d2.loss_cls: 0.6400  decode.d2.loss_mask: 1.8451  decode.d2.loss_dice: 1.9933  decode.d3.loss_cls: 0.6863  decode.d3.loss_mask: 1.7458  decode.d3.loss_dice: 1.9261  decode.d4.loss_cls: 0.6489  decode.d4.loss_mask: 1.8005  decode.d4.loss_dice: 1.9975  decode.d5.loss_cls: 0.5577  decode.d5.loss_mask: 1.8744  decode.d5.loss_dice: 1.9850  decode.d6.loss_cls: 0.6777  decode.d6.loss_mask: 1.7708  decode.d6.loss_dice: 1.9920  decode.d7.loss_cls: 0.6487  decode.d7.loss_mask: 1.8101  decode.d7.loss_dice: 1.9867  decode.d8.loss_cls: 0.6912  decode.d8.loss_mask: 1.7428  decode.d8.loss_dice: 1.9521  mix_decode.loss_cls: 0.3539  mix_decode.loss_mask: 0.6273  mix_decode.loss_dice: 0.9271  mix_decode.d0.loss_cls: 0.4234  mix_decode.d0.loss_mask: 0.6432  mix_decode.d0.loss_dice: 0.9443  mix_decode.d1.loss_cls: 0.3183  mix_decode.d1.loss_mask: 0.6319  mix_decode.d1.loss_dice: 0.9389  mix_decode.d2.loss_cls: 0.3177  mix_decode.d2.loss_mask: 0.6454  mix_decode.d2.loss_dice: 0.9487  mix_decode.d3.loss_cls: 0.3573  mix_decode.d3.loss_mask: 0.6500  mix_decode.d3.loss_dice: 0.9292  mix_decode.d4.loss_cls: 0.4247  mix_decode.d4.loss_mask: 0.6279  mix_decode.d4.loss_dice: 0.9176  mix_decode.d5.loss_cls: 0.3989  mix_decode.d5.loss_mask: 0.6383  mix_decode.d5.loss_dice: 0.9430  mix_decode.d6.loss_cls: 0.4312  mix_decode.d6.loss_mask: 0.6648  mix_decode.d6.loss_dice: 0.9222  mix_decode.d7.loss_cls: 0.3987  mix_decode.d7.loss_mask: 0.6331  mix_decode.d7.loss_dice: 0.9224  mix_decode.d8.loss_cls: 0.3721  mix_decode.d8.loss_mask: 0.6544  mix_decode.d8.loss_dice: 0.9382
2025/03/28 21:08:47 - mmengine - INFO - Iter(train) [ 9150/20000]  base_lr: 5.7674e-05 lr: 5.7674e-05  eta: 4:42:35  time: 1.9498  data_time: 0.0256  memory: 10752  loss: 55.5214  decode.loss_cls: 0.2097  decode.loss_mask: 1.6605  decode.loss_dice: 1.7752  decode.d0.loss_cls: 0.4116  decode.d0.loss_mask: 1.6078  decode.d0.loss_dice: 1.7207  decode.d1.loss_cls: 0.3154  decode.d1.loss_mask: 1.6101  decode.d1.loss_dice: 1.7349  decode.d2.loss_cls: 0.3510  decode.d2.loss_mask: 1.6126  decode.d2.loss_dice: 1.6831  decode.d3.loss_cls: 0.2795  decode.d3.loss_mask: 1.6573  decode.d3.loss_dice: 1.7739  decode.d4.loss_cls: 0.3628  decode.d4.loss_mask: 1.5595  decode.d4.loss_dice: 1.6698  decode.d5.loss_cls: 0.3422  decode.d5.loss_mask: 1.6046  decode.d5.loss_dice: 1.6758  decode.d6.loss_cls: 0.3364  decode.d6.loss_mask: 1.5639  decode.d6.loss_dice: 1.6786  decode.d7.loss_cls: 0.2942  decode.d7.loss_mask: 1.6283  decode.d7.loss_dice: 1.7248  decode.d8.loss_cls: 0.2975  decode.d8.loss_mask: 1.5974  decode.d8.loss_dice: 1.7119  mix_decode.loss_cls: 0.2901  mix_decode.loss_mask: 0.7234  mix_decode.loss_dice: 0.8753  mix_decode.d0.loss_cls: 0.3193  mix_decode.d0.loss_mask: 0.7107  mix_decode.d0.loss_dice: 0.9699  mix_decode.d1.loss_cls: 0.2771  mix_decode.d1.loss_mask: 0.7257  mix_decode.d1.loss_dice: 0.9182  mix_decode.d2.loss_cls: 0.2536  mix_decode.d2.loss_mask: 0.7360  mix_decode.d2.loss_dice: 0.8826  mix_decode.d3.loss_cls: 0.2819  mix_decode.d3.loss_mask: 0.7115  mix_decode.d3.loss_dice: 0.8788  mix_decode.d4.loss_cls: 0.3253  mix_decode.d4.loss_mask: 0.6928  mix_decode.d4.loss_dice: 0.9023  mix_decode.d5.loss_cls: 0.3053  mix_decode.d5.loss_mask: 0.7010  mix_decode.d5.loss_dice: 0.8862  mix_decode.d6.loss_cls: 0.3311  mix_decode.d6.loss_mask: 0.7083  mix_decode.d6.loss_dice: 0.8996  mix_decode.d7.loss_cls: 0.3150  mix_decode.d7.loss_mask: 0.6792  mix_decode.d7.loss_dice: 0.8728  mix_decode.d8.loss_cls: 0.3053  mix_decode.d8.loss_mask: 0.7111  mix_decode.d8.loss_dice: 0.8808
2025/03/28 21:10:20 - mmengine - INFO - Iter(train) [ 9200/20000]  base_lr: 5.7435e-05 lr: 5.7435e-05  eta: 4:41:34  time: 1.7845  data_time: 0.0295  memory: 10749  loss: 55.2924  decode.loss_cls: 0.4574  decode.loss_mask: 1.7009  decode.loss_dice: 1.6176  decode.d0.loss_cls: 0.5704  decode.d0.loss_mask: 1.7706  decode.d0.loss_dice: 1.6938  decode.d1.loss_cls: 0.4961  decode.d1.loss_mask: 1.7356  decode.d1.loss_dice: 1.6378  decode.d2.loss_cls: 0.4241  decode.d2.loss_mask: 1.7878  decode.d2.loss_dice: 1.6074  decode.d3.loss_cls: 0.4487  decode.d3.loss_mask: 1.6963  decode.d3.loss_dice: 1.6072  decode.d4.loss_cls: 0.4460  decode.d4.loss_mask: 1.7509  decode.d4.loss_dice: 1.6900  decode.d5.loss_cls: 0.4413  decode.d5.loss_mask: 1.7246  decode.d5.loss_dice: 1.6324  decode.d6.loss_cls: 0.5022  decode.d6.loss_mask: 1.6969  decode.d6.loss_dice: 1.6453  decode.d7.loss_cls: 0.3972  decode.d7.loss_mask: 1.7075  decode.d7.loss_dice: 1.6602  decode.d8.loss_cls: 0.4514  decode.d8.loss_mask: 1.6989  decode.d8.loss_dice: 1.6236  mix_decode.loss_cls: 0.3016  mix_decode.loss_mask: 0.6125  mix_decode.loss_dice: 0.7555  mix_decode.d0.loss_cls: 0.3684  mix_decode.d0.loss_mask: 0.5854  mix_decode.d0.loss_dice: 0.7800  mix_decode.d1.loss_cls: 0.3388  mix_decode.d1.loss_mask: 0.6140  mix_decode.d1.loss_dice: 0.7587  mix_decode.d2.loss_cls: 0.3134  mix_decode.d2.loss_mask: 0.6190  mix_decode.d2.loss_dice: 0.7477  mix_decode.d3.loss_cls: 0.3009  mix_decode.d3.loss_mask: 0.6044  mix_decode.d3.loss_dice: 0.7773  mix_decode.d4.loss_cls: 0.2989  mix_decode.d4.loss_mask: 0.6351  mix_decode.d4.loss_dice: 0.7758  mix_decode.d5.loss_cls: 0.3106  mix_decode.d5.loss_mask: 0.6344  mix_decode.d5.loss_dice: 0.7480  mix_decode.d6.loss_cls: 0.3143  mix_decode.d6.loss_mask: 0.6306  mix_decode.d6.loss_dice: 0.7751  mix_decode.d7.loss_cls: 0.2931  mix_decode.d7.loss_mask: 0.6280  mix_decode.d7.loss_dice: 0.7776  mix_decode.d8.loss_cls: 0.2918  mix_decode.d8.loss_mask: 0.6122  mix_decode.d8.loss_dice: 0.7697
2025/03/28 21:11:54 - mmengine - INFO - Iter(train) [ 9250/20000]  base_lr: 5.7195e-05 lr: 5.7195e-05  eta: 4:40:34  time: 1.8730  data_time: 0.0255  memory: 10751  loss: 53.2559  decode.loss_cls: 0.5240  decode.loss_mask: 1.4422  decode.loss_dice: 1.5834  decode.d0.loss_cls: 0.6367  decode.d0.loss_mask: 1.5122  decode.d0.loss_dice: 1.6244  decode.d1.loss_cls: 0.5796  decode.d1.loss_mask: 1.4106  decode.d1.loss_dice: 1.5004  decode.d2.loss_cls: 0.5878  decode.d2.loss_mask: 1.4706  decode.d2.loss_dice: 1.5260  decode.d3.loss_cls: 0.5807  decode.d3.loss_mask: 1.4771  decode.d3.loss_dice: 1.5492  decode.d4.loss_cls: 0.6344  decode.d4.loss_mask: 1.4610  decode.d4.loss_dice: 1.5677  decode.d5.loss_cls: 0.6067  decode.d5.loss_mask: 1.4410  decode.d5.loss_dice: 1.4853  decode.d6.loss_cls: 0.6369  decode.d6.loss_mask: 1.4120  decode.d6.loss_dice: 1.5757  decode.d7.loss_cls: 0.5130  decode.d7.loss_mask: 1.4820  decode.d7.loss_dice: 1.6707  decode.d8.loss_cls: 0.5411  decode.d8.loss_mask: 1.4890  decode.d8.loss_dice: 1.6660  mix_decode.loss_cls: 0.2951  mix_decode.loss_mask: 0.5649  mix_decode.loss_dice: 0.8378  mix_decode.d0.loss_cls: 0.3184  mix_decode.d0.loss_mask: 0.5770  mix_decode.d0.loss_dice: 0.8720  mix_decode.d1.loss_cls: 0.3018  mix_decode.d1.loss_mask: 0.5388  mix_decode.d1.loss_dice: 0.7902  mix_decode.d2.loss_cls: 0.3245  mix_decode.d2.loss_mask: 0.5408  mix_decode.d2.loss_dice: 0.8223  mix_decode.d3.loss_cls: 0.3237  mix_decode.d3.loss_mask: 0.5901  mix_decode.d3.loss_dice: 0.8382  mix_decode.d4.loss_cls: 0.3582  mix_decode.d4.loss_mask: 0.5430  mix_decode.d4.loss_dice: 0.8073  mix_decode.d5.loss_cls: 0.3215  mix_decode.d5.loss_mask: 0.5605  mix_decode.d5.loss_dice: 0.7952  mix_decode.d6.loss_cls: 0.3318  mix_decode.d6.loss_mask: 0.5619  mix_decode.d6.loss_dice: 0.8645  mix_decode.d7.loss_cls: 0.2686  mix_decode.d7.loss_mask: 0.5654  mix_decode.d7.loss_dice: 0.8545  mix_decode.d8.loss_cls: 0.2965  mix_decode.d8.loss_mask: 0.5673  mix_decode.d8.loss_dice: 0.8368
2025/03/28 21:13:30 - mmengine - INFO - Iter(train) [ 9300/20000]  base_lr: 5.6956e-05 lr: 5.6956e-05  eta: 4:39:37  time: 2.0432  data_time: 0.0298  memory: 10746  loss: 56.7615  decode.loss_cls: 0.5377  decode.loss_mask: 1.6281  decode.loss_dice: 1.7530  decode.d0.loss_cls: 0.6413  decode.d0.loss_mask: 1.5852  decode.d0.loss_dice: 1.7550  decode.d1.loss_cls: 0.5683  decode.d1.loss_mask: 1.5965  decode.d1.loss_dice: 1.6905  decode.d2.loss_cls: 0.5745  decode.d2.loss_mask: 1.5187  decode.d2.loss_dice: 1.6717  decode.d3.loss_cls: 0.6023  decode.d3.loss_mask: 1.5629  decode.d3.loss_dice: 1.7629  decode.d4.loss_cls: 0.6670  decode.d4.loss_mask: 1.5722  decode.d4.loss_dice: 1.7167  decode.d5.loss_cls: 0.5133  decode.d5.loss_mask: 1.6355  decode.d5.loss_dice: 1.7396  decode.d6.loss_cls: 0.6159  decode.d6.loss_mask: 1.6492  decode.d6.loss_dice: 1.7364  decode.d7.loss_cls: 0.5793  decode.d7.loss_mask: 1.6100  decode.d7.loss_dice: 1.7271  decode.d8.loss_cls: 0.5461  decode.d8.loss_mask: 1.6471  decode.d8.loss_dice: 1.7348  mix_decode.loss_cls: 0.2331  mix_decode.loss_mask: 0.6692  mix_decode.loss_dice: 0.8635  mix_decode.d0.loss_cls: 0.2925  mix_decode.d0.loss_mask: 0.6681  mix_decode.d0.loss_dice: 0.8522  mix_decode.d1.loss_cls: 0.2199  mix_decode.d1.loss_mask: 0.6521  mix_decode.d1.loss_dice: 0.8225  mix_decode.d2.loss_cls: 0.2379  mix_decode.d2.loss_mask: 0.6725  mix_decode.d2.loss_dice: 0.8495  mix_decode.d3.loss_cls: 0.2382  mix_decode.d3.loss_mask: 0.6719  mix_decode.d3.loss_dice: 0.8321  mix_decode.d4.loss_cls: 0.2815  mix_decode.d4.loss_mask: 0.6852  mix_decode.d4.loss_dice: 0.8522  mix_decode.d5.loss_cls: 0.2562  mix_decode.d5.loss_mask: 0.6536  mix_decode.d5.loss_dice: 0.8531  mix_decode.d6.loss_cls: 0.2569  mix_decode.d6.loss_mask: 0.6635  mix_decode.d6.loss_dice: 0.8391  mix_decode.d7.loss_cls: 0.2404  mix_decode.d7.loss_mask: 0.6860  mix_decode.d7.loss_dice: 0.8313  mix_decode.d8.loss_cls: 0.2259  mix_decode.d8.loss_mask: 0.6756  mix_decode.d8.loss_dice: 0.8469
2025/03/28 21:15:04 - mmengine - INFO - Iter(train) [ 9350/20000]  base_lr: 5.6716e-05 lr: 5.6716e-05  eta: 4:38:36  time: 1.8580  data_time: 0.0273  memory: 10744  loss: 55.6115  decode.loss_cls: 0.6478  decode.loss_mask: 1.4683  decode.loss_dice: 1.6676  decode.d0.loss_cls: 0.5102  decode.d0.loss_mask: 1.5108  decode.d0.loss_dice: 1.7647  decode.d1.loss_cls: 0.4775  decode.d1.loss_mask: 1.5139  decode.d1.loss_dice: 1.7134  decode.d2.loss_cls: 0.5295  decode.d2.loss_mask: 1.5392  decode.d2.loss_dice: 1.7339  decode.d3.loss_cls: 0.5277  decode.d3.loss_mask: 1.5511  decode.d3.loss_dice: 1.7427  decode.d4.loss_cls: 0.5067  decode.d4.loss_mask: 1.5483  decode.d4.loss_dice: 1.8105  decode.d5.loss_cls: 0.4637  decode.d5.loss_mask: 1.5471  decode.d5.loss_dice: 1.7750  decode.d6.loss_cls: 0.6025  decode.d6.loss_mask: 1.5361  decode.d6.loss_dice: 1.7419  decode.d7.loss_cls: 0.5539  decode.d7.loss_mask: 1.5376  decode.d7.loss_dice: 1.7586  decode.d8.loss_cls: 0.5094  decode.d8.loss_mask: 1.5790  decode.d8.loss_dice: 1.7711  mix_decode.loss_cls: 0.2023  mix_decode.loss_mask: 0.6320  mix_decode.loss_dice: 0.9024  mix_decode.d0.loss_cls: 0.2378  mix_decode.d0.loss_mask: 0.6253  mix_decode.d0.loss_dice: 0.9071  mix_decode.d1.loss_cls: 0.2079  mix_decode.d1.loss_mask: 0.6448  mix_decode.d1.loss_dice: 0.8658  mix_decode.d2.loss_cls: 0.1910  mix_decode.d2.loss_mask: 0.6272  mix_decode.d2.loss_dice: 0.8850  mix_decode.d3.loss_cls: 0.2456  mix_decode.d3.loss_mask: 0.6357  mix_decode.d3.loss_dice: 0.8618  mix_decode.d4.loss_cls: 0.3023  mix_decode.d4.loss_mask: 0.6061  mix_decode.d4.loss_dice: 0.8896  mix_decode.d5.loss_cls: 0.2785  mix_decode.d5.loss_mask: 0.6120  mix_decode.d5.loss_dice: 0.8834  mix_decode.d6.loss_cls: 0.2219  mix_decode.d6.loss_mask: 0.6517  mix_decode.d6.loss_dice: 0.8902  mix_decode.d7.loss_cls: 0.1845  mix_decode.d7.loss_mask: 0.6451  mix_decode.d7.loss_dice: 0.8939  mix_decode.d8.loss_cls: 0.2005  mix_decode.d8.loss_mask: 0.6527  mix_decode.d8.loss_dice: 0.8881
2025/03/28 21:16:38 - mmengine - INFO - Iter(train) [ 9400/20000]  base_lr: 5.6477e-05 lr: 5.6477e-05  eta: 4:37:36  time: 1.8839  data_time: 0.0239  memory: 10755  loss: 61.6424  decode.loss_cls: 0.6127  decode.loss_mask: 1.6074  decode.loss_dice: 2.0014  decode.d0.loss_cls: 0.5661  decode.d0.loss_mask: 1.5965  decode.d0.loss_dice: 1.9969  decode.d1.loss_cls: 0.5920  decode.d1.loss_mask: 1.6174  decode.d1.loss_dice: 1.9938  decode.d2.loss_cls: 0.6328  decode.d2.loss_mask: 1.6043  decode.d2.loss_dice: 1.9922  decode.d3.loss_cls: 0.5805  decode.d3.loss_mask: 1.6293  decode.d3.loss_dice: 2.0472  decode.d4.loss_cls: 0.5592  decode.d4.loss_mask: 1.6391  decode.d4.loss_dice: 2.0368  decode.d5.loss_cls: 0.5531  decode.d5.loss_mask: 1.6260  decode.d5.loss_dice: 2.0601  decode.d6.loss_cls: 0.5937  decode.d6.loss_mask: 1.6261  decode.d6.loss_dice: 2.0214  decode.d7.loss_cls: 0.5896  decode.d7.loss_mask: 1.6406  decode.d7.loss_dice: 2.0221  decode.d8.loss_cls: 0.5868  decode.d8.loss_mask: 1.6005  decode.d8.loss_dice: 1.9718  mix_decode.loss_cls: 0.3104  mix_decode.loss_mask: 0.6895  mix_decode.loss_dice: 0.9263  mix_decode.d0.loss_cls: 0.4183  mix_decode.d0.loss_mask: 0.6443  mix_decode.d0.loss_dice: 0.9401  mix_decode.d1.loss_cls: 0.4011  mix_decode.d1.loss_mask: 0.6785  mix_decode.d1.loss_dice: 0.8849  mix_decode.d2.loss_cls: 0.4232  mix_decode.d2.loss_mask: 0.6612  mix_decode.d2.loss_dice: 0.8541  mix_decode.d3.loss_cls: 0.4105  mix_decode.d3.loss_mask: 0.6573  mix_decode.d3.loss_dice: 0.8910  mix_decode.d4.loss_cls: 0.4057  mix_decode.d4.loss_mask: 0.6207  mix_decode.d4.loss_dice: 0.8939  mix_decode.d5.loss_cls: 0.4276  mix_decode.d5.loss_mask: 0.6315  mix_decode.d5.loss_dice: 0.8642  mix_decode.d6.loss_cls: 0.3558  mix_decode.d6.loss_mask: 0.6667  mix_decode.d6.loss_dice: 0.9141  mix_decode.d7.loss_cls: 0.3589  mix_decode.d7.loss_mask: 0.6690  mix_decode.d7.loss_dice: 0.9304  mix_decode.d8.loss_cls: 0.3737  mix_decode.d8.loss_mask: 0.6524  mix_decode.d8.loss_dice: 0.8896
2025/03/28 21:18:14 - mmengine - INFO - Iter(train) [ 9450/20000]  base_lr: 5.6237e-05 lr: 5.6237e-05  eta: 4:36:35  time: 1.9542  data_time: 0.0247  memory: 10768  loss: 55.3448  decode.loss_cls: 0.4468  decode.loss_mask: 1.4810  decode.loss_dice: 1.8635  decode.d0.loss_cls: 0.5123  decode.d0.loss_mask: 1.5290  decode.d0.loss_dice: 1.8651  decode.d1.loss_cls: 0.3637  decode.d1.loss_mask: 1.5627  decode.d1.loss_dice: 1.8655  decode.d2.loss_cls: 0.4250  decode.d2.loss_mask: 1.5331  decode.d2.loss_dice: 1.8957  decode.d3.loss_cls: 0.5400  decode.d3.loss_mask: 1.5517  decode.d3.loss_dice: 1.8412  decode.d4.loss_cls: 0.4064  decode.d4.loss_mask: 1.6404  decode.d4.loss_dice: 1.8735  decode.d5.loss_cls: 0.3873  decode.d5.loss_mask: 1.5963  decode.d5.loss_dice: 1.8835  decode.d6.loss_cls: 0.4438  decode.d6.loss_mask: 1.5321  decode.d6.loss_dice: 1.8458  decode.d7.loss_cls: 0.4320  decode.d7.loss_mask: 1.6735  decode.d7.loss_dice: 1.8635  decode.d8.loss_cls: 0.5072  decode.d8.loss_mask: 1.4900  decode.d8.loss_dice: 1.8393  mix_decode.loss_cls: 0.2081  mix_decode.loss_mask: 0.6073  mix_decode.loss_dice: 0.8179  mix_decode.d0.loss_cls: 0.2424  mix_decode.d0.loss_mask: 0.6479  mix_decode.d0.loss_dice: 0.8514  mix_decode.d1.loss_cls: 0.2309  mix_decode.d1.loss_mask: 0.6094  mix_decode.d1.loss_dice: 0.8011  mix_decode.d2.loss_cls: 0.2260  mix_decode.d2.loss_mask: 0.6146  mix_decode.d2.loss_dice: 0.8081  mix_decode.d3.loss_cls: 0.2361  mix_decode.d3.loss_mask: 0.6185  mix_decode.d3.loss_dice: 0.8031  mix_decode.d4.loss_cls: 0.2653  mix_decode.d4.loss_mask: 0.6031  mix_decode.d4.loss_dice: 0.7956  mix_decode.d5.loss_cls: 0.2446  mix_decode.d5.loss_mask: 0.6224  mix_decode.d5.loss_dice: 0.8237  mix_decode.d6.loss_cls: 0.2465  mix_decode.d6.loss_mask: 0.6288  mix_decode.d6.loss_dice: 0.8462  mix_decode.d7.loss_cls: 0.2250  mix_decode.d7.loss_mask: 0.6160  mix_decode.d7.loss_dice: 0.8098  mix_decode.d8.loss_cls: 0.2244  mix_decode.d8.loss_mask: 0.5953  mix_decode.d8.loss_dice: 0.7847
2025/03/28 21:19:48 - mmengine - INFO - Iter(train) [ 9500/20000]  base_lr: 5.5997e-05 lr: 5.5997e-05  eta: 4:35:35  time: 1.8590  data_time: 0.0261  memory: 10766  loss: 53.3466  decode.loss_cls: 0.4378  decode.loss_mask: 1.5998  decode.loss_dice: 1.7004  decode.d0.loss_cls: 0.5903  decode.d0.loss_mask: 1.6338  decode.d0.loss_dice: 1.7394  decode.d1.loss_cls: 0.4960  decode.d1.loss_mask: 1.5972  decode.d1.loss_dice: 1.7387  decode.d2.loss_cls: 0.4821  decode.d2.loss_mask: 1.5979  decode.d2.loss_dice: 1.7041  decode.d3.loss_cls: 0.5608  decode.d3.loss_mask: 1.5347  decode.d3.loss_dice: 1.6541  decode.d4.loss_cls: 0.4424  decode.d4.loss_mask: 1.5950  decode.d4.loss_dice: 1.6843  decode.d5.loss_cls: 0.5430  decode.d5.loss_mask: 1.5508  decode.d5.loss_dice: 1.6578  decode.d6.loss_cls: 0.4927  decode.d6.loss_mask: 1.5836  decode.d6.loss_dice: 1.6858  decode.d7.loss_cls: 0.4526  decode.d7.loss_mask: 1.5872  decode.d7.loss_dice: 1.7226  decode.d8.loss_cls: 0.4845  decode.d8.loss_mask: 1.5602  decode.d8.loss_dice: 1.6790  mix_decode.loss_cls: 0.1953  mix_decode.loss_mask: 0.5765  mix_decode.loss_dice: 0.7403  mix_decode.d0.loss_cls: 0.3151  mix_decode.d0.loss_mask: 0.5821  mix_decode.d0.loss_dice: 0.7929  mix_decode.d1.loss_cls: 0.2510  mix_decode.d1.loss_mask: 0.5683  mix_decode.d1.loss_dice: 0.7621  mix_decode.d2.loss_cls: 0.2082  mix_decode.d2.loss_mask: 0.5791  mix_decode.d2.loss_dice: 0.7243  mix_decode.d3.loss_cls: 0.2544  mix_decode.d3.loss_mask: 0.5675  mix_decode.d3.loss_dice: 0.7265  mix_decode.d4.loss_cls: 0.2425  mix_decode.d4.loss_mask: 0.5874  mix_decode.d4.loss_dice: 0.7296  mix_decode.d5.loss_cls: 0.2581  mix_decode.d5.loss_mask: 0.5780  mix_decode.d5.loss_dice: 0.7205  mix_decode.d6.loss_cls: 0.2406  mix_decode.d6.loss_mask: 0.5391  mix_decode.d6.loss_dice: 0.7481  mix_decode.d7.loss_cls: 0.2231  mix_decode.d7.loss_mask: 0.5588  mix_decode.d7.loss_dice: 0.7463  mix_decode.d8.loss_cls: 0.2171  mix_decode.d8.loss_mask: 0.5873  mix_decode.d8.loss_dice: 0.7380
2025/03/28 21:21:24 - mmengine - INFO - Iter(train) [ 9550/20000]  base_lr: 5.5757e-05 lr: 5.5757e-05  eta: 4:34:34  time: 1.9473  data_time: 0.0262  memory: 10757  loss: 59.2502  decode.loss_cls: 0.5862  decode.loss_mask: 1.7671  decode.loss_dice: 1.8315  decode.d0.loss_cls: 0.7223  decode.d0.loss_mask: 1.6404  decode.d0.loss_dice: 1.7722  decode.d1.loss_cls: 0.6610  decode.d1.loss_mask: 1.6837  decode.d1.loss_dice: 1.7689  decode.d2.loss_cls: 0.5725  decode.d2.loss_mask: 1.6940  decode.d2.loss_dice: 1.8105  decode.d3.loss_cls: 0.5348  decode.d3.loss_mask: 1.7294  decode.d3.loss_dice: 1.8133  decode.d4.loss_cls: 0.5484  decode.d4.loss_mask: 1.6916  decode.d4.loss_dice: 1.7790  decode.d5.loss_cls: 0.5560  decode.d5.loss_mask: 1.6498  decode.d5.loss_dice: 1.7675  decode.d6.loss_cls: 0.6442  decode.d6.loss_mask: 1.7450  decode.d6.loss_dice: 1.8009  decode.d7.loss_cls: 0.5799  decode.d7.loss_mask: 1.7011  decode.d7.loss_dice: 1.7804  decode.d8.loss_cls: 0.5896  decode.d8.loss_mask: 1.6647  decode.d8.loss_dice: 1.7984  mix_decode.loss_cls: 0.2939  mix_decode.loss_mask: 0.7164  mix_decode.loss_dice: 0.8715  mix_decode.d0.loss_cls: 0.3233  mix_decode.d0.loss_mask: 0.6684  mix_decode.d0.loss_dice: 0.8729  mix_decode.d1.loss_cls: 0.2775  mix_decode.d1.loss_mask: 0.6437  mix_decode.d1.loss_dice: 0.8519  mix_decode.d2.loss_cls: 0.3426  mix_decode.d2.loss_mask: 0.6610  mix_decode.d2.loss_dice: 0.8250  mix_decode.d3.loss_cls: 0.2709  mix_decode.d3.loss_mask: 0.6953  mix_decode.d3.loss_dice: 0.8255  mix_decode.d4.loss_cls: 0.2964  mix_decode.d4.loss_mask: 0.7093  mix_decode.d4.loss_dice: 0.8704  mix_decode.d5.loss_cls: 0.2895  mix_decode.d5.loss_mask: 0.6901  mix_decode.d5.loss_dice: 0.8502  mix_decode.d6.loss_cls: 0.2882  mix_decode.d6.loss_mask: 0.7356  mix_decode.d6.loss_dice: 0.8723  mix_decode.d7.loss_cls: 0.2585  mix_decode.d7.loss_mask: 0.6891  mix_decode.d7.loss_dice: 0.8461  mix_decode.d8.loss_cls: 0.2728  mix_decode.d8.loss_mask: 0.6843  mix_decode.d8.loss_dice: 0.8730
2025/03/28 21:23:00 - mmengine - INFO - Iter(train) [ 9600/20000]  base_lr: 5.5517e-05 lr: 5.5517e-05  eta: 4:33:34  time: 1.8829  data_time: 0.0239  memory: 10749  loss: 52.8146  decode.loss_cls: 0.4165  decode.loss_mask: 1.5439  decode.loss_dice: 1.6012  decode.d0.loss_cls: 0.5772  decode.d0.loss_mask: 1.5262  decode.d0.loss_dice: 1.6600  decode.d1.loss_cls: 0.5158  decode.d1.loss_mask: 1.4040  decode.d1.loss_dice: 1.6086  decode.d2.loss_cls: 0.4708  decode.d2.loss_mask: 1.5188  decode.d2.loss_dice: 1.6313  decode.d3.loss_cls: 0.5469  decode.d3.loss_mask: 1.4028  decode.d3.loss_dice: 1.5780  decode.d4.loss_cls: 0.5311  decode.d4.loss_mask: 1.4577  decode.d4.loss_dice: 1.6478  decode.d5.loss_cls: 0.3865  decode.d5.loss_mask: 1.5134  decode.d5.loss_dice: 1.6591  decode.d6.loss_cls: 0.4524  decode.d6.loss_mask: 1.4474  decode.d6.loss_dice: 1.5911  decode.d7.loss_cls: 0.4390  decode.d7.loss_mask: 1.5120  decode.d7.loss_dice: 1.6456  decode.d8.loss_cls: 0.4663  decode.d8.loss_mask: 1.5081  decode.d8.loss_dice: 1.6014  mix_decode.loss_cls: 0.2268  mix_decode.loss_mask: 0.6061  mix_decode.loss_dice: 0.8560  mix_decode.d0.loss_cls: 0.2586  mix_decode.d0.loss_mask: 0.6124  mix_decode.d0.loss_dice: 0.8731  mix_decode.d1.loss_cls: 0.2228  mix_decode.d1.loss_mask: 0.5979  mix_decode.d1.loss_dice: 0.8395  mix_decode.d2.loss_cls: 0.2130  mix_decode.d2.loss_mask: 0.6227  mix_decode.d2.loss_dice: 0.8479  mix_decode.d3.loss_cls: 0.2114  mix_decode.d3.loss_mask: 0.6136  mix_decode.d3.loss_dice: 0.8530  mix_decode.d4.loss_cls: 0.2643  mix_decode.d4.loss_mask: 0.6333  mix_decode.d4.loss_dice: 0.8558  mix_decode.d5.loss_cls: 0.2694  mix_decode.d5.loss_mask: 0.5825  mix_decode.d5.loss_dice: 0.8342  mix_decode.d6.loss_cls: 0.2118  mix_decode.d6.loss_mask: 0.5990  mix_decode.d6.loss_dice: 0.8480  mix_decode.d7.loss_cls: 0.2448  mix_decode.d7.loss_mask: 0.5973  mix_decode.d7.loss_dice: 0.8597  mix_decode.d8.loss_cls: 0.2407  mix_decode.d8.loss_mask: 0.6060  mix_decode.d8.loss_dice: 0.8520
2025/03/28 21:24:36 - mmengine - INFO - Iter(train) [ 9650/20000]  base_lr: 5.5276e-05 lr: 5.5276e-05  eta: 4:32:33  time: 1.8735  data_time: 0.0266  memory: 10750  loss: 56.8173  decode.loss_cls: 0.6404  decode.loss_mask: 1.6015  decode.loss_dice: 1.5981  decode.d0.loss_cls: 0.6910  decode.d0.loss_mask: 1.5790  decode.d0.loss_dice: 1.7473  decode.d1.loss_cls: 0.5840  decode.d1.loss_mask: 1.6922  decode.d1.loss_dice: 1.6381  decode.d2.loss_cls: 0.5879  decode.d2.loss_mask: 1.6824  decode.d2.loss_dice: 1.6326  decode.d3.loss_cls: 0.5561  decode.d3.loss_mask: 1.6580  decode.d3.loss_dice: 1.6630  decode.d4.loss_cls: 0.6181  decode.d4.loss_mask: 1.6080  decode.d4.loss_dice: 1.5824  decode.d5.loss_cls: 0.7282  decode.d5.loss_mask: 1.6038  decode.d5.loss_dice: 1.6729  decode.d6.loss_cls: 0.6314  decode.d6.loss_mask: 1.6088  decode.d6.loss_dice: 1.6808  decode.d7.loss_cls: 0.6791  decode.d7.loss_mask: 1.6119  decode.d7.loss_dice: 1.6403  decode.d8.loss_cls: 0.6402  decode.d8.loss_mask: 1.6586  decode.d8.loss_dice: 1.6541  mix_decode.loss_cls: 0.2318  mix_decode.loss_mask: 0.6530  mix_decode.loss_dice: 0.8735  mix_decode.d0.loss_cls: 0.2958  mix_decode.d0.loss_mask: 0.6461  mix_decode.d0.loss_dice: 0.9023  mix_decode.d1.loss_cls: 0.2098  mix_decode.d1.loss_mask: 0.6847  mix_decode.d1.loss_dice: 0.8609  mix_decode.d2.loss_cls: 0.2498  mix_decode.d2.loss_mask: 0.6806  mix_decode.d2.loss_dice: 0.8325  mix_decode.d3.loss_cls: 0.2323  mix_decode.d3.loss_mask: 0.6448  mix_decode.d3.loss_dice: 0.8636  mix_decode.d4.loss_cls: 0.2015  mix_decode.d4.loss_mask: 0.6745  mix_decode.d4.loss_dice: 0.8691  mix_decode.d5.loss_cls: 0.2549  mix_decode.d5.loss_mask: 0.6440  mix_decode.d5.loss_dice: 0.8617  mix_decode.d6.loss_cls: 0.2304  mix_decode.d6.loss_mask: 0.6579  mix_decode.d6.loss_dice: 0.8628  mix_decode.d7.loss_cls: 0.2437  mix_decode.d7.loss_mask: 0.6452  mix_decode.d7.loss_dice: 0.8774  mix_decode.d8.loss_cls: 0.2439  mix_decode.d8.loss_mask: 0.6504  mix_decode.d8.loss_dice: 0.8680
2025/03/28 21:26:12 - mmengine - INFO - Iter(train) [ 9700/20000]  base_lr: 5.5036e-05 lr: 5.5036e-05  eta: 4:31:32  time: 2.0341  data_time: 0.0269  memory: 10746  loss: 49.2447  decode.loss_cls: 0.3164  decode.loss_mask: 1.5317  decode.loss_dice: 1.4330  decode.d0.loss_cls: 0.5391  decode.d0.loss_mask: 1.4301  decode.d0.loss_dice: 1.3874  decode.d1.loss_cls: 0.3522  decode.d1.loss_mask: 1.4842  decode.d1.loss_dice: 1.4184  decode.d2.loss_cls: 0.4081  decode.d2.loss_mask: 1.3953  decode.d2.loss_dice: 1.3648  decode.d3.loss_cls: 0.2972  decode.d3.loss_mask: 1.4683  decode.d3.loss_dice: 1.4187  decode.d4.loss_cls: 0.3046  decode.d4.loss_mask: 1.4134  decode.d4.loss_dice: 1.4134  decode.d5.loss_cls: 0.3749  decode.d5.loss_mask: 1.3979  decode.d5.loss_dice: 1.3997  decode.d6.loss_cls: 0.3974  decode.d6.loss_mask: 1.3878  decode.d6.loss_dice: 1.3715  decode.d7.loss_cls: 0.3808  decode.d7.loss_mask: 1.4276  decode.d7.loss_dice: 1.3991  decode.d8.loss_cls: 0.3321  decode.d8.loss_mask: 1.4204  decode.d8.loss_dice: 1.4216  mix_decode.loss_cls: 0.3101  mix_decode.loss_mask: 0.5539  mix_decode.loss_dice: 0.8466  mix_decode.d0.loss_cls: 0.3065  mix_decode.d0.loss_mask: 0.5316  mix_decode.d0.loss_dice: 0.9042  mix_decode.d1.loss_cls: 0.3000  mix_decode.d1.loss_mask: 0.5481  mix_decode.d1.loss_dice: 0.8326  mix_decode.d2.loss_cls: 0.3099  mix_decode.d2.loss_mask: 0.5440  mix_decode.d2.loss_dice: 0.8223  mix_decode.d3.loss_cls: 0.2980  mix_decode.d3.loss_mask: 0.5748  mix_decode.d3.loss_dice: 0.8251  mix_decode.d4.loss_cls: 0.3730  mix_decode.d4.loss_mask: 0.5398  mix_decode.d4.loss_dice: 0.8280  mix_decode.d5.loss_cls: 0.3422  mix_decode.d5.loss_mask: 0.5322  mix_decode.d5.loss_dice: 0.8339  mix_decode.d6.loss_cls: 0.3362  mix_decode.d6.loss_mask: 0.5675  mix_decode.d6.loss_dice: 0.8333  mix_decode.d7.loss_cls: 0.3314  mix_decode.d7.loss_mask: 0.5506  mix_decode.d7.loss_dice: 0.8670  mix_decode.d8.loss_cls: 0.3195  mix_decode.d8.loss_mask: 0.5370  mix_decode.d8.loss_dice: 0.8582
2025/03/28 21:27:46 - mmengine - INFO - Iter(train) [ 9750/20000]  base_lr: 5.4795e-05 lr: 5.4795e-05  eta: 4:30:30  time: 1.8477  data_time: 0.0233  memory: 10759  loss: 52.5764  decode.loss_cls: 0.3248  decode.loss_mask: 1.6280  decode.loss_dice: 1.6707  decode.d0.loss_cls: 0.5175  decode.d0.loss_mask: 1.6388  decode.d0.loss_dice: 1.6533  decode.d1.loss_cls: 0.5071  decode.d1.loss_mask: 1.5145  decode.d1.loss_dice: 1.5218  decode.d2.loss_cls: 0.3545  decode.d2.loss_mask: 1.5536  decode.d2.loss_dice: 1.5842  decode.d3.loss_cls: 0.4685  decode.d3.loss_mask: 1.4614  decode.d3.loss_dice: 1.5033  decode.d4.loss_cls: 0.4075  decode.d4.loss_mask: 1.5686  decode.d4.loss_dice: 1.5505  decode.d5.loss_cls: 0.4370  decode.d5.loss_mask: 1.5785  decode.d5.loss_dice: 1.5736  decode.d6.loss_cls: 0.4777  decode.d6.loss_mask: 1.6175  decode.d6.loss_dice: 1.5963  decode.d7.loss_cls: 0.3248  decode.d7.loss_mask: 1.6715  decode.d7.loss_dice: 1.7116  decode.d8.loss_cls: 0.4519  decode.d8.loss_mask: 1.6279  decode.d8.loss_dice: 1.5911  mix_decode.loss_cls: 0.2419  mix_decode.loss_mask: 0.6378  mix_decode.loss_dice: 0.8233  mix_decode.d0.loss_cls: 0.2736  mix_decode.d0.loss_mask: 0.6517  mix_decode.d0.loss_dice: 0.8062  mix_decode.d1.loss_cls: 0.1848  mix_decode.d1.loss_mask: 0.6177  mix_decode.d1.loss_dice: 0.8155  mix_decode.d2.loss_cls: 0.1990  mix_decode.d2.loss_mask: 0.6158  mix_decode.d2.loss_dice: 0.8127  mix_decode.d3.loss_cls: 0.2236  mix_decode.d3.loss_mask: 0.6217  mix_decode.d3.loss_dice: 0.8267  mix_decode.d4.loss_cls: 0.2376  mix_decode.d4.loss_mask: 0.5875  mix_decode.d4.loss_dice: 0.7842  mix_decode.d5.loss_cls: 0.2157  mix_decode.d5.loss_mask: 0.5899  mix_decode.d5.loss_dice: 0.7877  mix_decode.d6.loss_cls: 0.2183  mix_decode.d6.loss_mask: 0.6018  mix_decode.d6.loss_dice: 0.8165  mix_decode.d7.loss_cls: 0.2265  mix_decode.d7.loss_mask: 0.6462  mix_decode.d7.loss_dice: 0.8136  mix_decode.d8.loss_cls: 0.2077  mix_decode.d8.loss_mask: 0.6001  mix_decode.d8.loss_dice: 0.8036
2025/03/28 21:29:21 - mmengine - INFO - Iter(train) [ 9800/20000]  base_lr: 5.4555e-05 lr: 5.4555e-05  eta: 4:29:27  time: 1.9077  data_time: 0.0233  memory: 10743  loss: 54.0157  decode.loss_cls: 0.3719  decode.loss_mask: 1.6122  decode.loss_dice: 1.6863  decode.d0.loss_cls: 0.4519  decode.d0.loss_mask: 1.6497  decode.d0.loss_dice: 1.7445  decode.d1.loss_cls: 0.3871  decode.d1.loss_mask: 1.6196  decode.d1.loss_dice: 1.6806  decode.d2.loss_cls: 0.3138  decode.d2.loss_mask: 1.6539  decode.d2.loss_dice: 1.6910  decode.d3.loss_cls: 0.3625  decode.d3.loss_mask: 1.6132  decode.d3.loss_dice: 1.6639  decode.d4.loss_cls: 0.3727  decode.d4.loss_mask: 1.6006  decode.d4.loss_dice: 1.7352  decode.d5.loss_cls: 0.4336  decode.d5.loss_mask: 1.5480  decode.d5.loss_dice: 1.7225  decode.d6.loss_cls: 0.4252  decode.d6.loss_mask: 1.6230  decode.d6.loss_dice: 1.6753  decode.d7.loss_cls: 0.2849  decode.d7.loss_mask: 1.6372  decode.d7.loss_dice: 1.7168  decode.d8.loss_cls: 0.3736  decode.d8.loss_mask: 1.6037  decode.d8.loss_dice: 1.7098  mix_decode.loss_cls: 0.2440  mix_decode.loss_mask: 0.6437  mix_decode.loss_dice: 0.8357  mix_decode.d0.loss_cls: 0.2164  mix_decode.d0.loss_mask: 0.6496  mix_decode.d0.loss_dice: 0.8524  mix_decode.d1.loss_cls: 0.2321  mix_decode.d1.loss_mask: 0.6540  mix_decode.d1.loss_dice: 0.8133  mix_decode.d2.loss_cls: 0.2692  mix_decode.d2.loss_mask: 0.6517  mix_decode.d2.loss_dice: 0.8047  mix_decode.d3.loss_cls: 0.2311  mix_decode.d3.loss_mask: 0.6487  mix_decode.d3.loss_dice: 0.8150  mix_decode.d4.loss_cls: 0.2482  mix_decode.d4.loss_mask: 0.6399  mix_decode.d4.loss_dice: 0.7918  mix_decode.d5.loss_cls: 0.2108  mix_decode.d5.loss_mask: 0.6407  mix_decode.d5.loss_dice: 0.8068  mix_decode.d6.loss_cls: 0.2476  mix_decode.d6.loss_mask: 0.6412  mix_decode.d6.loss_dice: 0.8001  mix_decode.d7.loss_cls: 0.2559  mix_decode.d7.loss_mask: 0.6391  mix_decode.d7.loss_dice: 0.8240  mix_decode.d8.loss_cls: 0.2635  mix_decode.d8.loss_mask: 0.6509  mix_decode.d8.loss_dice: 0.8296
2025/03/28 21:30:57 - mmengine - INFO - Iter(train) [ 9850/20000]  base_lr: 5.4314e-05 lr: 5.4314e-05  eta: 4:28:25  time: 1.9385  data_time: 0.0258  memory: 10756  loss: 54.1934  decode.loss_cls: 0.5184  decode.loss_mask: 1.5503  decode.loss_dice: 1.7246  decode.d0.loss_cls: 0.6304  decode.d0.loss_mask: 1.5020  decode.d0.loss_dice: 1.6900  decode.d1.loss_cls: 0.4836  decode.d1.loss_mask: 1.5357  decode.d1.loss_dice: 1.6671  decode.d2.loss_cls: 0.5231  decode.d2.loss_mask: 1.5349  decode.d2.loss_dice: 1.6519  decode.d3.loss_cls: 0.4768  decode.d3.loss_mask: 1.5585  decode.d3.loss_dice: 1.6673  decode.d4.loss_cls: 0.4595  decode.d4.loss_mask: 1.5186  decode.d4.loss_dice: 1.6627  decode.d5.loss_cls: 0.4858  decode.d5.loss_mask: 1.5114  decode.d5.loss_dice: 1.7144  decode.d6.loss_cls: 0.4492  decode.d6.loss_mask: 1.5435  decode.d6.loss_dice: 1.6866  decode.d7.loss_cls: 0.4811  decode.d7.loss_mask: 1.5492  decode.d7.loss_dice: 1.7027  decode.d8.loss_cls: 0.4493  decode.d8.loss_mask: 1.5145  decode.d8.loss_dice: 1.7109  mix_decode.loss_cls: 0.2314  mix_decode.loss_mask: 0.6851  mix_decode.loss_dice: 0.8065  mix_decode.d0.loss_cls: 0.2849  mix_decode.d0.loss_mask: 0.6592  mix_decode.d0.loss_dice: 0.7897  mix_decode.d1.loss_cls: 0.2239  mix_decode.d1.loss_mask: 0.6629  mix_decode.d1.loss_dice: 0.7714  mix_decode.d2.loss_cls: 0.2365  mix_decode.d2.loss_mask: 0.6983  mix_decode.d2.loss_dice: 0.7410  mix_decode.d3.loss_cls: 0.2088  mix_decode.d3.loss_mask: 0.6770  mix_decode.d3.loss_dice: 0.7703  mix_decode.d4.loss_cls: 0.2420  mix_decode.d4.loss_mask: 0.6829  mix_decode.d4.loss_dice: 0.7800  mix_decode.d5.loss_cls: 0.2736  mix_decode.d5.loss_mask: 0.6702  mix_decode.d5.loss_dice: 0.7696  mix_decode.d6.loss_cls: 0.2585  mix_decode.d6.loss_mask: 0.6970  mix_decode.d6.loss_dice: 0.7804  mix_decode.d7.loss_cls: 0.2442  mix_decode.d7.loss_mask: 0.6833  mix_decode.d7.loss_dice: 0.8020  mix_decode.d8.loss_cls: 0.2275  mix_decode.d8.loss_mask: 0.6881  mix_decode.d8.loss_dice: 0.7930
2025/03/28 21:32:33 - mmengine - INFO - Iter(train) [ 9900/20000]  base_lr: 5.4073e-05 lr: 5.4073e-05  eta: 4:27:22  time: 1.8478  data_time: 0.0255  memory: 10748  loss: 54.9672  decode.loss_cls: 0.4528  decode.loss_mask: 1.5316  decode.loss_dice: 1.6693  decode.d0.loss_cls: 0.6366  decode.d0.loss_mask: 1.5533  decode.d0.loss_dice: 1.6165  decode.d1.loss_cls: 0.6047  decode.d1.loss_mask: 1.5309  decode.d1.loss_dice: 1.6138  decode.d2.loss_cls: 0.5528  decode.d2.loss_mask: 1.5383  decode.d2.loss_dice: 1.5943  decode.d3.loss_cls: 0.5031  decode.d3.loss_mask: 1.5302  decode.d3.loss_dice: 1.5935  decode.d4.loss_cls: 0.4193  decode.d4.loss_mask: 1.5271  decode.d4.loss_dice: 1.5595  decode.d5.loss_cls: 0.4445  decode.d5.loss_mask: 1.5482  decode.d5.loss_dice: 1.6643  decode.d6.loss_cls: 0.5535  decode.d6.loss_mask: 1.4908  decode.d6.loss_dice: 1.5551  decode.d7.loss_cls: 0.5814  decode.d7.loss_mask: 1.5595  decode.d7.loss_dice: 1.6155  decode.d8.loss_cls: 0.4894  decode.d8.loss_mask: 1.5580  decode.d8.loss_dice: 1.5937  mix_decode.loss_cls: 0.2444  mix_decode.loss_mask: 0.7145  mix_decode.loss_dice: 0.8333  mix_decode.d0.loss_cls: 0.3273  mix_decode.d0.loss_mask: 0.6919  mix_decode.d0.loss_dice: 0.8511  mix_decode.d1.loss_cls: 0.2198  mix_decode.d1.loss_mask: 0.7273  mix_decode.d1.loss_dice: 0.8799  mix_decode.d2.loss_cls: 0.2201  mix_decode.d2.loss_mask: 0.7642  mix_decode.d2.loss_dice: 0.8535  mix_decode.d3.loss_cls: 0.2395  mix_decode.d3.loss_mask: 0.7246  mix_decode.d3.loss_dice: 0.8527  mix_decode.d4.loss_cls: 0.2262  mix_decode.d4.loss_mask: 0.7737  mix_decode.d4.loss_dice: 0.8716  mix_decode.d5.loss_cls: 0.2529  mix_decode.d5.loss_mask: 0.7337  mix_decode.d5.loss_dice: 0.8437  mix_decode.d6.loss_cls: 0.2140  mix_decode.d6.loss_mask: 0.7435  mix_decode.d6.loss_dice: 0.8550  mix_decode.d7.loss_cls: 0.2236  mix_decode.d7.loss_mask: 0.7317  mix_decode.d7.loss_dice: 0.8555  mix_decode.d8.loss_cls: 0.2367  mix_decode.d8.loss_mask: 0.7233  mix_decode.d8.loss_dice: 0.8564
2025/03/28 21:34:09 - mmengine - INFO - Iter(train) [ 9950/20000]  base_lr: 5.3832e-05 lr: 5.3832e-05  eta: 4:26:19  time: 1.8977  data_time: 0.0267  memory: 10748  loss: 46.5496  decode.loss_cls: 0.3823  decode.loss_mask: 1.2166  decode.loss_dice: 1.4023  decode.d0.loss_cls: 0.4830  decode.d0.loss_mask: 1.2931  decode.d0.loss_dice: 1.5472  decode.d1.loss_cls: 0.4364  decode.d1.loss_mask: 1.1832  decode.d1.loss_dice: 1.3881  decode.d2.loss_cls: 0.4352  decode.d2.loss_mask: 1.2498  decode.d2.loss_dice: 1.4801  decode.d3.loss_cls: 0.3966  decode.d3.loss_mask: 1.2459  decode.d3.loss_dice: 1.4111  decode.d4.loss_cls: 0.4124  decode.d4.loss_mask: 1.2026  decode.d4.loss_dice: 1.5553  decode.d5.loss_cls: 0.3509  decode.d5.loss_mask: 1.3121  decode.d5.loss_dice: 1.5161  decode.d6.loss_cls: 0.4200  decode.d6.loss_mask: 1.2253  decode.d6.loss_dice: 1.4569  decode.d7.loss_cls: 0.3877  decode.d7.loss_mask: 1.2042  decode.d7.loss_dice: 1.4905  decode.d8.loss_cls: 0.4505  decode.d8.loss_mask: 1.2111  decode.d8.loss_dice: 1.4270  mix_decode.loss_cls: 0.3102  mix_decode.loss_mask: 0.4456  mix_decode.loss_dice: 0.7344  mix_decode.d0.loss_cls: 0.2731  mix_decode.d0.loss_mask: 0.4754  mix_decode.d0.loss_dice: 0.8069  mix_decode.d1.loss_cls: 0.2489  mix_decode.d1.loss_mask: 0.4905  mix_decode.d1.loss_dice: 0.7978  mix_decode.d2.loss_cls: 0.2629  mix_decode.d2.loss_mask: 0.4679  mix_decode.d2.loss_dice: 0.7558  mix_decode.d3.loss_cls: 0.2832  mix_decode.d3.loss_mask: 0.4626  mix_decode.d3.loss_dice: 0.7456  mix_decode.d4.loss_cls: 0.3296  mix_decode.d4.loss_mask: 0.4485  mix_decode.d4.loss_dice: 0.7807  mix_decode.d5.loss_cls: 0.3049  mix_decode.d5.loss_mask: 0.4603  mix_decode.d5.loss_dice: 0.7869  mix_decode.d6.loss_cls: 0.3007  mix_decode.d6.loss_mask: 0.4708  mix_decode.d6.loss_dice: 0.7916  mix_decode.d7.loss_cls: 0.2971  mix_decode.d7.loss_mask: 0.4815  mix_decode.d7.loss_dice: 0.7842  mix_decode.d8.loss_cls: 0.3239  mix_decode.d8.loss_mask: 0.4824  mix_decode.d8.loss_dice: 0.7724
2025/03/28 21:35:43 - mmengine - INFO - Exp name: r2u_20250328_164133
2025/03/28 21:35:43 - mmengine - INFO - Iter(train) [10000/20000]  base_lr: 5.3591e-05 lr: 5.3591e-05  eta: 4:25:15  time: 1.8354  data_time: 0.0241  memory: 10759  loss: 57.1850  decode.loss_cls: 0.5365  decode.loss_mask: 1.5977  decode.loss_dice: 1.8302  decode.d0.loss_cls: 0.4526  decode.d0.loss_mask: 1.6622  decode.d0.loss_dice: 1.9349  decode.d1.loss_cls: 0.5879  decode.d1.loss_mask: 1.6159  decode.d1.loss_dice: 1.7849  decode.d2.loss_cls: 0.6406  decode.d2.loss_mask: 1.5320  decode.d2.loss_dice: 1.7176  decode.d3.loss_cls: 0.4423  decode.d3.loss_mask: 1.6179  decode.d3.loss_dice: 1.8660  decode.d4.loss_cls: 0.4506  decode.d4.loss_mask: 1.6793  decode.d4.loss_dice: 1.8863  decode.d5.loss_cls: 0.4038  decode.d5.loss_mask: 1.6250  decode.d5.loss_dice: 1.8912  decode.d6.loss_cls: 0.4329  decode.d6.loss_mask: 1.6703  decode.d6.loss_dice: 1.8647  decode.d7.loss_cls: 0.4643  decode.d7.loss_mask: 1.6128  decode.d7.loss_dice: 1.8060  decode.d8.loss_cls: 0.5032  decode.d8.loss_mask: 1.6684  decode.d8.loss_dice: 1.8270  mix_decode.loss_cls: 0.3431  mix_decode.loss_mask: 0.5683  mix_decode.loss_dice: 0.9092  mix_decode.d0.loss_cls: 0.2251  mix_decode.d0.loss_mask: 0.5791  mix_decode.d0.loss_dice: 0.9667  mix_decode.d1.loss_cls: 0.2477  mix_decode.d1.loss_mask: 0.5789  mix_decode.d1.loss_dice: 0.8882  mix_decode.d2.loss_cls: 0.2279  mix_decode.d2.loss_mask: 0.5949  mix_decode.d2.loss_dice: 0.9133  mix_decode.d3.loss_cls: 0.2843  mix_decode.d3.loss_mask: 0.5898  mix_decode.d3.loss_dice: 0.9050  mix_decode.d4.loss_cls: 0.3104  mix_decode.d4.loss_mask: 0.5780  mix_decode.d4.loss_dice: 0.8705  mix_decode.d5.loss_cls: 0.2812  mix_decode.d5.loss_mask: 0.5788  mix_decode.d5.loss_dice: 0.8712  mix_decode.d6.loss_cls: 0.2413  mix_decode.d6.loss_mask: 0.5868  mix_decode.d6.loss_dice: 0.9188  mix_decode.d7.loss_cls: 0.2651  mix_decode.d7.loss_mask: 0.5717  mix_decode.d7.loss_dice: 0.9380  mix_decode.d8.loss_cls: 0.2916  mix_decode.d8.loss_mask: 0.5614  mix_decode.d8.loss_dice: 0.8934
2025/03/28 21:35:43 - mmengine - INFO - Saving checkpoint at 10000 iterations
2025/03/28 21:35:52 - mmengine - INFO - Iter(val) [  50/2708]    eta: 0:06:51  time: 0.1884  data_time: 0.0020  memory: 3055  
2025/03/28 21:36:00 - mmengine - INFO - Iter(val) [ 100/2708]    eta: 0:06:40  time: 0.1648  data_time: 0.0020  memory: 3055  
2025/03/28 21:36:07 - mmengine - INFO - Iter(val) [ 150/2708]    eta: 0:06:19  time: 0.1030  data_time: 0.0020  memory: 3055  
2025/03/28 21:36:14 - mmengine - INFO - Iter(val) [ 200/2708]    eta: 0:06:15  time: 0.1769  data_time: 0.0019  memory: 3055  
2025/03/28 21:36:22 - mmengine - INFO - Iter(val) [ 250/2708]    eta: 0:06:10  time: 0.1901  data_time: 0.0020  memory: 3055  
2025/03/28 21:36:29 - mmengine - INFO - Iter(val) [ 300/2708]    eta: 0:05:58  time: 0.1190  data_time: 0.0019  memory: 3055  
2025/03/28 21:36:36 - mmengine - INFO - Iter(val) [ 350/2708]    eta: 0:05:47  time: 0.1034  data_time: 0.0020  memory: 3055  
2025/03/28 21:36:44 - mmengine - INFO - Iter(val) [ 400/2708]    eta: 0:05:42  time: 0.1883  data_time: 0.0020  memory: 3055  
2025/03/28 21:36:51 - mmengine - INFO - Iter(val) [ 450/2708]    eta: 0:05:36  time: 0.1870  data_time: 0.0020  memory: 3055  
2025/03/28 21:36:58 - mmengine - INFO - Iter(val) [ 500/2708]    eta: 0:05:27  time: 0.1106  data_time: 0.0022  memory: 3055  
2025/03/28 21:37:05 - mmengine - INFO - Iter(val) [ 550/2708]    eta: 0:05:17  time: 0.1028  data_time: 0.0018  memory: 3055  
2025/03/28 21:37:13 - mmengine - INFO - Iter(val) [ 600/2708]    eta: 0:05:11  time: 0.1870  data_time: 0.0018  memory: 3055  
2025/03/28 21:37:21 - mmengine - INFO - Iter(val) [ 650/2708]    eta: 0:05:05  time: 0.1881  data_time: 0.0018  memory: 3055  
2025/03/28 21:37:28 - mmengine - INFO - Iter(val) [ 700/2708]    eta: 0:04:56  time: 0.1019  data_time: 0.0018  memory: 3055  
2025/03/28 21:37:35 - mmengine - INFO - Iter(val) [ 750/2708]    eta: 0:04:49  time: 0.1449  data_time: 0.0019  memory: 3055  
2025/03/28 21:37:43 - mmengine - INFO - Iter(val) [ 800/2708]    eta: 0:04:42  time: 0.1903  data_time: 0.0018  memory: 3055  
2025/03/28 21:37:50 - mmengine - INFO - Iter(val) [ 850/2708]    eta: 0:04:35  time: 0.1244  data_time: 0.0018  memory: 3055  
2025/03/28 21:37:57 - mmengine - INFO - Iter(val) [ 900/2708]    eta: 0:04:26  time: 0.1018  data_time: 0.0018  memory: 3055  
2025/03/28 21:38:05 - mmengine - INFO - Iter(val) [ 950/2708]    eta: 0:04:19  time: 0.1745  data_time: 0.0019  memory: 3055  
2025/03/28 21:38:13 - mmengine - INFO - Iter(val) [1000/2708]    eta: 0:04:13  time: 0.1920  data_time: 0.0019  memory: 3055  
2025/03/28 21:38:20 - mmengine - INFO - Iter(val) [1050/2708]    eta: 0:04:05  time: 0.1025  data_time: 0.0017  memory: 3055  
2025/03/28 21:38:27 - mmengine - INFO - Iter(val) [1100/2708]    eta: 0:03:57  time: 0.1170  data_time: 0.0018  memory: 3055  
2025/03/28 21:38:35 - mmengine - INFO - Iter(val) [1150/2708]    eta: 0:03:50  time: 0.1893  data_time: 0.0022  memory: 3055  
2025/03/28 21:38:42 - mmengine - INFO - Iter(val) [1200/2708]    eta: 0:03:43  time: 0.1595  data_time: 0.0019  memory: 3055  
2025/03/28 21:38:49 - mmengine - INFO - Iter(val) [1250/2708]    eta: 0:03:35  time: 0.1053  data_time: 0.0017  memory: 3055  
2025/03/28 21:38:56 - mmengine - INFO - Iter(val) [1300/2708]    eta: 0:03:27  time: 0.1028  data_time: 0.0019  memory: 3055  
2025/03/28 21:39:03 - mmengine - INFO - Iter(val) [1350/2708]    eta: 0:03:19  time: 0.1053  data_time: 0.0018  memory: 3055  
2025/03/28 21:39:10 - mmengine - INFO - Iter(val) [1400/2708]    eta: 0:03:12  time: 0.1180  data_time: 0.0021  memory: 3055  
2025/03/28 21:39:17 - mmengine - INFO - Iter(val) [1450/2708]    eta: 0:03:04  time: 0.1676  data_time: 0.0020  memory: 3055  
2025/03/28 21:39:25 - mmengine - INFO - Iter(val) [1500/2708]    eta: 0:02:57  time: 0.1871  data_time: 0.0017  memory: 3055  
2025/03/28 21:39:32 - mmengine - INFO - Iter(val) [1550/2708]    eta: 0:02:49  time: 0.1873  data_time: 0.0017  memory: 3055  
2025/03/28 21:39:39 - mmengine - INFO - Iter(val) [1600/2708]    eta: 0:02:42  time: 0.1874  data_time: 0.0017  memory: 3055  
2025/03/28 21:39:46 - mmengine - INFO - Iter(val) [1650/2708]    eta: 0:02:34  time: 0.1549  data_time: 0.0020  memory: 3055  
2025/03/28 21:39:53 - mmengine - INFO - Iter(val) [1700/2708]    eta: 0:02:27  time: 0.1154  data_time: 0.0018  memory: 3055  
2025/03/28 21:40:00 - mmengine - INFO - Iter(val) [1750/2708]    eta: 0:02:19  time: 0.1013  data_time: 0.0017  memory: 3055  
2025/03/28 21:40:07 - mmengine - INFO - Iter(val) [1800/2708]    eta: 0:02:12  time: 0.1021  data_time: 0.0019  memory: 3055  
2025/03/28 21:40:15 - mmengine - INFO - Iter(val) [1850/2708]    eta: 0:02:05  time: 0.1840  data_time: 0.0019  memory: 3055  
2025/03/28 21:40:22 - mmengine - INFO - Iter(val) [1900/2708]    eta: 0:01:58  time: 0.1882  data_time: 0.0020  memory: 3055  
2025/03/28 21:40:29 - mmengine - INFO - Iter(val) [1950/2708]    eta: 0:01:50  time: 0.1043  data_time: 0.0020  memory: 3055  
2025/03/28 21:40:36 - mmengine - INFO - Iter(val) [2000/2708]    eta: 0:01:43  time: 0.1130  data_time: 0.0019  memory: 3055  
2025/03/28 21:40:44 - mmengine - INFO - Iter(val) [2050/2708]    eta: 0:01:36  time: 0.1880  data_time: 0.0021  memory: 3055  
2025/03/28 21:40:52 - mmengine - INFO - Iter(val) [2100/2708]    eta: 0:01:28  time: 0.1819  data_time: 0.0019  memory: 3055  
2025/03/28 21:40:59 - mmengine - INFO - Iter(val) [2150/2708]    eta: 0:01:21  time: 0.1025  data_time: 0.0017  memory: 3055  
2025/03/28 21:41:06 - mmengine - INFO - Iter(val) [2200/2708]    eta: 0:01:14  time: 0.1527  data_time: 0.0018  memory: 3055  
2025/03/28 21:41:14 - mmengine - INFO - Iter(val) [2250/2708]    eta: 0:01:07  time: 0.1874  data_time: 0.0019  memory: 3055  
2025/03/28 21:41:21 - mmengine - INFO - Iter(val) [2300/2708]    eta: 0:00:59  time: 0.1092  data_time: 0.0020  memory: 3055  
2025/03/28 21:41:28 - mmengine - INFO - Iter(val) [2350/2708]    eta: 0:00:52  time: 0.1138  data_time: 0.0016  memory: 3055  
2025/03/28 21:41:36 - mmengine - INFO - Iter(val) [2400/2708]    eta: 0:00:45  time: 0.1871  data_time: 0.0019  memory: 3055  
2025/03/28 21:41:44 - mmengine - INFO - Iter(val) [2450/2708]    eta: 0:00:37  time: 0.1555  data_time: 0.0018  memory: 3055  
2025/03/28 21:41:51 - mmengine - INFO - Iter(val) [2500/2708]    eta: 0:00:30  time: 0.1036  data_time: 0.0019  memory: 3055  
2025/03/28 21:41:59 - mmengine - INFO - Iter(val) [2550/2708]    eta: 0:00:23  time: 0.1801  data_time: 0.0025  memory: 3055  
2025/03/28 21:42:06 - mmengine - INFO - Iter(val) [2600/2708]    eta: 0:00:15  time: 0.1878  data_time: 0.0021  memory: 3055  
2025/03/28 21:42:13 - mmengine - INFO - Iter(val) [2650/2708]    eta: 0:00:08  time: 0.1096  data_time: 0.0019  memory: 3055  
2025/03/28 21:42:21 - mmengine - INFO - Iter(val) [2700/2708]    eta: 0:00:01  time: 0.1404  data_time: 0.0019  memory: 3055  
2025/03/28 21:42:22 - mmengine - INFO - per class results:
2025/03/28 21:42:22 - mmengine - INFO - 
+--------------+-------+-------+
|    Class     |  IoU  |  Acc  |
+--------------+-------+-------+
|  background  | 41.87 | 70.63 |
|   building   | 56.72 | 64.33 |
|     road     | 53.43 |  60.9 |
|    water     | 75.18 | 82.53 |
|    barren    | 32.56 | 56.55 |
|    forest    |  44.4 | 49.13 |
| agricultural | 64.47 | 75.58 |
+--------------+-------+-------+
2025/03/28 21:42:22 - mmengine - INFO - Iter(val) [2708/2708]    aAcc: 68.6600  mIoU: 52.6600  mAcc: 65.6600  data_time: 0.0020  time: 0.1468
2025/03/28 21:43:57 - mmengine - INFO - Iter(train) [10050/20000]  base_lr: 5.3350e-05 lr: 5.3350e-05  eta: 4:24:10  time: 1.8750  data_time: 0.0286  memory: 10766  loss: 54.4604  decode.loss_cls: 0.4127  decode.loss_mask: 1.5899  decode.loss_dice: 1.8653  decode.d0.loss_cls: 0.4561  decode.d0.loss_mask: 1.5633  decode.d0.loss_dice: 1.8494  decode.d1.loss_cls: 0.3733  decode.d1.loss_mask: 1.5622  decode.d1.loss_dice: 1.8346  decode.d2.loss_cls: 0.3344  decode.d2.loss_mask: 1.5676  decode.d2.loss_dice: 1.8291  decode.d3.loss_cls: 0.3537  decode.d3.loss_mask: 1.6092  decode.d3.loss_dice: 1.8541  decode.d4.loss_cls: 0.3769  decode.d4.loss_mask: 1.6223  decode.d4.loss_dice: 1.8478  decode.d5.loss_cls: 0.4118  decode.d5.loss_mask: 1.6050  decode.d5.loss_dice: 1.8431  decode.d6.loss_cls: 0.4399  decode.d6.loss_mask: 1.6075  decode.d6.loss_dice: 1.8468  decode.d7.loss_cls: 0.3703  decode.d7.loss_mask: 1.6139  decode.d7.loss_dice: 1.8436  decode.d8.loss_cls: 0.4048  decode.d8.loss_mask: 1.5574  decode.d8.loss_dice: 1.8064  mix_decode.loss_cls: 0.2399  mix_decode.loss_mask: 0.6053  mix_decode.loss_dice: 0.7795  mix_decode.d0.loss_cls: 0.1954  mix_decode.d0.loss_mask: 0.6090  mix_decode.d0.loss_dice: 0.8496  mix_decode.d1.loss_cls: 0.1989  mix_decode.d1.loss_mask: 0.6062  mix_decode.d1.loss_dice: 0.7726  mix_decode.d2.loss_cls: 0.1819  mix_decode.d2.loss_mask: 0.6140  mix_decode.d2.loss_dice: 0.7765  mix_decode.d3.loss_cls: 0.1416  mix_decode.d3.loss_mask: 0.6376  mix_decode.d3.loss_dice: 0.8162  mix_decode.d4.loss_cls: 0.2087  mix_decode.d4.loss_mask: 0.6242  mix_decode.d4.loss_dice: 0.8070  mix_decode.d5.loss_cls: 0.2151  mix_decode.d5.loss_mask: 0.6233  mix_decode.d5.loss_dice: 0.7960  mix_decode.d6.loss_cls: 0.2111  mix_decode.d6.loss_mask: 0.6256  mix_decode.d6.loss_dice: 0.7851  mix_decode.d7.loss_cls: 0.2186  mix_decode.d7.loss_mask: 0.6248  mix_decode.d7.loss_dice: 0.8235  mix_decode.d8.loss_cls: 0.1796  mix_decode.d8.loss_mask: 0.6282  mix_decode.d8.loss_dice: 0.8131
2025/03/28 21:45:33 - mmengine - INFO - Iter(train) [10100/20000]  base_lr: 5.3109e-05 lr: 5.3109e-05  eta: 4:23:06  time: 1.9389  data_time: 0.0242  memory: 10740  loss: 59.8939  decode.loss_cls: 0.4885  decode.loss_mask: 1.8135  decode.loss_dice: 1.8564  decode.d0.loss_cls: 0.5711  decode.d0.loss_mask: 1.8333  decode.d0.loss_dice: 1.8684  decode.d1.loss_cls: 0.4793  decode.d1.loss_mask: 1.7826  decode.d1.loss_dice: 1.8310  decode.d2.loss_cls: 0.4606  decode.d2.loss_mask: 1.7411  decode.d2.loss_dice: 1.8206  decode.d3.loss_cls: 0.4725  decode.d3.loss_mask: 1.8173  decode.d3.loss_dice: 1.9224  decode.d4.loss_cls: 0.4832  decode.d4.loss_mask: 1.8295  decode.d4.loss_dice: 1.8847  decode.d5.loss_cls: 0.5515  decode.d5.loss_mask: 1.7576  decode.d5.loss_dice: 1.8429  decode.d6.loss_cls: 0.4153  decode.d6.loss_mask: 1.7968  decode.d6.loss_dice: 1.8183  decode.d7.loss_cls: 0.4317  decode.d7.loss_mask: 1.7795  decode.d7.loss_dice: 1.8737  decode.d8.loss_cls: 0.4603  decode.d8.loss_mask: 1.7903  decode.d8.loss_dice: 1.8961  mix_decode.loss_cls: 0.2833  mix_decode.loss_mask: 0.6924  mix_decode.loss_dice: 0.8717  mix_decode.d0.loss_cls: 0.3062  mix_decode.d0.loss_mask: 0.6612  mix_decode.d0.loss_dice: 0.9396  mix_decode.d1.loss_cls: 0.2863  mix_decode.d1.loss_mask: 0.6520  mix_decode.d1.loss_dice: 0.8701  mix_decode.d2.loss_cls: 0.2761  mix_decode.d2.loss_mask: 0.6602  mix_decode.d2.loss_dice: 0.8570  mix_decode.d3.loss_cls: 0.2981  mix_decode.d3.loss_mask: 0.6827  mix_decode.d3.loss_dice: 0.8730  mix_decode.d4.loss_cls: 0.3053  mix_decode.d4.loss_mask: 0.6626  mix_decode.d4.loss_dice: 0.8527  mix_decode.d5.loss_cls: 0.3357  mix_decode.d5.loss_mask: 0.6651  mix_decode.d5.loss_dice: 0.8680  mix_decode.d6.loss_cls: 0.3267  mix_decode.d6.loss_mask: 0.6620  mix_decode.d6.loss_dice: 0.9012  mix_decode.d7.loss_cls: 0.2946  mix_decode.d7.loss_mask: 0.6972  mix_decode.d7.loss_dice: 0.8913  mix_decode.d8.loss_cls: 0.2872  mix_decode.d8.loss_mask: 0.6849  mix_decode.d8.loss_dice: 0.8796
2025/03/28 21:47:07 - mmengine - INFO - Iter(train) [10150/20000]  base_lr: 5.2867e-05 lr: 5.2867e-05  eta: 4:22:01  time: 1.8580  data_time: 0.0247  memory: 10738  loss: 54.9420  decode.loss_cls: 0.4017  decode.loss_mask: 1.6870  decode.loss_dice: 1.6201  decode.d0.loss_cls: 0.5323  decode.d0.loss_mask: 1.6602  decode.d0.loss_dice: 1.6004  decode.d1.loss_cls: 0.5193  decode.d1.loss_mask: 1.5768  decode.d1.loss_dice: 1.5225  decode.d2.loss_cls: 0.4151  decode.d2.loss_mask: 1.7070  decode.d2.loss_dice: 1.5565  decode.d3.loss_cls: 0.3746  decode.d3.loss_mask: 1.6877  decode.d3.loss_dice: 1.5911  decode.d4.loss_cls: 0.3808  decode.d4.loss_mask: 1.7184  decode.d4.loss_dice: 1.6260  decode.d5.loss_cls: 0.4884  decode.d5.loss_mask: 1.6060  decode.d5.loss_dice: 1.5649  decode.d6.loss_cls: 0.5069  decode.d6.loss_mask: 1.6360  decode.d6.loss_dice: 1.5751  decode.d7.loss_cls: 0.4851  decode.d7.loss_mask: 1.6312  decode.d7.loss_dice: 1.5723  decode.d8.loss_cls: 0.4059  decode.d8.loss_mask: 1.7183  decode.d8.loss_dice: 1.5641  mix_decode.loss_cls: 0.3566  mix_decode.loss_mask: 0.6083  mix_decode.loss_dice: 0.8526  mix_decode.d0.loss_cls: 0.3256  mix_decode.d0.loss_mask: 0.5804  mix_decode.d0.loss_dice: 0.9287  mix_decode.d1.loss_cls: 0.3462  mix_decode.d1.loss_mask: 0.5910  mix_decode.d1.loss_dice: 0.8637  mix_decode.d2.loss_cls: 0.3591  mix_decode.d2.loss_mask: 0.5842  mix_decode.d2.loss_dice: 0.8626  mix_decode.d3.loss_cls: 0.3291  mix_decode.d3.loss_mask: 0.5700  mix_decode.d3.loss_dice: 0.8437  mix_decode.d4.loss_cls: 0.4206  mix_decode.d4.loss_mask: 0.5769  mix_decode.d4.loss_dice: 0.8522  mix_decode.d5.loss_cls: 0.4073  mix_decode.d5.loss_mask: 0.5571  mix_decode.d5.loss_dice: 0.8198  mix_decode.d6.loss_cls: 0.3511  mix_decode.d6.loss_mask: 0.5795  mix_decode.d6.loss_dice: 0.8588  mix_decode.d7.loss_cls: 0.3694  mix_decode.d7.loss_mask: 0.5779  mix_decode.d7.loss_dice: 0.8586  mix_decode.d8.loss_cls: 0.3720  mix_decode.d8.loss_mask: 0.5801  mix_decode.d8.loss_dice: 0.8273
2025/03/28 21:48:43 - mmengine - INFO - Iter(train) [10200/20000]  base_lr: 5.2625e-05 lr: 5.2625e-05  eta: 4:20:56  time: 1.9496  data_time: 0.0267  memory: 10750  loss: 55.0541  decode.loss_cls: 0.4913  decode.loss_mask: 1.5669  decode.loss_dice: 1.5374  decode.d0.loss_cls: 0.5188  decode.d0.loss_mask: 1.5682  decode.d0.loss_dice: 1.6377  decode.d1.loss_cls: 0.3739  decode.d1.loss_mask: 1.6344  decode.d1.loss_dice: 1.5937  decode.d2.loss_cls: 0.4782  decode.d2.loss_mask: 1.5372  decode.d2.loss_dice: 1.5575  decode.d3.loss_cls: 0.3871  decode.d3.loss_mask: 1.5798  decode.d3.loss_dice: 1.5823  decode.d4.loss_cls: 0.4625  decode.d4.loss_mask: 1.5624  decode.d4.loss_dice: 1.5737  decode.d5.loss_cls: 0.3960  decode.d5.loss_mask: 1.5857  decode.d5.loss_dice: 1.6206  decode.d6.loss_cls: 0.5050  decode.d6.loss_mask: 1.5495  decode.d6.loss_dice: 1.5445  decode.d7.loss_cls: 0.4741  decode.d7.loss_mask: 1.5566  decode.d7.loss_dice: 1.5643  decode.d8.loss_cls: 0.4356  decode.d8.loss_mask: 1.5538  decode.d8.loss_dice: 1.5347  mix_decode.loss_cls: 0.2476  mix_decode.loss_mask: 0.7315  mix_decode.loss_dice: 0.9279  mix_decode.d0.loss_cls: 0.3276  mix_decode.d0.loss_mask: 0.6800  mix_decode.d0.loss_dice: 0.9234  mix_decode.d1.loss_cls: 0.2447  mix_decode.d1.loss_mask: 0.7429  mix_decode.d1.loss_dice: 0.9300  mix_decode.d2.loss_cls: 0.2624  mix_decode.d2.loss_mask: 0.7046  mix_decode.d2.loss_dice: 0.9080  mix_decode.d3.loss_cls: 0.2686  mix_decode.d3.loss_mask: 0.7119  mix_decode.d3.loss_dice: 0.9045  mix_decode.d4.loss_cls: 0.3073  mix_decode.d4.loss_mask: 0.6970  mix_decode.d4.loss_dice: 0.9088  mix_decode.d5.loss_cls: 0.3035  mix_decode.d5.loss_mask: 0.6854  mix_decode.d5.loss_dice: 0.8909  mix_decode.d6.loss_cls: 0.2619  mix_decode.d6.loss_mask: 0.7275  mix_decode.d6.loss_dice: 0.9134  mix_decode.d7.loss_cls: 0.3176  mix_decode.d7.loss_mask: 0.7040  mix_decode.d7.loss_dice: 0.9075  mix_decode.d8.loss_cls: 0.2684  mix_decode.d8.loss_mask: 0.7487  mix_decode.d8.loss_dice: 0.9330
2025/03/28 21:50:18 - mmengine - INFO - Iter(train) [10250/20000]  base_lr: 5.2384e-05 lr: 5.2384e-05  eta: 4:19:51  time: 1.9347  data_time: 0.0261  memory: 10749  loss: 51.9880  decode.loss_cls: 0.4047  decode.loss_mask: 1.3681  decode.loss_dice: 1.5685  decode.d0.loss_cls: 0.5208  decode.d0.loss_mask: 1.3876  decode.d0.loss_dice: 1.6092  decode.d1.loss_cls: 0.4002  decode.d1.loss_mask: 1.3643  decode.d1.loss_dice: 1.5813  decode.d2.loss_cls: 0.3771  decode.d2.loss_mask: 1.4089  decode.d2.loss_dice: 1.6177  decode.d3.loss_cls: 0.3848  decode.d3.loss_mask: 1.3656  decode.d3.loss_dice: 1.5530  decode.d4.loss_cls: 0.3976  decode.d4.loss_mask: 1.4110  decode.d4.loss_dice: 1.5709  decode.d5.loss_cls: 0.3265  decode.d5.loss_mask: 1.4212  decode.d5.loss_dice: 1.6005  decode.d6.loss_cls: 0.4760  decode.d6.loss_mask: 1.3451  decode.d6.loss_dice: 1.5365  decode.d7.loss_cls: 0.4014  decode.d7.loss_mask: 1.3795  decode.d7.loss_dice: 1.5888  decode.d8.loss_cls: 0.3853  decode.d8.loss_mask: 1.3797  decode.d8.loss_dice: 1.5926  mix_decode.loss_cls: 0.2471  mix_decode.loss_mask: 0.6514  mix_decode.loss_dice: 0.9157  mix_decode.d0.loss_cls: 0.2253  mix_decode.d0.loss_mask: 0.6008  mix_decode.d0.loss_dice: 0.9681  mix_decode.d1.loss_cls: 0.2837  mix_decode.d1.loss_mask: 0.5958  mix_decode.d1.loss_dice: 0.9102  mix_decode.d2.loss_cls: 0.2794  mix_decode.d2.loss_mask: 0.6397  mix_decode.d2.loss_dice: 0.9050  mix_decode.d3.loss_cls: 0.3253  mix_decode.d3.loss_mask: 0.6234  mix_decode.d3.loss_dice: 0.9091  mix_decode.d4.loss_cls: 0.2883  mix_decode.d4.loss_mask: 0.6317  mix_decode.d4.loss_dice: 0.9338  mix_decode.d5.loss_cls: 0.3207  mix_decode.d5.loss_mask: 0.6074  mix_decode.d5.loss_dice: 0.8998  mix_decode.d6.loss_cls: 0.3206  mix_decode.d6.loss_mask: 0.6167  mix_decode.d6.loss_dice: 0.9226  mix_decode.d7.loss_cls: 0.2733  mix_decode.d7.loss_mask: 0.6328  mix_decode.d7.loss_dice: 0.9166  mix_decode.d8.loss_cls: 0.2788  mix_decode.d8.loss_mask: 0.6336  mix_decode.d8.loss_dice: 0.9072
2025/03/28 21:51:54 - mmengine - INFO - Iter(train) [10300/20000]  base_lr: 5.2142e-05 lr: 5.2142e-05  eta: 4:18:46  time: 1.8926  data_time: 0.0235  memory: 10739  loss: 46.7595  decode.loss_cls: 0.3234  decode.loss_mask: 1.3614  decode.loss_dice: 1.4032  decode.d0.loss_cls: 0.3853  decode.d0.loss_mask: 1.4388  decode.d0.loss_dice: 1.5731  decode.d1.loss_cls: 0.4432  decode.d1.loss_mask: 1.3253  decode.d1.loss_dice: 1.4536  decode.d2.loss_cls: 0.3290  decode.d2.loss_mask: 1.4301  decode.d2.loss_dice: 1.5049  decode.d3.loss_cls: 0.3848  decode.d3.loss_mask: 1.3787  decode.d3.loss_dice: 1.4568  decode.d4.loss_cls: 0.3321  decode.d4.loss_mask: 1.3731  decode.d4.loss_dice: 1.4373  decode.d5.loss_cls: 0.3613  decode.d5.loss_mask: 1.3131  decode.d5.loss_dice: 1.4278  decode.d6.loss_cls: 0.3781  decode.d6.loss_mask: 1.4194  decode.d6.loss_dice: 1.4698  decode.d7.loss_cls: 0.3050  decode.d7.loss_mask: 1.4246  decode.d7.loss_dice: 1.4957  decode.d8.loss_cls: 0.3089  decode.d8.loss_mask: 1.4000  decode.d8.loss_dice: 1.4318  mix_decode.loss_cls: 0.1426  mix_decode.loss_mask: 0.6099  mix_decode.loss_dice: 0.6904  mix_decode.d0.loss_cls: 0.2098  mix_decode.d0.loss_mask: 0.6172  mix_decode.d0.loss_dice: 0.6997  mix_decode.d1.loss_cls: 0.1382  mix_decode.d1.loss_mask: 0.6223  mix_decode.d1.loss_dice: 0.6927  mix_decode.d2.loss_cls: 0.1366  mix_decode.d2.loss_mask: 0.6251  mix_decode.d2.loss_dice: 0.6935  mix_decode.d3.loss_cls: 0.1504  mix_decode.d3.loss_mask: 0.6108  mix_decode.d3.loss_dice: 0.6925  mix_decode.d4.loss_cls: 0.1574  mix_decode.d4.loss_mask: 0.6263  mix_decode.d4.loss_dice: 0.6698  mix_decode.d5.loss_cls: 0.1643  mix_decode.d5.loss_mask: 0.6241  mix_decode.d5.loss_dice: 0.6956  mix_decode.d6.loss_cls: 0.1427  mix_decode.d6.loss_mask: 0.6516  mix_decode.d6.loss_dice: 0.7069  mix_decode.d7.loss_cls: 0.1482  mix_decode.d7.loss_mask: 0.6286  mix_decode.d7.loss_dice: 0.6918  mix_decode.d8.loss_cls: 0.1520  mix_decode.d8.loss_mask: 0.6191  mix_decode.d8.loss_dice: 0.6800
2025/03/28 21:53:29 - mmengine - INFO - Iter(train) [10350/20000]  base_lr: 5.1900e-05 lr: 5.1900e-05  eta: 4:17:40  time: 1.9834  data_time: 0.0255  memory: 10745  loss: 54.4856  decode.loss_cls: 0.3030  decode.loss_mask: 1.6829  decode.loss_dice: 1.6882  decode.d0.loss_cls: 0.4537  decode.d0.loss_mask: 1.6662  decode.d0.loss_dice: 1.6788  decode.d1.loss_cls: 0.4275  decode.d1.loss_mask: 1.6423  decode.d1.loss_dice: 1.6284  decode.d2.loss_cls: 0.4272  decode.d2.loss_mask: 1.6719  decode.d2.loss_dice: 1.6412  decode.d3.loss_cls: 0.3907  decode.d3.loss_mask: 1.6532  decode.d3.loss_dice: 1.6557  decode.d4.loss_cls: 0.4200  decode.d4.loss_mask: 1.6222  decode.d4.loss_dice: 1.6543  decode.d5.loss_cls: 0.3589  decode.d5.loss_mask: 1.6526  decode.d5.loss_dice: 1.6545  decode.d6.loss_cls: 0.3054  decode.d6.loss_mask: 1.6681  decode.d6.loss_dice: 1.6444  decode.d7.loss_cls: 0.3281  decode.d7.loss_mask: 1.6756  decode.d7.loss_dice: 1.6817  decode.d8.loss_cls: 0.4311  decode.d8.loss_mask: 1.6354  decode.d8.loss_dice: 1.6386  mix_decode.loss_cls: 0.2547  mix_decode.loss_mask: 0.6660  mix_decode.loss_dice: 0.8080  mix_decode.d0.loss_cls: 0.2648  mix_decode.d0.loss_mask: 0.6821  mix_decode.d0.loss_dice: 0.8741  mix_decode.d1.loss_cls: 0.3068  mix_decode.d1.loss_mask: 0.6544  mix_decode.d1.loss_dice: 0.7715  mix_decode.d2.loss_cls: 0.3159  mix_decode.d2.loss_mask: 0.6547  mix_decode.d2.loss_dice: 0.8072  mix_decode.d3.loss_cls: 0.3373  mix_decode.d3.loss_mask: 0.6352  mix_decode.d3.loss_dice: 0.7896  mix_decode.d4.loss_cls: 0.3314  mix_decode.d4.loss_mask: 0.6297  mix_decode.d4.loss_dice: 0.7444  mix_decode.d5.loss_cls: 0.2971  mix_decode.d5.loss_mask: 0.6434  mix_decode.d5.loss_dice: 0.7928  mix_decode.d6.loss_cls: 0.3176  mix_decode.d6.loss_mask: 0.6416  mix_decode.d6.loss_dice: 0.7955  mix_decode.d7.loss_cls: 0.3097  mix_decode.d7.loss_mask: 0.6566  mix_decode.d7.loss_dice: 0.8055  mix_decode.d8.loss_cls: 0.2983  mix_decode.d8.loss_mask: 0.6333  mix_decode.d8.loss_dice: 0.7849
2025/03/28 21:55:04 - mmengine - INFO - Iter(train) [10400/20000]  base_lr: 5.1658e-05 lr: 5.1658e-05  eta: 4:16:34  time: 1.8528  data_time: 0.0260  memory: 10759  loss: 55.8913  decode.loss_cls: 0.5301  decode.loss_mask: 1.6400  decode.loss_dice: 1.5670  decode.d0.loss_cls: 0.6922  decode.d0.loss_mask: 1.6218  decode.d0.loss_dice: 1.6077  decode.d1.loss_cls: 0.5985  decode.d1.loss_mask: 1.6342  decode.d1.loss_dice: 1.5725  decode.d2.loss_cls: 0.7063  decode.d2.loss_mask: 1.5293  decode.d2.loss_dice: 1.4958  decode.d3.loss_cls: 0.7162  decode.d3.loss_mask: 1.5232  decode.d3.loss_dice: 1.4418  decode.d4.loss_cls: 0.6501  decode.d4.loss_mask: 1.5435  decode.d4.loss_dice: 1.5730  decode.d5.loss_cls: 0.6140  decode.d5.loss_mask: 1.6872  decode.d5.loss_dice: 1.5800  decode.d6.loss_cls: 0.6336  decode.d6.loss_mask: 1.6595  decode.d6.loss_dice: 1.5416  decode.d7.loss_cls: 0.6020  decode.d7.loss_mask: 1.6319  decode.d7.loss_dice: 1.5657  decode.d8.loss_cls: 0.6289  decode.d8.loss_mask: 1.6018  decode.d8.loss_dice: 1.5355  mix_decode.loss_cls: 0.2889  mix_decode.loss_mask: 0.6860  mix_decode.loss_dice: 0.8044  mix_decode.d0.loss_cls: 0.3353  mix_decode.d0.loss_mask: 0.6453  mix_decode.d0.loss_dice: 0.8507  mix_decode.d1.loss_cls: 0.3390  mix_decode.d1.loss_mask: 0.6624  mix_decode.d1.loss_dice: 0.7921  mix_decode.d2.loss_cls: 0.3549  mix_decode.d2.loss_mask: 0.6791  mix_decode.d2.loss_dice: 0.7785  mix_decode.d3.loss_cls: 0.3284  mix_decode.d3.loss_mask: 0.6585  mix_decode.d3.loss_dice: 0.7712  mix_decode.d4.loss_cls: 0.3715  mix_decode.d4.loss_mask: 0.6370  mix_decode.d4.loss_dice: 0.7887  mix_decode.d5.loss_cls: 0.3338  mix_decode.d5.loss_mask: 0.6925  mix_decode.d5.loss_dice: 0.7900  mix_decode.d6.loss_cls: 0.3333  mix_decode.d6.loss_mask: 0.6610  mix_decode.d6.loss_dice: 0.7976  mix_decode.d7.loss_cls: 0.3145  mix_decode.d7.loss_mask: 0.6857  mix_decode.d7.loss_dice: 0.8031  mix_decode.d8.loss_cls: 0.3227  mix_decode.d8.loss_mask: 0.6711  mix_decode.d8.loss_dice: 0.7892
2025/03/28 21:56:40 - mmengine - INFO - Iter(train) [10450/20000]  base_lr: 5.1416e-05 lr: 5.1416e-05  eta: 4:15:28  time: 1.9356  data_time: 0.0256  memory: 10740  loss: 51.4101  decode.loss_cls: 0.6819  decode.loss_mask: 1.2536  decode.loss_dice: 1.4621  decode.d0.loss_cls: 0.5809  decode.d0.loss_mask: 1.3156  decode.d0.loss_dice: 1.5705  decode.d1.loss_cls: 0.5876  decode.d1.loss_mask: 1.2640  decode.d1.loss_dice: 1.5131  decode.d2.loss_cls: 0.5483  decode.d2.loss_mask: 1.3312  decode.d2.loss_dice: 1.5640  decode.d3.loss_cls: 0.6147  decode.d3.loss_mask: 1.2650  decode.d3.loss_dice: 1.4718  decode.d4.loss_cls: 0.6411  decode.d4.loss_mask: 1.2748  decode.d4.loss_dice: 1.4779  decode.d5.loss_cls: 0.5897  decode.d5.loss_mask: 1.2790  decode.d5.loss_dice: 1.4900  decode.d6.loss_cls: 0.6458  decode.d6.loss_mask: 1.2987  decode.d6.loss_dice: 1.4950  decode.d7.loss_cls: 0.6230  decode.d7.loss_mask: 1.2936  decode.d7.loss_dice: 1.4982  decode.d8.loss_cls: 0.6169  decode.d8.loss_mask: 1.3007  decode.d8.loss_dice: 1.4928  mix_decode.loss_cls: 0.3667  mix_decode.loss_mask: 0.5018  mix_decode.loss_dice: 0.8842  mix_decode.d0.loss_cls: 0.3781  mix_decode.d0.loss_mask: 0.4875  mix_decode.d0.loss_dice: 0.9147  mix_decode.d1.loss_cls: 0.3541  mix_decode.d1.loss_mask: 0.5005  mix_decode.d1.loss_dice: 0.8790  mix_decode.d2.loss_cls: 0.3612  mix_decode.d2.loss_mask: 0.4817  mix_decode.d2.loss_dice: 0.8706  mix_decode.d3.loss_cls: 0.3690  mix_decode.d3.loss_mask: 0.5038  mix_decode.d3.loss_dice: 0.8598  mix_decode.d4.loss_cls: 0.4253  mix_decode.d4.loss_mask: 0.4930  mix_decode.d4.loss_dice: 0.8363  mix_decode.d5.loss_cls: 0.4325  mix_decode.d5.loss_mask: 0.4739  mix_decode.d5.loss_dice: 0.8484  mix_decode.d6.loss_cls: 0.3431  mix_decode.d6.loss_mask: 0.4775  mix_decode.d6.loss_dice: 0.8747  mix_decode.d7.loss_cls: 0.3562  mix_decode.d7.loss_mask: 0.4829  mix_decode.d7.loss_dice: 0.8736  mix_decode.d8.loss_cls: 0.4125  mix_decode.d8.loss_mask: 0.4678  mix_decode.d8.loss_dice: 0.8579
2025/03/28 21:58:15 - mmengine - INFO - Iter(train) [10500/20000]  base_lr: 5.1173e-05 lr: 5.1173e-05  eta: 4:14:21  time: 1.9279  data_time: 0.0233  memory: 10752  loss: 51.3863  decode.loss_cls: 0.4691  decode.loss_mask: 1.5936  decode.loss_dice: 1.6295  decode.d0.loss_cls: 0.6179  decode.d0.loss_mask: 1.5976  decode.d0.loss_dice: 1.7006  decode.d1.loss_cls: 0.5350  decode.d1.loss_mask: 1.6031  decode.d1.loss_dice: 1.6473  decode.d2.loss_cls: 0.4712  decode.d2.loss_mask: 1.5022  decode.d2.loss_dice: 1.6112  decode.d3.loss_cls: 0.5098  decode.d3.loss_mask: 1.5501  decode.d3.loss_dice: 1.6458  decode.d4.loss_cls: 0.4990  decode.d4.loss_mask: 1.5780  decode.d4.loss_dice: 1.6301  decode.d5.loss_cls: 0.5123  decode.d5.loss_mask: 1.5468  decode.d5.loss_dice: 1.6292  decode.d6.loss_cls: 0.5754  decode.d6.loss_mask: 1.5636  decode.d6.loss_dice: 1.6226  decode.d7.loss_cls: 0.5202  decode.d7.loss_mask: 1.5709  decode.d7.loss_dice: 1.6019  decode.d8.loss_cls: 0.5319  decode.d8.loss_mask: 1.5783  decode.d8.loss_dice: 1.6476  mix_decode.loss_cls: 0.1885  mix_decode.loss_mask: 0.5332  mix_decode.loss_dice: 0.6369  mix_decode.d0.loss_cls: 0.2720  mix_decode.d0.loss_mask: 0.5293  mix_decode.d0.loss_dice: 0.6686  mix_decode.d1.loss_cls: 0.2351  mix_decode.d1.loss_mask: 0.5233  mix_decode.d1.loss_dice: 0.6447  mix_decode.d2.loss_cls: 0.2387  mix_decode.d2.loss_mask: 0.5381  mix_decode.d2.loss_dice: 0.6261  mix_decode.d3.loss_cls: 0.2154  mix_decode.d3.loss_mask: 0.5405  mix_decode.d3.loss_dice: 0.6236  mix_decode.d4.loss_cls: 0.2050  mix_decode.d4.loss_mask: 0.5716  mix_decode.d4.loss_dice: 0.6613  mix_decode.d5.loss_cls: 0.2353  mix_decode.d5.loss_mask: 0.5564  mix_decode.d5.loss_dice: 0.6625  mix_decode.d6.loss_cls: 0.2309  mix_decode.d6.loss_mask: 0.5080  mix_decode.d6.loss_dice: 0.6252  mix_decode.d7.loss_cls: 0.2124  mix_decode.d7.loss_mask: 0.5658  mix_decode.d7.loss_dice: 0.6557  mix_decode.d8.loss_cls: 0.2491  mix_decode.d8.loss_mask: 0.5129  mix_decode.d8.loss_dice: 0.6284
2025/03/28 21:59:51 - mmengine - INFO - Iter(train) [10550/20000]  base_lr: 5.0931e-05 lr: 5.0931e-05  eta: 4:13:15  time: 1.8574  data_time: 0.0270  memory: 10756  loss: 52.0508  decode.loss_cls: 0.5539  decode.loss_mask: 1.4604  decode.loss_dice: 1.5318  decode.d0.loss_cls: 0.6943  decode.d0.loss_mask: 1.4995  decode.d0.loss_dice: 1.5978  decode.d1.loss_cls: 0.6129  decode.d1.loss_mask: 1.4196  decode.d1.loss_dice: 1.5133  decode.d2.loss_cls: 0.5764  decode.d2.loss_mask: 1.4413  decode.d2.loss_dice: 1.4818  decode.d3.loss_cls: 0.6443  decode.d3.loss_mask: 1.4227  decode.d3.loss_dice: 1.4553  decode.d4.loss_cls: 0.5702  decode.d4.loss_mask: 1.4523  decode.d4.loss_dice: 1.4885  decode.d5.loss_cls: 0.7032  decode.d5.loss_mask: 1.5033  decode.d5.loss_dice: 1.4812  decode.d6.loss_cls: 0.6359  decode.d6.loss_mask: 1.3813  decode.d6.loss_dice: 1.4682  decode.d7.loss_cls: 0.6013  decode.d7.loss_mask: 1.4214  decode.d7.loss_dice: 1.4542  decode.d8.loss_cls: 0.5993  decode.d8.loss_mask: 1.4375  decode.d8.loss_dice: 1.4699  mix_decode.loss_cls: 0.3061  mix_decode.loss_mask: 0.6126  mix_decode.loss_dice: 0.7275  mix_decode.d0.loss_cls: 0.3683  mix_decode.d0.loss_mask: 0.5910  mix_decode.d0.loss_dice: 0.7590  mix_decode.d1.loss_cls: 0.2914  mix_decode.d1.loss_mask: 0.5807  mix_decode.d1.loss_dice: 0.7275  mix_decode.d2.loss_cls: 0.2988  mix_decode.d2.loss_mask: 0.6005  mix_decode.d2.loss_dice: 0.7144  mix_decode.d3.loss_cls: 0.3435  mix_decode.d3.loss_mask: 0.5911  mix_decode.d3.loss_dice: 0.7191  mix_decode.d4.loss_cls: 0.3571  mix_decode.d4.loss_mask: 0.5767  mix_decode.d4.loss_dice: 0.7129  mix_decode.d5.loss_cls: 0.4009  mix_decode.d5.loss_mask: 0.5923  mix_decode.d5.loss_dice: 0.7026  mix_decode.d6.loss_cls: 0.3167  mix_decode.d6.loss_mask: 0.6015  mix_decode.d6.loss_dice: 0.7166  mix_decode.d7.loss_cls: 0.3028  mix_decode.d7.loss_mask: 0.5848  mix_decode.d7.loss_dice: 0.7298  mix_decode.d8.loss_cls: 0.3237  mix_decode.d8.loss_mask: 0.5923  mix_decode.d8.loss_dice: 0.7356
2025/03/28 22:01:26 - mmengine - INFO - Iter(train) [10600/20000]  base_lr: 5.0688e-05 lr: 5.0688e-05  eta: 4:12:07  time: 1.9478  data_time: 0.0261  memory: 10764  loss: 51.1990  decode.loss_cls: 0.6156  decode.loss_mask: 1.2808  decode.loss_dice: 1.5233  decode.d0.loss_cls: 0.5756  decode.d0.loss_mask: 1.2283  decode.d0.loss_dice: 1.5183  decode.d1.loss_cls: 0.5625  decode.d1.loss_mask: 1.2198  decode.d1.loss_dice: 1.5240  decode.d2.loss_cls: 0.6205  decode.d2.loss_mask: 1.2231  decode.d2.loss_dice: 1.4887  decode.d3.loss_cls: 0.6526  decode.d3.loss_mask: 1.2603  decode.d3.loss_dice: 1.4663  decode.d4.loss_cls: 0.6607  decode.d4.loss_mask: 1.2294  decode.d4.loss_dice: 1.4566  decode.d5.loss_cls: 0.5497  decode.d5.loss_mask: 1.2401  decode.d5.loss_dice: 1.4862  decode.d6.loss_cls: 0.6075  decode.d6.loss_mask: 1.2425  decode.d6.loss_dice: 1.5165  decode.d7.loss_cls: 0.6535  decode.d7.loss_mask: 1.2269  decode.d7.loss_dice: 1.4755  decode.d8.loss_cls: 0.5873  decode.d8.loss_mask: 1.2443  decode.d8.loss_dice: 1.4902  mix_decode.loss_cls: 0.3162  mix_decode.loss_mask: 0.6139  mix_decode.loss_dice: 0.8415  mix_decode.d0.loss_cls: 0.3096  mix_decode.d0.loss_mask: 0.5847  mix_decode.d0.loss_dice: 0.8892  mix_decode.d1.loss_cls: 0.2837  mix_decode.d1.loss_mask: 0.5976  mix_decode.d1.loss_dice: 0.8302  mix_decode.d2.loss_cls: 0.3598  mix_decode.d2.loss_mask: 0.5963  mix_decode.d2.loss_dice: 0.8346  mix_decode.d3.loss_cls: 0.3494  mix_decode.d3.loss_mask: 0.6154  mix_decode.d3.loss_dice: 0.8488  mix_decode.d4.loss_cls: 0.3788  mix_decode.d4.loss_mask: 0.6105  mix_decode.d4.loss_dice: 0.8344  mix_decode.d5.loss_cls: 0.4040  mix_decode.d5.loss_mask: 0.6074  mix_decode.d5.loss_dice: 0.8226  mix_decode.d6.loss_cls: 0.3040  mix_decode.d6.loss_mask: 0.5983  mix_decode.d6.loss_dice: 0.8520  mix_decode.d7.loss_cls: 0.3293  mix_decode.d7.loss_mask: 0.5880  mix_decode.d7.loss_dice: 0.8286  mix_decode.d8.loss_cls: 0.3281  mix_decode.d8.loss_mask: 0.5870  mix_decode.d8.loss_dice: 0.8284
2025/03/28 22:03:01 - mmengine - INFO - Iter(train) [10650/20000]  base_lr: 5.0446e-05 lr: 5.0446e-05  eta: 4:11:00  time: 1.9335  data_time: 0.0247  memory: 10762  loss: 53.7317  decode.loss_cls: 0.4479  decode.loss_mask: 1.5790  decode.loss_dice: 1.6596  decode.d0.loss_cls: 0.5821  decode.d0.loss_mask: 1.6483  decode.d0.loss_dice: 1.7101  decode.d1.loss_cls: 0.4979  decode.d1.loss_mask: 1.6017  decode.d1.loss_dice: 1.6736  decode.d2.loss_cls: 0.5313  decode.d2.loss_mask: 1.6156  decode.d2.loss_dice: 1.6622  decode.d3.loss_cls: 0.4814  decode.d3.loss_mask: 1.5941  decode.d3.loss_dice: 1.6962  decode.d4.loss_cls: 0.4584  decode.d4.loss_mask: 1.5769  decode.d4.loss_dice: 1.6233  decode.d5.loss_cls: 0.3914  decode.d5.loss_mask: 1.6027  decode.d5.loss_dice: 1.6817  decode.d6.loss_cls: 0.4577  decode.d6.loss_mask: 1.5956  decode.d6.loss_dice: 1.6697  decode.d7.loss_cls: 0.4989  decode.d7.loss_mask: 1.5715  decode.d7.loss_dice: 1.6435  decode.d8.loss_cls: 0.4772  decode.d8.loss_mask: 1.5751  decode.d8.loss_dice: 1.6967  mix_decode.loss_cls: 0.1741  mix_decode.loss_mask: 0.5662  mix_decode.loss_dice: 0.8203  mix_decode.d0.loss_cls: 0.2310  mix_decode.d0.loss_mask: 0.6020  mix_decode.d0.loss_dice: 0.8444  mix_decode.d1.loss_cls: 0.2342  mix_decode.d1.loss_mask: 0.5789  mix_decode.d1.loss_dice: 0.7930  mix_decode.d2.loss_cls: 0.2390  mix_decode.d2.loss_mask: 0.5818  mix_decode.d2.loss_dice: 0.8041  mix_decode.d3.loss_cls: 0.1996  mix_decode.d3.loss_mask: 0.6126  mix_decode.d3.loss_dice: 0.8225  mix_decode.d4.loss_cls: 0.2696  mix_decode.d4.loss_mask: 0.5697  mix_decode.d4.loss_dice: 0.8111  mix_decode.d5.loss_cls: 0.2910  mix_decode.d5.loss_mask: 0.5862  mix_decode.d5.loss_dice: 0.8104  mix_decode.d6.loss_cls: 0.2053  mix_decode.d6.loss_mask: 0.5936  mix_decode.d6.loss_dice: 0.7995  mix_decode.d7.loss_cls: 0.1936  mix_decode.d7.loss_mask: 0.6044  mix_decode.d7.loss_dice: 0.8164  mix_decode.d8.loss_cls: 0.1733  mix_decode.d8.loss_mask: 0.5837  mix_decode.d8.loss_dice: 0.8192
2025/03/28 22:04:37 - mmengine - INFO - Iter(train) [10700/20000]  base_lr: 5.0203e-05 lr: 5.0203e-05  eta: 4:09:52  time: 1.9401  data_time: 0.0249  memory: 10763  loss: 53.5154  decode.loss_cls: 0.4869  decode.loss_mask: 1.4744  decode.loss_dice: 1.7406  decode.d0.loss_cls: 0.5825  decode.d0.loss_mask: 1.5758  decode.d0.loss_dice: 1.7958  decode.d1.loss_cls: 0.4731  decode.d1.loss_mask: 1.5281  decode.d1.loss_dice: 1.7782  decode.d2.loss_cls: 0.5843  decode.d2.loss_mask: 1.5244  decode.d2.loss_dice: 1.7960  decode.d3.loss_cls: 0.5191  decode.d3.loss_mask: 1.5001  decode.d3.loss_dice: 1.7126  decode.d4.loss_cls: 0.5902  decode.d4.loss_mask: 1.4532  decode.d4.loss_dice: 1.7351  decode.d5.loss_cls: 0.4448  decode.d5.loss_mask: 1.4981  decode.d5.loss_dice: 1.7500  decode.d6.loss_cls: 0.5471  decode.d6.loss_mask: 1.5214  decode.d6.loss_dice: 1.7756  decode.d7.loss_cls: 0.4599  decode.d7.loss_mask: 1.4868  decode.d7.loss_dice: 1.7447  decode.d8.loss_cls: 0.4302  decode.d8.loss_mask: 1.5130  decode.d8.loss_dice: 1.7395  mix_decode.loss_cls: 0.1548  mix_decode.loss_mask: 0.6040  mix_decode.loss_dice: 0.8006  mix_decode.d0.loss_cls: 0.2470  mix_decode.d0.loss_mask: 0.5977  mix_decode.d0.loss_dice: 0.8050  mix_decode.d1.loss_cls: 0.1358  mix_decode.d1.loss_mask: 0.6130  mix_decode.d1.loss_dice: 0.8167  mix_decode.d2.loss_cls: 0.1237  mix_decode.d2.loss_mask: 0.6249  mix_decode.d2.loss_dice: 0.8059  mix_decode.d3.loss_cls: 0.1805  mix_decode.d3.loss_mask: 0.6009  mix_decode.d3.loss_dice: 0.8074  mix_decode.d4.loss_cls: 0.2076  mix_decode.d4.loss_mask: 0.6095  mix_decode.d4.loss_dice: 0.7747  mix_decode.d5.loss_cls: 0.1955  mix_decode.d5.loss_mask: 0.5850  mix_decode.d5.loss_dice: 0.7852  mix_decode.d6.loss_cls: 0.1736  mix_decode.d6.loss_mask: 0.5875  mix_decode.d6.loss_dice: 0.7752  mix_decode.d7.loss_cls: 0.1786  mix_decode.d7.loss_mask: 0.5975  mix_decode.d7.loss_dice: 0.7910  mix_decode.d8.loss_cls: 0.1706  mix_decode.d8.loss_mask: 0.6149  mix_decode.d8.loss_dice: 0.7899
2025/03/28 22:06:12 - mmengine - INFO - Iter(train) [10750/20000]  base_lr: 4.9960e-05 lr: 4.9960e-05  eta: 4:08:44  time: 1.8485  data_time: 0.0240  memory: 10746  loss: 52.5126  decode.loss_cls: 0.3236  decode.loss_mask: 1.5565  decode.loss_dice: 1.4991  decode.d0.loss_cls: 0.4734  decode.d0.loss_mask: 1.5382  decode.d0.loss_dice: 1.5147  decode.d1.loss_cls: 0.3444  decode.d1.loss_mask: 1.5069  decode.d1.loss_dice: 1.5379  decode.d2.loss_cls: 0.3297  decode.d2.loss_mask: 1.5680  decode.d2.loss_dice: 1.5151  decode.d3.loss_cls: 0.3120  decode.d3.loss_mask: 1.5597  decode.d3.loss_dice: 1.5069  decode.d4.loss_cls: 0.2914  decode.d4.loss_mask: 1.5059  decode.d4.loss_dice: 1.5552  decode.d5.loss_cls: 0.3797  decode.d5.loss_mask: 1.4847  decode.d5.loss_dice: 1.5025  decode.d6.loss_cls: 0.3300  decode.d6.loss_mask: 1.5372  decode.d6.loss_dice: 1.5152  decode.d7.loss_cls: 0.3152  decode.d7.loss_mask: 1.5906  decode.d7.loss_dice: 1.5160  decode.d8.loss_cls: 0.3165  decode.d8.loss_mask: 1.5793  decode.d8.loss_dice: 1.5455  mix_decode.loss_cls: 0.2588  mix_decode.loss_mask: 0.6446  mix_decode.loss_dice: 0.9666  mix_decode.d0.loss_cls: 0.2140  mix_decode.d0.loss_mask: 0.6689  mix_decode.d0.loss_dice: 0.9970  mix_decode.d1.loss_cls: 0.2139  mix_decode.d1.loss_mask: 0.6641  mix_decode.d1.loss_dice: 0.9582  mix_decode.d2.loss_cls: 0.1860  mix_decode.d2.loss_mask: 0.6452  mix_decode.d2.loss_dice: 0.9457  mix_decode.d3.loss_cls: 0.2185  mix_decode.d3.loss_mask: 0.6362  mix_decode.d3.loss_dice: 0.9430  mix_decode.d4.loss_cls: 0.2442  mix_decode.d4.loss_mask: 0.6536  mix_decode.d4.loss_dice: 0.9375  mix_decode.d5.loss_cls: 0.2478  mix_decode.d5.loss_mask: 0.6732  mix_decode.d5.loss_dice: 0.9495  mix_decode.d6.loss_cls: 0.2558  mix_decode.d6.loss_mask: 0.6691  mix_decode.d6.loss_dice: 0.9572  mix_decode.d7.loss_cls: 0.2472  mix_decode.d7.loss_mask: 0.6306  mix_decode.d7.loss_dice: 0.9587  mix_decode.d8.loss_cls: 0.2489  mix_decode.d8.loss_mask: 0.6458  mix_decode.d8.loss_dice: 0.9819
2025/03/28 22:07:47 - mmengine - INFO - Iter(train) [10800/20000]  base_lr: 4.9717e-05 lr: 4.9717e-05  eta: 4:07:35  time: 1.8805  data_time: 0.0264  memory: 10747  loss: 53.6962  decode.loss_cls: 0.3814  decode.loss_mask: 1.8390  decode.loss_dice: 1.5004  decode.d0.loss_cls: 0.5776  decode.d0.loss_mask: 1.8617  decode.d0.loss_dice: 1.5266  decode.d1.loss_cls: 0.4758  decode.d1.loss_mask: 1.8306  decode.d1.loss_dice: 1.4634  decode.d2.loss_cls: 0.3975  decode.d2.loss_mask: 1.8222  decode.d2.loss_dice: 1.4974  decode.d3.loss_cls: 0.4147  decode.d3.loss_mask: 1.8378  decode.d3.loss_dice: 1.4804  decode.d4.loss_cls: 0.4310  decode.d4.loss_mask: 1.8837  decode.d4.loss_dice: 1.4952  decode.d5.loss_cls: 0.4179  decode.d5.loss_mask: 1.8381  decode.d5.loss_dice: 1.5391  decode.d6.loss_cls: 0.4223  decode.d6.loss_mask: 1.8324  decode.d6.loss_dice: 1.5217  decode.d7.loss_cls: 0.4099  decode.d7.loss_mask: 1.8700  decode.d7.loss_dice: 1.5224  decode.d8.loss_cls: 0.4315  decode.d8.loss_mask: 1.8413  decode.d8.loss_dice: 1.4944  mix_decode.loss_cls: 0.2179  mix_decode.loss_mask: 0.5885  mix_decode.loss_dice: 0.7986  mix_decode.d0.loss_cls: 0.2582  mix_decode.d0.loss_mask: 0.5749  mix_decode.d0.loss_dice: 0.8026  mix_decode.d1.loss_cls: 0.2206  mix_decode.d1.loss_mask: 0.5790  mix_decode.d1.loss_dice: 0.7391  mix_decode.d2.loss_cls: 0.2547  mix_decode.d2.loss_mask: 0.5625  mix_decode.d2.loss_dice: 0.7468  mix_decode.d3.loss_cls: 0.2500  mix_decode.d3.loss_mask: 0.5638  mix_decode.d3.loss_dice: 0.7329  mix_decode.d4.loss_cls: 0.2808  mix_decode.d4.loss_mask: 0.5489  mix_decode.d4.loss_dice: 0.7460  mix_decode.d5.loss_cls: 0.2416  mix_decode.d5.loss_mask: 0.5649  mix_decode.d5.loss_dice: 0.7669  mix_decode.d6.loss_cls: 0.2612  mix_decode.d6.loss_mask: 0.5754  mix_decode.d6.loss_dice: 0.7621  mix_decode.d7.loss_cls: 0.2233  mix_decode.d7.loss_mask: 0.5940  mix_decode.d7.loss_dice: 0.7714  mix_decode.d8.loss_cls: 0.2124  mix_decode.d8.loss_mask: 0.6121  mix_decode.d8.loss_dice: 0.7875
2025/03/28 22:09:19 - mmengine - INFO - Iter(train) [10850/20000]  base_lr: 4.9473e-05 lr: 4.9473e-05  eta: 4:06:24  time: 1.8784  data_time: 0.0274  memory: 10750  loss: 50.8409  decode.loss_cls: 0.3842  decode.loss_mask: 1.3332  decode.loss_dice: 1.7656  decode.d0.loss_cls: 0.4183  decode.d0.loss_mask: 1.3536  decode.d0.loss_dice: 1.8308  decode.d1.loss_cls: 0.4253  decode.d1.loss_mask: 1.2011  decode.d1.loss_dice: 1.6634  decode.d2.loss_cls: 0.4012  decode.d2.loss_mask: 1.3384  decode.d2.loss_dice: 1.7799  decode.d3.loss_cls: 0.4498  decode.d3.loss_mask: 1.2722  decode.d3.loss_dice: 1.7367  decode.d4.loss_cls: 0.4866  decode.d4.loss_mask: 1.2407  decode.d4.loss_dice: 1.7349  decode.d5.loss_cls: 0.4183  decode.d5.loss_mask: 1.1906  decode.d5.loss_dice: 1.7090  decode.d6.loss_cls: 0.4359  decode.d6.loss_mask: 1.2307  decode.d6.loss_dice: 1.6935  decode.d7.loss_cls: 0.4176  decode.d7.loss_mask: 1.2084  decode.d7.loss_dice: 1.7406  decode.d8.loss_cls: 0.4985  decode.d8.loss_mask: 1.2108  decode.d8.loss_dice: 1.7297  mix_decode.loss_cls: 0.3000  mix_decode.loss_mask: 0.5508  mix_decode.loss_dice: 0.8036  mix_decode.d0.loss_cls: 0.2678  mix_decode.d0.loss_mask: 0.5698  mix_decode.d0.loss_dice: 0.8463  mix_decode.d1.loss_cls: 0.2379  mix_decode.d1.loss_mask: 0.5669  mix_decode.d1.loss_dice: 0.8027  mix_decode.d2.loss_cls: 0.2227  mix_decode.d2.loss_mask: 0.5548  mix_decode.d2.loss_dice: 0.7959  mix_decode.d3.loss_cls: 0.2692  mix_decode.d3.loss_mask: 0.5709  mix_decode.d3.loss_dice: 0.8000  mix_decode.d4.loss_cls: 0.3288  mix_decode.d4.loss_mask: 0.5487  mix_decode.d4.loss_dice: 0.7859  mix_decode.d5.loss_cls: 0.3671  mix_decode.d5.loss_mask: 0.5391  mix_decode.d5.loss_dice: 0.7458  mix_decode.d6.loss_cls: 0.3137  mix_decode.d6.loss_mask: 0.5782  mix_decode.d6.loss_dice: 0.7969  mix_decode.d7.loss_cls: 0.2943  mix_decode.d7.loss_mask: 0.5631  mix_decode.d7.loss_dice: 0.8061  mix_decode.d8.loss_cls: 0.3761  mix_decode.d8.loss_mask: 0.5469  mix_decode.d8.loss_dice: 0.7912
2025/03/28 22:10:54 - mmengine - INFO - Iter(train) [10900/20000]  base_lr: 4.9230e-05 lr: 4.9230e-05  eta: 4:05:16  time: 1.9438  data_time: 0.0230  memory: 10751  loss: 53.8244  decode.loss_cls: 0.4391  decode.loss_mask: 1.5227  decode.loss_dice: 1.7174  decode.d0.loss_cls: 0.5584  decode.d0.loss_mask: 1.5422  decode.d0.loss_dice: 1.7267  decode.d1.loss_cls: 0.4246  decode.d1.loss_mask: 1.5140  decode.d1.loss_dice: 1.7157  decode.d2.loss_cls: 0.4032  decode.d2.loss_mask: 1.5340  decode.d2.loss_dice: 1.6924  decode.d3.loss_cls: 0.4118  decode.d3.loss_mask: 1.5406  decode.d3.loss_dice: 1.7102  decode.d4.loss_cls: 0.4476  decode.d4.loss_mask: 1.4689  decode.d4.loss_dice: 1.7123  decode.d5.loss_cls: 0.4628  decode.d5.loss_mask: 1.4837  decode.d5.loss_dice: 1.6608  decode.d6.loss_cls: 0.4138  decode.d6.loss_mask: 1.5665  decode.d6.loss_dice: 1.7600  decode.d7.loss_cls: 0.4057  decode.d7.loss_mask: 1.5763  decode.d7.loss_dice: 1.7175  decode.d8.loss_cls: 0.4114  decode.d8.loss_mask: 1.5294  decode.d8.loss_dice: 1.6953  mix_decode.loss_cls: 0.2778  mix_decode.loss_mask: 0.6523  mix_decode.loss_dice: 0.7946  mix_decode.d0.loss_cls: 0.3555  mix_decode.d0.loss_mask: 0.5800  mix_decode.d0.loss_dice: 0.7755  mix_decode.d1.loss_cls: 0.3610  mix_decode.d1.loss_mask: 0.6129  mix_decode.d1.loss_dice: 0.7131  mix_decode.d2.loss_cls: 0.3356  mix_decode.d2.loss_mask: 0.5859  mix_decode.d2.loss_dice: 0.7346  mix_decode.d3.loss_cls: 0.3165  mix_decode.d3.loss_mask: 0.6021  mix_decode.d3.loss_dice: 0.7622  mix_decode.d4.loss_cls: 0.3792  mix_decode.d4.loss_mask: 0.6226  mix_decode.d4.loss_dice: 0.7397  mix_decode.d5.loss_cls: 0.3750  mix_decode.d5.loss_mask: 0.6021  mix_decode.d5.loss_dice: 0.7172  mix_decode.d6.loss_cls: 0.3441  mix_decode.d6.loss_mask: 0.6167  mix_decode.d6.loss_dice: 0.7633  mix_decode.d7.loss_cls: 0.3710  mix_decode.d7.loss_mask: 0.5927  mix_decode.d7.loss_dice: 0.7625  mix_decode.d8.loss_cls: 0.3618  mix_decode.d8.loss_mask: 0.6054  mix_decode.d8.loss_dice: 0.7463
2025/03/28 22:12:29 - mmengine - INFO - Iter(train) [10950/20000]  base_lr: 4.8986e-05 lr: 4.8986e-05  eta: 4:04:06  time: 1.8557  data_time: 0.0267  memory: 10743  loss: 56.9322  decode.loss_cls: 0.6096  decode.loss_mask: 1.6401  decode.loss_dice: 1.7818  decode.d0.loss_cls: 0.6604  decode.d0.loss_mask: 1.5162  decode.d0.loss_dice: 1.7892  decode.d1.loss_cls: 0.5696  decode.d1.loss_mask: 1.5293  decode.d1.loss_dice: 1.7903  decode.d2.loss_cls: 0.6137  decode.d2.loss_mask: 1.6121  decode.d2.loss_dice: 1.7830  decode.d3.loss_cls: 0.6829  decode.d3.loss_mask: 1.5537  decode.d3.loss_dice: 1.7806  decode.d4.loss_cls: 0.6138  decode.d4.loss_mask: 1.5369  decode.d4.loss_dice: 1.7626  decode.d5.loss_cls: 0.6755  decode.d5.loss_mask: 1.7195  decode.d5.loss_dice: 1.7142  decode.d6.loss_cls: 0.6055  decode.d6.loss_mask: 1.7754  decode.d6.loss_dice: 1.7868  decode.d7.loss_cls: 0.5127  decode.d7.loss_mask: 1.6828  decode.d7.loss_dice: 1.7989  decode.d8.loss_cls: 0.7291  decode.d8.loss_mask: 1.5671  decode.d8.loss_dice: 1.6891  mix_decode.loss_cls: 0.2307  mix_decode.loss_mask: 0.6484  mix_decode.loss_dice: 0.8116  mix_decode.d0.loss_cls: 0.2454  mix_decode.d0.loss_mask: 0.6160  mix_decode.d0.loss_dice: 0.8224  mix_decode.d1.loss_cls: 0.2231  mix_decode.d1.loss_mask: 0.6394  mix_decode.d1.loss_dice: 0.8003  mix_decode.d2.loss_cls: 0.2513  mix_decode.d2.loss_mask: 0.6196  mix_decode.d2.loss_dice: 0.8217  mix_decode.d3.loss_cls: 0.2911  mix_decode.d3.loss_mask: 0.6331  mix_decode.d3.loss_dice: 0.7788  mix_decode.d4.loss_cls: 0.2619  mix_decode.d4.loss_mask: 0.6382  mix_decode.d4.loss_dice: 0.8141  mix_decode.d5.loss_cls: 0.2557  mix_decode.d5.loss_mask: 0.6124  mix_decode.d5.loss_dice: 0.7805  mix_decode.d6.loss_cls: 0.2417  mix_decode.d6.loss_mask: 0.6577  mix_decode.d6.loss_dice: 0.8126  mix_decode.d7.loss_cls: 0.2542  mix_decode.d7.loss_mask: 0.6095  mix_decode.d7.loss_dice: 0.8102  mix_decode.d8.loss_cls: 0.2719  mix_decode.d8.loss_mask: 0.6078  mix_decode.d8.loss_dice: 0.7886
2025/03/28 22:14:06 - mmengine - INFO - Exp name: r2u_20250328_164133
2025/03/28 22:14:06 - mmengine - INFO - Iter(train) [11000/20000]  base_lr: 4.8743e-05 lr: 4.8743e-05  eta: 4:02:58  time: 1.9365  data_time: 0.0265  memory: 10755  loss: 49.7648  decode.loss_cls: 0.4588  decode.loss_mask: 1.5576  decode.loss_dice: 1.4323  decode.d0.loss_cls: 0.5526  decode.d0.loss_mask: 1.5613  decode.d0.loss_dice: 1.4631  decode.d1.loss_cls: 0.4160  decode.d1.loss_mask: 1.5112  decode.d1.loss_dice: 1.4200  decode.d2.loss_cls: 0.4656  decode.d2.loss_mask: 1.5229  decode.d2.loss_dice: 1.3847  decode.d3.loss_cls: 0.4578  decode.d3.loss_mask: 1.4936  decode.d3.loss_dice: 1.4077  decode.d4.loss_cls: 0.3835  decode.d4.loss_mask: 1.6126  decode.d4.loss_dice: 1.5166  decode.d5.loss_cls: 0.3990  decode.d5.loss_mask: 1.5248  decode.d5.loss_dice: 1.4445  decode.d6.loss_cls: 0.4848  decode.d6.loss_mask: 1.5758  decode.d6.loss_dice: 1.3989  decode.d7.loss_cls: 0.4402  decode.d7.loss_mask: 1.6194  decode.d7.loss_dice: 1.4248  decode.d8.loss_cls: 0.4932  decode.d8.loss_mask: 1.5804  decode.d8.loss_dice: 1.3701  mix_decode.loss_cls: 0.1533  mix_decode.loss_mask: 0.5405  mix_decode.loss_dice: 0.8359  mix_decode.d0.loss_cls: 0.2276  mix_decode.d0.loss_mask: 0.5176  mix_decode.d0.loss_dice: 0.8726  mix_decode.d1.loss_cls: 0.2356  mix_decode.d1.loss_mask: 0.5009  mix_decode.d1.loss_dice: 0.7950  mix_decode.d2.loss_cls: 0.1993  mix_decode.d2.loss_mask: 0.4997  mix_decode.d2.loss_dice: 0.8009  mix_decode.d3.loss_cls: 0.1893  mix_decode.d3.loss_mask: 0.5203  mix_decode.d3.loss_dice: 0.8149  mix_decode.d4.loss_cls: 0.1928  mix_decode.d4.loss_mask: 0.5362  mix_decode.d4.loss_dice: 0.8210  mix_decode.d5.loss_cls: 0.2052  mix_decode.d5.loss_mask: 0.5212  mix_decode.d5.loss_dice: 0.8186  mix_decode.d6.loss_cls: 0.2100  mix_decode.d6.loss_mask: 0.5014  mix_decode.d6.loss_dice: 0.8015  mix_decode.d7.loss_cls: 0.2237  mix_decode.d7.loss_mask: 0.5228  mix_decode.d7.loss_dice: 0.8090  mix_decode.d8.loss_cls: 0.1947  mix_decode.d8.loss_mask: 0.5140  mix_decode.d8.loss_dice: 0.8153
2025/03/28 22:15:40 - mmengine - INFO - Iter(train) [11050/20000]  base_lr: 4.8499e-05 lr: 4.8499e-05  eta: 4:01:48  time: 1.8526  data_time: 0.0257  memory: 10761  loss: 49.7738  decode.loss_cls: 0.4967  decode.loss_mask: 1.3188  decode.loss_dice: 1.5735  decode.d0.loss_cls: 0.4584  decode.d0.loss_mask: 1.2988  decode.d0.loss_dice: 1.6378  decode.d1.loss_cls: 0.3972  decode.d1.loss_mask: 1.3132  decode.d1.loss_dice: 1.6353  decode.d2.loss_cls: 0.4256  decode.d2.loss_mask: 1.2961  decode.d2.loss_dice: 1.5623  decode.d3.loss_cls: 0.4296  decode.d3.loss_mask: 1.3042  decode.d3.loss_dice: 1.5924  decode.d4.loss_cls: 0.3929  decode.d4.loss_mask: 1.3132  decode.d4.loss_dice: 1.6370  decode.d5.loss_cls: 0.4605  decode.d5.loss_mask: 1.3227  decode.d5.loss_dice: 1.6198  decode.d6.loss_cls: 0.4948  decode.d6.loss_mask: 1.3405  decode.d6.loss_dice: 1.5897  decode.d7.loss_cls: 0.5318  decode.d7.loss_mask: 1.2611  decode.d7.loss_dice: 1.6090  decode.d8.loss_cls: 0.4862  decode.d8.loss_mask: 1.2940  decode.d8.loss_dice: 1.6088  mix_decode.loss_cls: 0.2381  mix_decode.loss_mask: 0.5600  mix_decode.loss_dice: 0.7964  mix_decode.d0.loss_cls: 0.2415  mix_decode.d0.loss_mask: 0.5589  mix_decode.d0.loss_dice: 0.8413  mix_decode.d1.loss_cls: 0.1834  mix_decode.d1.loss_mask: 0.5681  mix_decode.d1.loss_dice: 0.8297  mix_decode.d2.loss_cls: 0.2307  mix_decode.d2.loss_mask: 0.5614  mix_decode.d2.loss_dice: 0.8152  mix_decode.d3.loss_cls: 0.2140  mix_decode.d3.loss_mask: 0.5846  mix_decode.d3.loss_dice: 0.8112  mix_decode.d4.loss_cls: 0.1943  mix_decode.d4.loss_mask: 0.5861  mix_decode.d4.loss_dice: 0.8314  mix_decode.d5.loss_cls: 0.2594  mix_decode.d5.loss_mask: 0.5531  mix_decode.d5.loss_dice: 0.7936  mix_decode.d6.loss_cls: 0.2898  mix_decode.d6.loss_mask: 0.5507  mix_decode.d6.loss_dice: 0.8004  mix_decode.d7.loss_cls: 0.2133  mix_decode.d7.loss_mask: 0.5779  mix_decode.d7.loss_dice: 0.8142  mix_decode.d8.loss_cls: 0.2107  mix_decode.d8.loss_mask: 0.5668  mix_decode.d8.loss_dice: 0.7961
2025/03/28 22:17:16 - mmengine - INFO - Iter(train) [11100/20000]  base_lr: 4.8255e-05 lr: 4.8255e-05  eta: 4:00:39  time: 1.8745  data_time: 0.0246  memory: 10761  loss: 52.9910  decode.loss_cls: 0.6567  decode.loss_mask: 1.5060  decode.loss_dice: 1.5577  decode.d0.loss_cls: 0.7439  decode.d0.loss_mask: 1.5126  decode.d0.loss_dice: 1.6276  decode.d1.loss_cls: 0.6439  decode.d1.loss_mask: 1.3999  decode.d1.loss_dice: 1.4782  decode.d2.loss_cls: 0.6216  decode.d2.loss_mask: 1.4822  decode.d2.loss_dice: 1.4652  decode.d3.loss_cls: 0.6747  decode.d3.loss_mask: 1.5005  decode.d3.loss_dice: 1.4773  decode.d4.loss_cls: 0.7444  decode.d4.loss_mask: 1.3996  decode.d4.loss_dice: 1.4786  decode.d5.loss_cls: 0.6683  decode.d5.loss_mask: 1.4327  decode.d5.loss_dice: 1.4682  decode.d6.loss_cls: 0.7904  decode.d6.loss_mask: 1.3994  decode.d6.loss_dice: 1.4481  decode.d7.loss_cls: 0.7292  decode.d7.loss_mask: 1.4293  decode.d7.loss_dice: 1.4906  decode.d8.loss_cls: 0.6657  decode.d8.loss_mask: 1.5324  decode.d8.loss_dice: 1.5184  mix_decode.loss_cls: 0.3184  mix_decode.loss_mask: 0.4806  mix_decode.loss_dice: 0.8518  mix_decode.d0.loss_cls: 0.2974  mix_decode.d0.loss_mask: 0.4956  mix_decode.d0.loss_dice: 0.8860  mix_decode.d1.loss_cls: 0.2790  mix_decode.d1.loss_mask: 0.4815  mix_decode.d1.loss_dice: 0.8314  mix_decode.d2.loss_cls: 0.2792  mix_decode.d2.loss_mask: 0.4978  mix_decode.d2.loss_dice: 0.8498  mix_decode.d3.loss_cls: 0.3258  mix_decode.d3.loss_mask: 0.4804  mix_decode.d3.loss_dice: 0.8282  mix_decode.d4.loss_cls: 0.3332  mix_decode.d4.loss_mask: 0.4831  mix_decode.d4.loss_dice: 0.8399  mix_decode.d5.loss_cls: 0.3763  mix_decode.d5.loss_mask: 0.4677  mix_decode.d5.loss_dice: 0.7985  mix_decode.d6.loss_cls: 0.3225  mix_decode.d6.loss_mask: 0.4935  mix_decode.d6.loss_dice: 0.8322  mix_decode.d7.loss_cls: 0.3139  mix_decode.d7.loss_mask: 0.4836  mix_decode.d7.loss_dice: 0.8363  mix_decode.d8.loss_cls: 0.3199  mix_decode.d8.loss_mask: 0.5084  mix_decode.d8.loss_dice: 0.8556
2025/03/28 22:18:50 - mmengine - INFO - Iter(train) [11150/20000]  base_lr: 4.8011e-05 lr: 4.8011e-05  eta: 3:59:28  time: 1.8282  data_time: 0.0229  memory: 10757  loss: 46.9358  decode.loss_cls: 0.2761  decode.loss_mask: 1.3458  decode.loss_dice: 1.5067  decode.d0.loss_cls: 0.4105  decode.d0.loss_mask: 1.3612  decode.d0.loss_dice: 1.5627  decode.d1.loss_cls: 0.3313  decode.d1.loss_mask: 1.3553  decode.d1.loss_dice: 1.5052  decode.d2.loss_cls: 0.3193  decode.d2.loss_mask: 1.3416  decode.d2.loss_dice: 1.5212  decode.d3.loss_cls: 0.3003  decode.d3.loss_mask: 1.3515  decode.d3.loss_dice: 1.5152  decode.d4.loss_cls: 0.2405  decode.d4.loss_mask: 1.3918  decode.d4.loss_dice: 1.5323  decode.d5.loss_cls: 0.2664  decode.d5.loss_mask: 1.3636  decode.d5.loss_dice: 1.4511  decode.d6.loss_cls: 0.2600  decode.d6.loss_mask: 1.3947  decode.d6.loss_dice: 1.5315  decode.d7.loss_cls: 0.2846  decode.d7.loss_mask: 1.3718  decode.d7.loss_dice: 1.5492  decode.d8.loss_cls: 0.2854  decode.d8.loss_mask: 1.3640  decode.d8.loss_dice: 1.5250  mix_decode.loss_cls: 0.2294  mix_decode.loss_mask: 0.4578  mix_decode.loss_dice: 0.8018  mix_decode.d0.loss_cls: 0.2268  mix_decode.d0.loss_mask: 0.4868  mix_decode.d0.loss_dice: 0.8571  mix_decode.d1.loss_cls: 0.2259  mix_decode.d1.loss_mask: 0.4595  mix_decode.d1.loss_dice: 0.7833  mix_decode.d2.loss_cls: 0.2236  mix_decode.d2.loss_mask: 0.4674  mix_decode.d2.loss_dice: 0.7844  mix_decode.d3.loss_cls: 0.2256  mix_decode.d3.loss_mask: 0.4668  mix_decode.d3.loss_dice: 0.8011  mix_decode.d4.loss_cls: 0.2718  mix_decode.d4.loss_mask: 0.4617  mix_decode.d4.loss_dice: 0.7895  mix_decode.d5.loss_cls: 0.2496  mix_decode.d5.loss_mask: 0.4661  mix_decode.d5.loss_dice: 0.7786  mix_decode.d6.loss_cls: 0.2873  mix_decode.d6.loss_mask: 0.4628  mix_decode.d6.loss_dice: 0.7846  mix_decode.d7.loss_cls: 0.2731  mix_decode.d7.loss_mask: 0.4731  mix_decode.d7.loss_dice: 0.8196  mix_decode.d8.loss_cls: 0.2621  mix_decode.d8.loss_mask: 0.4419  mix_decode.d8.loss_dice: 0.8013
2025/03/28 22:20:19 - mmengine - INFO - Iter(train) [11200/20000]  base_lr: 4.7767e-05 lr: 4.7767e-05  eta: 3:58:13  time: 1.8767  data_time: 0.0229  memory: 10755  loss: 56.3283  decode.loss_cls: 0.5604  decode.loss_mask: 1.5260  decode.loss_dice: 1.6778  decode.d0.loss_cls: 0.7345  decode.d0.loss_mask: 1.5549  decode.d0.loss_dice: 1.6732  decode.d1.loss_cls: 0.4997  decode.d1.loss_mask: 1.5311  decode.d1.loss_dice: 1.6758  decode.d2.loss_cls: 0.5287  decode.d2.loss_mask: 1.5329  decode.d2.loss_dice: 1.6535  decode.d3.loss_cls: 0.5421  decode.d3.loss_mask: 1.4911  decode.d3.loss_dice: 1.6104  decode.d4.loss_cls: 0.4754  decode.d4.loss_mask: 1.5999  decode.d4.loss_dice: 1.6988  decode.d5.loss_cls: 0.4651  decode.d5.loss_mask: 1.5473  decode.d5.loss_dice: 1.7530  decode.d6.loss_cls: 0.5790  decode.d6.loss_mask: 1.4661  decode.d6.loss_dice: 1.6445  decode.d7.loss_cls: 0.6776  decode.d7.loss_mask: 1.4488  decode.d7.loss_dice: 1.6162  decode.d8.loss_cls: 0.6523  decode.d8.loss_mask: 1.5020  decode.d8.loss_dice: 1.6664  mix_decode.loss_cls: 0.3452  mix_decode.loss_mask: 0.6156  mix_decode.loss_dice: 0.8936  mix_decode.d0.loss_cls: 0.4004  mix_decode.d0.loss_mask: 0.6215  mix_decode.d0.loss_dice: 0.9123  mix_decode.d1.loss_cls: 0.3680  mix_decode.d1.loss_mask: 0.6277  mix_decode.d1.loss_dice: 0.8971  mix_decode.d2.loss_cls: 0.3739  mix_decode.d2.loss_mask: 0.5941  mix_decode.d2.loss_dice: 0.8868  mix_decode.d3.loss_cls: 0.3690  mix_decode.d3.loss_mask: 0.6013  mix_decode.d3.loss_dice: 0.8395  mix_decode.d4.loss_cls: 0.3530  mix_decode.d4.loss_mask: 0.6609  mix_decode.d4.loss_dice: 0.9046  mix_decode.d5.loss_cls: 0.3439  mix_decode.d5.loss_mask: 0.6048  mix_decode.d5.loss_dice: 0.8640  mix_decode.d6.loss_cls: 0.3855  mix_decode.d6.loss_mask: 0.6179  mix_decode.d6.loss_dice: 0.9072  mix_decode.d7.loss_cls: 0.3732  mix_decode.d7.loss_mask: 0.6106  mix_decode.d7.loss_dice: 0.8979  mix_decode.d8.loss_cls: 0.4215  mix_decode.d8.loss_mask: 0.5857  mix_decode.d8.loss_dice: 0.8668
2025/03/28 22:21:54 - mmengine - INFO - Iter(train) [11250/20000]  base_lr: 4.7523e-05 lr: 4.7523e-05  eta: 3:57:03  time: 1.8906  data_time: 0.0247  memory: 10760  loss: 44.4089  decode.loss_cls: 0.3840  decode.loss_mask: 1.0591  decode.loss_dice: 1.4364  decode.d0.loss_cls: 0.4653  decode.d0.loss_mask: 1.0284  decode.d0.loss_dice: 1.5308  decode.d1.loss_cls: 0.3558  decode.d1.loss_mask: 1.0223  decode.d1.loss_dice: 1.4960  decode.d2.loss_cls: 0.3458  decode.d2.loss_mask: 0.9884  decode.d2.loss_dice: 1.4498  decode.d3.loss_cls: 0.4115  decode.d3.loss_mask: 0.9764  decode.d3.loss_dice: 1.4687  decode.d4.loss_cls: 0.3214  decode.d4.loss_mask: 0.9826  decode.d4.loss_dice: 1.5273  decode.d5.loss_cls: 0.3155  decode.d5.loss_mask: 1.0011  decode.d5.loss_dice: 1.5400  decode.d6.loss_cls: 0.3033  decode.d6.loss_mask: 1.0051  decode.d6.loss_dice: 1.4736  decode.d7.loss_cls: 0.4066  decode.d7.loss_mask: 0.9935  decode.d7.loss_dice: 1.4151  decode.d8.loss_cls: 0.3877  decode.d8.loss_mask: 1.0377  decode.d8.loss_dice: 1.4312  mix_decode.loss_cls: 0.3385  mix_decode.loss_mask: 0.4468  mix_decode.loss_dice: 0.7848  mix_decode.d0.loss_cls: 0.2903  mix_decode.d0.loss_mask: 0.4381  mix_decode.d0.loss_dice: 0.8891  mix_decode.d1.loss_cls: 0.3411  mix_decode.d1.loss_mask: 0.4528  mix_decode.d1.loss_dice: 0.8040  mix_decode.d2.loss_cls: 0.3695  mix_decode.d2.loss_mask: 0.4331  mix_decode.d2.loss_dice: 0.7663  mix_decode.d3.loss_cls: 0.3323  mix_decode.d3.loss_mask: 0.4127  mix_decode.d3.loss_dice: 0.7744  mix_decode.d4.loss_cls: 0.3732  mix_decode.d4.loss_mask: 0.4140  mix_decode.d4.loss_dice: 0.7919  mix_decode.d5.loss_cls: 0.4066  mix_decode.d5.loss_mask: 0.4122  mix_decode.d5.loss_dice: 0.7971  mix_decode.d6.loss_cls: 0.4189  mix_decode.d6.loss_mask: 0.4368  mix_decode.d6.loss_dice: 0.7849  mix_decode.d7.loss_cls: 0.3042  mix_decode.d7.loss_mask: 0.4481  mix_decode.d7.loss_dice: 0.8086  mix_decode.d8.loss_cls: 0.3515  mix_decode.d8.loss_mask: 0.4291  mix_decode.d8.loss_dice: 0.7974
2025/03/28 22:23:29 - mmengine - INFO - Iter(train) [11300/20000]  base_lr: 4.7278e-05 lr: 4.7278e-05  eta: 3:55:52  time: 1.9512  data_time: 0.0243  memory: 10756  loss: 46.9797  decode.loss_cls: 0.5286  decode.loss_mask: 1.0779  decode.loss_dice: 1.5796  decode.d0.loss_cls: 0.5160  decode.d0.loss_mask: 1.1116  decode.d0.loss_dice: 1.6322  decode.d1.loss_cls: 0.5293  decode.d1.loss_mask: 1.0744  decode.d1.loss_dice: 1.5503  decode.d2.loss_cls: 0.5100  decode.d2.loss_mask: 1.0617  decode.d2.loss_dice: 1.5600  decode.d3.loss_cls: 0.6018  decode.d3.loss_mask: 1.0699  decode.d3.loss_dice: 1.5936  decode.d4.loss_cls: 0.4628  decode.d4.loss_mask: 1.1326  decode.d4.loss_dice: 1.6741  decode.d5.loss_cls: 0.6142  decode.d5.loss_mask: 1.0530  decode.d5.loss_dice: 1.6196  decode.d6.loss_cls: 0.5537  decode.d6.loss_mask: 1.1036  decode.d6.loss_dice: 1.5541  decode.d7.loss_cls: 0.5714  decode.d7.loss_mask: 1.1062  decode.d7.loss_dice: 1.6287  decode.d8.loss_cls: 0.5866  decode.d8.loss_mask: 1.1298  decode.d8.loss_dice: 1.5753  mix_decode.loss_cls: 0.1642  mix_decode.loss_mask: 0.4851  mix_decode.loss_dice: 0.7837  mix_decode.d0.loss_cls: 0.2427  mix_decode.d0.loss_mask: 0.4757  mix_decode.d0.loss_dice: 0.8458  mix_decode.d1.loss_cls: 0.2056  mix_decode.d1.loss_mask: 0.4868  mix_decode.d1.loss_dice: 0.7685  mix_decode.d2.loss_cls: 0.1910  mix_decode.d2.loss_mask: 0.4922  mix_decode.d2.loss_dice: 0.7593  mix_decode.d3.loss_cls: 0.1857  mix_decode.d3.loss_mask: 0.4655  mix_decode.d3.loss_dice: 0.7646  mix_decode.d4.loss_cls: 0.2429  mix_decode.d4.loss_mask: 0.4747  mix_decode.d4.loss_dice: 0.7560  mix_decode.d5.loss_cls: 0.2701  mix_decode.d5.loss_mask: 0.4684  mix_decode.d5.loss_dice: 0.7653  mix_decode.d6.loss_cls: 0.1933  mix_decode.d6.loss_mask: 0.4831  mix_decode.d6.loss_dice: 0.7676  mix_decode.d7.loss_cls: 0.1707  mix_decode.d7.loss_mask: 0.4939  mix_decode.d7.loss_dice: 0.7854  mix_decode.d8.loss_cls: 0.1690  mix_decode.d8.loss_mask: 0.4804  mix_decode.d8.loss_dice: 0.7799
2025/03/28 22:25:06 - mmengine - INFO - Iter(train) [11350/20000]  base_lr: 4.7033e-05 lr: 4.7033e-05  eta: 3:54:42  time: 1.9448  data_time: 0.0277  memory: 10744  loss: 52.1548  decode.loss_cls: 0.3927  decode.loss_mask: 1.7057  decode.loss_dice: 1.5482  decode.d0.loss_cls: 0.5811  decode.d0.loss_mask: 1.5595  decode.d0.loss_dice: 1.5225  decode.d1.loss_cls: 0.3434  decode.d1.loss_mask: 1.5915  decode.d1.loss_dice: 1.5300  decode.d2.loss_cls: 0.4458  decode.d2.loss_mask: 1.5558  decode.d2.loss_dice: 1.4971  decode.d3.loss_cls: 0.4951  decode.d3.loss_mask: 1.5014  decode.d3.loss_dice: 1.4668  decode.d4.loss_cls: 0.3909  decode.d4.loss_mask: 1.5270  decode.d4.loss_dice: 1.4856  decode.d5.loss_cls: 0.5020  decode.d5.loss_mask: 1.5350  decode.d5.loss_dice: 1.4585  decode.d6.loss_cls: 0.4644  decode.d6.loss_mask: 1.5642  decode.d6.loss_dice: 1.5078  decode.d7.loss_cls: 0.4097  decode.d7.loss_mask: 1.5877  decode.d7.loss_dice: 1.5158  decode.d8.loss_cls: 0.3788  decode.d8.loss_mask: 1.6098  decode.d8.loss_dice: 1.5374  mix_decode.loss_cls: 0.2252  mix_decode.loss_mask: 0.7156  mix_decode.loss_dice: 0.7344  mix_decode.d0.loss_cls: 0.2612  mix_decode.d0.loss_mask: 0.6963  mix_decode.d0.loss_dice: 0.7153  mix_decode.d1.loss_cls: 0.2449  mix_decode.d1.loss_mask: 0.7173  mix_decode.d1.loss_dice: 0.7194  mix_decode.d2.loss_cls: 0.2232  mix_decode.d2.loss_mask: 0.7364  mix_decode.d2.loss_dice: 0.7300  mix_decode.d3.loss_cls: 0.2273  mix_decode.d3.loss_mask: 0.7791  mix_decode.d3.loss_dice: 0.7398  mix_decode.d4.loss_cls: 0.2162  mix_decode.d4.loss_mask: 0.7509  mix_decode.d4.loss_dice: 0.7252  mix_decode.d5.loss_cls: 0.2530  mix_decode.d5.loss_mask: 0.7660  mix_decode.d5.loss_dice: 0.7160  mix_decode.d6.loss_cls: 0.2182  mix_decode.d6.loss_mask: 0.7396  mix_decode.d6.loss_dice: 0.7347  mix_decode.d7.loss_cls: 0.2227  mix_decode.d7.loss_mask: 0.7392  mix_decode.d7.loss_dice: 0.7170  mix_decode.d8.loss_cls: 0.1920  mix_decode.d8.loss_mask: 0.7612  mix_decode.d8.loss_dice: 0.7261
2025/03/28 22:26:41 - mmengine - INFO - Iter(train) [11400/20000]  base_lr: 4.6789e-05 lr: 4.6789e-05  eta: 3:53:31  time: 1.9022  data_time: 0.0251  memory: 10753  loss: 47.7379  decode.loss_cls: 0.5170  decode.loss_mask: 1.3911  decode.loss_dice: 1.3814  decode.d0.loss_cls: 0.5515  decode.d0.loss_mask: 1.4242  decode.d0.loss_dice: 1.4961  decode.d1.loss_cls: 0.4743  decode.d1.loss_mask: 1.3364  decode.d1.loss_dice: 1.3386  decode.d2.loss_cls: 0.5493  decode.d2.loss_mask: 1.3057  decode.d2.loss_dice: 1.2840  decode.d3.loss_cls: 0.4929  decode.d3.loss_mask: 1.3417  decode.d3.loss_dice: 1.3047  decode.d4.loss_cls: 0.5209  decode.d4.loss_mask: 1.3825  decode.d4.loss_dice: 1.3725  decode.d5.loss_cls: 0.5638  decode.d5.loss_mask: 1.3110  decode.d5.loss_dice: 1.3250  decode.d6.loss_cls: 0.5104  decode.d6.loss_mask: 1.3120  decode.d6.loss_dice: 1.3163  decode.d7.loss_cls: 0.6038  decode.d7.loss_mask: 1.3132  decode.d7.loss_dice: 1.2813  decode.d8.loss_cls: 0.5487  decode.d8.loss_mask: 1.3411  decode.d8.loss_dice: 1.3019  mix_decode.loss_cls: 0.2119  mix_decode.loss_mask: 0.4916  mix_decode.loss_dice: 0.7934  mix_decode.d0.loss_cls: 0.2772  mix_decode.d0.loss_mask: 0.5183  mix_decode.d0.loss_dice: 0.8514  mix_decode.d1.loss_cls: 0.2592  mix_decode.d1.loss_mask: 0.5177  mix_decode.d1.loss_dice: 0.7779  mix_decode.d2.loss_cls: 0.2940  mix_decode.d2.loss_mask: 0.4881  mix_decode.d2.loss_dice: 0.7633  mix_decode.d3.loss_cls: 0.3062  mix_decode.d3.loss_mask: 0.5049  mix_decode.d3.loss_dice: 0.7816  mix_decode.d4.loss_cls: 0.3576  mix_decode.d4.loss_mask: 0.4707  mix_decode.d4.loss_dice: 0.7267  mix_decode.d5.loss_cls: 0.3476  mix_decode.d5.loss_mask: 0.4694  mix_decode.d5.loss_dice: 0.7411  mix_decode.d6.loss_cls: 0.3006  mix_decode.d6.loss_mask: 0.4975  mix_decode.d6.loss_dice: 0.7725  mix_decode.d7.loss_cls: 0.3041  mix_decode.d7.loss_mask: 0.4647  mix_decode.d7.loss_dice: 0.7447  mix_decode.d8.loss_cls: 0.2594  mix_decode.d8.loss_mask: 0.4882  mix_decode.d8.loss_dice: 0.7636
2025/03/28 22:28:15 - mmengine - INFO - Iter(train) [11450/20000]  base_lr: 4.6544e-05 lr: 4.6544e-05  eta: 3:52:19  time: 1.9906  data_time: 0.0276  memory: 10734  loss: 62.9261  decode.loss_cls: 0.5936  decode.loss_mask: 1.8983  decode.loss_dice: 1.8749  decode.d0.loss_cls: 0.8152  decode.d0.loss_mask: 1.7508  decode.d0.loss_dice: 2.0067  decode.d1.loss_cls: 0.7963  decode.d1.loss_mask: 1.7451  decode.d1.loss_dice: 1.8103  decode.d2.loss_cls: 0.6378  decode.d2.loss_mask: 1.8625  decode.d2.loss_dice: 1.8556  decode.d3.loss_cls: 0.7120  decode.d3.loss_mask: 1.8159  decode.d3.loss_dice: 1.8337  decode.d4.loss_cls: 0.6526  decode.d4.loss_mask: 1.8555  decode.d4.loss_dice: 1.9124  decode.d5.loss_cls: 0.7199  decode.d5.loss_mask: 1.8259  decode.d5.loss_dice: 1.8157  decode.d6.loss_cls: 0.6277  decode.d6.loss_mask: 1.7868  decode.d6.loss_dice: 1.8765  decode.d7.loss_cls: 0.5534  decode.d7.loss_mask: 1.8360  decode.d7.loss_dice: 1.8833  decode.d8.loss_cls: 0.6949  decode.d8.loss_mask: 1.7714  decode.d8.loss_dice: 1.8363  mix_decode.loss_cls: 0.3611  mix_decode.loss_mask: 0.6917  mix_decode.loss_dice: 0.8507  mix_decode.d0.loss_cls: 0.3681  mix_decode.d0.loss_mask: 0.6783  mix_decode.d0.loss_dice: 0.9303  mix_decode.d1.loss_cls: 0.3534  mix_decode.d1.loss_mask: 0.7154  mix_decode.d1.loss_dice: 0.8500  mix_decode.d2.loss_cls: 0.3337  mix_decode.d2.loss_mask: 0.6823  mix_decode.d2.loss_dice: 0.8227  mix_decode.d3.loss_cls: 0.3489  mix_decode.d3.loss_mask: 0.7241  mix_decode.d3.loss_dice: 0.8750  mix_decode.d4.loss_cls: 0.3578  mix_decode.d4.loss_mask: 0.6958  mix_decode.d4.loss_dice: 0.8819  mix_decode.d5.loss_cls: 0.3323  mix_decode.d5.loss_mask: 0.7307  mix_decode.d5.loss_dice: 0.8837  mix_decode.d6.loss_cls: 0.3802  mix_decode.d6.loss_mask: 0.6772  mix_decode.d6.loss_dice: 0.8740  mix_decode.d7.loss_cls: 0.3468  mix_decode.d7.loss_mask: 0.7354  mix_decode.d7.loss_dice: 0.8686  mix_decode.d8.loss_cls: 0.3587  mix_decode.d8.loss_mask: 0.7125  mix_decode.d8.loss_dice: 0.8480
2025/03/28 22:29:50 - mmengine - INFO - Iter(train) [11500/20000]  base_lr: 4.6299e-05 lr: 4.6299e-05  eta: 3:51:08  time: 1.8726  data_time: 0.0234  memory: 10753  loss: 46.5055  decode.loss_cls: 0.4456  decode.loss_mask: 1.2082  decode.loss_dice: 1.5061  decode.d0.loss_cls: 0.5216  decode.d0.loss_mask: 1.2668  decode.d0.loss_dice: 1.6524  decode.d1.loss_cls: 0.4903  decode.d1.loss_mask: 1.2008  decode.d1.loss_dice: 1.5564  decode.d2.loss_cls: 0.4874  decode.d2.loss_mask: 1.2018  decode.d2.loss_dice: 1.4802  decode.d3.loss_cls: 0.4981  decode.d3.loss_mask: 1.1906  decode.d3.loss_dice: 1.4659  decode.d4.loss_cls: 0.5946  decode.d4.loss_mask: 1.1844  decode.d4.loss_dice: 1.4598  decode.d5.loss_cls: 0.5182  decode.d5.loss_mask: 1.1945  decode.d5.loss_dice: 1.5022  decode.d6.loss_cls: 0.5262  decode.d6.loss_mask: 1.1583  decode.d6.loss_dice: 1.4767  decode.d7.loss_cls: 0.5627  decode.d7.loss_mask: 1.1831  decode.d7.loss_dice: 1.4952  decode.d8.loss_cls: 0.4340  decode.d8.loss_mask: 1.2456  decode.d8.loss_dice: 1.5200  mix_decode.loss_cls: 0.3109  mix_decode.loss_mask: 0.4511  mix_decode.loss_dice: 0.6796  mix_decode.d0.loss_cls: 0.2397  mix_decode.d0.loss_mask: 0.4510  mix_decode.d0.loss_dice: 0.7408  mix_decode.d1.loss_cls: 0.3126  mix_decode.d1.loss_mask: 0.4463  mix_decode.d1.loss_dice: 0.6788  mix_decode.d2.loss_cls: 0.2599  mix_decode.d2.loss_mask: 0.4634  mix_decode.d2.loss_dice: 0.6813  mix_decode.d3.loss_cls: 0.2544  mix_decode.d3.loss_mask: 0.4499  mix_decode.d3.loss_dice: 0.6803  mix_decode.d4.loss_cls: 0.3065  mix_decode.d4.loss_mask: 0.4397  mix_decode.d4.loss_dice: 0.6438  mix_decode.d5.loss_cls: 0.2855  mix_decode.d5.loss_mask: 0.4318  mix_decode.d5.loss_dice: 0.6469  mix_decode.d6.loss_cls: 0.3108  mix_decode.d6.loss_mask: 0.4640  mix_decode.d6.loss_dice: 0.6979  mix_decode.d7.loss_cls: 0.3312  mix_decode.d7.loss_mask: 0.4458  mix_decode.d7.loss_dice: 0.6884  mix_decode.d8.loss_cls: 0.3215  mix_decode.d8.loss_mask: 0.4722  mix_decode.d8.loss_dice: 0.6920
2025/03/28 22:31:24 - mmengine - INFO - Iter(train) [11550/20000]  base_lr: 4.6054e-05 lr: 4.6054e-05  eta: 3:49:55  time: 1.8516  data_time: 0.0249  memory: 10750  loss: 47.4404  decode.loss_cls: 0.5550  decode.loss_mask: 1.2945  decode.loss_dice: 1.5630  decode.d0.loss_cls: 0.5457  decode.d0.loss_mask: 1.3208  decode.d0.loss_dice: 1.6072  decode.d1.loss_cls: 0.5633  decode.d1.loss_mask: 1.2469  decode.d1.loss_dice: 1.4673  decode.d2.loss_cls: 0.5231  decode.d2.loss_mask: 1.2976  decode.d2.loss_dice: 1.5356  decode.d3.loss_cls: 0.4930  decode.d3.loss_mask: 1.3145  decode.d3.loss_dice: 1.5545  decode.d4.loss_cls: 0.5729  decode.d4.loss_mask: 1.3168  decode.d4.loss_dice: 1.5408  decode.d5.loss_cls: 0.4996  decode.d5.loss_mask: 1.3112  decode.d5.loss_dice: 1.5454  decode.d6.loss_cls: 0.5909  decode.d6.loss_mask: 1.2914  decode.d6.loss_dice: 1.5408  decode.d7.loss_cls: 0.5569  decode.d7.loss_mask: 1.3044  decode.d7.loss_dice: 1.5505  decode.d8.loss_cls: 0.5419  decode.d8.loss_mask: 1.3474  decode.d8.loss_dice: 1.5286  mix_decode.loss_cls: 0.1900  mix_decode.loss_mask: 0.4998  mix_decode.loss_dice: 0.6678  mix_decode.d0.loss_cls: 0.1896  mix_decode.d0.loss_mask: 0.5182  mix_decode.d0.loss_dice: 0.6985  mix_decode.d1.loss_cls: 0.1416  mix_decode.d1.loss_mask: 0.5179  mix_decode.d1.loss_dice: 0.6473  mix_decode.d2.loss_cls: 0.1148  mix_decode.d2.loss_mask: 0.5307  mix_decode.d2.loss_dice: 0.6659  mix_decode.d3.loss_cls: 0.2216  mix_decode.d3.loss_mask: 0.5054  mix_decode.d3.loss_dice: 0.6250  mix_decode.d4.loss_cls: 0.2371  mix_decode.d4.loss_mask: 0.5101  mix_decode.d4.loss_dice: 0.6337  mix_decode.d5.loss_cls: 0.1985  mix_decode.d5.loss_mask: 0.5210  mix_decode.d5.loss_dice: 0.6919  mix_decode.d6.loss_cls: 0.1899  mix_decode.d6.loss_mask: 0.5280  mix_decode.d6.loss_dice: 0.6365  mix_decode.d7.loss_cls: 0.1714  mix_decode.d7.loss_mask: 0.5168  mix_decode.d7.loss_dice: 0.6399  mix_decode.d8.loss_cls: 0.1453  mix_decode.d8.loss_mask: 0.5114  mix_decode.d8.loss_dice: 0.6532
2025/03/28 22:32:59 - mmengine - INFO - Iter(train) [11600/20000]  base_lr: 4.5808e-05 lr: 4.5808e-05  eta: 3:48:43  time: 1.9559  data_time: 0.0253  memory: 10754  loss: 57.3846  decode.loss_cls: 0.6815  decode.loss_mask: 1.5179  decode.loss_dice: 1.7429  decode.d0.loss_cls: 0.5670  decode.d0.loss_mask: 1.4229  decode.d0.loss_dice: 1.8077  decode.d1.loss_cls: 0.5513  decode.d1.loss_mask: 1.4051  decode.d1.loss_dice: 1.7514  decode.d2.loss_cls: 0.6212  decode.d2.loss_mask: 1.4480  decode.d2.loss_dice: 1.7347  decode.d3.loss_cls: 0.6614  decode.d3.loss_mask: 1.4756  decode.d3.loss_dice: 1.7362  decode.d4.loss_cls: 0.6174  decode.d4.loss_mask: 1.4525  decode.d4.loss_dice: 1.7439  decode.d5.loss_cls: 0.6410  decode.d5.loss_mask: 1.4509  decode.d5.loss_dice: 1.6967  decode.d6.loss_cls: 0.6696  decode.d6.loss_mask: 1.4289  decode.d6.loss_dice: 1.7250  decode.d7.loss_cls: 0.7058  decode.d7.loss_mask: 1.4598  decode.d7.loss_dice: 1.7488  decode.d8.loss_cls: 0.7375  decode.d8.loss_mask: 1.4745  decode.d8.loss_dice: 1.7403  mix_decode.loss_cls: 0.4383  mix_decode.loss_mask: 0.5495  mix_decode.loss_dice: 0.9160  mix_decode.d0.loss_cls: 0.3201  mix_decode.d0.loss_mask: 0.5391  mix_decode.d0.loss_dice: 1.0424  mix_decode.d1.loss_cls: 0.4461  mix_decode.d1.loss_mask: 0.5699  mix_decode.d1.loss_dice: 0.9185  mix_decode.d2.loss_cls: 0.4350  mix_decode.d2.loss_mask: 0.5379  mix_decode.d2.loss_dice: 0.9143  mix_decode.d3.loss_cls: 0.4035  mix_decode.d3.loss_mask: 0.5633  mix_decode.d3.loss_dice: 0.9134  mix_decode.d4.loss_cls: 0.4132  mix_decode.d4.loss_mask: 0.5435  mix_decode.d4.loss_dice: 0.9289  mix_decode.d5.loss_cls: 0.4092  mix_decode.d5.loss_mask: 0.5351  mix_decode.d5.loss_dice: 0.9213  mix_decode.d6.loss_cls: 0.4101  mix_decode.d6.loss_mask: 0.5138  mix_decode.d6.loss_dice: 0.9311  mix_decode.d7.loss_cls: 0.3998  mix_decode.d7.loss_mask: 0.5681  mix_decode.d7.loss_dice: 0.9425  mix_decode.d8.loss_cls: 0.4164  mix_decode.d8.loss_mask: 0.5753  mix_decode.d8.loss_dice: 0.9518
2025/03/28 22:34:34 - mmengine - INFO - Iter(train) [11650/20000]  base_lr: 4.5563e-05 lr: 4.5563e-05  eta: 3:47:31  time: 1.8357  data_time: 0.0231  memory: 10740  loss: 49.6041  decode.loss_cls: 0.3726  decode.loss_mask: 1.6981  decode.loss_dice: 1.4242  decode.d0.loss_cls: 0.5726  decode.d0.loss_mask: 1.7593  decode.d0.loss_dice: 1.4534  decode.d1.loss_cls: 0.4507  decode.d1.loss_mask: 1.7149  decode.d1.loss_dice: 1.4563  decode.d2.loss_cls: 0.4389  decode.d2.loss_mask: 1.7110  decode.d2.loss_dice: 1.4573  decode.d3.loss_cls: 0.3368  decode.d3.loss_mask: 1.7604  decode.d3.loss_dice: 1.4589  decode.d4.loss_cls: 0.3407  decode.d4.loss_mask: 1.6697  decode.d4.loss_dice: 1.4602  decode.d5.loss_cls: 0.3676  decode.d5.loss_mask: 1.7780  decode.d5.loss_dice: 1.4759  decode.d6.loss_cls: 0.3695  decode.d6.loss_mask: 1.7211  decode.d6.loss_dice: 1.4477  decode.d7.loss_cls: 0.3711  decode.d7.loss_mask: 1.7641  decode.d7.loss_dice: 1.4947  decode.d8.loss_cls: 0.4331  decode.d8.loss_mask: 1.6760  decode.d8.loss_dice: 1.4829  mix_decode.loss_cls: 0.2246  mix_decode.loss_mask: 0.5625  mix_decode.loss_dice: 0.5963  mix_decode.d0.loss_cls: 0.2444  mix_decode.d0.loss_mask: 0.5602  mix_decode.d0.loss_dice: 0.6359  mix_decode.d1.loss_cls: 0.2021  mix_decode.d1.loss_mask: 0.5665  mix_decode.d1.loss_dice: 0.6007  mix_decode.d2.loss_cls: 0.2350  mix_decode.d2.loss_mask: 0.5558  mix_decode.d2.loss_dice: 0.5683  mix_decode.d3.loss_cls: 0.2040  mix_decode.d3.loss_mask: 0.5584  mix_decode.d3.loss_dice: 0.5906  mix_decode.d4.loss_cls: 0.1978  mix_decode.d4.loss_mask: 0.5586  mix_decode.d4.loss_dice: 0.6072  mix_decode.d5.loss_cls: 0.1955  mix_decode.d5.loss_mask: 0.5613  mix_decode.d5.loss_dice: 0.6027  mix_decode.d6.loss_cls: 0.2088  mix_decode.d6.loss_mask: 0.5582  mix_decode.d6.loss_dice: 0.5969  mix_decode.d7.loss_cls: 0.1712  mix_decode.d7.loss_mask: 0.5542  mix_decode.d7.loss_dice: 0.6031  mix_decode.d8.loss_cls: 0.1948  mix_decode.d8.loss_mask: 0.5634  mix_decode.d8.loss_dice: 0.6073
2025/03/28 22:36:09 - mmengine - INFO - Iter(train) [11700/20000]  base_lr: 4.5317e-05 lr: 4.5317e-05  eta: 3:46:19  time: 1.9664  data_time: 0.0304  memory: 10770  loss: 51.1256  decode.loss_cls: 0.5613  decode.loss_mask: 1.4398  decode.loss_dice: 1.5666  decode.d0.loss_cls: 0.4677  decode.d0.loss_mask: 1.5380  decode.d0.loss_dice: 1.6594  decode.d1.loss_cls: 0.5568  decode.d1.loss_mask: 1.4448  decode.d1.loss_dice: 1.5333  decode.d2.loss_cls: 0.4994  decode.d2.loss_mask: 1.4979  decode.d2.loss_dice: 1.5597  decode.d3.loss_cls: 0.5792  decode.d3.loss_mask: 1.4441  decode.d3.loss_dice: 1.5342  decode.d4.loss_cls: 0.5911  decode.d4.loss_mask: 1.4719  decode.d4.loss_dice: 1.5218  decode.d5.loss_cls: 0.5036  decode.d5.loss_mask: 1.4478  decode.d5.loss_dice: 1.5472  decode.d6.loss_cls: 0.5231  decode.d6.loss_mask: 1.4498  decode.d6.loss_dice: 1.5285  decode.d7.loss_cls: 0.5995  decode.d7.loss_mask: 1.4526  decode.d7.loss_dice: 1.5156  decode.d8.loss_cls: 0.5515  decode.d8.loss_mask: 1.4797  decode.d8.loss_dice: 1.6205  mix_decode.loss_cls: 0.3069  mix_decode.loss_mask: 0.4644  mix_decode.loss_dice: 0.7554  mix_decode.d0.loss_cls: 0.2946  mix_decode.d0.loss_mask: 0.4643  mix_decode.d0.loss_dice: 0.8140  mix_decode.d1.loss_cls: 0.3429  mix_decode.d1.loss_mask: 0.4616  mix_decode.d1.loss_dice: 0.7448  mix_decode.d2.loss_cls: 0.3154  mix_decode.d2.loss_mask: 0.4658  mix_decode.d2.loss_dice: 0.7495  mix_decode.d3.loss_cls: 0.3329  mix_decode.d3.loss_mask: 0.4687  mix_decode.d3.loss_dice: 0.7539  mix_decode.d4.loss_cls: 0.3188  mix_decode.d4.loss_mask: 0.4599  mix_decode.d4.loss_dice: 0.7460  mix_decode.d5.loss_cls: 0.3433  mix_decode.d5.loss_mask: 0.4653  mix_decode.d5.loss_dice: 0.7493  mix_decode.d6.loss_cls: 0.3380  mix_decode.d6.loss_mask: 0.4572  mix_decode.d6.loss_dice: 0.7283  mix_decode.d7.loss_cls: 0.3051  mix_decode.d7.loss_mask: 0.4806  mix_decode.d7.loss_dice: 0.7629  mix_decode.d8.loss_cls: 0.3030  mix_decode.d8.loss_mask: 0.4770  mix_decode.d8.loss_dice: 0.7694
2025/03/28 22:37:42 - mmengine - INFO - Iter(train) [11750/20000]  base_lr: 4.5071e-05 lr: 4.5071e-05  eta: 3:45:05  time: 1.8585  data_time: 0.0301  memory: 10748  loss: 47.9684  decode.loss_cls: 0.4422  decode.loss_mask: 1.2379  decode.loss_dice: 1.6181  decode.d0.loss_cls: 0.5293  decode.d0.loss_mask: 1.2678  decode.d0.loss_dice: 1.6656  decode.d1.loss_cls: 0.3876  decode.d1.loss_mask: 1.2358  decode.d1.loss_dice: 1.6503  decode.d2.loss_cls: 0.4673  decode.d2.loss_mask: 1.2135  decode.d2.loss_dice: 1.6216  decode.d3.loss_cls: 0.4134  decode.d3.loss_mask: 1.2970  decode.d3.loss_dice: 1.6940  decode.d4.loss_cls: 0.4340  decode.d4.loss_mask: 1.2583  decode.d4.loss_dice: 1.6549  decode.d5.loss_cls: 0.4482  decode.d5.loss_mask: 1.2380  decode.d5.loss_dice: 1.6449  decode.d6.loss_cls: 0.3965  decode.d6.loss_mask: 1.2256  decode.d6.loss_dice: 1.6260  decode.d7.loss_cls: 0.3651  decode.d7.loss_mask: 1.2283  decode.d7.loss_dice: 1.5919  decode.d8.loss_cls: 0.4029  decode.d8.loss_mask: 1.2275  decode.d8.loss_dice: 1.6158  mix_decode.loss_cls: 0.2373  mix_decode.loss_mask: 0.5321  mix_decode.loss_dice: 0.7130  mix_decode.d0.loss_cls: 0.2555  mix_decode.d0.loss_mask: 0.5436  mix_decode.d0.loss_dice: 0.7891  mix_decode.d1.loss_cls: 0.2502  mix_decode.d1.loss_mask: 0.5158  mix_decode.d1.loss_dice: 0.7169  mix_decode.d2.loss_cls: 0.1951  mix_decode.d2.loss_mask: 0.5444  mix_decode.d2.loss_dice: 0.7014  mix_decode.d3.loss_cls: 0.2195  mix_decode.d3.loss_mask: 0.5229  mix_decode.d3.loss_dice: 0.6902  mix_decode.d4.loss_cls: 0.3017  mix_decode.d4.loss_mask: 0.5124  mix_decode.d4.loss_dice: 0.6862  mix_decode.d5.loss_cls: 0.2652  mix_decode.d5.loss_mask: 0.5209  mix_decode.d5.loss_dice: 0.6724  mix_decode.d6.loss_cls: 0.2105  mix_decode.d6.loss_mask: 0.5569  mix_decode.d6.loss_dice: 0.7204  mix_decode.d7.loss_cls: 0.2035  mix_decode.d7.loss_mask: 0.5580  mix_decode.d7.loss_dice: 0.7329  mix_decode.d8.loss_cls: 0.2246  mix_decode.d8.loss_mask: 0.5554  mix_decode.d8.loss_dice: 0.7212
2025/03/28 22:39:16 - mmengine - INFO - Iter(train) [11800/20000]  base_lr: 4.4825e-05 lr: 4.4825e-05  eta: 3:43:52  time: 1.8825  data_time: 0.0243  memory: 10747  loss: 56.0841  decode.loss_cls: 0.5495  decode.loss_mask: 1.6230  decode.loss_dice: 1.6862  decode.d0.loss_cls: 0.5463  decode.d0.loss_mask: 1.6249  decode.d0.loss_dice: 1.8573  decode.d1.loss_cls: 0.5983  decode.d1.loss_mask: 1.5865  decode.d1.loss_dice: 1.6918  decode.d2.loss_cls: 0.5724  decode.d2.loss_mask: 1.5778  decode.d2.loss_dice: 1.6124  decode.d3.loss_cls: 0.5854  decode.d3.loss_mask: 1.5994  decode.d3.loss_dice: 1.6423  decode.d4.loss_cls: 0.5331  decode.d4.loss_mask: 1.6065  decode.d4.loss_dice: 1.6291  decode.d5.loss_cls: 0.5913  decode.d5.loss_mask: 1.5637  decode.d5.loss_dice: 1.6549  decode.d6.loss_cls: 0.6774  decode.d6.loss_mask: 1.5657  decode.d6.loss_dice: 1.7260  decode.d7.loss_cls: 0.5575  decode.d7.loss_mask: 1.6881  decode.d7.loss_dice: 1.7311  decode.d8.loss_cls: 0.5558  decode.d8.loss_mask: 1.6083  decode.d8.loss_dice: 1.7160  mix_decode.loss_cls: 0.3343  mix_decode.loss_mask: 0.5369  mix_decode.loss_dice: 0.8320  mix_decode.d0.loss_cls: 0.2816  mix_decode.d0.loss_mask: 0.5481  mix_decode.d0.loss_dice: 0.9763  mix_decode.d1.loss_cls: 0.3723  mix_decode.d1.loss_mask: 0.5232  mix_decode.d1.loss_dice: 0.8260  mix_decode.d2.loss_cls: 0.3269  mix_decode.d2.loss_mask: 0.5486  mix_decode.d2.loss_dice: 0.8185  mix_decode.d3.loss_cls: 0.3177  mix_decode.d3.loss_mask: 0.5451  mix_decode.d3.loss_dice: 0.8493  mix_decode.d4.loss_cls: 0.3224  mix_decode.d4.loss_mask: 0.5566  mix_decode.d4.loss_dice: 0.8524  mix_decode.d5.loss_cls: 0.3519  mix_decode.d5.loss_mask: 0.5163  mix_decode.d5.loss_dice: 0.8336  mix_decode.d6.loss_cls: 0.3762  mix_decode.d6.loss_mask: 0.5209  mix_decode.d6.loss_dice: 0.8433  mix_decode.d7.loss_cls: 0.3863  mix_decode.d7.loss_mask: 0.5553  mix_decode.d7.loss_dice: 0.8412  mix_decode.d8.loss_cls: 0.3774  mix_decode.d8.loss_mask: 0.5295  mix_decode.d8.loss_dice: 0.8258
2025/03/28 22:40:50 - mmengine - INFO - Iter(train) [11850/20000]  base_lr: 4.4579e-05 lr: 4.4579e-05  eta: 3:42:38  time: 1.8518  data_time: 0.0235  memory: 10737  loss: 50.7146  decode.loss_cls: 0.3547  decode.loss_mask: 1.3931  decode.loss_dice: 1.5888  decode.d0.loss_cls: 0.4062  decode.d0.loss_mask: 1.3780  decode.d0.loss_dice: 1.6651  decode.d1.loss_cls: 0.4658  decode.d1.loss_mask: 1.3835  decode.d1.loss_dice: 1.6179  decode.d2.loss_cls: 0.3686  decode.d2.loss_mask: 1.4195  decode.d2.loss_dice: 1.6352  decode.d3.loss_cls: 0.3778  decode.d3.loss_mask: 1.4108  decode.d3.loss_dice: 1.6139  decode.d4.loss_cls: 0.3953  decode.d4.loss_mask: 1.3840  decode.d4.loss_dice: 1.6119  decode.d5.loss_cls: 0.4243  decode.d5.loss_mask: 1.4238  decode.d5.loss_dice: 1.6690  decode.d6.loss_cls: 0.3965  decode.d6.loss_mask: 1.4180  decode.d6.loss_dice: 1.6628  decode.d7.loss_cls: 0.4048  decode.d7.loss_mask: 1.3673  decode.d7.loss_dice: 1.5792  decode.d8.loss_cls: 0.4260  decode.d8.loss_mask: 1.4033  decode.d8.loss_dice: 1.6265  mix_decode.loss_cls: 0.2040  mix_decode.loss_mask: 0.6424  mix_decode.loss_dice: 0.7834  mix_decode.d0.loss_cls: 0.2315  mix_decode.d0.loss_mask: 0.5962  mix_decode.d0.loss_dice: 0.8287  mix_decode.d1.loss_cls: 0.1883  mix_decode.d1.loss_mask: 0.6170  mix_decode.d1.loss_dice: 0.8013  mix_decode.d2.loss_cls: 0.1818  mix_decode.d2.loss_mask: 0.6184  mix_decode.d2.loss_dice: 0.7905  mix_decode.d3.loss_cls: 0.1625  mix_decode.d3.loss_mask: 0.6413  mix_decode.d3.loss_dice: 0.8095  mix_decode.d4.loss_cls: 0.2278  mix_decode.d4.loss_mask: 0.6604  mix_decode.d4.loss_dice: 0.7676  mix_decode.d5.loss_cls: 0.2824  mix_decode.d5.loss_mask: 0.6090  mix_decode.d5.loss_dice: 0.8111  mix_decode.d6.loss_cls: 0.2741  mix_decode.d6.loss_mask: 0.6173  mix_decode.d6.loss_dice: 0.8044  mix_decode.d7.loss_cls: 0.2547  mix_decode.d7.loss_mask: 0.6180  mix_decode.d7.loss_dice: 0.7882  mix_decode.d8.loss_cls: 0.2516  mix_decode.d8.loss_mask: 0.6195  mix_decode.d8.loss_dice: 0.7603
2025/03/28 22:42:26 - mmengine - INFO - Iter(train) [11900/20000]  base_lr: 4.4333e-05 lr: 4.4333e-05  eta: 3:41:26  time: 1.8539  data_time: 0.0263  memory: 10756  loss: 61.4038  decode.loss_cls: 0.4949  decode.loss_mask: 1.8733  decode.loss_dice: 1.9299  decode.d0.loss_cls: 0.6743  decode.d0.loss_mask: 1.9828  decode.d0.loss_dice: 1.8864  decode.d1.loss_cls: 0.5353  decode.d1.loss_mask: 1.8863  decode.d1.loss_dice: 1.8515  decode.d2.loss_cls: 0.5304  decode.d2.loss_mask: 1.9219  decode.d2.loss_dice: 1.9288  decode.d3.loss_cls: 0.5372  decode.d3.loss_mask: 1.9598  decode.d3.loss_dice: 1.8594  decode.d4.loss_cls: 0.4632  decode.d4.loss_mask: 1.9333  decode.d4.loss_dice: 1.9722  decode.d5.loss_cls: 0.4856  decode.d5.loss_mask: 1.9025  decode.d5.loss_dice: 1.9345  decode.d6.loss_cls: 0.5510  decode.d6.loss_mask: 1.8705  decode.d6.loss_dice: 1.9047  decode.d7.loss_cls: 0.5261  decode.d7.loss_mask: 1.9650  decode.d7.loss_dice: 1.8997  decode.d8.loss_cls: 0.5924  decode.d8.loss_mask: 1.9199  decode.d8.loss_dice: 1.9112  mix_decode.loss_cls: 0.2701  mix_decode.loss_mask: 0.5811  mix_decode.loss_dice: 0.9651  mix_decode.d0.loss_cls: 0.2683  mix_decode.d0.loss_mask: 0.5072  mix_decode.d0.loss_dice: 0.9349  mix_decode.d1.loss_cls: 0.2680  mix_decode.d1.loss_mask: 0.5588  mix_decode.d1.loss_dice: 0.9497  mix_decode.d2.loss_cls: 0.3134  mix_decode.d2.loss_mask: 0.5622  mix_decode.d2.loss_dice: 0.9371  mix_decode.d3.loss_cls: 0.2792  mix_decode.d3.loss_mask: 0.5363  mix_decode.d3.loss_dice: 0.9361  mix_decode.d4.loss_cls: 0.3724  mix_decode.d4.loss_mask: 0.5106  mix_decode.d4.loss_dice: 0.9361  mix_decode.d5.loss_cls: 0.3188  mix_decode.d5.loss_mask: 0.5453  mix_decode.d5.loss_dice: 0.9550  mix_decode.d6.loss_cls: 0.3164  mix_decode.d6.loss_mask: 0.5298  mix_decode.d6.loss_dice: 0.9275  mix_decode.d7.loss_cls: 0.2457  mix_decode.d7.loss_mask: 0.5393  mix_decode.d7.loss_dice: 0.9379  mix_decode.d8.loss_cls: 0.2687  mix_decode.d8.loss_mask: 0.5350  mix_decode.d8.loss_dice: 0.9134
2025/03/28 22:44:02 - mmengine - INFO - Iter(train) [11950/20000]  base_lr: 4.4087e-05 lr: 4.4087e-05  eta: 3:40:13  time: 1.9497  data_time: 0.0258  memory: 10744  loss: 51.9305  decode.loss_cls: 0.3320  decode.loss_mask: 1.5377  decode.loss_dice: 1.5879  decode.d0.loss_cls: 0.5190  decode.d0.loss_mask: 1.4565  decode.d0.loss_dice: 1.5896  decode.d1.loss_cls: 0.3894  decode.d1.loss_mask: 1.5601  decode.d1.loss_dice: 1.6471  decode.d2.loss_cls: 0.3613  decode.d2.loss_mask: 1.5835  decode.d2.loss_dice: 1.5749  decode.d3.loss_cls: 0.4058  decode.d3.loss_mask: 1.4699  decode.d3.loss_dice: 1.5570  decode.d4.loss_cls: 0.3974  decode.d4.loss_mask: 1.5738  decode.d4.loss_dice: 1.6492  decode.d5.loss_cls: 0.4184  decode.d5.loss_mask: 1.5499  decode.d5.loss_dice: 1.6264  decode.d6.loss_cls: 0.4021  decode.d6.loss_mask: 1.4573  decode.d6.loss_dice: 1.5946  decode.d7.loss_cls: 0.3679  decode.d7.loss_mask: 1.4596  decode.d7.loss_dice: 1.5408  decode.d8.loss_cls: 0.4463  decode.d8.loss_mask: 1.4787  decode.d8.loss_dice: 1.5358  mix_decode.loss_cls: 0.3152  mix_decode.loss_mask: 0.5481  mix_decode.loss_dice: 0.8273  mix_decode.d0.loss_cls: 0.3564  mix_decode.d0.loss_mask: 0.5551  mix_decode.d0.loss_dice: 0.8972  mix_decode.d1.loss_cls: 0.2816  mix_decode.d1.loss_mask: 0.5312  mix_decode.d1.loss_dice: 0.8212  mix_decode.d2.loss_cls: 0.2832  mix_decode.d2.loss_mask: 0.5227  mix_decode.d2.loss_dice: 0.7970  mix_decode.d3.loss_cls: 0.3100  mix_decode.d3.loss_mask: 0.5205  mix_decode.d3.loss_dice: 0.7853  mix_decode.d4.loss_cls: 0.3757  mix_decode.d4.loss_mask: 0.5406  mix_decode.d4.loss_dice: 0.8160  mix_decode.d5.loss_cls: 0.3225  mix_decode.d5.loss_mask: 0.5485  mix_decode.d5.loss_dice: 0.8256  mix_decode.d6.loss_cls: 0.3906  mix_decode.d6.loss_mask: 0.5204  mix_decode.d6.loss_dice: 0.8226  mix_decode.d7.loss_cls: 0.3205  mix_decode.d7.loss_mask: 0.5414  mix_decode.d7.loss_dice: 0.8231  mix_decode.d8.loss_cls: 0.3289  mix_decode.d8.loss_mask: 0.5371  mix_decode.d8.loss_dice: 0.7947
2025/03/28 22:45:36 - mmengine - INFO - Exp name: r2u_20250328_164133
2025/03/28 22:45:36 - mmengine - INFO - Iter(train) [12000/20000]  base_lr: 4.3840e-05 lr: 4.3840e-05  eta: 3:38:59  time: 1.8340  data_time: 0.0256  memory: 10747  loss: 55.0009  decode.loss_cls: 0.5160  decode.loss_mask: 1.6554  decode.loss_dice: 1.6333  decode.d0.loss_cls: 0.5450  decode.d0.loss_mask: 1.7817  decode.d0.loss_dice: 1.6899  decode.d1.loss_cls: 0.4023  decode.d1.loss_mask: 1.6729  decode.d1.loss_dice: 1.6955  decode.d2.loss_cls: 0.3884  decode.d2.loss_mask: 1.7034  decode.d2.loss_dice: 1.7181  decode.d3.loss_cls: 0.4070  decode.d3.loss_mask: 1.6640  decode.d3.loss_dice: 1.6628  decode.d4.loss_cls: 0.3488  decode.d4.loss_mask: 1.7177  decode.d4.loss_dice: 1.7008  decode.d5.loss_cls: 0.4353  decode.d5.loss_mask: 1.7318  decode.d5.loss_dice: 1.7453  decode.d6.loss_cls: 0.5122  decode.d6.loss_mask: 1.7010  decode.d6.loss_dice: 1.6255  decode.d7.loss_cls: 0.4882  decode.d7.loss_mask: 1.6964  decode.d7.loss_dice: 1.6610  decode.d8.loss_cls: 0.4247  decode.d8.loss_mask: 1.7666  decode.d8.loss_dice: 1.6791  mix_decode.loss_cls: 0.2294  mix_decode.loss_mask: 0.5845  mix_decode.loss_dice: 0.8118  mix_decode.d0.loss_cls: 0.2774  mix_decode.d0.loss_mask: 0.5937  mix_decode.d0.loss_dice: 0.8471  mix_decode.d1.loss_cls: 0.2713  mix_decode.d1.loss_mask: 0.5735  mix_decode.d1.loss_dice: 0.7837  mix_decode.d2.loss_cls: 0.2590  mix_decode.d2.loss_mask: 0.5776  mix_decode.d2.loss_dice: 0.7827  mix_decode.d3.loss_cls: 0.2813  mix_decode.d3.loss_mask: 0.5954  mix_decode.d3.loss_dice: 0.7951  mix_decode.d4.loss_cls: 0.2759  mix_decode.d4.loss_mask: 0.5992  mix_decode.d4.loss_dice: 0.8248  mix_decode.d5.loss_cls: 0.2753  mix_decode.d5.loss_mask: 0.5902  mix_decode.d5.loss_dice: 0.8322  mix_decode.d6.loss_cls: 0.2804  mix_decode.d6.loss_mask: 0.5809  mix_decode.d6.loss_dice: 0.7841  mix_decode.d7.loss_cls: 0.2565  mix_decode.d7.loss_mask: 0.6020  mix_decode.d7.loss_dice: 0.8061  mix_decode.d8.loss_cls: 0.2382  mix_decode.d8.loss_mask: 0.6130  mix_decode.d8.loss_dice: 0.8083
2025/03/28 22:45:36 - mmengine - INFO - Saving checkpoint at 12000 iterations
2025/03/28 22:45:45 - mmengine - INFO - Iter(val) [  50/2708]    eta: 0:06:57  time: 0.1871  data_time: 0.0024  memory: 3059  
2025/03/28 22:45:53 - mmengine - INFO - Iter(val) [ 100/2708]    eta: 0:06:32  time: 0.1133  data_time: 0.0018  memory: 3059  
2025/03/28 22:46:00 - mmengine - INFO - Iter(val) [ 150/2708]    eta: 0:06:15  time: 0.1087  data_time: 0.0018  memory: 3059  
2025/03/28 22:46:07 - mmengine - INFO - Iter(val) [ 200/2708]    eta: 0:06:15  time: 0.1927  data_time: 0.0019  memory: 3059  
2025/03/28 22:46:15 - mmengine - INFO - Iter(val) [ 250/2708]    eta: 0:06:09  time: 0.1648  data_time: 0.0022  memory: 3059  
2025/03/28 22:46:22 - mmengine - INFO - Iter(val) [ 300/2708]    eta: 0:05:56  time: 0.1014  data_time: 0.0018  memory: 3059  
2025/03/28 22:46:29 - mmengine - INFO - Iter(val) [ 350/2708]    eta: 0:05:48  time: 0.1497  data_time: 0.0022  memory: 3059  
2025/03/28 22:46:37 - mmengine - INFO - Iter(val) [ 400/2708]    eta: 0:05:44  time: 0.1908  data_time: 0.0019  memory: 3059  
2025/03/28 22:46:44 - mmengine - INFO - Iter(val) [ 450/2708]    eta: 0:05:35  time: 0.1221  data_time: 0.0023  memory: 3059  
2025/03/28 22:46:51 - mmengine - INFO - Iter(val) [ 500/2708]    eta: 0:05:26  time: 0.1080  data_time: 0.0021  memory: 3059  
2025/03/28 22:46:59 - mmengine - INFO - Iter(val) [ 550/2708]    eta: 0:05:20  time: 0.1889  data_time: 0.0019  memory: 3059  
2025/03/28 22:47:07 - mmengine - INFO - Iter(val) [ 600/2708]    eta: 0:05:14  time: 0.1825  data_time: 0.0019  memory: 3059  
2025/03/28 22:47:14 - mmengine - INFO - Iter(val) [ 650/2708]    eta: 0:05:04  time: 0.1034  data_time: 0.0019  memory: 3059  
2025/03/28 22:47:21 - mmengine - INFO - Iter(val) [ 700/2708]    eta: 0:04:55  time: 0.1023  data_time: 0.0018  memory: 3059  
2025/03/28 22:47:28 - mmengine - INFO - Iter(val) [ 750/2708]    eta: 0:04:49  time: 0.1860  data_time: 0.0018  memory: 3059  
2025/03/28 22:47:36 - mmengine - INFO - Iter(val) [ 800/2708]    eta: 0:04:42  time: 0.1871  data_time: 0.0020  memory: 3059  
2025/03/28 22:47:43 - mmengine - INFO - Iter(val) [ 850/2708]    eta: 0:04:34  time: 0.1040  data_time: 0.0017  memory: 3059  
2025/03/28 22:47:51 - mmengine - INFO - Iter(val) [ 900/2708]    eta: 0:04:27  time: 0.1437  data_time: 0.0018  memory: 3059  
2025/03/28 22:47:58 - mmengine - INFO - Iter(val) [ 950/2708]    eta: 0:04:20  time: 0.1890  data_time: 0.0018  memory: 3059  
2025/03/28 22:48:06 - mmengine - INFO - Iter(val) [1000/2708]    eta: 0:04:12  time: 0.1343  data_time: 0.0020  memory: 3059  
2025/03/28 22:48:13 - mmengine - INFO - Iter(val) [1050/2708]    eta: 0:04:04  time: 0.1018  data_time: 0.0018  memory: 3059  
2025/03/28 22:48:20 - mmengine - INFO - Iter(val) [1100/2708]    eta: 0:03:57  time: 0.1876  data_time: 0.0024  memory: 3059  
2025/03/28 22:48:28 - mmengine - INFO - Iter(val) [1150/2708]    eta: 0:03:51  time: 0.1806  data_time: 0.0024  memory: 3059  
2025/03/28 22:48:35 - mmengine - INFO - Iter(val) [1200/2708]    eta: 0:03:43  time: 0.1019  data_time: 0.0017  memory: 3059  
2025/03/28 22:48:43 - mmengine - INFO - Iter(val) [1250/2708]    eta: 0:03:35  time: 0.1648  data_time: 0.0024  memory: 3059  
2025/03/28 22:48:51 - mmengine - INFO - Iter(val) [1300/2708]    eta: 0:03:28  time: 0.1890  data_time: 0.0020  memory: 3059  
2025/03/28 22:48:58 - mmengine - INFO - Iter(val) [1350/2708]    eta: 0:03:21  time: 0.1174  data_time: 0.0018  memory: 3059  
2025/03/28 22:49:05 - mmengine - INFO - Iter(val) [1400/2708]    eta: 0:03:13  time: 0.1070  data_time: 0.0020  memory: 3059  
2025/03/28 22:49:12 - mmengine - INFO - Iter(val) [1450/2708]    eta: 0:03:06  time: 0.1874  data_time: 0.0020  memory: 3059  
2025/03/28 22:49:20 - mmengine - INFO - Iter(val) [1500/2708]    eta: 0:02:59  time: 0.1818  data_time: 0.0018  memory: 3059  
2025/03/28 22:49:27 - mmengine - INFO - Iter(val) [1550/2708]    eta: 0:02:51  time: 0.1058  data_time: 0.0020  memory: 3059  
2025/03/28 22:49:35 - mmengine - INFO - Iter(val) [1600/2708]    eta: 0:02:44  time: 0.1676  data_time: 0.0018  memory: 3059  
2025/03/28 22:49:43 - mmengine - INFO - Iter(val) [1650/2708]    eta: 0:02:37  time: 0.1905  data_time: 0.0022  memory: 3059  
2025/03/28 22:49:50 - mmengine - INFO - Iter(val) [1700/2708]    eta: 0:02:29  time: 0.1074  data_time: 0.0018  memory: 3059  
2025/03/28 22:49:57 - mmengine - INFO - Iter(val) [1750/2708]    eta: 0:02:21  time: 0.1048  data_time: 0.0018  memory: 3059  
2025/03/28 22:50:05 - mmengine - INFO - Iter(val) [1800/2708]    eta: 0:02:14  time: 0.1881  data_time: 0.0019  memory: 3059  
2025/03/28 22:50:12 - mmengine - INFO - Iter(val) [1850/2708]    eta: 0:02:07  time: 0.1623  data_time: 0.0020  memory: 3059  
2025/03/28 22:50:19 - mmengine - INFO - Iter(val) [1900/2708]    eta: 0:01:59  time: 0.1033  data_time: 0.0018  memory: 3059  
2025/03/28 22:50:27 - mmengine - INFO - Iter(val) [1950/2708]    eta: 0:01:52  time: 0.1874  data_time: 0.0021  memory: 3059  
2025/03/28 22:50:35 - mmengine - INFO - Iter(val) [2000/2708]    eta: 0:01:45  time: 0.1824  data_time: 0.0018  memory: 3059  
2025/03/28 22:50:42 - mmengine - INFO - Iter(val) [2050/2708]    eta: 0:01:37  time: 0.1033  data_time: 0.0020  memory: 3059  
2025/03/28 22:50:49 - mmengine - INFO - Iter(val) [2100/2708]    eta: 0:01:30  time: 0.1699  data_time: 0.0021  memory: 3059  
2025/03/28 22:50:57 - mmengine - INFO - Iter(val) [2150/2708]    eta: 0:01:22  time: 0.1874  data_time: 0.0020  memory: 3059  
2025/03/28 22:51:04 - mmengine - INFO - Iter(val) [2200/2708]    eta: 0:01:15  time: 0.1036  data_time: 0.0020  memory: 3059  
2025/03/28 22:51:12 - mmengine - INFO - Iter(val) [2250/2708]    eta: 0:01:07  time: 0.1400  data_time: 0.0019  memory: 3059  
2025/03/28 22:51:19 - mmengine - INFO - Iter(val) [2300/2708]    eta: 0:01:00  time: 0.1882  data_time: 0.0020  memory: 3059  
2025/03/28 22:51:27 - mmengine - INFO - Iter(val) [2350/2708]    eta: 0:00:53  time: 0.1287  data_time: 0.0020  memory: 3059  
2025/03/28 22:51:34 - mmengine - INFO - Iter(val) [2400/2708]    eta: 0:00:45  time: 0.1026  data_time: 0.0019  memory: 3059  
2025/03/28 22:51:42 - mmengine - INFO - Iter(val) [2450/2708]    eta: 0:00:38  time: 0.1899  data_time: 0.0021  memory: 3059  
2025/03/28 22:51:49 - mmengine - INFO - Iter(val) [2500/2708]    eta: 0:00:30  time: 0.1734  data_time: 0.0018  memory: 3059  
2025/03/28 22:51:56 - mmengine - INFO - Iter(val) [2550/2708]    eta: 0:00:23  time: 0.1016  data_time: 0.0018  memory: 3059  
2025/03/28 22:52:03 - mmengine - INFO - Iter(val) [2600/2708]    eta: 0:00:16  time: 0.1308  data_time: 0.0019  memory: 3059  
2025/03/28 22:52:11 - mmengine - INFO - Iter(val) [2650/2708]    eta: 0:00:08  time: 0.1914  data_time: 0.0020  memory: 3059  
2025/03/28 22:52:19 - mmengine - INFO - Iter(val) [2700/2708]    eta: 0:00:01  time: 0.1527  data_time: 0.0020  memory: 3059  
2025/03/28 22:52:20 - mmengine - INFO - per class results:
2025/03/28 22:52:20 - mmengine - INFO - 
+--------------+-------+-------+
|    Class     |  IoU  |  Acc  |
+--------------+-------+-------+
|  background  | 41.72 | 78.16 |
|   building   |  55.9 | 64.03 |
|     road     | 53.34 | 59.96 |
|    water     | 75.46 | 82.76 |
|    barren    |  37.7 | 56.21 |
|    forest    | 46.97 | 52.87 |
| agricultural | 56.65 | 61.31 |
+--------------+-------+-------+
2025/03/28 22:52:20 - mmengine - INFO - Iter(val) [2708/2708]    aAcc: 67.2500  mIoU: 52.5300  mAcc: 65.0400  data_time: 0.0020  time: 0.1483
2025/03/28 22:53:56 - mmengine - INFO - Iter(train) [12050/20000]  base_lr: 4.3594e-05 lr: 4.3594e-05  eta: 3:37:46  time: 1.8442  data_time: 0.0258  memory: 10745  loss: 52.6732  decode.loss_cls: 0.4644  decode.loss_mask: 1.5095  decode.loss_dice: 1.6288  decode.d0.loss_cls: 0.5979  decode.d0.loss_mask: 1.4875  decode.d0.loss_dice: 1.6817  decode.d1.loss_cls: 0.4983  decode.d1.loss_mask: 1.4961  decode.d1.loss_dice: 1.6224  decode.d2.loss_cls: 0.5185  decode.d2.loss_mask: 1.4692  decode.d2.loss_dice: 1.5821  decode.d3.loss_cls: 0.4590  decode.d3.loss_mask: 1.5289  decode.d3.loss_dice: 1.5722  decode.d4.loss_cls: 0.4133  decode.d4.loss_mask: 1.4708  decode.d4.loss_dice: 1.5746  decode.d5.loss_cls: 0.4287  decode.d5.loss_mask: 1.4749  decode.d5.loss_dice: 1.5845  decode.d6.loss_cls: 0.5054  decode.d6.loss_mask: 1.4918  decode.d6.loss_dice: 1.6033  decode.d7.loss_cls: 0.4948  decode.d7.loss_mask: 1.4682  decode.d7.loss_dice: 1.5979  decode.d8.loss_cls: 0.4854  decode.d8.loss_mask: 1.4686  decode.d8.loss_dice: 1.6080  mix_decode.loss_cls: 0.3281  mix_decode.loss_mask: 0.6129  mix_decode.loss_dice: 0.7129  mix_decode.d0.loss_cls: 0.3745  mix_decode.d0.loss_mask: 0.6078  mix_decode.d0.loss_dice: 0.8203  mix_decode.d1.loss_cls: 0.3264  mix_decode.d1.loss_mask: 0.6363  mix_decode.d1.loss_dice: 0.7256  mix_decode.d2.loss_cls: 0.3355  mix_decode.d2.loss_mask: 0.6175  mix_decode.d2.loss_dice: 0.7072  mix_decode.d3.loss_cls: 0.3644  mix_decode.d3.loss_mask: 0.6218  mix_decode.d3.loss_dice: 0.6643  mix_decode.d4.loss_cls: 0.3435  mix_decode.d4.loss_mask: 0.6144  mix_decode.d4.loss_dice: 0.7333  mix_decode.d5.loss_cls: 0.3275  mix_decode.d5.loss_mask: 0.6383  mix_decode.d5.loss_dice: 0.7523  mix_decode.d6.loss_cls: 0.3300  mix_decode.d6.loss_mask: 0.6142  mix_decode.d6.loss_dice: 0.7253  mix_decode.d7.loss_cls: 0.3508  mix_decode.d7.loss_mask: 0.5759  mix_decode.d7.loss_dice: 0.7283  mix_decode.d8.loss_cls: 0.3535  mix_decode.d8.loss_mask: 0.6134  mix_decode.d8.loss_dice: 0.7304
2025/03/28 22:55:31 - mmengine - INFO - Iter(train) [12100/20000]  base_lr: 4.3347e-05 lr: 4.3347e-05  eta: 3:36:33  time: 1.9387  data_time: 0.0273  memory: 10758  loss: 58.4200  decode.loss_cls: 0.4943  decode.loss_mask: 1.7013  decode.loss_dice: 1.8443  decode.d0.loss_cls: 0.6926  decode.d0.loss_mask: 1.6040  decode.d0.loss_dice: 1.8682  decode.d1.loss_cls: 0.6396  decode.d1.loss_mask: 1.6189  decode.d1.loss_dice: 1.7618  decode.d2.loss_cls: 0.5751  decode.d2.loss_mask: 1.6303  decode.d2.loss_dice: 1.7687  decode.d3.loss_cls: 0.6428  decode.d3.loss_mask: 1.5841  decode.d3.loss_dice: 1.7757  decode.d4.loss_cls: 0.6028  decode.d4.loss_mask: 1.6143  decode.d4.loss_dice: 1.7782  decode.d5.loss_cls: 0.6056  decode.d5.loss_mask: 1.6263  decode.d5.loss_dice: 1.7977  decode.d6.loss_cls: 0.4934  decode.d6.loss_mask: 1.6852  decode.d6.loss_dice: 1.8399  decode.d7.loss_cls: 0.5704  decode.d7.loss_mask: 1.6672  decode.d7.loss_dice: 1.8268  decode.d8.loss_cls: 0.5507  decode.d8.loss_mask: 1.5911  decode.d8.loss_dice: 1.7881  mix_decode.loss_cls: 0.2929  mix_decode.loss_mask: 0.6563  mix_decode.loss_dice: 0.8797  mix_decode.d0.loss_cls: 0.3355  mix_decode.d0.loss_mask: 0.5762  mix_decode.d0.loss_dice: 0.9077  mix_decode.d1.loss_cls: 0.3114  mix_decode.d1.loss_mask: 0.6163  mix_decode.d1.loss_dice: 0.8644  mix_decode.d2.loss_cls: 0.3018  mix_decode.d2.loss_mask: 0.6166  mix_decode.d2.loss_dice: 0.8644  mix_decode.d3.loss_cls: 0.3238  mix_decode.d3.loss_mask: 0.6198  mix_decode.d3.loss_dice: 0.8742  mix_decode.d4.loss_cls: 0.3695  mix_decode.d4.loss_mask: 0.6145  mix_decode.d4.loss_dice: 0.8693  mix_decode.d5.loss_cls: 0.3284  mix_decode.d5.loss_mask: 0.5931  mix_decode.d5.loss_dice: 0.8723  mix_decode.d6.loss_cls: 0.3551  mix_decode.d6.loss_mask: 0.6208  mix_decode.d6.loss_dice: 0.8860  mix_decode.d7.loss_cls: 0.3301  mix_decode.d7.loss_mask: 0.5984  mix_decode.d7.loss_dice: 0.9017  mix_decode.d8.loss_cls: 0.3093  mix_decode.d8.loss_mask: 0.6194  mix_decode.d8.loss_dice: 0.8719
2025/03/28 22:57:06 - mmengine - INFO - Iter(train) [12150/20000]  base_lr: 4.3100e-05 lr: 4.3100e-05  eta: 3:35:19  time: 1.9319  data_time: 0.0253  memory: 10739  loss: 49.6854  decode.loss_cls: 0.4327  decode.loss_mask: 1.4673  decode.loss_dice: 1.5626  decode.d0.loss_cls: 0.5107  decode.d0.loss_mask: 1.3983  decode.d0.loss_dice: 1.5421  decode.d1.loss_cls: 0.4411  decode.d1.loss_mask: 1.3949  decode.d1.loss_dice: 1.5073  decode.d2.loss_cls: 0.4598  decode.d2.loss_mask: 1.3775  decode.d2.loss_dice: 1.4442  decode.d3.loss_cls: 0.3812  decode.d3.loss_mask: 1.4234  decode.d3.loss_dice: 1.4491  decode.d4.loss_cls: 0.4174  decode.d4.loss_mask: 1.3864  decode.d4.loss_dice: 1.4489  decode.d5.loss_cls: 0.4423  decode.d5.loss_mask: 1.3905  decode.d5.loss_dice: 1.4669  decode.d6.loss_cls: 0.5212  decode.d6.loss_mask: 1.4105  decode.d6.loss_dice: 1.4756  decode.d7.loss_cls: 0.4707  decode.d7.loss_mask: 1.4010  decode.d7.loss_dice: 1.4742  decode.d8.loss_cls: 0.4751  decode.d8.loss_mask: 1.4291  decode.d8.loss_dice: 1.4916  mix_decode.loss_cls: 0.3202  mix_decode.loss_mask: 0.4759  mix_decode.loss_dice: 0.8511  mix_decode.d0.loss_cls: 0.2533  mix_decode.d0.loss_mask: 0.4727  mix_decode.d0.loss_dice: 0.9005  mix_decode.d1.loss_cls: 0.3227  mix_decode.d1.loss_mask: 0.4770  mix_decode.d1.loss_dice: 0.8296  mix_decode.d2.loss_cls: 0.3062  mix_decode.d2.loss_mask: 0.4649  mix_decode.d2.loss_dice: 0.8095  mix_decode.d3.loss_cls: 0.3151  mix_decode.d3.loss_mask: 0.4843  mix_decode.d3.loss_dice: 0.8122  mix_decode.d4.loss_cls: 0.2863  mix_decode.d4.loss_mask: 0.4997  mix_decode.d4.loss_dice: 0.8190  mix_decode.d5.loss_cls: 0.3220  mix_decode.d5.loss_mask: 0.4722  mix_decode.d5.loss_dice: 0.8371  mix_decode.d6.loss_cls: 0.2920  mix_decode.d6.loss_mask: 0.4735  mix_decode.d6.loss_dice: 0.8221  mix_decode.d7.loss_cls: 0.3095  mix_decode.d7.loss_mask: 0.4801  mix_decode.d7.loss_dice: 0.8395  mix_decode.d8.loss_cls: 0.3474  mix_decode.d8.loss_mask: 0.4591  mix_decode.d8.loss_dice: 0.8372
2025/03/28 22:58:42 - mmengine - INFO - Iter(train) [12200/20000]  base_lr: 4.2853e-05 lr: 4.2853e-05  eta: 3:34:05  time: 1.9580  data_time: 0.0281  memory: 10760  loss: 57.3039  decode.loss_cls: 0.4315  decode.loss_mask: 1.8131  decode.loss_dice: 1.7645  decode.d0.loss_cls: 0.4884  decode.d0.loss_mask: 1.8159  decode.d0.loss_dice: 1.7523  decode.d1.loss_cls: 0.4176  decode.d1.loss_mask: 1.8387  decode.d1.loss_dice: 1.7755  decode.d2.loss_cls: 0.4366  decode.d2.loss_mask: 1.7837  decode.d2.loss_dice: 1.6959  decode.d3.loss_cls: 0.5069  decode.d3.loss_mask: 1.8056  decode.d3.loss_dice: 1.6901  decode.d4.loss_cls: 0.5176  decode.d4.loss_mask: 1.8328  decode.d4.loss_dice: 1.6762  decode.d5.loss_cls: 0.3906  decode.d5.loss_mask: 1.9326  decode.d5.loss_dice: 1.8162  decode.d6.loss_cls: 0.5189  decode.d6.loss_mask: 1.7734  decode.d6.loss_dice: 1.6529  decode.d7.loss_cls: 0.3828  decode.d7.loss_mask: 1.8276  decode.d7.loss_dice: 1.7672  decode.d8.loss_cls: 0.4499  decode.d8.loss_mask: 1.8319  decode.d8.loss_dice: 1.7039  mix_decode.loss_cls: 0.2172  mix_decode.loss_mask: 0.7259  mix_decode.loss_dice: 0.7748  mix_decode.d0.loss_cls: 0.2771  mix_decode.d0.loss_mask: 0.6894  mix_decode.d0.loss_dice: 0.8198  mix_decode.d1.loss_cls: 0.1906  mix_decode.d1.loss_mask: 0.6932  mix_decode.d1.loss_dice: 0.7918  mix_decode.d2.loss_cls: 0.2149  mix_decode.d2.loss_mask: 0.7199  mix_decode.d2.loss_dice: 0.7890  mix_decode.d3.loss_cls: 0.2220  mix_decode.d3.loss_mask: 0.7227  mix_decode.d3.loss_dice: 0.7778  mix_decode.d4.loss_cls: 0.2739  mix_decode.d4.loss_mask: 0.7023  mix_decode.d4.loss_dice: 0.7745  mix_decode.d5.loss_cls: 0.2380  mix_decode.d5.loss_mask: 0.6989  mix_decode.d5.loss_dice: 0.7908  mix_decode.d6.loss_cls: 0.2659  mix_decode.d6.loss_mask: 0.7075  mix_decode.d6.loss_dice: 0.7498  mix_decode.d7.loss_cls: 0.1821  mix_decode.d7.loss_mask: 0.7258  mix_decode.d7.loss_dice: 0.8023  mix_decode.d8.loss_cls: 0.2163  mix_decode.d8.loss_mask: 0.6907  mix_decode.d8.loss_dice: 0.7682
2025/03/28 23:00:17 - mmengine - INFO - Iter(train) [12250/20000]  base_lr: 4.2605e-05 lr: 4.2605e-05  eta: 3:32:51  time: 1.9128  data_time: 0.0275  memory: 10760  loss: 54.0372  decode.loss_cls: 0.4185  decode.loss_mask: 1.7514  decode.loss_dice: 1.6097  decode.d0.loss_cls: 0.5809  decode.d0.loss_mask: 1.7199  decode.d0.loss_dice: 1.5840  decode.d1.loss_cls: 0.4607  decode.d1.loss_mask: 1.7000  decode.d1.loss_dice: 1.5419  decode.d2.loss_cls: 0.5174  decode.d2.loss_mask: 1.7982  decode.d2.loss_dice: 1.6066  decode.d3.loss_cls: 0.5132  decode.d3.loss_mask: 1.7987  decode.d3.loss_dice: 1.5796  decode.d4.loss_cls: 0.4942  decode.d4.loss_mask: 1.7068  decode.d4.loss_dice: 1.5772  decode.d5.loss_cls: 0.5730  decode.d5.loss_mask: 1.6353  decode.d5.loss_dice: 1.4968  decode.d6.loss_cls: 0.4891  decode.d6.loss_mask: 1.6826  decode.d6.loss_dice: 1.5097  decode.d7.loss_cls: 0.4475  decode.d7.loss_mask: 1.7536  decode.d7.loss_dice: 1.5662  decode.d8.loss_cls: 0.4732  decode.d8.loss_mask: 1.8066  decode.d8.loss_dice: 1.6805  mix_decode.loss_cls: 0.1815  mix_decode.loss_mask: 0.6211  mix_decode.loss_dice: 0.8061  mix_decode.d0.loss_cls: 0.2634  mix_decode.d0.loss_mask: 0.5963  mix_decode.d0.loss_dice: 0.8412  mix_decode.d1.loss_cls: 0.2032  mix_decode.d1.loss_mask: 0.5926  mix_decode.d1.loss_dice: 0.7870  mix_decode.d2.loss_cls: 0.2240  mix_decode.d2.loss_mask: 0.6025  mix_decode.d2.loss_dice: 0.7536  mix_decode.d3.loss_cls: 0.2334  mix_decode.d3.loss_mask: 0.5790  mix_decode.d3.loss_dice: 0.7738  mix_decode.d4.loss_cls: 0.2617  mix_decode.d4.loss_mask: 0.5620  mix_decode.d4.loss_dice: 0.7756  mix_decode.d5.loss_cls: 0.2287  mix_decode.d5.loss_mask: 0.5841  mix_decode.d5.loss_dice: 0.7881  mix_decode.d6.loss_cls: 0.1967  mix_decode.d6.loss_mask: 0.5857  mix_decode.d6.loss_dice: 0.8038  mix_decode.d7.loss_cls: 0.1820  mix_decode.d7.loss_mask: 0.5800  mix_decode.d7.loss_dice: 0.7882  mix_decode.d8.loss_cls: 0.1658  mix_decode.d8.loss_mask: 0.5976  mix_decode.d8.loss_dice: 0.8056
2025/03/28 23:01:51 - mmengine - INFO - Iter(train) [12300/20000]  base_lr: 4.2358e-05 lr: 4.2358e-05  eta: 3:31:36  time: 1.8600  data_time: 0.0241  memory: 10752  loss: 50.1131  decode.loss_cls: 0.3126  decode.loss_mask: 1.6340  decode.loss_dice: 1.5365  decode.d0.loss_cls: 0.4484  decode.d0.loss_mask: 1.6084  decode.d0.loss_dice: 1.5064  decode.d1.loss_cls: 0.3513  decode.d1.loss_mask: 1.6255  decode.d1.loss_dice: 1.5112  decode.d2.loss_cls: 0.3655  decode.d2.loss_mask: 1.6274  decode.d2.loss_dice: 1.4954  decode.d3.loss_cls: 0.4143  decode.d3.loss_mask: 1.6124  decode.d3.loss_dice: 1.4946  decode.d4.loss_cls: 0.3737  decode.d4.loss_mask: 1.6886  decode.d4.loss_dice: 1.5448  decode.d5.loss_cls: 0.3196  decode.d5.loss_mask: 1.6954  decode.d5.loss_dice: 1.5759  decode.d6.loss_cls: 0.3490  decode.d6.loss_mask: 1.6520  decode.d6.loss_dice: 1.5344  decode.d7.loss_cls: 0.4105  decode.d7.loss_mask: 1.6083  decode.d7.loss_dice: 1.4932  decode.d8.loss_cls: 0.2792  decode.d8.loss_mask: 1.6698  decode.d8.loss_dice: 1.5441  mix_decode.loss_cls: 0.2070  mix_decode.loss_mask: 0.5655  mix_decode.loss_dice: 0.7395  mix_decode.d0.loss_cls: 0.2163  mix_decode.d0.loss_mask: 0.5362  mix_decode.d0.loss_dice: 0.7375  mix_decode.d1.loss_cls: 0.2240  mix_decode.d1.loss_mask: 0.5317  mix_decode.d1.loss_dice: 0.6904  mix_decode.d2.loss_cls: 0.2084  mix_decode.d2.loss_mask: 0.5469  mix_decode.d2.loss_dice: 0.6875  mix_decode.d3.loss_cls: 0.2079  mix_decode.d3.loss_mask: 0.5584  mix_decode.d3.loss_dice: 0.7151  mix_decode.d4.loss_cls: 0.2460  mix_decode.d4.loss_mask: 0.5593  mix_decode.d4.loss_dice: 0.7085  mix_decode.d5.loss_cls: 0.1945  mix_decode.d5.loss_mask: 0.5620  mix_decode.d5.loss_dice: 0.7249  mix_decode.d6.loss_cls: 0.1861  mix_decode.d6.loss_mask: 0.5821  mix_decode.d6.loss_dice: 0.7194  mix_decode.d7.loss_cls: 0.1767  mix_decode.d7.loss_mask: 0.5846  mix_decode.d7.loss_dice: 0.7452  mix_decode.d8.loss_cls: 0.1864  mix_decode.d8.loss_mask: 0.5637  mix_decode.d8.loss_dice: 0.7192
2025/03/28 23:03:26 - mmengine - INFO - Iter(train) [12350/20000]  base_lr: 4.2110e-05 lr: 4.2110e-05  eta: 3:30:21  time: 1.8735  data_time: 0.0244  memory: 10757  loss: 54.4018  decode.loss_cls: 0.4827  decode.loss_mask: 1.5670  decode.loss_dice: 1.6512  decode.d0.loss_cls: 0.7121  decode.d0.loss_mask: 1.4621  decode.d0.loss_dice: 1.6309  decode.d1.loss_cls: 0.5270  decode.d1.loss_mask: 1.5509  decode.d1.loss_dice: 1.6296  decode.d2.loss_cls: 0.4857  decode.d2.loss_mask: 1.4889  decode.d2.loss_dice: 1.6049  decode.d3.loss_cls: 0.4749  decode.d3.loss_mask: 1.5089  decode.d3.loss_dice: 1.5789  decode.d4.loss_cls: 0.5111  decode.d4.loss_mask: 1.5036  decode.d4.loss_dice: 1.5635  decode.d5.loss_cls: 0.4738  decode.d5.loss_mask: 1.5467  decode.d5.loss_dice: 1.6918  decode.d6.loss_cls: 0.4940  decode.d6.loss_mask: 1.5441  decode.d6.loss_dice: 1.6085  decode.d7.loss_cls: 0.4740  decode.d7.loss_mask: 1.4736  decode.d7.loss_dice: 1.5895  decode.d8.loss_cls: 0.5095  decode.d8.loss_mask: 1.5190  decode.d8.loss_dice: 1.6159  mix_decode.loss_cls: 0.2709  mix_decode.loss_mask: 0.6568  mix_decode.loss_dice: 0.8543  mix_decode.d0.loss_cls: 0.2798  mix_decode.d0.loss_mask: 0.6694  mix_decode.d0.loss_dice: 0.8980  mix_decode.d1.loss_cls: 0.3103  mix_decode.d1.loss_mask: 0.6418  mix_decode.d1.loss_dice: 0.8064  mix_decode.d2.loss_cls: 0.3305  mix_decode.d2.loss_mask: 0.6215  mix_decode.d2.loss_dice: 0.8096  mix_decode.d3.loss_cls: 0.3357  mix_decode.d3.loss_mask: 0.6401  mix_decode.d3.loss_dice: 0.7913  mix_decode.d4.loss_cls: 0.3718  mix_decode.d4.loss_mask: 0.6565  mix_decode.d4.loss_dice: 0.8331  mix_decode.d5.loss_cls: 0.3277  mix_decode.d5.loss_mask: 0.6477  mix_decode.d5.loss_dice: 0.8275  mix_decode.d6.loss_cls: 0.3265  mix_decode.d6.loss_mask: 0.6039  mix_decode.d6.loss_dice: 0.8149  mix_decode.d7.loss_cls: 0.3344  mix_decode.d7.loss_mask: 0.6448  mix_decode.d7.loss_dice: 0.8151  mix_decode.d8.loss_cls: 0.2982  mix_decode.d8.loss_mask: 0.6687  mix_decode.d8.loss_dice: 0.8404
2025/03/28 23:05:01 - mmengine - INFO - Iter(train) [12400/20000]  base_lr: 4.1862e-05 lr: 4.1862e-05  eta: 3:29:06  time: 1.8522  data_time: 0.0270  memory: 10753  loss: 44.8950  decode.loss_cls: 0.1964  decode.loss_mask: 1.4515  decode.loss_dice: 1.3970  decode.d0.loss_cls: 0.4075  decode.d0.loss_mask: 1.4208  decode.d0.loss_dice: 1.3742  decode.d1.loss_cls: 0.2345  decode.d1.loss_mask: 1.4218  decode.d1.loss_dice: 1.3930  decode.d2.loss_cls: 0.1885  decode.d2.loss_mask: 1.4188  decode.d2.loss_dice: 1.3275  decode.d3.loss_cls: 0.1780  decode.d3.loss_mask: 1.3985  decode.d3.loss_dice: 1.3507  decode.d4.loss_cls: 0.1964  decode.d4.loss_mask: 1.4293  decode.d4.loss_dice: 1.3469  decode.d5.loss_cls: 0.2455  decode.d5.loss_mask: 1.4245  decode.d5.loss_dice: 1.3462  decode.d6.loss_cls: 0.2012  decode.d6.loss_mask: 1.4339  decode.d6.loss_dice: 1.3415  decode.d7.loss_cls: 0.2334  decode.d7.loss_mask: 1.4459  decode.d7.loss_dice: 1.3791  decode.d8.loss_cls: 0.2696  decode.d8.loss_mask: 1.4332  decode.d8.loss_dice: 1.3549  mix_decode.loss_cls: 0.2472  mix_decode.loss_mask: 0.5537  mix_decode.loss_dice: 0.6907  mix_decode.d0.loss_cls: 0.2150  mix_decode.d0.loss_mask: 0.5627  mix_decode.d0.loss_dice: 0.7764  mix_decode.d1.loss_cls: 0.2525  mix_decode.d1.loss_mask: 0.5518  mix_decode.d1.loss_dice: 0.6710  mix_decode.d2.loss_cls: 0.2715  mix_decode.d2.loss_mask: 0.5394  mix_decode.d2.loss_dice: 0.6582  mix_decode.d3.loss_cls: 0.2442  mix_decode.d3.loss_mask: 0.5466  mix_decode.d3.loss_dice: 0.6833  mix_decode.d4.loss_cls: 0.2684  mix_decode.d4.loss_mask: 0.5409  mix_decode.d4.loss_dice: 0.6216  mix_decode.d5.loss_cls: 0.2752  mix_decode.d5.loss_mask: 0.5314  mix_decode.d5.loss_dice: 0.6089  mix_decode.d6.loss_cls: 0.2761  mix_decode.d6.loss_mask: 0.5405  mix_decode.d6.loss_dice: 0.6463  mix_decode.d7.loss_cls: 0.2525  mix_decode.d7.loss_mask: 0.5402  mix_decode.d7.loss_dice: 0.6638  mix_decode.d8.loss_cls: 0.2675  mix_decode.d8.loss_mask: 0.5324  mix_decode.d8.loss_dice: 0.6248
2025/03/28 23:06:35 - mmengine - INFO - Iter(train) [12450/20000]  base_lr: 4.1615e-05 lr: 4.1615e-05  eta: 3:27:51  time: 1.8455  data_time: 0.0274  memory: 10763  loss: 51.0610  decode.loss_cls: 0.4045  decode.loss_mask: 1.5183  decode.loss_dice: 1.5922  decode.d0.loss_cls: 0.5697  decode.d0.loss_mask: 1.5534  decode.d0.loss_dice: 1.5735  decode.d1.loss_cls: 0.3944  decode.d1.loss_mask: 1.4970  decode.d1.loss_dice: 1.5918  decode.d2.loss_cls: 0.4028  decode.d2.loss_mask: 1.5016  decode.d2.loss_dice: 1.5790  decode.d3.loss_cls: 0.4751  decode.d3.loss_mask: 1.4426  decode.d3.loss_dice: 1.5372  decode.d4.loss_cls: 0.4120  decode.d4.loss_mask: 1.5076  decode.d4.loss_dice: 1.5811  decode.d5.loss_cls: 0.3529  decode.d5.loss_mask: 1.5270  decode.d5.loss_dice: 1.6159  decode.d6.loss_cls: 0.4765  decode.d6.loss_mask: 1.4858  decode.d6.loss_dice: 1.5972  decode.d7.loss_cls: 0.4394  decode.d7.loss_mask: 1.4586  decode.d7.loss_dice: 1.5100  decode.d8.loss_cls: 0.4192  decode.d8.loss_mask: 1.5050  decode.d8.loss_dice: 1.5601  mix_decode.loss_cls: 0.1626  mix_decode.loss_mask: 0.6005  mix_decode.loss_dice: 0.8233  mix_decode.d0.loss_cls: 0.2648  mix_decode.d0.loss_mask: 0.5949  mix_decode.d0.loss_dice: 0.8460  mix_decode.d1.loss_cls: 0.1866  mix_decode.d1.loss_mask: 0.5680  mix_decode.d1.loss_dice: 0.7821  mix_decode.d2.loss_cls: 0.1546  mix_decode.d2.loss_mask: 0.6079  mix_decode.d2.loss_dice: 0.8038  mix_decode.d3.loss_cls: 0.1983  mix_decode.d3.loss_mask: 0.5901  mix_decode.d3.loss_dice: 0.8163  mix_decode.d4.loss_cls: 0.2388  mix_decode.d4.loss_mask: 0.5775  mix_decode.d4.loss_dice: 0.8042  mix_decode.d5.loss_cls: 0.2265  mix_decode.d5.loss_mask: 0.5797  mix_decode.d5.loss_dice: 0.7613  mix_decode.d6.loss_cls: 0.2068  mix_decode.d6.loss_mask: 0.5906  mix_decode.d6.loss_dice: 0.8057  mix_decode.d7.loss_cls: 0.2042  mix_decode.d7.loss_mask: 0.5916  mix_decode.d7.loss_dice: 0.8244  mix_decode.d8.loss_cls: 0.1901  mix_decode.d8.loss_mask: 0.5864  mix_decode.d8.loss_dice: 0.7920
2025/03/28 23:08:10 - mmengine - INFO - Iter(train) [12500/20000]  base_lr: 4.1366e-05 lr: 4.1366e-05  eta: 3:26:36  time: 1.8959  data_time: 0.0270  memory: 10751  loss: 52.8597  decode.loss_cls: 0.3366  decode.loss_mask: 1.4934  decode.loss_dice: 1.6762  decode.d0.loss_cls: 0.4654  decode.d0.loss_mask: 1.5072  decode.d0.loss_dice: 1.6876  decode.d1.loss_cls: 0.3135  decode.d1.loss_mask: 1.4857  decode.d1.loss_dice: 1.5893  decode.d2.loss_cls: 0.3489  decode.d2.loss_mask: 1.4968  decode.d2.loss_dice: 1.6538  decode.d3.loss_cls: 0.4083  decode.d3.loss_mask: 1.4942  decode.d3.loss_dice: 1.6037  decode.d4.loss_cls: 0.4564  decode.d4.loss_mask: 1.4796  decode.d4.loss_dice: 1.5915  decode.d5.loss_cls: 0.3358  decode.d5.loss_mask: 1.4988  decode.d5.loss_dice: 1.6607  decode.d6.loss_cls: 0.3939  decode.d6.loss_mask: 1.4533  decode.d6.loss_dice: 1.6013  decode.d7.loss_cls: 0.4192  decode.d7.loss_mask: 1.4797  decode.d7.loss_dice: 1.6577  decode.d8.loss_cls: 0.3397  decode.d8.loss_mask: 1.5073  decode.d8.loss_dice: 1.6560  mix_decode.loss_cls: 0.2039  mix_decode.loss_mask: 0.6793  mix_decode.loss_dice: 0.8807  mix_decode.d0.loss_cls: 0.2475  mix_decode.d0.loss_mask: 0.6906  mix_decode.d0.loss_dice: 0.8974  mix_decode.d1.loss_cls: 0.2753  mix_decode.d1.loss_mask: 0.6691  mix_decode.d1.loss_dice: 0.8509  mix_decode.d2.loss_cls: 0.2821  mix_decode.d2.loss_mask: 0.6345  mix_decode.d2.loss_dice: 0.8166  mix_decode.d3.loss_cls: 0.3012  mix_decode.d3.loss_mask: 0.6451  mix_decode.d3.loss_dice: 0.8012  mix_decode.d4.loss_cls: 0.2826  mix_decode.d4.loss_mask: 0.6749  mix_decode.d4.loss_dice: 0.8274  mix_decode.d5.loss_cls: 0.3105  mix_decode.d5.loss_mask: 0.6606  mix_decode.d5.loss_dice: 0.8542  mix_decode.d6.loss_cls: 0.3196  mix_decode.d6.loss_mask: 0.6350  mix_decode.d6.loss_dice: 0.8430  mix_decode.d7.loss_cls: 0.3008  mix_decode.d7.loss_mask: 0.6353  mix_decode.d7.loss_dice: 0.8234  mix_decode.d8.loss_cls: 0.2295  mix_decode.d8.loss_mask: 0.6580  mix_decode.d8.loss_dice: 0.8381
2025/03/28 23:09:46 - mmengine - INFO - Iter(train) [12550/20000]  base_lr: 4.1118e-05 lr: 4.1118e-05  eta: 3:25:20  time: 1.8419  data_time: 0.0261  memory: 10753  loss: 47.5301  decode.loss_cls: 0.4037  decode.loss_mask: 1.3391  decode.loss_dice: 1.4995  decode.d0.loss_cls: 0.5851  decode.d0.loss_mask: 1.3194  decode.d0.loss_dice: 1.5451  decode.d1.loss_cls: 0.4263  decode.d1.loss_mask: 1.3125  decode.d1.loss_dice: 1.4559  decode.d2.loss_cls: 0.4300  decode.d2.loss_mask: 1.2915  decode.d2.loss_dice: 1.4186  decode.d3.loss_cls: 0.4593  decode.d3.loss_mask: 1.3261  decode.d3.loss_dice: 1.4009  decode.d4.loss_cls: 0.4480  decode.d4.loss_mask: 1.3259  decode.d4.loss_dice: 1.4272  decode.d5.loss_cls: 0.4932  decode.d5.loss_mask: 1.3006  decode.d5.loss_dice: 1.4388  decode.d6.loss_cls: 0.4106  decode.d6.loss_mask: 1.3269  decode.d6.loss_dice: 1.4927  decode.d7.loss_cls: 0.4424  decode.d7.loss_mask: 1.3548  decode.d7.loss_dice: 1.4848  decode.d8.loss_cls: 0.4903  decode.d8.loss_mask: 1.3167  decode.d8.loss_dice: 1.4346  mix_decode.loss_cls: 0.2985  mix_decode.loss_mask: 0.4926  mix_decode.loss_dice: 0.7557  mix_decode.d0.loss_cls: 0.2886  mix_decode.d0.loss_mask: 0.4776  mix_decode.d0.loss_dice: 0.8072  mix_decode.d1.loss_cls: 0.2870  mix_decode.d1.loss_mask: 0.4550  mix_decode.d1.loss_dice: 0.7398  mix_decode.d2.loss_cls: 0.2799  mix_decode.d2.loss_mask: 0.4791  mix_decode.d2.loss_dice: 0.7535  mix_decode.d3.loss_cls: 0.3057  mix_decode.d3.loss_mask: 0.4634  mix_decode.d3.loss_dice: 0.7225  mix_decode.d4.loss_cls: 0.2978  mix_decode.d4.loss_mask: 0.4769  mix_decode.d4.loss_dice: 0.7393  mix_decode.d5.loss_cls: 0.2725  mix_decode.d5.loss_mask: 0.4606  mix_decode.d5.loss_dice: 0.7645  mix_decode.d6.loss_cls: 0.2429  mix_decode.d6.loss_mask: 0.5180  mix_decode.d6.loss_dice: 0.7630  mix_decode.d7.loss_cls: 0.2403  mix_decode.d7.loss_mask: 0.4993  mix_decode.d7.loss_dice: 0.7623  mix_decode.d8.loss_cls: 0.2780  mix_decode.d8.loss_mask: 0.4567  mix_decode.d8.loss_dice: 0.7520
2025/03/28 23:11:22 - mmengine - INFO - Iter(train) [12600/20000]  base_lr: 4.0870e-05 lr: 4.0870e-05  eta: 3:24:06  time: 1.9455  data_time: 0.0285  memory: 10740  loss: 59.6609  decode.loss_cls: 0.7960  decode.loss_mask: 1.4296  decode.loss_dice: 1.8010  decode.d0.loss_cls: 0.8582  decode.d0.loss_mask: 1.4753  decode.d0.loss_dice: 1.9037  decode.d1.loss_cls: 0.7866  decode.d1.loss_mask: 1.4535  decode.d1.loss_dice: 1.7896  decode.d2.loss_cls: 0.8611  decode.d2.loss_mask: 1.3931  decode.d2.loss_dice: 1.8120  decode.d3.loss_cls: 0.7740  decode.d3.loss_mask: 1.4673  decode.d3.loss_dice: 1.8630  decode.d4.loss_cls: 0.7865  decode.d4.loss_mask: 1.4170  decode.d4.loss_dice: 1.8284  decode.d5.loss_cls: 0.7878  decode.d5.loss_mask: 1.4546  decode.d5.loss_dice: 1.8511  decode.d6.loss_cls: 0.7302  decode.d6.loss_mask: 1.4926  decode.d6.loss_dice: 1.9021  decode.d7.loss_cls: 0.8657  decode.d7.loss_mask: 1.4696  decode.d7.loss_dice: 1.8396  decode.d8.loss_cls: 0.9478  decode.d8.loss_mask: 1.3751  decode.d8.loss_dice: 1.7556  mix_decode.loss_cls: 0.3807  mix_decode.loss_mask: 0.6006  mix_decode.loss_dice: 0.8695  mix_decode.d0.loss_cls: 0.3958  mix_decode.d0.loss_mask: 0.6088  mix_decode.d0.loss_dice: 0.9330  mix_decode.d1.loss_cls: 0.3773  mix_decode.d1.loss_mask: 0.6032  mix_decode.d1.loss_dice: 0.8815  mix_decode.d2.loss_cls: 0.3460  mix_decode.d2.loss_mask: 0.6293  mix_decode.d2.loss_dice: 0.8644  mix_decode.d3.loss_cls: 0.3593  mix_decode.d3.loss_mask: 0.6186  mix_decode.d3.loss_dice: 0.8665  mix_decode.d4.loss_cls: 0.3620  mix_decode.d4.loss_mask: 0.6381  mix_decode.d4.loss_dice: 0.8775  mix_decode.d5.loss_cls: 0.3592  mix_decode.d5.loss_mask: 0.6308  mix_decode.d5.loss_dice: 0.9216  mix_decode.d6.loss_cls: 0.3123  mix_decode.d6.loss_mask: 0.6213  mix_decode.d6.loss_dice: 0.9092  mix_decode.d7.loss_cls: 0.3584  mix_decode.d7.loss_mask: 0.6259  mix_decode.d7.loss_dice: 0.9077  mix_decode.d8.loss_cls: 0.3720  mix_decode.d8.loss_mask: 0.5931  mix_decode.d8.loss_dice: 0.8692
2025/03/28 23:12:57 - mmengine - INFO - Iter(train) [12650/20000]  base_lr: 4.0621e-05 lr: 4.0621e-05  eta: 3:22:50  time: 1.9953  data_time: 0.0269  memory: 10753  loss: 50.9343  decode.loss_cls: 0.3583  decode.loss_mask: 1.3518  decode.loss_dice: 1.6042  decode.d0.loss_cls: 0.5211  decode.d0.loss_mask: 1.3835  decode.d0.loss_dice: 1.6450  decode.d1.loss_cls: 0.3152  decode.d1.loss_mask: 1.3822  decode.d1.loss_dice: 1.5780  decode.d2.loss_cls: 0.3602  decode.d2.loss_mask: 1.3645  decode.d2.loss_dice: 1.5354  decode.d3.loss_cls: 0.3964  decode.d3.loss_mask: 1.4582  decode.d3.loss_dice: 1.5506  decode.d4.loss_cls: 0.4162  decode.d4.loss_mask: 1.3989  decode.d4.loss_dice: 1.5528  decode.d5.loss_cls: 0.4081  decode.d5.loss_mask: 1.3503  decode.d5.loss_dice: 1.5843  decode.d6.loss_cls: 0.3559  decode.d6.loss_mask: 1.4198  decode.d6.loss_dice: 1.5852  decode.d7.loss_cls: 0.3482  decode.d7.loss_mask: 1.3750  decode.d7.loss_dice: 1.6003  decode.d8.loss_cls: 0.4046  decode.d8.loss_mask: 1.3348  decode.d8.loss_dice: 1.5876  mix_decode.loss_cls: 0.3368  mix_decode.loss_mask: 0.5182  mix_decode.loss_dice: 0.8915  mix_decode.d0.loss_cls: 0.2757  mix_decode.d0.loss_mask: 0.5062  mix_decode.d0.loss_dice: 0.9617  mix_decode.d1.loss_cls: 0.3337  mix_decode.d1.loss_mask: 0.5012  mix_decode.d1.loss_dice: 0.8725  mix_decode.d2.loss_cls: 0.3348  mix_decode.d2.loss_mask: 0.5155  mix_decode.d2.loss_dice: 0.8656  mix_decode.d3.loss_cls: 0.3219  mix_decode.d3.loss_mask: 0.5087  mix_decode.d3.loss_dice: 0.8801  mix_decode.d4.loss_cls: 0.3585  mix_decode.d4.loss_mask: 0.5119  mix_decode.d4.loss_dice: 0.8715  mix_decode.d5.loss_cls: 0.3805  mix_decode.d5.loss_mask: 0.5068  mix_decode.d5.loss_dice: 0.8772  mix_decode.d6.loss_cls: 0.3555  mix_decode.d6.loss_mask: 0.5171  mix_decode.d6.loss_dice: 0.9067  mix_decode.d7.loss_cls: 0.3516  mix_decode.d7.loss_mask: 0.5067  mix_decode.d7.loss_dice: 0.8840  mix_decode.d8.loss_cls: 0.3211  mix_decode.d8.loss_mask: 0.5142  mix_decode.d8.loss_dice: 0.9205
2025/03/28 23:14:33 - mmengine - INFO - Iter(train) [12700/20000]  base_lr: 4.0372e-05 lr: 4.0372e-05  eta: 3:21:35  time: 1.9455  data_time: 0.0263  memory: 10762  loss: 56.2698  decode.loss_cls: 0.4638  decode.loss_mask: 1.6401  decode.loss_dice: 1.7329  decode.d0.loss_cls: 0.4576  decode.d0.loss_mask: 1.6183  decode.d0.loss_dice: 1.7778  decode.d1.loss_cls: 0.4292  decode.d1.loss_mask: 1.6704  decode.d1.loss_dice: 1.7522  decode.d2.loss_cls: 0.4295  decode.d2.loss_mask: 1.6320  decode.d2.loss_dice: 1.7330  decode.d3.loss_cls: 0.4372  decode.d3.loss_mask: 1.6866  decode.d3.loss_dice: 1.7252  decode.d4.loss_cls: 0.4616  decode.d4.loss_mask: 1.5861  decode.d4.loss_dice: 1.7040  decode.d5.loss_cls: 0.4995  decode.d5.loss_mask: 1.6093  decode.d5.loss_dice: 1.7765  decode.d6.loss_cls: 0.4459  decode.d6.loss_mask: 1.6696  decode.d6.loss_dice: 1.7685  decode.d7.loss_cls: 0.4184  decode.d7.loss_mask: 1.6384  decode.d7.loss_dice: 1.7520  decode.d8.loss_cls: 0.4157  decode.d8.loss_mask: 1.6614  decode.d8.loss_dice: 1.7412  mix_decode.loss_cls: 0.2392  mix_decode.loss_mask: 0.6887  mix_decode.loss_dice: 0.8529  mix_decode.d0.loss_cls: 0.2410  mix_decode.d0.loss_mask: 0.6676  mix_decode.d0.loss_dice: 0.8641  mix_decode.d1.loss_cls: 0.2431  mix_decode.d1.loss_mask: 0.6728  mix_decode.d1.loss_dice: 0.8521  mix_decode.d2.loss_cls: 0.2753  mix_decode.d2.loss_mask: 0.6723  mix_decode.d2.loss_dice: 0.8262  mix_decode.d3.loss_cls: 0.2647  mix_decode.d3.loss_mask: 0.6770  mix_decode.d3.loss_dice: 0.8412  mix_decode.d4.loss_cls: 0.3070  mix_decode.d4.loss_mask: 0.6657  mix_decode.d4.loss_dice: 0.8493  mix_decode.d5.loss_cls: 0.2975  mix_decode.d5.loss_mask: 0.6857  mix_decode.d5.loss_dice: 0.8412  mix_decode.d6.loss_cls: 0.2708  mix_decode.d6.loss_mask: 0.6875  mix_decode.d6.loss_dice: 0.8499  mix_decode.d7.loss_cls: 0.2317  mix_decode.d7.loss_mask: 0.6939  mix_decode.d7.loss_dice: 0.8827  mix_decode.d8.loss_cls: 0.2717  mix_decode.d8.loss_mask: 0.6687  mix_decode.d8.loss_dice: 0.8546
2025/03/28 23:16:08 - mmengine - INFO - Iter(train) [12750/20000]  base_lr: 4.0123e-05 lr: 4.0123e-05  eta: 3:20:19  time: 1.8589  data_time: 0.0279  memory: 10739  loss: 58.5808  decode.loss_cls: 0.4963  decode.loss_mask: 1.6154  decode.loss_dice: 1.8614  decode.d0.loss_cls: 0.5542  decode.d0.loss_mask: 1.5935  decode.d0.loss_dice: 1.8824  decode.d1.loss_cls: 0.5033  decode.d1.loss_mask: 1.6370  decode.d1.loss_dice: 1.8700  decode.d2.loss_cls: 0.5112  decode.d2.loss_mask: 1.6217  decode.d2.loss_dice: 1.8481  decode.d3.loss_cls: 0.4729  decode.d3.loss_mask: 1.6666  decode.d3.loss_dice: 1.8400  decode.d4.loss_cls: 0.5057  decode.d4.loss_mask: 1.6297  decode.d4.loss_dice: 1.8809  decode.d5.loss_cls: 0.4726  decode.d5.loss_mask: 1.6887  decode.d5.loss_dice: 1.8588  decode.d6.loss_cls: 0.4800  decode.d6.loss_mask: 1.6503  decode.d6.loss_dice: 1.8424  decode.d7.loss_cls: 0.4526  decode.d7.loss_mask: 1.6486  decode.d7.loss_dice: 1.8711  decode.d8.loss_cls: 0.4258  decode.d8.loss_mask: 1.7003  decode.d8.loss_dice: 1.8960  mix_decode.loss_cls: 0.2972  mix_decode.loss_mask: 0.6476  mix_decode.loss_dice: 0.9325  mix_decode.d0.loss_cls: 0.2683  mix_decode.d0.loss_mask: 0.6244  mix_decode.d0.loss_dice: 0.9842  mix_decode.d1.loss_cls: 0.2804  mix_decode.d1.loss_mask: 0.6339  mix_decode.d1.loss_dice: 0.9269  mix_decode.d2.loss_cls: 0.2760  mix_decode.d2.loss_mask: 0.6464  mix_decode.d2.loss_dice: 0.9554  mix_decode.d3.loss_cls: 0.2950  mix_decode.d3.loss_mask: 0.6293  mix_decode.d3.loss_dice: 0.9159  mix_decode.d4.loss_cls: 0.3027  mix_decode.d4.loss_mask: 0.6367  mix_decode.d4.loss_dice: 0.8989  mix_decode.d5.loss_cls: 0.3355  mix_decode.d5.loss_mask: 0.6473  mix_decode.d5.loss_dice: 0.9080  mix_decode.d6.loss_cls: 0.2577  mix_decode.d6.loss_mask: 0.6370  mix_decode.d6.loss_dice: 0.9491  mix_decode.d7.loss_cls: 0.2516  mix_decode.d7.loss_mask: 0.6573  mix_decode.d7.loss_dice: 0.9559  mix_decode.d8.loss_cls: 0.2882  mix_decode.d8.loss_mask: 0.6354  mix_decode.d8.loss_dice: 0.9289
2025/03/28 23:17:42 - mmengine - INFO - Iter(train) [12800/20000]  base_lr: 3.9874e-05 lr: 3.9874e-05  eta: 3:19:02  time: 1.8576  data_time: 0.0276  memory: 10746  loss: 57.7820  decode.loss_cls: 0.5195  decode.loss_mask: 1.6654  decode.loss_dice: 1.7845  decode.d0.loss_cls: 0.5793  decode.d0.loss_mask: 1.6959  decode.d0.loss_dice: 1.8638  decode.d1.loss_cls: 0.4705  decode.d1.loss_mask: 1.6545  decode.d1.loss_dice: 1.7411  decode.d2.loss_cls: 0.4923  decode.d2.loss_mask: 1.6575  decode.d2.loss_dice: 1.8562  decode.d3.loss_cls: 0.5655  decode.d3.loss_mask: 1.6545  decode.d3.loss_dice: 1.8264  decode.d4.loss_cls: 0.5831  decode.d4.loss_mask: 1.6058  decode.d4.loss_dice: 1.7574  decode.d5.loss_cls: 0.5907  decode.d5.loss_mask: 1.5676  decode.d5.loss_dice: 1.7437  decode.d6.loss_cls: 0.4732  decode.d6.loss_mask: 1.7770  decode.d6.loss_dice: 1.8836  decode.d7.loss_cls: 0.4859  decode.d7.loss_mask: 1.7075  decode.d7.loss_dice: 1.8383  decode.d8.loss_cls: 0.5236  decode.d8.loss_mask: 1.5859  decode.d8.loss_dice: 1.7224  mix_decode.loss_cls: 0.4315  mix_decode.loss_mask: 0.4825  mix_decode.loss_dice: 0.8720  mix_decode.d0.loss_cls: 0.3531  mix_decode.d0.loss_mask: 0.5073  mix_decode.d0.loss_dice: 0.9902  mix_decode.d1.loss_cls: 0.4323  mix_decode.d1.loss_mask: 0.4743  mix_decode.d1.loss_dice: 0.8791  mix_decode.d2.loss_cls: 0.4169  mix_decode.d2.loss_mask: 0.4807  mix_decode.d2.loss_dice: 0.8792  mix_decode.d3.loss_cls: 0.3776  mix_decode.d3.loss_mask: 0.5071  mix_decode.d3.loss_dice: 0.9212  mix_decode.d4.loss_cls: 0.4026  mix_decode.d4.loss_mask: 0.5071  mix_decode.d4.loss_dice: 0.8829  mix_decode.d5.loss_cls: 0.4048  mix_decode.d5.loss_mask: 0.4829  mix_decode.d5.loss_dice: 0.8829  mix_decode.d6.loss_cls: 0.3993  mix_decode.d6.loss_mask: 0.4913  mix_decode.d6.loss_dice: 0.8781  mix_decode.d7.loss_cls: 0.4171  mix_decode.d7.loss_mask: 0.5019  mix_decode.d7.loss_dice: 0.8976  mix_decode.d8.loss_cls: 0.3880  mix_decode.d8.loss_mask: 0.4821  mix_decode.d8.loss_dice: 0.8858
2025/03/28 23:19:18 - mmengine - INFO - Iter(train) [12850/20000]  base_lr: 3.9625e-05 lr: 3.9625e-05  eta: 3:17:47  time: 1.9266  data_time: 0.0242  memory: 10754  loss: 53.5581  decode.loss_cls: 0.4220  decode.loss_mask: 1.5774  decode.loss_dice: 1.6291  decode.d0.loss_cls: 0.5161  decode.d0.loss_mask: 1.6394  decode.d0.loss_dice: 1.6618  decode.d1.loss_cls: 0.3675  decode.d1.loss_mask: 1.6032  decode.d1.loss_dice: 1.6766  decode.d2.loss_cls: 0.4454  decode.d2.loss_mask: 1.6049  decode.d2.loss_dice: 1.6035  decode.d3.loss_cls: 0.4430  decode.d3.loss_mask: 1.6500  decode.d3.loss_dice: 1.6068  decode.d4.loss_cls: 0.4318  decode.d4.loss_mask: 1.5993  decode.d4.loss_dice: 1.5940  decode.d5.loss_cls: 0.4077  decode.d5.loss_mask: 1.6459  decode.d5.loss_dice: 1.6344  decode.d6.loss_cls: 0.4258  decode.d6.loss_mask: 1.6282  decode.d6.loss_dice: 1.6515  decode.d7.loss_cls: 0.3670  decode.d7.loss_mask: 1.6144  decode.d7.loss_dice: 1.6324  decode.d8.loss_cls: 0.3474  decode.d8.loss_mask: 1.6073  decode.d8.loss_dice: 1.6809  mix_decode.loss_cls: 0.3334  mix_decode.loss_mask: 0.5750  mix_decode.loss_dice: 0.7871  mix_decode.d0.loss_cls: 0.3241  mix_decode.d0.loss_mask: 0.5695  mix_decode.d0.loss_dice: 0.8439  mix_decode.d1.loss_cls: 0.3266  mix_decode.d1.loss_mask: 0.5815  mix_decode.d1.loss_dice: 0.7951  mix_decode.d2.loss_cls: 0.3126  mix_decode.d2.loss_mask: 0.5715  mix_decode.d2.loss_dice: 0.7923  mix_decode.d3.loss_cls: 0.3111  mix_decode.d3.loss_mask: 0.5898  mix_decode.d3.loss_dice: 0.7811  mix_decode.d4.loss_cls: 0.3585  mix_decode.d4.loss_mask: 0.5839  mix_decode.d4.loss_dice: 0.7516  mix_decode.d5.loss_cls: 0.3360  mix_decode.d5.loss_mask: 0.6038  mix_decode.d5.loss_dice: 0.7657  mix_decode.d6.loss_cls: 0.2874  mix_decode.d6.loss_mask: 0.5879  mix_decode.d6.loss_dice: 0.7759  mix_decode.d7.loss_cls: 0.2866  mix_decode.d7.loss_mask: 0.5772  mix_decode.d7.loss_dice: 0.7839  mix_decode.d8.loss_cls: 0.3066  mix_decode.d8.loss_mask: 0.5625  mix_decode.d8.loss_dice: 0.7813
2025/03/28 23:20:53 - mmengine - INFO - Iter(train) [12900/20000]  base_lr: 3.9375e-05 lr: 3.9375e-05  eta: 3:16:31  time: 1.9061  data_time: 0.0241  memory: 10756  loss: 55.1120  decode.loss_cls: 0.5544  decode.loss_mask: 1.7320  decode.loss_dice: 1.6729  decode.d0.loss_cls: 0.6301  decode.d0.loss_mask: 1.7703  decode.d0.loss_dice: 1.6708  decode.d1.loss_cls: 0.5554  decode.d1.loss_mask: 1.6906  decode.d1.loss_dice: 1.5977  decode.d2.loss_cls: 0.5236  decode.d2.loss_mask: 1.7038  decode.d2.loss_dice: 1.5890  decode.d3.loss_cls: 0.5070  decode.d3.loss_mask: 1.7514  decode.d3.loss_dice: 1.6380  decode.d4.loss_cls: 0.5689  decode.d4.loss_mask: 1.7226  decode.d4.loss_dice: 1.6662  decode.d5.loss_cls: 0.5590  decode.d5.loss_mask: 1.6995  decode.d5.loss_dice: 1.6400  decode.d6.loss_cls: 0.5131  decode.d6.loss_mask: 1.7754  decode.d6.loss_dice: 1.6986  decode.d7.loss_cls: 0.5949  decode.d7.loss_mask: 1.8267  decode.d7.loss_dice: 1.6662  decode.d8.loss_cls: 0.5246  decode.d8.loss_mask: 1.7595  decode.d8.loss_dice: 1.6459  mix_decode.loss_cls: 0.2834  mix_decode.loss_mask: 0.5355  mix_decode.loss_dice: 0.6918  mix_decode.d0.loss_cls: 0.2740  mix_decode.d0.loss_mask: 0.5744  mix_decode.d0.loss_dice: 0.7993  mix_decode.d1.loss_cls: 0.2973  mix_decode.d1.loss_mask: 0.5325  mix_decode.d1.loss_dice: 0.6998  mix_decode.d2.loss_cls: 0.2897  mix_decode.d2.loss_mask: 0.5312  mix_decode.d2.loss_dice: 0.7166  mix_decode.d3.loss_cls: 0.2980  mix_decode.d3.loss_mask: 0.5338  mix_decode.d3.loss_dice: 0.7150  mix_decode.d4.loss_cls: 0.3231  mix_decode.d4.loss_mask: 0.5875  mix_decode.d4.loss_dice: 0.7111  mix_decode.d5.loss_cls: 0.3120  mix_decode.d5.loss_mask: 0.5486  mix_decode.d5.loss_dice: 0.6802  mix_decode.d6.loss_cls: 0.2691  mix_decode.d6.loss_mask: 0.5613  mix_decode.d6.loss_dice: 0.7395  mix_decode.d7.loss_cls: 0.2483  mix_decode.d7.loss_mask: 0.6019  mix_decode.d7.loss_dice: 0.7486  mix_decode.d8.loss_cls: 0.2711  mix_decode.d8.loss_mask: 0.5471  mix_decode.d8.loss_dice: 0.7425
2025/03/28 23:22:29 - mmengine - INFO - Iter(train) [12950/20000]  base_lr: 3.9126e-05 lr: 3.9126e-05  eta: 3:15:14  time: 1.9054  data_time: 0.0260  memory: 10751  loss: 53.7466  decode.loss_cls: 0.4594  decode.loss_mask: 1.5631  decode.loss_dice: 1.5676  decode.d0.loss_cls: 0.4891  decode.d0.loss_mask: 1.6033  decode.d0.loss_dice: 1.5591  decode.d1.loss_cls: 0.4069  decode.d1.loss_mask: 1.5527  decode.d1.loss_dice: 1.5353  decode.d2.loss_cls: 0.4600  decode.d2.loss_mask: 1.5241  decode.d2.loss_dice: 1.5816  decode.d3.loss_cls: 0.4685  decode.d3.loss_mask: 1.5379  decode.d3.loss_dice: 1.5632  decode.d4.loss_cls: 0.3974  decode.d4.loss_mask: 1.6546  decode.d4.loss_dice: 1.5808  decode.d5.loss_cls: 0.4676  decode.d5.loss_mask: 1.5721  decode.d5.loss_dice: 1.5467  decode.d6.loss_cls: 0.5020  decode.d6.loss_mask: 1.6001  decode.d6.loss_dice: 1.5887  decode.d7.loss_cls: 0.4880  decode.d7.loss_mask: 1.5354  decode.d7.loss_dice: 1.5714  decode.d8.loss_cls: 0.4498  decode.d8.loss_mask: 1.5793  decode.d8.loss_dice: 1.5669  mix_decode.loss_cls: 0.2610  mix_decode.loss_mask: 0.5796  mix_decode.loss_dice: 0.9435  mix_decode.d0.loss_cls: 0.2097  mix_decode.d0.loss_mask: 0.6050  mix_decode.d0.loss_dice: 0.9799  mix_decode.d1.loss_cls: 0.2520  mix_decode.d1.loss_mask: 0.5674  mix_decode.d1.loss_dice: 0.9449  mix_decode.d2.loss_cls: 0.2813  mix_decode.d2.loss_mask: 0.5621  mix_decode.d2.loss_dice: 0.9165  mix_decode.d3.loss_cls: 0.2345  mix_decode.d3.loss_mask: 0.5777  mix_decode.d3.loss_dice: 0.9604  mix_decode.d4.loss_cls: 0.2931  mix_decode.d4.loss_mask: 0.5694  mix_decode.d4.loss_dice: 0.9455  mix_decode.d5.loss_cls: 0.2779  mix_decode.d5.loss_mask: 0.5398  mix_decode.d5.loss_dice: 0.9332  mix_decode.d6.loss_cls: 0.2743  mix_decode.d6.loss_mask: 0.5755  mix_decode.d6.loss_dice: 0.9506  mix_decode.d7.loss_cls: 0.2063  mix_decode.d7.loss_mask: 0.5731  mix_decode.d7.loss_dice: 0.9675  mix_decode.d8.loss_cls: 0.2647  mix_decode.d8.loss_mask: 0.5663  mix_decode.d8.loss_dice: 0.9611
2025/03/28 23:24:02 - mmengine - INFO - Exp name: r2u_20250328_164133
2025/03/28 23:24:02 - mmengine - INFO - Iter(train) [13000/20000]  base_lr: 3.8876e-05 lr: 3.8876e-05  eta: 3:13:57  time: 1.8379  data_time: 0.0257  memory: 10752  loss: 48.1739  decode.loss_cls: 0.3616  decode.loss_mask: 1.4404  decode.loss_dice: 1.6042  decode.d0.loss_cls: 0.4285  decode.d0.loss_mask: 1.4452  decode.d0.loss_dice: 1.6975  decode.d1.loss_cls: 0.3672  decode.d1.loss_mask: 1.4124  decode.d1.loss_dice: 1.6589  decode.d2.loss_cls: 0.4044  decode.d2.loss_mask: 1.3932  decode.d2.loss_dice: 1.5684  decode.d3.loss_cls: 0.4161  decode.d3.loss_mask: 1.4260  decode.d3.loss_dice: 1.5849  decode.d4.loss_cls: 0.2676  decode.d4.loss_mask: 1.4192  decode.d4.loss_dice: 1.6389  decode.d5.loss_cls: 0.2036  decode.d5.loss_mask: 1.4995  decode.d5.loss_dice: 1.6482  decode.d6.loss_cls: 0.3768  decode.d6.loss_mask: 1.3619  decode.d6.loss_dice: 1.5016  decode.d7.loss_cls: 0.2992  decode.d7.loss_mask: 1.4542  decode.d7.loss_dice: 1.5866  decode.d8.loss_cls: 0.3446  decode.d8.loss_mask: 1.4276  decode.d8.loss_dice: 1.5855  mix_decode.loss_cls: 0.2533  mix_decode.loss_mask: 0.4963  mix_decode.loss_dice: 0.6818  mix_decode.d0.loss_cls: 0.2378  mix_decode.d0.loss_mask: 0.5125  mix_decode.d0.loss_dice: 0.7442  mix_decode.d1.loss_cls: 0.2561  mix_decode.d1.loss_mask: 0.4924  mix_decode.d1.loss_dice: 0.6732  mix_decode.d2.loss_cls: 0.2525  mix_decode.d2.loss_mask: 0.4999  mix_decode.d2.loss_dice: 0.7021  mix_decode.d3.loss_cls: 0.2063  mix_decode.d3.loss_mask: 0.5068  mix_decode.d3.loss_dice: 0.6853  mix_decode.d4.loss_cls: 0.2750  mix_decode.d4.loss_mask: 0.4754  mix_decode.d4.loss_dice: 0.6838  mix_decode.d5.loss_cls: 0.2857  mix_decode.d5.loss_mask: 0.4602  mix_decode.d5.loss_dice: 0.6653  mix_decode.d6.loss_cls: 0.2987  mix_decode.d6.loss_mask: 0.4911  mix_decode.d6.loss_dice: 0.6695  mix_decode.d7.loss_cls: 0.2441  mix_decode.d7.loss_mask: 0.5089  mix_decode.d7.loss_dice: 0.6659  mix_decode.d8.loss_cls: 0.2743  mix_decode.d8.loss_mask: 0.4892  mix_decode.d8.loss_dice: 0.6627
2025/03/28 23:25:38 - mmengine - INFO - Iter(train) [13050/20000]  base_lr: 3.8626e-05 lr: 3.8626e-05  eta: 3:12:40  time: 1.9424  data_time: 0.0258  memory: 10740  loss: 51.7688  decode.loss_cls: 0.5373  decode.loss_mask: 1.3406  decode.loss_dice: 1.6255  decode.d0.loss_cls: 0.4868  decode.d0.loss_mask: 1.3360  decode.d0.loss_dice: 1.6932  decode.d1.loss_cls: 0.5276  decode.d1.loss_mask: 1.3680  decode.d1.loss_dice: 1.6599  decode.d2.loss_cls: 0.4492  decode.d2.loss_mask: 1.4286  decode.d2.loss_dice: 1.6304  decode.d3.loss_cls: 0.4472  decode.d3.loss_mask: 1.4235  decode.d3.loss_dice: 1.6679  decode.d4.loss_cls: 0.5787  decode.d4.loss_mask: 1.3194  decode.d4.loss_dice: 1.6489  decode.d5.loss_cls: 0.3932  decode.d5.loss_mask: 1.3443  decode.d5.loss_dice: 1.6803  decode.d6.loss_cls: 0.4778  decode.d6.loss_mask: 1.3867  decode.d6.loss_dice: 1.6925  decode.d7.loss_cls: 0.5329  decode.d7.loss_mask: 1.3602  decode.d7.loss_dice: 1.6588  decode.d8.loss_cls: 0.5144  decode.d8.loss_mask: 1.3722  decode.d8.loss_dice: 1.6428  mix_decode.loss_cls: 0.2553  mix_decode.loss_mask: 0.5615  mix_decode.loss_dice: 0.8299  mix_decode.d0.loss_cls: 0.2379  mix_decode.d0.loss_mask: 0.5833  mix_decode.d0.loss_dice: 0.8840  mix_decode.d1.loss_cls: 0.2398  mix_decode.d1.loss_mask: 0.5537  mix_decode.d1.loss_dice: 0.7986  mix_decode.d2.loss_cls: 0.2771  mix_decode.d2.loss_mask: 0.5562  mix_decode.d2.loss_dice: 0.8052  mix_decode.d3.loss_cls: 0.3115  mix_decode.d3.loss_mask: 0.5404  mix_decode.d3.loss_dice: 0.7792  mix_decode.d4.loss_cls: 0.2838  mix_decode.d4.loss_mask: 0.5496  mix_decode.d4.loss_dice: 0.8245  mix_decode.d5.loss_cls: 0.2387  mix_decode.d5.loss_mask: 0.5564  mix_decode.d5.loss_dice: 0.9045  mix_decode.d6.loss_cls: 0.3029  mix_decode.d6.loss_mask: 0.5456  mix_decode.d6.loss_dice: 0.7950  mix_decode.d7.loss_cls: 0.2861  mix_decode.d7.loss_mask: 0.5487  mix_decode.d7.loss_dice: 0.8028  mix_decode.d8.loss_cls: 0.3074  mix_decode.d8.loss_mask: 0.5500  mix_decode.d8.loss_dice: 0.8342
2025/03/28 23:27:13 - mmengine - INFO - Iter(train) [13100/20000]  base_lr: 3.8376e-05 lr: 3.8376e-05  eta: 3:11:23  time: 1.8439  data_time: 0.0235  memory: 10747  loss: 57.9899  decode.loss_cls: 0.6610  decode.loss_mask: 1.6744  decode.loss_dice: 1.7450  decode.d0.loss_cls: 0.8485  decode.d0.loss_mask: 1.5940  decode.d0.loss_dice: 1.7599  decode.d1.loss_cls: 0.6839  decode.d1.loss_mask: 1.7313  decode.d1.loss_dice: 1.6713  decode.d2.loss_cls: 0.6315  decode.d2.loss_mask: 1.7219  decode.d2.loss_dice: 1.7235  decode.d3.loss_cls: 0.6908  decode.d3.loss_mask: 1.7176  decode.d3.loss_dice: 1.7316  decode.d4.loss_cls: 0.7125  decode.d4.loss_mask: 1.6305  decode.d4.loss_dice: 1.7507  decode.d5.loss_cls: 0.6977  decode.d5.loss_mask: 1.5636  decode.d5.loss_dice: 1.6416  decode.d6.loss_cls: 0.7374  decode.d6.loss_mask: 1.5914  decode.d6.loss_dice: 1.7082  decode.d7.loss_cls: 0.7027  decode.d7.loss_mask: 1.6627  decode.d7.loss_dice: 1.6412  decode.d8.loss_cls: 0.7506  decode.d8.loss_mask: 1.6581  decode.d8.loss_dice: 1.6326  mix_decode.loss_cls: 0.2835  mix_decode.loss_mask: 0.5579  mix_decode.loss_dice: 0.8937  mix_decode.d0.loss_cls: 0.3185  mix_decode.d0.loss_mask: 0.5205  mix_decode.d0.loss_dice: 0.9215  mix_decode.d1.loss_cls: 0.3572  mix_decode.d1.loss_mask: 0.5307  mix_decode.d1.loss_dice: 0.8574  mix_decode.d2.loss_cls: 0.3489  mix_decode.d2.loss_mask: 0.5090  mix_decode.d2.loss_dice: 0.8335  mix_decode.d3.loss_cls: 0.3158  mix_decode.d3.loss_mask: 0.5121  mix_decode.d3.loss_dice: 0.8599  mix_decode.d4.loss_cls: 0.3935  mix_decode.d4.loss_mask: 0.5141  mix_decode.d4.loss_dice: 0.8689  mix_decode.d5.loss_cls: 0.3766  mix_decode.d5.loss_mask: 0.4819  mix_decode.d5.loss_dice: 0.8539  mix_decode.d6.loss_cls: 0.3741  mix_decode.d6.loss_mask: 0.4965  mix_decode.d6.loss_dice: 0.8542  mix_decode.d7.loss_cls: 0.3691  mix_decode.d7.loss_mask: 0.5249  mix_decode.d7.loss_dice: 0.8703  mix_decode.d8.loss_cls: 0.3665  mix_decode.d8.loss_mask: 0.4909  mix_decode.d8.loss_dice: 0.8669
2025/03/28 23:28:48 - mmengine - INFO - Iter(train) [13150/20000]  base_lr: 3.8125e-05 lr: 3.8125e-05  eta: 3:10:06  time: 1.9669  data_time: 0.0258  memory: 10742  loss: 59.3986  decode.loss_cls: 0.4987  decode.loss_mask: 1.9808  decode.loss_dice: 1.7974  decode.d0.loss_cls: 0.7802  decode.d0.loss_mask: 1.7786  decode.d0.loss_dice: 1.8038  decode.d1.loss_cls: 0.6422  decode.d1.loss_mask: 1.8352  decode.d1.loss_dice: 1.7506  decode.d2.loss_cls: 0.5787  decode.d2.loss_mask: 1.8363  decode.d2.loss_dice: 1.7702  decode.d3.loss_cls: 0.5207  decode.d3.loss_mask: 1.9373  decode.d3.loss_dice: 1.8000  decode.d4.loss_cls: 0.5914  decode.d4.loss_mask: 1.8856  decode.d4.loss_dice: 1.8071  decode.d5.loss_cls: 0.5495  decode.d5.loss_mask: 1.9048  decode.d5.loss_dice: 1.7831  decode.d6.loss_cls: 0.5755  decode.d6.loss_mask: 1.8458  decode.d6.loss_dice: 1.7974  decode.d7.loss_cls: 0.4838  decode.d7.loss_mask: 1.9400  decode.d7.loss_dice: 1.8124  decode.d8.loss_cls: 0.4473  decode.d8.loss_mask: 1.9587  decode.d8.loss_dice: 1.7841  mix_decode.loss_cls: 0.3285  mix_decode.loss_mask: 0.5956  mix_decode.loss_dice: 0.7407  mix_decode.d0.loss_cls: 0.3402  mix_decode.d0.loss_mask: 0.5804  mix_decode.d0.loss_dice: 0.8324  mix_decode.d1.loss_cls: 0.3234  mix_decode.d1.loss_mask: 0.5888  mix_decode.d1.loss_dice: 0.7621  mix_decode.d2.loss_cls: 0.3207  mix_decode.d2.loss_mask: 0.5970  mix_decode.d2.loss_dice: 0.7720  mix_decode.d3.loss_cls: 0.3537  mix_decode.d3.loss_mask: 0.6012  mix_decode.d3.loss_dice: 0.7682  mix_decode.d4.loss_cls: 0.3146  mix_decode.d4.loss_mask: 0.5960  mix_decode.d4.loss_dice: 0.7571  mix_decode.d5.loss_cls: 0.3052  mix_decode.d5.loss_mask: 0.5898  mix_decode.d5.loss_dice: 0.7675  mix_decode.d6.loss_cls: 0.3417  mix_decode.d6.loss_mask: 0.5970  mix_decode.d6.loss_dice: 0.7732  mix_decode.d7.loss_cls: 0.3377  mix_decode.d7.loss_mask: 0.5776  mix_decode.d7.loss_dice: 0.7787  mix_decode.d8.loss_cls: 0.3378  mix_decode.d8.loss_mask: 0.5983  mix_decode.d8.loss_dice: 0.7444
2025/03/28 23:30:23 - mmengine - INFO - Iter(train) [13200/20000]  base_lr: 3.7875e-05 lr: 3.7875e-05  eta: 3:08:49  time: 1.8524  data_time: 0.0260  memory: 10763  loss: 56.2075  decode.loss_cls: 0.5712  decode.loss_mask: 1.6538  decode.loss_dice: 1.8314  decode.d0.loss_cls: 0.8661  decode.d0.loss_mask: 1.5779  decode.d0.loss_dice: 1.8546  decode.d1.loss_cls: 0.6389  decode.d1.loss_mask: 1.5776  decode.d1.loss_dice: 1.7338  decode.d2.loss_cls: 0.6335  decode.d2.loss_mask: 1.5754  decode.d2.loss_dice: 1.7121  decode.d3.loss_cls: 0.5771  decode.d3.loss_mask: 1.6329  decode.d3.loss_dice: 1.7298  decode.d4.loss_cls: 0.6378  decode.d4.loss_mask: 1.6111  decode.d4.loss_dice: 1.6943  decode.d5.loss_cls: 0.5559  decode.d5.loss_mask: 1.6341  decode.d5.loss_dice: 1.7452  decode.d6.loss_cls: 0.6647  decode.d6.loss_mask: 1.6123  decode.d6.loss_dice: 1.7479  decode.d7.loss_cls: 0.6253  decode.d7.loss_mask: 1.6409  decode.d7.loss_dice: 1.7451  decode.d8.loss_cls: 0.6772  decode.d8.loss_mask: 1.6000  decode.d8.loss_dice: 1.7706  mix_decode.loss_cls: 0.2248  mix_decode.loss_mask: 0.5950  mix_decode.loss_dice: 0.8514  mix_decode.d0.loss_cls: 0.2638  mix_decode.d0.loss_mask: 0.5691  mix_decode.d0.loss_dice: 0.8558  mix_decode.d1.loss_cls: 0.2279  mix_decode.d1.loss_mask: 0.5713  mix_decode.d1.loss_dice: 0.8199  mix_decode.d2.loss_cls: 0.2495  mix_decode.d2.loss_mask: 0.5442  mix_decode.d2.loss_dice: 0.7923  mix_decode.d3.loss_cls: 0.2443  mix_decode.d3.loss_mask: 0.5376  mix_decode.d3.loss_dice: 0.7683  mix_decode.d4.loss_cls: 0.2476  mix_decode.d4.loss_mask: 0.5566  mix_decode.d4.loss_dice: 0.7716  mix_decode.d5.loss_cls: 0.2817  mix_decode.d5.loss_mask: 0.5673  mix_decode.d5.loss_dice: 0.7788  mix_decode.d6.loss_cls: 0.2280  mix_decode.d6.loss_mask: 0.5581  mix_decode.d6.loss_dice: 0.7941  mix_decode.d7.loss_cls: 0.2363  mix_decode.d7.loss_mask: 0.5713  mix_decode.d7.loss_dice: 0.8105  mix_decode.d8.loss_cls: 0.2165  mix_decode.d8.loss_mask: 0.5335  mix_decode.d8.loss_dice: 0.8117
2025/03/28 23:32:00 - mmengine - INFO - Iter(train) [13250/20000]  base_lr: 3.7624e-05 lr: 3.7624e-05  eta: 3:07:33  time: 1.9543  data_time: 0.0274  memory: 10743  loss: 54.7600  decode.loss_cls: 0.3531  decode.loss_mask: 1.6324  decode.loss_dice: 1.7278  decode.d0.loss_cls: 0.4621  decode.d0.loss_mask: 1.6322  decode.d0.loss_dice: 1.7052  decode.d1.loss_cls: 0.3919  decode.d1.loss_mask: 1.5755  decode.d1.loss_dice: 1.6799  decode.d2.loss_cls: 0.4139  decode.d2.loss_mask: 1.6027  decode.d2.loss_dice: 1.6898  decode.d3.loss_cls: 0.3875  decode.d3.loss_mask: 1.6085  decode.d3.loss_dice: 1.7308  decode.d4.loss_cls: 0.3419  decode.d4.loss_mask: 1.6388  decode.d4.loss_dice: 1.7377  decode.d5.loss_cls: 0.3360  decode.d5.loss_mask: 1.6052  decode.d5.loss_dice: 1.7396  decode.d6.loss_cls: 0.4410  decode.d6.loss_mask: 1.6092  decode.d6.loss_dice: 1.7059  decode.d7.loss_cls: 0.3891  decode.d7.loss_mask: 1.5835  decode.d7.loss_dice: 1.7251  decode.d8.loss_cls: 0.3502  decode.d8.loss_mask: 1.6145  decode.d8.loss_dice: 1.7126  mix_decode.loss_cls: 0.4051  mix_decode.loss_mask: 0.5701  mix_decode.loss_dice: 0.7854  mix_decode.d0.loss_cls: 0.3639  mix_decode.d0.loss_mask: 0.5973  mix_decode.d0.loss_dice: 0.8499  mix_decode.d1.loss_cls: 0.3621  mix_decode.d1.loss_mask: 0.5725  mix_decode.d1.loss_dice: 0.8174  mix_decode.d2.loss_cls: 0.4030  mix_decode.d2.loss_mask: 0.5314  mix_decode.d2.loss_dice: 0.7812  mix_decode.d3.loss_cls: 0.3665  mix_decode.d3.loss_mask: 0.5702  mix_decode.d3.loss_dice: 0.7958  mix_decode.d4.loss_cls: 0.3476  mix_decode.d4.loss_mask: 0.5942  mix_decode.d4.loss_dice: 0.7948  mix_decode.d5.loss_cls: 0.3273  mix_decode.d5.loss_mask: 0.5913  mix_decode.d5.loss_dice: 0.8120  mix_decode.d6.loss_cls: 0.3861  mix_decode.d6.loss_mask: 0.5827  mix_decode.d6.loss_dice: 0.7990  mix_decode.d7.loss_cls: 0.3604  mix_decode.d7.loss_mask: 0.6146  mix_decode.d7.loss_dice: 0.8333  mix_decode.d8.loss_cls: 0.3725  mix_decode.d8.loss_mask: 0.5888  mix_decode.d8.loss_dice: 0.8599
2025/03/28 23:33:34 - mmengine - INFO - Iter(train) [13300/20000]  base_lr: 3.7373e-05 lr: 3.7373e-05  eta: 3:06:15  time: 1.8842  data_time: 0.0240  memory: 10755  loss: 54.7690  decode.loss_cls: 0.6657  decode.loss_mask: 1.3232  decode.loss_dice: 1.8653  decode.d0.loss_cls: 0.5981  decode.d0.loss_mask: 1.2569  decode.d0.loss_dice: 1.9712  decode.d1.loss_cls: 0.6213  decode.d1.loss_mask: 1.2754  decode.d1.loss_dice: 1.8971  decode.d2.loss_cls: 0.7196  decode.d2.loss_mask: 1.2886  decode.d2.loss_dice: 1.8096  decode.d3.loss_cls: 0.6853  decode.d3.loss_mask: 1.3469  decode.d3.loss_dice: 1.8753  decode.d4.loss_cls: 0.6161  decode.d4.loss_mask: 1.3196  decode.d4.loss_dice: 1.8459  decode.d5.loss_cls: 0.6756  decode.d5.loss_mask: 1.3302  decode.d5.loss_dice: 1.8841  decode.d6.loss_cls: 0.6265  decode.d6.loss_mask: 1.3354  decode.d6.loss_dice: 1.9002  decode.d7.loss_cls: 0.5885  decode.d7.loss_mask: 1.2887  decode.d7.loss_dice: 1.8398  decode.d8.loss_cls: 0.6360  decode.d8.loss_mask: 1.2669  decode.d8.loss_dice: 1.8954  mix_decode.loss_cls: 0.2649  mix_decode.loss_mask: 0.5308  mix_decode.loss_dice: 0.8023  mix_decode.d0.loss_cls: 0.2973  mix_decode.d0.loss_mask: 0.5334  mix_decode.d0.loss_dice: 0.9210  mix_decode.d1.loss_cls: 0.3598  mix_decode.d1.loss_mask: 0.5157  mix_decode.d1.loss_dice: 0.8025  mix_decode.d2.loss_cls: 0.3165  mix_decode.d2.loss_mask: 0.5164  mix_decode.d2.loss_dice: 0.7742  mix_decode.d3.loss_cls: 0.3201  mix_decode.d3.loss_mask: 0.5090  mix_decode.d3.loss_dice: 0.7683  mix_decode.d4.loss_cls: 0.3434  mix_decode.d4.loss_mask: 0.5126  mix_decode.d4.loss_dice: 0.8138  mix_decode.d5.loss_cls: 0.3311  mix_decode.d5.loss_mask: 0.5309  mix_decode.d5.loss_dice: 0.8146  mix_decode.d6.loss_cls: 0.3101  mix_decode.d6.loss_mask: 0.5519  mix_decode.d6.loss_dice: 0.8497  mix_decode.d7.loss_cls: 0.2958  mix_decode.d7.loss_mask: 0.5126  mix_decode.d7.loss_dice: 0.8343  mix_decode.d8.loss_cls: 0.2769  mix_decode.d8.loss_mask: 0.4952  mix_decode.d8.loss_dice: 0.8156
2025/03/28 23:35:10 - mmengine - INFO - Iter(train) [13350/20000]  base_lr: 3.7122e-05 lr: 3.7122e-05  eta: 3:04:57  time: 1.8521  data_time: 0.0302  memory: 10743  loss: 56.8363  decode.loss_cls: 0.5290  decode.loss_mask: 1.6142  decode.loss_dice: 1.7474  decode.d0.loss_cls: 0.7479  decode.d0.loss_mask: 1.5716  decode.d0.loss_dice: 1.8446  decode.d1.loss_cls: 0.5977  decode.d1.loss_mask: 1.5340  decode.d1.loss_dice: 1.7313  decode.d2.loss_cls: 0.6410  decode.d2.loss_mask: 1.5803  decode.d2.loss_dice: 1.6589  decode.d3.loss_cls: 0.5491  decode.d3.loss_mask: 1.5834  decode.d3.loss_dice: 1.7348  decode.d4.loss_cls: 0.5648  decode.d4.loss_mask: 1.5931  decode.d4.loss_dice: 1.7222  decode.d5.loss_cls: 0.4836  decode.d5.loss_mask: 1.5982  decode.d5.loss_dice: 1.8069  decode.d6.loss_cls: 0.5565  decode.d6.loss_mask: 1.6174  decode.d6.loss_dice: 1.7887  decode.d7.loss_cls: 0.5180  decode.d7.loss_mask: 1.5747  decode.d7.loss_dice: 1.7955  decode.d8.loss_cls: 0.5182  decode.d8.loss_mask: 1.5797  decode.d8.loss_dice: 1.7764  mix_decode.loss_cls: 0.3371  mix_decode.loss_mask: 0.6746  mix_decode.loss_dice: 0.7586  mix_decode.d0.loss_cls: 0.4150  mix_decode.d0.loss_mask: 0.6106  mix_decode.d0.loss_dice: 0.7933  mix_decode.d1.loss_cls: 0.3790  mix_decode.d1.loss_mask: 0.6148  mix_decode.d1.loss_dice: 0.7486  mix_decode.d2.loss_cls: 0.4047  mix_decode.d2.loss_mask: 0.6270  mix_decode.d2.loss_dice: 0.7307  mix_decode.d3.loss_cls: 0.4052  mix_decode.d3.loss_mask: 0.6437  mix_decode.d3.loss_dice: 0.7541  mix_decode.d4.loss_cls: 0.3894  mix_decode.d4.loss_mask: 0.6435  mix_decode.d4.loss_dice: 0.7241  mix_decode.d5.loss_cls: 0.3379  mix_decode.d5.loss_mask: 0.6464  mix_decode.d5.loss_dice: 0.7553  mix_decode.d6.loss_cls: 0.3648  mix_decode.d6.loss_mask: 0.6480  mix_decode.d6.loss_dice: 0.7706  mix_decode.d7.loss_cls: 0.3353  mix_decode.d7.loss_mask: 0.6477  mix_decode.d7.loss_dice: 0.7507  mix_decode.d8.loss_cls: 0.3276  mix_decode.d8.loss_mask: 0.6482  mix_decode.d8.loss_dice: 0.7904
2025/03/28 23:36:42 - mmengine - INFO - Iter(train) [13400/20000]  base_lr: 3.6871e-05 lr: 3.6871e-05  eta: 3:03:38  time: 1.8506  data_time: 0.0260  memory: 10761  loss: 58.9674  decode.loss_cls: 0.4950  decode.loss_mask: 1.7187  decode.loss_dice: 1.7355  decode.d0.loss_cls: 0.6825  decode.d0.loss_mask: 1.7422  decode.d0.loss_dice: 1.8142  decode.d1.loss_cls: 0.5851  decode.d1.loss_mask: 1.7722  decode.d1.loss_dice: 1.7320  decode.d2.loss_cls: 0.5719  decode.d2.loss_mask: 1.7534  decode.d2.loss_dice: 1.7453  decode.d3.loss_cls: 0.5691  decode.d3.loss_mask: 1.7834  decode.d3.loss_dice: 1.7933  decode.d4.loss_cls: 0.5275  decode.d4.loss_mask: 1.7322  decode.d4.loss_dice: 1.7364  decode.d5.loss_cls: 0.5335  decode.d5.loss_mask: 1.7670  decode.d5.loss_dice: 1.7662  decode.d6.loss_cls: 0.6447  decode.d6.loss_mask: 1.6945  decode.d6.loss_dice: 1.7463  decode.d7.loss_cls: 0.5607  decode.d7.loss_mask: 1.7557  decode.d7.loss_dice: 1.7423  decode.d8.loss_cls: 0.5893  decode.d8.loss_mask: 1.6835  decode.d8.loss_dice: 1.7350  mix_decode.loss_cls: 0.1651  mix_decode.loss_mask: 0.8000  mix_decode.loss_dice: 0.8331  mix_decode.d0.loss_cls: 0.2817  mix_decode.d0.loss_mask: 0.7241  mix_decode.d0.loss_dice: 0.8328  mix_decode.d1.loss_cls: 0.2984  mix_decode.d1.loss_mask: 0.7241  mix_decode.d1.loss_dice: 0.7815  mix_decode.d2.loss_cls: 0.2414  mix_decode.d2.loss_mask: 0.8061  mix_decode.d2.loss_dice: 0.8216  mix_decode.d3.loss_cls: 0.2593  mix_decode.d3.loss_mask: 0.7416  mix_decode.d3.loss_dice: 0.8210  mix_decode.d4.loss_cls: 0.2456  mix_decode.d4.loss_mask: 0.7251  mix_decode.d4.loss_dice: 0.7988  mix_decode.d5.loss_cls: 0.2782  mix_decode.d5.loss_mask: 0.7523  mix_decode.d5.loss_dice: 0.8193  mix_decode.d6.loss_cls: 0.2758  mix_decode.d6.loss_mask: 0.7558  mix_decode.d6.loss_dice: 0.8131  mix_decode.d7.loss_cls: 0.2422  mix_decode.d7.loss_mask: 0.7700  mix_decode.d7.loss_dice: 0.8094  mix_decode.d8.loss_cls: 0.2028  mix_decode.d8.loss_mask: 0.7979  mix_decode.d8.loss_dice: 0.8409
2025/03/28 23:38:17 - mmengine - INFO - Iter(train) [13450/20000]  base_lr: 3.6619e-05 lr: 3.6619e-05  eta: 3:02:21  time: 1.9369  data_time: 0.0238  memory: 10755  loss: 54.9681  decode.loss_cls: 0.5096  decode.loss_mask: 1.5908  decode.loss_dice: 1.5828  decode.d0.loss_cls: 0.6225  decode.d0.loss_mask: 1.6118  decode.d0.loss_dice: 1.6225  decode.d1.loss_cls: 0.5704  decode.d1.loss_mask: 1.5970  decode.d1.loss_dice: 1.5591  decode.d2.loss_cls: 0.5074  decode.d2.loss_mask: 1.5718  decode.d2.loss_dice: 1.5505  decode.d3.loss_cls: 0.5170  decode.d3.loss_mask: 1.5932  decode.d3.loss_dice: 1.5983  decode.d4.loss_cls: 0.5082  decode.d4.loss_mask: 1.5946  decode.d4.loss_dice: 1.5984  decode.d5.loss_cls: 0.5541  decode.d5.loss_mask: 1.6067  decode.d5.loss_dice: 1.5855  decode.d6.loss_cls: 0.4918  decode.d6.loss_mask: 1.7069  decode.d6.loss_dice: 1.6592  decode.d7.loss_cls: 0.5423  decode.d7.loss_mask: 1.6584  decode.d7.loss_dice: 1.6110  decode.d8.loss_cls: 0.4903  decode.d8.loss_mask: 1.6715  decode.d8.loss_dice: 1.5781  mix_decode.loss_cls: 0.2026  mix_decode.loss_mask: 0.5539  mix_decode.loss_dice: 0.9917  mix_decode.d0.loss_cls: 0.2082  mix_decode.d0.loss_mask: 0.5359  mix_decode.d0.loss_dice: 1.0311  mix_decode.d1.loss_cls: 0.2680  mix_decode.d1.loss_mask: 0.5567  mix_decode.d1.loss_dice: 0.9720  mix_decode.d2.loss_cls: 0.2523  mix_decode.d2.loss_mask: 0.5414  mix_decode.d2.loss_dice: 0.9632  mix_decode.d3.loss_cls: 0.1913  mix_decode.d3.loss_mask: 0.5474  mix_decode.d3.loss_dice: 0.9565  mix_decode.d4.loss_cls: 0.2136  mix_decode.d4.loss_mask: 0.5479  mix_decode.d4.loss_dice: 0.9754  mix_decode.d5.loss_cls: 0.2538  mix_decode.d5.loss_mask: 0.5406  mix_decode.d5.loss_dice: 0.9643  mix_decode.d6.loss_cls: 0.2174  mix_decode.d6.loss_mask: 0.5438  mix_decode.d6.loss_dice: 0.9677  mix_decode.d7.loss_cls: 0.2315  mix_decode.d7.loss_mask: 0.5473  mix_decode.d7.loss_dice: 0.9639  mix_decode.d8.loss_cls: 0.2516  mix_decode.d8.loss_mask: 0.5553  mix_decode.d8.loss_dice: 0.9604
2025/03/28 23:39:52 - mmengine - INFO - Iter(train) [13500/20000]  base_lr: 3.6368e-05 lr: 3.6368e-05  eta: 3:01:02  time: 1.8522  data_time: 0.0274  memory: 10749  loss: 44.7836  decode.loss_cls: 0.5362  decode.loss_mask: 1.1341  decode.loss_dice: 1.4632  decode.d0.loss_cls: 0.5910  decode.d0.loss_mask: 1.0791  decode.d0.loss_dice: 1.5149  decode.d1.loss_cls: 0.5421  decode.d1.loss_mask: 1.1118  decode.d1.loss_dice: 1.4959  decode.d2.loss_cls: 0.5955  decode.d2.loss_mask: 1.0963  decode.d2.loss_dice: 1.4416  decode.d3.loss_cls: 0.5591  decode.d3.loss_mask: 1.1253  decode.d3.loss_dice: 1.4651  decode.d4.loss_cls: 0.6065  decode.d4.loss_mask: 1.1459  decode.d4.loss_dice: 1.4662  decode.d5.loss_cls: 0.6190  decode.d5.loss_mask: 1.1248  decode.d5.loss_dice: 1.4698  decode.d6.loss_cls: 0.5475  decode.d6.loss_mask: 1.1371  decode.d6.loss_dice: 1.4803  decode.d7.loss_cls: 0.5708  decode.d7.loss_mask: 1.1782  decode.d7.loss_dice: 1.4993  decode.d8.loss_cls: 0.6137  decode.d8.loss_mask: 1.1313  decode.d8.loss_dice: 1.4021  mix_decode.loss_cls: 0.2553  mix_decode.loss_mask: 0.4574  mix_decode.loss_dice: 0.6058  mix_decode.d0.loss_cls: 0.2488  mix_decode.d0.loss_mask: 0.4347  mix_decode.d0.loss_dice: 0.6569  mix_decode.d1.loss_cls: 0.2309  mix_decode.d1.loss_mask: 0.4390  mix_decode.d1.loss_dice: 0.6228  mix_decode.d2.loss_cls: 0.2326  mix_decode.d2.loss_mask: 0.4354  mix_decode.d2.loss_dice: 0.6151  mix_decode.d3.loss_cls: 0.2290  mix_decode.d3.loss_mask: 0.4440  mix_decode.d3.loss_dice: 0.6142  mix_decode.d4.loss_cls: 0.2571  mix_decode.d4.loss_mask: 0.4465  mix_decode.d4.loss_dice: 0.6148  mix_decode.d5.loss_cls: 0.2431  mix_decode.d5.loss_mask: 0.4402  mix_decode.d5.loss_dice: 0.6253  mix_decode.d6.loss_cls: 0.2426  mix_decode.d6.loss_mask: 0.4400  mix_decode.d6.loss_dice: 0.6082  mix_decode.d7.loss_cls: 0.2239  mix_decode.d7.loss_mask: 0.4573  mix_decode.d7.loss_dice: 0.6196  mix_decode.d8.loss_cls: 0.2153  mix_decode.d8.loss_mask: 0.4554  mix_decode.d8.loss_dice: 0.6290
2025/03/28 23:41:21 - mmengine - INFO - Iter(train) [13550/20000]  base_lr: 3.6116e-05 lr: 3.6116e-05  eta: 2:59:42  time: 1.8359  data_time: 0.0244  memory: 10772  loss: 50.5387  decode.loss_cls: 0.3696  decode.loss_mask: 1.4888  decode.loss_dice: 1.5432  decode.d0.loss_cls: 0.4780  decode.d0.loss_mask: 1.5451  decode.d0.loss_dice: 1.5525  decode.d1.loss_cls: 0.4129  decode.d1.loss_mask: 1.4925  decode.d1.loss_dice: 1.5340  decode.d2.loss_cls: 0.3527  decode.d2.loss_mask: 1.5087  decode.d2.loss_dice: 1.5309  decode.d3.loss_cls: 0.3755  decode.d3.loss_mask: 1.4975  decode.d3.loss_dice: 1.5341  decode.d4.loss_cls: 0.4196  decode.d4.loss_mask: 1.4901  decode.d4.loss_dice: 1.5234  decode.d5.loss_cls: 0.4205  decode.d5.loss_mask: 1.4633  decode.d5.loss_dice: 1.5504  decode.d6.loss_cls: 0.3981  decode.d6.loss_mask: 1.4952  decode.d6.loss_dice: 1.5324  decode.d7.loss_cls: 0.3607  decode.d7.loss_mask: 1.5148  decode.d7.loss_dice: 1.5545  decode.d8.loss_cls: 0.3735  decode.d8.loss_mask: 1.4962  decode.d8.loss_dice: 1.5261  mix_decode.loss_cls: 0.2073  mix_decode.loss_mask: 0.6251  mix_decode.loss_dice: 0.8252  mix_decode.d0.loss_cls: 0.2450  mix_decode.d0.loss_mask: 0.6077  mix_decode.d0.loss_dice: 0.8397  mix_decode.d1.loss_cls: 0.2567  mix_decode.d1.loss_mask: 0.5868  mix_decode.d1.loss_dice: 0.7755  mix_decode.d2.loss_cls: 0.1866  mix_decode.d2.loss_mask: 0.6203  mix_decode.d2.loss_dice: 0.8109  mix_decode.d3.loss_cls: 0.1930  mix_decode.d3.loss_mask: 0.6090  mix_decode.d3.loss_dice: 0.7934  mix_decode.d4.loss_cls: 0.2123  mix_decode.d4.loss_mask: 0.6044  mix_decode.d4.loss_dice: 0.7787  mix_decode.d5.loss_cls: 0.1761  mix_decode.d5.loss_mask: 0.6085  mix_decode.d5.loss_dice: 0.8083  mix_decode.d6.loss_cls: 0.1895  mix_decode.d6.loss_mask: 0.6137  mix_decode.d6.loss_dice: 0.7951  mix_decode.d7.loss_cls: 0.1828  mix_decode.d7.loss_mask: 0.6153  mix_decode.d7.loss_dice: 0.8244  mix_decode.d8.loss_cls: 0.1900  mix_decode.d8.loss_mask: 0.6201  mix_decode.d8.loss_dice: 0.8027
2025/03/28 23:42:55 - mmengine - INFO - Iter(train) [13600/20000]  base_lr: 3.5864e-05 lr: 3.5864e-05  eta: 2:58:23  time: 1.8331  data_time: 0.0257  memory: 10754  loss: 46.2887  decode.loss_cls: 0.3892  decode.loss_mask: 1.3986  decode.loss_dice: 1.4224  decode.d0.loss_cls: 0.6336  decode.d0.loss_mask: 1.3718  decode.d0.loss_dice: 1.4535  decode.d1.loss_cls: 0.4919  decode.d1.loss_mask: 1.4080  decode.d1.loss_dice: 1.3621  decode.d2.loss_cls: 0.4828  decode.d2.loss_mask: 1.3854  decode.d2.loss_dice: 1.3509  decode.d3.loss_cls: 0.4839  decode.d3.loss_mask: 1.4854  decode.d3.loss_dice: 1.3487  decode.d4.loss_cls: 0.4206  decode.d4.loss_mask: 1.3211  decode.d4.loss_dice: 1.4134  decode.d5.loss_cls: 0.4818  decode.d5.loss_mask: 1.3735  decode.d5.loss_dice: 1.3721  decode.d6.loss_cls: 0.5064  decode.d6.loss_mask: 1.3748  decode.d6.loss_dice: 1.3524  decode.d7.loss_cls: 0.5277  decode.d7.loss_mask: 1.3551  decode.d7.loss_dice: 1.2908  decode.d8.loss_cls: 0.5120  decode.d8.loss_mask: 1.4004  decode.d8.loss_dice: 1.3858  mix_decode.loss_cls: 0.2494  mix_decode.loss_mask: 0.3861  mix_decode.loss_dice: 0.7245  mix_decode.d0.loss_cls: 0.2470  mix_decode.d0.loss_mask: 0.3762  mix_decode.d0.loss_dice: 0.8352  mix_decode.d1.loss_cls: 0.2271  mix_decode.d1.loss_mask: 0.3825  mix_decode.d1.loss_dice: 0.7375  mix_decode.d2.loss_cls: 0.2754  mix_decode.d2.loss_mask: 0.3576  mix_decode.d2.loss_dice: 0.6989  mix_decode.d3.loss_cls: 0.2644  mix_decode.d3.loss_mask: 0.3746  mix_decode.d3.loss_dice: 0.7131  mix_decode.d4.loss_cls: 0.2695  mix_decode.d4.loss_mask: 0.3583  mix_decode.d4.loss_dice: 0.7260  mix_decode.d5.loss_cls: 0.2729  mix_decode.d5.loss_mask: 0.3567  mix_decode.d5.loss_dice: 0.7212  mix_decode.d6.loss_cls: 0.3013  mix_decode.d6.loss_mask: 0.3829  mix_decode.d6.loss_dice: 0.7148  mix_decode.d7.loss_cls: 0.2535  mix_decode.d7.loss_mask: 0.3920  mix_decode.d7.loss_dice: 0.7351  mix_decode.d8.loss_cls: 0.2598  mix_decode.d8.loss_mask: 0.4050  mix_decode.d8.loss_dice: 0.7344
2025/03/28 23:44:31 - mmengine - INFO - Iter(train) [13650/20000]  base_lr: 3.5611e-05 lr: 3.5611e-05  eta: 2:57:05  time: 1.8505  data_time: 0.0256  memory: 10762  loss: 57.6761  decode.loss_cls: 0.5366  decode.loss_mask: 1.7533  decode.loss_dice: 1.6036  decode.d0.loss_cls: 0.7067  decode.d0.loss_mask: 1.7628  decode.d0.loss_dice: 1.6902  decode.d1.loss_cls: 0.5194  decode.d1.loss_mask: 1.7376  decode.d1.loss_dice: 1.6506  decode.d2.loss_cls: 0.5042  decode.d2.loss_mask: 1.7568  decode.d2.loss_dice: 1.6317  decode.d3.loss_cls: 0.5508  decode.d3.loss_mask: 1.6745  decode.d3.loss_dice: 1.6076  decode.d4.loss_cls: 0.5717  decode.d4.loss_mask: 1.6975  decode.d4.loss_dice: 1.5698  decode.d5.loss_cls: 0.5028  decode.d5.loss_mask: 1.7649  decode.d5.loss_dice: 1.5514  decode.d6.loss_cls: 0.5103  decode.d6.loss_mask: 1.7276  decode.d6.loss_dice: 1.6131  decode.d7.loss_cls: 0.5639  decode.d7.loss_mask: 1.7360  decode.d7.loss_dice: 1.6238  decode.d8.loss_cls: 0.5724  decode.d8.loss_mask: 1.7556  decode.d8.loss_dice: 1.5188  mix_decode.loss_cls: 0.3200  mix_decode.loss_mask: 0.7129  mix_decode.loss_dice: 0.8520  mix_decode.d0.loss_cls: 0.3186  mix_decode.d0.loss_mask: 0.7297  mix_decode.d0.loss_dice: 0.9055  mix_decode.d1.loss_cls: 0.3316  mix_decode.d1.loss_mask: 0.6790  mix_decode.d1.loss_dice: 0.8303  mix_decode.d2.loss_cls: 0.3252  mix_decode.d2.loss_mask: 0.6885  mix_decode.d2.loss_dice: 0.8500  mix_decode.d3.loss_cls: 0.3210  mix_decode.d3.loss_mask: 0.7335  mix_decode.d3.loss_dice: 0.8172  mix_decode.d4.loss_cls: 0.3336  mix_decode.d4.loss_mask: 0.7098  mix_decode.d4.loss_dice: 0.8407  mix_decode.d5.loss_cls: 0.3861  mix_decode.d5.loss_mask: 0.6788  mix_decode.d5.loss_dice: 0.8111  mix_decode.d6.loss_cls: 0.3327  mix_decode.d6.loss_mask: 0.6706  mix_decode.d6.loss_dice: 0.7999  mix_decode.d7.loss_cls: 0.3074  mix_decode.d7.loss_mask: 0.7111  mix_decode.d7.loss_dice: 0.8545  mix_decode.d8.loss_cls: 0.3027  mix_decode.d8.loss_mask: 0.7041  mix_decode.d8.loss_dice: 0.8520
2025/03/28 23:46:06 - mmengine - INFO - Iter(train) [13700/20000]  base_lr: 3.5359e-05 lr: 3.5359e-05  eta: 2:55:47  time: 1.8733  data_time: 0.0271  memory: 10742  loss: 49.7715  decode.loss_cls: 0.5300  decode.loss_mask: 1.5023  decode.loss_dice: 1.5187  decode.d0.loss_cls: 0.8062  decode.d0.loss_mask: 1.4718  decode.d0.loss_dice: 1.5469  decode.d1.loss_cls: 0.6944  decode.d1.loss_mask: 1.4915  decode.d1.loss_dice: 1.4765  decode.d2.loss_cls: 0.5921  decode.d2.loss_mask: 1.4562  decode.d2.loss_dice: 1.4629  decode.d3.loss_cls: 0.5851  decode.d3.loss_mask: 1.4874  decode.d3.loss_dice: 1.4363  decode.d4.loss_cls: 0.5680  decode.d4.loss_mask: 1.4842  decode.d4.loss_dice: 1.4659  decode.d5.loss_cls: 0.5664  decode.d5.loss_mask: 1.5288  decode.d5.loss_dice: 1.4681  decode.d6.loss_cls: 0.6489  decode.d6.loss_mask: 1.5233  decode.d6.loss_dice: 1.4377  decode.d7.loss_cls: 0.6506  decode.d7.loss_mask: 1.4529  decode.d7.loss_dice: 1.4438  decode.d8.loss_cls: 0.7263  decode.d8.loss_mask: 1.5037  decode.d8.loss_dice: 1.4333  mix_decode.loss_cls: 0.1976  mix_decode.loss_mask: 0.4264  mix_decode.loss_dice: 0.7122  mix_decode.d0.loss_cls: 0.2472  mix_decode.d0.loss_mask: 0.4114  mix_decode.d0.loss_dice: 0.7628  mix_decode.d1.loss_cls: 0.2937  mix_decode.d1.loss_mask: 0.4102  mix_decode.d1.loss_dice: 0.6851  mix_decode.d2.loss_cls: 0.2679  mix_decode.d2.loss_mask: 0.4135  mix_decode.d2.loss_dice: 0.7178  mix_decode.d3.loss_cls: 0.2246  mix_decode.d3.loss_mask: 0.4043  mix_decode.d3.loss_dice: 0.6993  mix_decode.d4.loss_cls: 0.2754  mix_decode.d4.loss_mask: 0.4189  mix_decode.d4.loss_dice: 0.7067  mix_decode.d5.loss_cls: 0.3095  mix_decode.d5.loss_mask: 0.4051  mix_decode.d5.loss_dice: 0.6611  mix_decode.d6.loss_cls: 0.2879  mix_decode.d6.loss_mask: 0.4162  mix_decode.d6.loss_dice: 0.7076  mix_decode.d7.loss_cls: 0.2705  mix_decode.d7.loss_mask: 0.4118  mix_decode.d7.loss_dice: 0.7119  mix_decode.d8.loss_cls: 0.2051  mix_decode.d8.loss_mask: 0.4243  mix_decode.d8.loss_dice: 0.7251
2025/03/28 23:47:41 - mmengine - INFO - Iter(train) [13750/20000]  base_lr: 3.5106e-05 lr: 3.5106e-05  eta: 2:54:28  time: 1.9009  data_time: 0.0227  memory: 10770  loss: 56.4801  decode.loss_cls: 0.5074  decode.loss_mask: 1.7268  decode.loss_dice: 1.6183  decode.d0.loss_cls: 0.6355  decode.d0.loss_mask: 1.6967  decode.d0.loss_dice: 1.6428  decode.d1.loss_cls: 0.5173  decode.d1.loss_mask: 1.7374  decode.d1.loss_dice: 1.6042  decode.d2.loss_cls: 0.5099  decode.d2.loss_mask: 1.7169  decode.d2.loss_dice: 1.6607  decode.d3.loss_cls: 0.5668  decode.d3.loss_mask: 1.7081  decode.d3.loss_dice: 1.5941  decode.d4.loss_cls: 0.6029  decode.d4.loss_mask: 1.5875  decode.d4.loss_dice: 1.6399  decode.d5.loss_cls: 0.5313  decode.d5.loss_mask: 1.6913  decode.d5.loss_dice: 1.6154  decode.d6.loss_cls: 0.5784  decode.d6.loss_mask: 1.7208  decode.d6.loss_dice: 1.6093  decode.d7.loss_cls: 0.4267  decode.d7.loss_mask: 1.7096  decode.d7.loss_dice: 1.6638  decode.d8.loss_cls: 0.4842  decode.d8.loss_mask: 1.7011  decode.d8.loss_dice: 1.5860  mix_decode.loss_cls: 0.2926  mix_decode.loss_mask: 0.7095  mix_decode.loss_dice: 0.7871  mix_decode.d0.loss_cls: 0.2714  mix_decode.d0.loss_mask: 0.6847  mix_decode.d0.loss_dice: 0.8740  mix_decode.d1.loss_cls: 0.3334  mix_decode.d1.loss_mask: 0.6822  mix_decode.d1.loss_dice: 0.7958  mix_decode.d2.loss_cls: 0.3063  mix_decode.d2.loss_mask: 0.6664  mix_decode.d2.loss_dice: 0.7808  mix_decode.d3.loss_cls: 0.3074  mix_decode.d3.loss_mask: 0.6742  mix_decode.d3.loss_dice: 0.8082  mix_decode.d4.loss_cls: 0.3185  mix_decode.d4.loss_mask: 0.6593  mix_decode.d4.loss_dice: 0.7661  mix_decode.d5.loss_cls: 0.3116  mix_decode.d5.loss_mask: 0.6783  mix_decode.d5.loss_dice: 0.7813  mix_decode.d6.loss_cls: 0.2726  mix_decode.d6.loss_mask: 0.6947  mix_decode.d6.loss_dice: 0.8286  mix_decode.d7.loss_cls: 0.2979  mix_decode.d7.loss_mask: 0.6897  mix_decode.d7.loss_dice: 0.8104  mix_decode.d8.loss_cls: 0.2910  mix_decode.d8.loss_mask: 0.7082  mix_decode.d8.loss_dice: 0.8070
2025/03/28 23:49:15 - mmengine - INFO - Iter(train) [13800/20000]  base_lr: 3.4853e-05 lr: 3.4853e-05  eta: 2:53:09  time: 1.8531  data_time: 0.0252  memory: 10755  loss: 45.5072  decode.loss_cls: 0.4465  decode.loss_mask: 1.1130  decode.loss_dice: 1.4265  decode.d0.loss_cls: 0.4157  decode.d0.loss_mask: 1.1593  decode.d0.loss_dice: 1.5922  decode.d1.loss_cls: 0.3507  decode.d1.loss_mask: 1.1480  decode.d1.loss_dice: 1.4320  decode.d2.loss_cls: 0.3492  decode.d2.loss_mask: 1.1360  decode.d2.loss_dice: 1.4666  decode.d3.loss_cls: 0.4209  decode.d3.loss_mask: 1.1344  decode.d3.loss_dice: 1.4753  decode.d4.loss_cls: 0.3860  decode.d4.loss_mask: 1.1552  decode.d4.loss_dice: 1.4734  decode.d5.loss_cls: 0.5210  decode.d5.loss_mask: 1.1182  decode.d5.loss_dice: 1.4545  decode.d6.loss_cls: 0.4396  decode.d6.loss_mask: 1.1737  decode.d6.loss_dice: 1.4383  decode.d7.loss_cls: 0.4387  decode.d7.loss_mask: 1.1440  decode.d7.loss_dice: 1.4528  decode.d8.loss_cls: 0.4443  decode.d8.loss_mask: 1.1214  decode.d8.loss_dice: 1.4745  mix_decode.loss_cls: 0.3726  mix_decode.loss_mask: 0.4640  mix_decode.loss_dice: 0.6981  mix_decode.d0.loss_cls: 0.2809  mix_decode.d0.loss_mask: 0.4420  mix_decode.d0.loss_dice: 0.7800  mix_decode.d1.loss_cls: 0.3389  mix_decode.d1.loss_mask: 0.4477  mix_decode.d1.loss_dice: 0.7022  mix_decode.d2.loss_cls: 0.3679  mix_decode.d2.loss_mask: 0.4351  mix_decode.d2.loss_dice: 0.7164  mix_decode.d3.loss_cls: 0.3455  mix_decode.d3.loss_mask: 0.4462  mix_decode.d3.loss_dice: 0.7093  mix_decode.d4.loss_cls: 0.3645  mix_decode.d4.loss_mask: 0.4356  mix_decode.d4.loss_dice: 0.7182  mix_decode.d5.loss_cls: 0.3500  mix_decode.d5.loss_mask: 0.4496  mix_decode.d5.loss_dice: 0.6991  mix_decode.d6.loss_cls: 0.3857  mix_decode.d6.loss_mask: 0.4466  mix_decode.d6.loss_dice: 0.7110  mix_decode.d7.loss_cls: 0.3811  mix_decode.d7.loss_mask: 0.4565  mix_decode.d7.loss_dice: 0.7128  mix_decode.d8.loss_cls: 0.3957  mix_decode.d8.loss_mask: 0.4451  mix_decode.d8.loss_dice: 0.7073
2025/03/28 23:50:49 - mmengine - INFO - Iter(train) [13850/20000]  base_lr: 3.4600e-05 lr: 3.4600e-05  eta: 2:51:50  time: 1.8583  data_time: 0.0253  memory: 10752  loss: 54.6194  decode.loss_cls: 0.4570  decode.loss_mask: 1.7201  decode.loss_dice: 1.6407  decode.d0.loss_cls: 0.6456  decode.d0.loss_mask: 1.7176  decode.d0.loss_dice: 1.6204  decode.d1.loss_cls: 0.4942  decode.d1.loss_mask: 1.7392  decode.d1.loss_dice: 1.6086  decode.d2.loss_cls: 0.4614  decode.d2.loss_mask: 1.7500  decode.d2.loss_dice: 1.6224  decode.d3.loss_cls: 0.4916  decode.d3.loss_mask: 1.7342  decode.d3.loss_dice: 1.6599  decode.d4.loss_cls: 0.4362  decode.d4.loss_mask: 1.7495  decode.d4.loss_dice: 1.6008  decode.d5.loss_cls: 0.4353  decode.d5.loss_mask: 1.7420  decode.d5.loss_dice: 1.6156  decode.d6.loss_cls: 0.4573  decode.d6.loss_mask: 1.7926  decode.d6.loss_dice: 1.6657  decode.d7.loss_cls: 0.4643  decode.d7.loss_mask: 1.7582  decode.d7.loss_dice: 1.5932  decode.d8.loss_cls: 0.4282  decode.d8.loss_mask: 1.7393  decode.d8.loss_dice: 1.6096  mix_decode.loss_cls: 0.2477  mix_decode.loss_mask: 0.5499  mix_decode.loss_dice: 0.7845  mix_decode.d0.loss_cls: 0.2617  mix_decode.d0.loss_mask: 0.5674  mix_decode.d0.loss_dice: 0.8581  mix_decode.d1.loss_cls: 0.2791  mix_decode.d1.loss_mask: 0.5298  mix_decode.d1.loss_dice: 0.7806  mix_decode.d2.loss_cls: 0.2880  mix_decode.d2.loss_mask: 0.5389  mix_decode.d2.loss_dice: 0.7845  mix_decode.d3.loss_cls: 0.2774  mix_decode.d3.loss_mask: 0.5497  mix_decode.d3.loss_dice: 0.7632  mix_decode.d4.loss_cls: 0.3289  mix_decode.d4.loss_mask: 0.5452  mix_decode.d4.loss_dice: 0.7998  mix_decode.d5.loss_cls: 0.2728  mix_decode.d5.loss_mask: 0.5546  mix_decode.d5.loss_dice: 0.7987  mix_decode.d6.loss_cls: 0.2618  mix_decode.d6.loss_mask: 0.5542  mix_decode.d6.loss_dice: 0.7973  mix_decode.d7.loss_cls: 0.2630  mix_decode.d7.loss_mask: 0.5561  mix_decode.d7.loss_dice: 0.7816  mix_decode.d8.loss_cls: 0.2341  mix_decode.d8.loss_mask: 0.5632  mix_decode.d8.loss_dice: 0.7967
2025/03/28 23:52:24 - mmengine - INFO - Iter(train) [13900/20000]  base_lr: 3.4347e-05 lr: 3.4347e-05  eta: 2:50:31  time: 1.9023  data_time: 0.0261  memory: 10754  loss: 47.5892  decode.loss_cls: 0.3670  decode.loss_mask: 1.1506  decode.loss_dice: 1.4515  decode.d0.loss_cls: 0.5507  decode.d0.loss_mask: 1.1708  decode.d0.loss_dice: 1.5360  decode.d1.loss_cls: 0.4881  decode.d1.loss_mask: 1.1474  decode.d1.loss_dice: 1.4059  decode.d2.loss_cls: 0.4582  decode.d2.loss_mask: 1.1362  decode.d2.loss_dice: 1.4424  decode.d3.loss_cls: 0.4119  decode.d3.loss_mask: 1.1243  decode.d3.loss_dice: 1.4050  decode.d4.loss_cls: 0.4661  decode.d4.loss_mask: 1.1352  decode.d4.loss_dice: 1.4405  decode.d5.loss_cls: 0.4330  decode.d5.loss_mask: 1.1568  decode.d5.loss_dice: 1.4323  decode.d6.loss_cls: 0.4213  decode.d6.loss_mask: 1.1561  decode.d6.loss_dice: 1.4219  decode.d7.loss_cls: 0.4240  decode.d7.loss_mask: 1.1487  decode.d7.loss_dice: 1.3996  decode.d8.loss_cls: 0.3707  decode.d8.loss_mask: 1.1314  decode.d8.loss_dice: 1.4143  mix_decode.loss_cls: 0.2812  mix_decode.loss_mask: 0.5830  mix_decode.loss_dice: 0.8935  mix_decode.d0.loss_cls: 0.1823  mix_decode.d0.loss_mask: 0.5948  mix_decode.d0.loss_dice: 0.9539  mix_decode.d1.loss_cls: 0.2454  mix_decode.d1.loss_mask: 0.5829  mix_decode.d1.loss_dice: 0.8848  mix_decode.d2.loss_cls: 0.3063  mix_decode.d2.loss_mask: 0.5786  mix_decode.d2.loss_dice: 0.8572  mix_decode.d3.loss_cls: 0.2546  mix_decode.d3.loss_mask: 0.6030  mix_decode.d3.loss_dice: 0.8926  mix_decode.d4.loss_cls: 0.2594  mix_decode.d4.loss_mask: 0.5930  mix_decode.d4.loss_dice: 0.8954  mix_decode.d5.loss_cls: 0.2483  mix_decode.d5.loss_mask: 0.5976  mix_decode.d5.loss_dice: 0.9015  mix_decode.d6.loss_cls: 0.2282  mix_decode.d6.loss_mask: 0.5896  mix_decode.d6.loss_dice: 0.9261  mix_decode.d7.loss_cls: 0.2641  mix_decode.d7.loss_mask: 0.5682  mix_decode.d7.loss_dice: 0.8809  mix_decode.d8.loss_cls: 0.2905  mix_decode.d8.loss_mask: 0.5785  mix_decode.d8.loss_dice: 0.8759
2025/03/28 23:53:59 - mmengine - INFO - Iter(train) [13950/20000]  base_lr: 3.4094e-05 lr: 3.4094e-05  eta: 2:49:11  time: 1.9221  data_time: 0.0253  memory: 10763  loss: 49.5792  decode.loss_cls: 0.4025  decode.loss_mask: 1.3010  decode.loss_dice: 1.6695  decode.d0.loss_cls: 0.4821  decode.d0.loss_mask: 1.3973  decode.d0.loss_dice: 1.7171  decode.d1.loss_cls: 0.4518  decode.d1.loss_mask: 1.2902  decode.d1.loss_dice: 1.5984  decode.d2.loss_cls: 0.3816  decode.d2.loss_mask: 1.3226  decode.d2.loss_dice: 1.6711  decode.d3.loss_cls: 0.3813  decode.d3.loss_mask: 1.3212  decode.d3.loss_dice: 1.6609  decode.d4.loss_cls: 0.4577  decode.d4.loss_mask: 1.2990  decode.d4.loss_dice: 1.6428  decode.d5.loss_cls: 0.4112  decode.d5.loss_mask: 1.3213  decode.d5.loss_dice: 1.6688  decode.d6.loss_cls: 0.4002  decode.d6.loss_mask: 1.3424  decode.d6.loss_dice: 1.6692  decode.d7.loss_cls: 0.3834  decode.d7.loss_mask: 1.3289  decode.d7.loss_dice: 1.6822  decode.d8.loss_cls: 0.3815  decode.d8.loss_mask: 1.3428  decode.d8.loss_dice: 1.6724  mix_decode.loss_cls: 0.2648  mix_decode.loss_mask: 0.5170  mix_decode.loss_dice: 0.7576  mix_decode.d0.loss_cls: 0.1896  mix_decode.d0.loss_mask: 0.5289  mix_decode.d0.loss_dice: 0.8419  mix_decode.d1.loss_cls: 0.2671  mix_decode.d1.loss_mask: 0.5141  mix_decode.d1.loss_dice: 0.7770  mix_decode.d2.loss_cls: 0.2378  mix_decode.d2.loss_mask: 0.5218  mix_decode.d2.loss_dice: 0.7619  mix_decode.d3.loss_cls: 0.2771  mix_decode.d3.loss_mask: 0.5049  mix_decode.d3.loss_dice: 0.7554  mix_decode.d4.loss_cls: 0.3016  mix_decode.d4.loss_mask: 0.5132  mix_decode.d4.loss_dice: 0.7563  mix_decode.d5.loss_cls: 0.2821  mix_decode.d5.loss_mask: 0.5186  mix_decode.d5.loss_dice: 0.7611  mix_decode.d6.loss_cls: 0.3132  mix_decode.d6.loss_mask: 0.5092  mix_decode.d6.loss_dice: 0.7585  mix_decode.d7.loss_cls: 0.2666  mix_decode.d7.loss_mask: 0.5148  mix_decode.d7.loss_dice: 0.7472  mix_decode.d8.loss_cls: 0.2962  mix_decode.d8.loss_mask: 0.5203  mix_decode.d8.loss_dice: 0.7514
2025/03/28 23:55:35 - mmengine - INFO - Exp name: r2u_20250328_164133
2025/03/28 23:55:35 - mmengine - INFO - Iter(train) [14000/20000]  base_lr: 3.3840e-05 lr: 3.3840e-05  eta: 2:47:53  time: 1.9409  data_time: 0.0259  memory: 10754  loss: 51.7260  decode.loss_cls: 0.2980  decode.loss_mask: 1.4686  decode.loss_dice: 1.6405  decode.d0.loss_cls: 0.4083  decode.d0.loss_mask: 1.4369  decode.d0.loss_dice: 1.6010  decode.d1.loss_cls: 0.2870  decode.d1.loss_mask: 1.4659  decode.d1.loss_dice: 1.6514  decode.d2.loss_cls: 0.3299  decode.d2.loss_mask: 1.4468  decode.d2.loss_dice: 1.6171  decode.d3.loss_cls: 0.2925  decode.d3.loss_mask: 1.4458  decode.d3.loss_dice: 1.6356  decode.d4.loss_cls: 0.3405  decode.d4.loss_mask: 1.4300  decode.d4.loss_dice: 1.6085  decode.d5.loss_cls: 0.2823  decode.d5.loss_mask: 1.4500  decode.d5.loss_dice: 1.6509  decode.d6.loss_cls: 0.3408  decode.d6.loss_mask: 1.4526  decode.d6.loss_dice: 1.6411  decode.d7.loss_cls: 0.2776  decode.d7.loss_mask: 1.4366  decode.d7.loss_dice: 1.6437  decode.d8.loss_cls: 0.3154  decode.d8.loss_mask: 1.4283  decode.d8.loss_dice: 1.6102  mix_decode.loss_cls: 0.2454  mix_decode.loss_mask: 0.6173  mix_decode.loss_dice: 0.9400  mix_decode.d0.loss_cls: 0.2667  mix_decode.d0.loss_mask: 0.5920  mix_decode.d0.loss_dice: 0.9899  mix_decode.d1.loss_cls: 0.3752  mix_decode.d1.loss_mask: 0.5335  mix_decode.d1.loss_dice: 0.8649  mix_decode.d2.loss_cls: 0.3093  mix_decode.d2.loss_mask: 0.5963  mix_decode.d2.loss_dice: 0.9064  mix_decode.d3.loss_cls: 0.2699  mix_decode.d3.loss_mask: 0.5677  mix_decode.d3.loss_dice: 0.8701  mix_decode.d4.loss_cls: 0.3141  mix_decode.d4.loss_mask: 0.5685  mix_decode.d4.loss_dice: 0.8838  mix_decode.d5.loss_cls: 0.2963  mix_decode.d5.loss_mask: 0.5886  mix_decode.d5.loss_dice: 0.9047  mix_decode.d6.loss_cls: 0.2782  mix_decode.d6.loss_mask: 0.5795  mix_decode.d6.loss_dice: 0.9214  mix_decode.d7.loss_cls: 0.2621  mix_decode.d7.loss_mask: 0.5831  mix_decode.d7.loss_dice: 0.8890  mix_decode.d8.loss_cls: 0.2537  mix_decode.d8.loss_mask: 0.5992  mix_decode.d8.loss_dice: 0.9250
2025/03/28 23:55:35 - mmengine - INFO - Saving checkpoint at 14000 iterations
2025/03/28 23:55:44 - mmengine - INFO - Iter(val) [  50/2708]    eta: 0:06:52  time: 0.1885  data_time: 0.0021  memory: 3058  
2025/03/28 23:55:52 - mmengine - INFO - Iter(val) [ 100/2708]    eta: 0:06:41  time: 0.1715  data_time: 0.0019  memory: 3058  
2025/03/28 23:55:58 - mmengine - INFO - Iter(val) [ 150/2708]    eta: 0:06:19  time: 0.1030  data_time: 0.0022  memory: 3058  
2025/03/28 23:56:06 - mmengine - INFO - Iter(val) [ 200/2708]    eta: 0:06:14  time: 0.1782  data_time: 0.0018  memory: 3058  
2025/03/28 23:56:14 - mmengine - INFO - Iter(val) [ 250/2708]    eta: 0:06:11  time: 0.1874  data_time: 0.0018  memory: 3058  
2025/03/28 23:56:21 - mmengine - INFO - Iter(val) [ 300/2708]    eta: 0:05:58  time: 0.1008  data_time: 0.0019  memory: 3058  
2025/03/28 23:56:28 - mmengine - INFO - Iter(val) [ 350/2708]    eta: 0:05:49  time: 0.1276  data_time: 0.0019  memory: 3058  
2025/03/28 23:56:36 - mmengine - INFO - Iter(val) [ 400/2708]    eta: 0:05:43  time: 0.1877  data_time: 0.0019  memory: 3058  
2025/03/28 23:56:43 - mmengine - INFO - Iter(val) [ 450/2708]    eta: 0:05:36  time: 0.1648  data_time: 0.0018  memory: 3058  
2025/03/28 23:56:50 - mmengine - INFO - Iter(val) [ 500/2708]    eta: 0:05:26  time: 0.1014  data_time: 0.0019  memory: 3058  
2025/03/28 23:56:58 - mmengine - INFO - Iter(val) [ 550/2708]    eta: 0:05:19  time: 0.1567  data_time: 0.0021  memory: 3058  
2025/03/28 23:57:05 - mmengine - INFO - Iter(val) [ 600/2708]    eta: 0:05:13  time: 0.1903  data_time: 0.0021  memory: 3058  
2025/03/28 23:57:13 - mmengine - INFO - Iter(val) [ 650/2708]    eta: 0:05:05  time: 0.1185  data_time: 0.0019  memory: 3058  
2025/03/28 23:57:20 - mmengine - INFO - Iter(val) [ 700/2708]    eta: 0:04:56  time: 0.1068  data_time: 0.0018  memory: 3058  
2025/03/28 23:57:28 - mmengine - INFO - Iter(val) [ 750/2708]    eta: 0:04:50  time: 0.1903  data_time: 0.0021  memory: 3058  
2025/03/28 23:57:35 - mmengine - INFO - Iter(val) [ 800/2708]    eta: 0:04:43  time: 0.1714  data_time: 0.0020  memory: 3058  
2025/03/28 23:57:42 - mmengine - INFO - Iter(val) [ 850/2708]    eta: 0:04:35  time: 0.1031  data_time: 0.0019  memory: 3058  
2025/03/28 23:57:50 - mmengine - INFO - Iter(val) [ 900/2708]    eta: 0:04:27  time: 0.1527  data_time: 0.0019  memory: 3058  
2025/03/28 23:57:57 - mmengine - INFO - Iter(val) [ 950/2708]    eta: 0:04:20  time: 0.1863  data_time: 0.0019  memory: 3058  
2025/03/28 23:58:05 - mmengine - INFO - Iter(val) [1000/2708]    eta: 0:04:13  time: 0.1341  data_time: 0.0018  memory: 3058  
2025/03/28 23:58:11 - mmengine - INFO - Iter(val) [1050/2708]    eta: 0:04:04  time: 0.1011  data_time: 0.0018  memory: 3058  
2025/03/28 23:58:19 - mmengine - INFO - Iter(val) [1100/2708]    eta: 0:03:57  time: 0.1698  data_time: 0.0020  memory: 3058  
2025/03/28 23:58:27 - mmengine - INFO - Iter(val) [1150/2708]    eta: 0:03:51  time: 0.1921  data_time: 0.0020  memory: 3058  
2025/03/28 23:58:34 - mmengine - INFO - Iter(val) [1200/2708]    eta: 0:03:43  time: 0.1038  data_time: 0.0018  memory: 3058  
2025/03/28 23:58:41 - mmengine - INFO - Iter(val) [1250/2708]    eta: 0:03:35  time: 0.1051  data_time: 0.0022  memory: 3058  
2025/03/28 23:58:49 - mmengine - INFO - Iter(val) [1300/2708]    eta: 0:03:28  time: 0.1870  data_time: 0.0018  memory: 3058  
2025/03/28 23:58:56 - mmengine - INFO - Iter(val) [1350/2708]    eta: 0:03:21  time: 0.1839  data_time: 0.0018  memory: 3058  
2025/03/28 23:59:03 - mmengine - INFO - Iter(val) [1400/2708]    eta: 0:03:13  time: 0.1007  data_time: 0.0017  memory: 3058  
2025/03/28 23:59:10 - mmengine - INFO - Iter(val) [1450/2708]    eta: 0:03:05  time: 0.1329  data_time: 0.0020  memory: 3058  
2025/03/28 23:59:18 - mmengine - INFO - Iter(val) [1500/2708]    eta: 0:02:58  time: 0.1889  data_time: 0.0024  memory: 3058  
2025/03/28 23:59:26 - mmengine - INFO - Iter(val) [1550/2708]    eta: 0:02:51  time: 0.1442  data_time: 0.0021  memory: 3058  
2025/03/28 23:59:33 - mmengine - INFO - Iter(val) [1600/2708]    eta: 0:02:43  time: 0.1018  data_time: 0.0018  memory: 3058  
2025/03/28 23:59:40 - mmengine - INFO - Iter(val) [1650/2708]    eta: 0:02:36  time: 0.1823  data_time: 0.0020  memory: 3058  
2025/03/28 23:59:48 - mmengine - INFO - Iter(val) [1700/2708]    eta: 0:02:29  time: 0.1872  data_time: 0.0020  memory: 3058  
2025/03/28 23:59:55 - mmengine - INFO - Iter(val) [1750/2708]    eta: 0:02:21  time: 0.1023  data_time: 0.0018  memory: 3058  
2025/03/29 00:00:02 - mmengine - INFO - Iter(val) [1800/2708]    eta: 0:02:14  time: 0.1428  data_time: 0.0018  memory: 3058  
2025/03/29 00:00:10 - mmengine - INFO - Iter(val) [1850/2708]    eta: 0:02:06  time: 0.1877  data_time: 0.0018  memory: 3058  
2025/03/29 00:00:17 - mmengine - INFO - Iter(val) [1900/2708]    eta: 0:01:59  time: 0.1529  data_time: 0.0019  memory: 3058  
2025/03/29 00:00:24 - mmengine - INFO - Iter(val) [1950/2708]    eta: 0:01:51  time: 0.1030  data_time: 0.0022  memory: 3058  
2025/03/29 00:00:32 - mmengine - INFO - Iter(val) [2000/2708]    eta: 0:01:44  time: 0.1614  data_time: 0.0018  memory: 3058  
2025/03/29 00:00:40 - mmengine - INFO - Iter(val) [2050/2708]    eta: 0:01:37  time: 0.1920  data_time: 0.0024  memory: 3058  
2025/03/29 00:00:47 - mmengine - INFO - Iter(val) [2100/2708]    eta: 0:01:29  time: 0.1082  data_time: 0.0018  memory: 3058  
2025/03/29 00:00:54 - mmengine - INFO - Iter(val) [2150/2708]    eta: 0:01:22  time: 0.1131  data_time: 0.0019  memory: 3058  
2025/03/29 00:01:02 - mmengine - INFO - Iter(val) [2200/2708]    eta: 0:01:15  time: 0.1921  data_time: 0.0019  memory: 3058  
2025/03/29 00:01:09 - mmengine - INFO - Iter(val) [2250/2708]    eta: 0:01:07  time: 0.1549  data_time: 0.0021  memory: 3058  
2025/03/29 00:01:16 - mmengine - INFO - Iter(val) [2300/2708]    eta: 0:01:00  time: 0.1021  data_time: 0.0018  memory: 3058  
2025/03/29 00:01:24 - mmengine - INFO - Iter(val) [2350/2708]    eta: 0:00:52  time: 0.1790  data_time: 0.0020  memory: 3058  
2025/03/29 00:01:32 - mmengine - INFO - Iter(val) [2400/2708]    eta: 0:00:45  time: 0.1883  data_time: 0.0021  memory: 3058  
2025/03/29 00:01:39 - mmengine - INFO - Iter(val) [2450/2708]    eta: 0:00:38  time: 0.1037  data_time: 0.0018  memory: 3058  
2025/03/29 00:01:46 - mmengine - INFO - Iter(val) [2500/2708]    eta: 0:00:30  time: 0.1258  data_time: 0.0019  memory: 3058  
2025/03/29 00:01:54 - mmengine - INFO - Iter(val) [2550/2708]    eta: 0:00:23  time: 0.1876  data_time: 0.0018  memory: 3058  
2025/03/29 00:02:01 - mmengine - INFO - Iter(val) [2600/2708]    eta: 0:00:15  time: 0.1537  data_time: 0.0019  memory: 3058  
2025/03/29 00:02:08 - mmengine - INFO - Iter(val) [2650/2708]    eta: 0:00:08  time: 0.1017  data_time: 0.0017  memory: 3058  
2025/03/29 00:02:15 - mmengine - INFO - Iter(val) [2700/2708]    eta: 0:00:01  time: 0.1364  data_time: 0.0018  memory: 3058  
2025/03/29 00:02:17 - mmengine - INFO - per class results:
2025/03/29 00:02:17 - mmengine - INFO - 
+--------------+-------+-------+
|    Class     |  IoU  |  Acc  |
+--------------+-------+-------+
|  background  | 42.97 | 69.52 |
|   building   | 61.27 | 71.62 |
|     road     | 52.85 | 61.65 |
|    water     | 74.61 | 84.85 |
|    barren    | 39.78 |  59.8 |
|    forest    | 54.34 |  67.5 |
| agricultural | 63.23 |  70.7 |
+--------------+-------+-------+
2025/03/29 00:02:17 - mmengine - INFO - Iter(val) [2708/2708]    aAcc: 70.5300  mIoU: 55.5800  mAcc: 69.3800  data_time: 0.0020  time: 0.1478
2025/03/29 00:02:17 - mmengine - INFO - The previous best checkpoint /data/xiaoxinghhh/code/my_mmcv/work_dirs/r2u/DA_spatial_16_fft_cut_off_0.3_suf3_scale_0.1/e6531_seed0/best_mIoU_iter_4000.pth is removed
2025/03/29 00:02:18 - mmengine - INFO - The best checkpoint with 55.5800 mIoU at 14000 iter is saved to best_mIoU_iter_14000.pth.
2025/03/29 00:03:53 - mmengine - INFO - Iter(train) [14050/20000]  base_lr: 3.3586e-05 lr: 3.3586e-05  eta: 2:46:34  time: 1.8474  data_time: 0.0275  memory: 10757  loss: 56.3142  decode.loss_cls: 0.5133  decode.loss_mask: 1.6504  decode.loss_dice: 1.7376  decode.d0.loss_cls: 0.5987  decode.d0.loss_mask: 1.5825  decode.d0.loss_dice: 1.7190  decode.d1.loss_cls: 0.4997  decode.d1.loss_mask: 1.5288  decode.d1.loss_dice: 1.6813  decode.d2.loss_cls: 0.5049  decode.d2.loss_mask: 1.5685  decode.d2.loss_dice: 1.7327  decode.d3.loss_cls: 0.4861  decode.d3.loss_mask: 1.5707  decode.d3.loss_dice: 1.7017  decode.d4.loss_cls: 0.5283  decode.d4.loss_mask: 1.5603  decode.d4.loss_dice: 1.7441  decode.d5.loss_cls: 0.5645  decode.d5.loss_mask: 1.5907  decode.d5.loss_dice: 1.6899  decode.d6.loss_cls: 0.5398  decode.d6.loss_mask: 1.5709  decode.d6.loss_dice: 1.7059  decode.d7.loss_cls: 0.5360  decode.d7.loss_mask: 1.5752  decode.d7.loss_dice: 1.7207  decode.d8.loss_cls: 0.5341  decode.d8.loss_mask: 1.6340  decode.d8.loss_dice: 1.7026  mix_decode.loss_cls: 0.3657  mix_decode.loss_mask: 0.6662  mix_decode.loss_dice: 0.8499  mix_decode.d0.loss_cls: 0.3200  mix_decode.d0.loss_mask: 0.6391  mix_decode.d0.loss_dice: 0.8680  mix_decode.d1.loss_cls: 0.3391  mix_decode.d1.loss_mask: 0.6492  mix_decode.d1.loss_dice: 0.8091  mix_decode.d2.loss_cls: 0.3116  mix_decode.d2.loss_mask: 0.6472  mix_decode.d2.loss_dice: 0.8325  mix_decode.d3.loss_cls: 0.3169  mix_decode.d3.loss_mask: 0.6746  mix_decode.d3.loss_dice: 0.8286  mix_decode.d4.loss_cls: 0.3120  mix_decode.d4.loss_mask: 0.6705  mix_decode.d4.loss_dice: 0.8069  mix_decode.d5.loss_cls: 0.3293  mix_decode.d5.loss_mask: 0.5920  mix_decode.d5.loss_dice: 0.7860  mix_decode.d6.loss_cls: 0.3383  mix_decode.d6.loss_mask: 0.6591  mix_decode.d6.loss_dice: 0.8104  mix_decode.d7.loss_cls: 0.3133  mix_decode.d7.loss_mask: 0.6474  mix_decode.d7.loss_dice: 0.8296  mix_decode.d8.loss_cls: 0.3203  mix_decode.d8.loss_mask: 0.6797  mix_decode.d8.loss_dice: 0.8285
2025/03/29 00:05:27 - mmengine - INFO - Iter(train) [14100/20000]  base_lr: 3.3332e-05 lr: 3.3332e-05  eta: 2:45:14  time: 1.9456  data_time: 0.0255  memory: 10763  loss: 53.0087  decode.loss_cls: 0.2768  decode.loss_mask: 1.5601  decode.loss_dice: 1.5294  decode.d0.loss_cls: 0.4536  decode.d0.loss_mask: 1.5608  decode.d0.loss_dice: 1.5246  decode.d1.loss_cls: 0.2772  decode.d1.loss_mask: 1.5229  decode.d1.loss_dice: 1.4953  decode.d2.loss_cls: 0.3107  decode.d2.loss_mask: 1.5579  decode.d2.loss_dice: 1.5085  decode.d3.loss_cls: 0.3089  decode.d3.loss_mask: 1.5877  decode.d3.loss_dice: 1.5856  decode.d4.loss_cls: 0.3122  decode.d4.loss_mask: 1.5115  decode.d4.loss_dice: 1.4850  decode.d5.loss_cls: 0.3123  decode.d5.loss_mask: 1.5499  decode.d5.loss_dice: 1.5462  decode.d6.loss_cls: 0.3152  decode.d6.loss_mask: 1.5709  decode.d6.loss_dice: 1.5081  decode.d7.loss_cls: 0.3302  decode.d7.loss_mask: 1.5202  decode.d7.loss_dice: 1.4989  decode.d8.loss_cls: 0.3068  decode.d8.loss_mask: 1.5688  decode.d8.loss_dice: 1.5115  mix_decode.loss_cls: 0.3858  mix_decode.loss_mask: 0.7281  mix_decode.loss_dice: 0.8625  mix_decode.d0.loss_cls: 0.3366  mix_decode.d0.loss_mask: 0.6959  mix_decode.d0.loss_dice: 0.9104  mix_decode.d1.loss_cls: 0.2991  mix_decode.d1.loss_mask: 0.6997  mix_decode.d1.loss_dice: 0.8543  mix_decode.d2.loss_cls: 0.2870  mix_decode.d2.loss_mask: 0.7004  mix_decode.d2.loss_dice: 0.8908  mix_decode.d3.loss_cls: 0.3465  mix_decode.d3.loss_mask: 0.6910  mix_decode.d3.loss_dice: 0.8550  mix_decode.d4.loss_cls: 0.3457  mix_decode.d4.loss_mask: 0.7051  mix_decode.d4.loss_dice: 0.8683  mix_decode.d5.loss_cls: 0.3627  mix_decode.d5.loss_mask: 0.6789  mix_decode.d5.loss_dice: 0.8438  mix_decode.d6.loss_cls: 0.3800  mix_decode.d6.loss_mask: 0.6944  mix_decode.d6.loss_dice: 0.8499  mix_decode.d7.loss_cls: 0.3718  mix_decode.d7.loss_mask: 0.6830  mix_decode.d7.loss_dice: 0.8394  mix_decode.d8.loss_cls: 0.3672  mix_decode.d8.loss_mask: 0.7104  mix_decode.d8.loss_dice: 0.8571
2025/03/29 00:07:03 - mmengine - INFO - Iter(train) [14150/20000]  base_lr: 3.3078e-05 lr: 3.3078e-05  eta: 2:43:55  time: 1.9435  data_time: 0.0252  memory: 10758  loss: 47.0624  decode.loss_cls: 0.3557  decode.loss_mask: 1.4752  decode.loss_dice: 1.4551  decode.d0.loss_cls: 0.5627  decode.d0.loss_mask: 1.5120  decode.d0.loss_dice: 1.4571  decode.d1.loss_cls: 0.3420  decode.d1.loss_mask: 1.5172  decode.d1.loss_dice: 1.4521  decode.d2.loss_cls: 0.3019  decode.d2.loss_mask: 1.4997  decode.d2.loss_dice: 1.4520  decode.d3.loss_cls: 0.3883  decode.d3.loss_mask: 1.5171  decode.d3.loss_dice: 1.4294  decode.d4.loss_cls: 0.3107  decode.d4.loss_mask: 1.5356  decode.d4.loss_dice: 1.4634  decode.d5.loss_cls: 0.3489  decode.d5.loss_mask: 1.5061  decode.d5.loss_dice: 1.4005  decode.d6.loss_cls: 0.3987  decode.d6.loss_mask: 1.4721  decode.d6.loss_dice: 1.4342  decode.d7.loss_cls: 0.3501  decode.d7.loss_mask: 1.4970  decode.d7.loss_dice: 1.4265  decode.d8.loss_cls: 0.2793  decode.d8.loss_mask: 1.5473  decode.d8.loss_dice: 1.4614  mix_decode.loss_cls: 0.1614  mix_decode.loss_mask: 0.5641  mix_decode.loss_dice: 0.6429  mix_decode.d0.loss_cls: 0.2442  mix_decode.d0.loss_mask: 0.5899  mix_decode.d0.loss_dice: 0.6586  mix_decode.d1.loss_cls: 0.1650  mix_decode.d1.loss_mask: 0.5429  mix_decode.d1.loss_dice: 0.6353  mix_decode.d2.loss_cls: 0.1548  mix_decode.d2.loss_mask: 0.5577  mix_decode.d2.loss_dice: 0.6333  mix_decode.d3.loss_cls: 0.1635  mix_decode.d3.loss_mask: 0.5915  mix_decode.d3.loss_dice: 0.6422  mix_decode.d4.loss_cls: 0.1890  mix_decode.d4.loss_mask: 0.5738  mix_decode.d4.loss_dice: 0.6287  mix_decode.d5.loss_cls: 0.1849  mix_decode.d5.loss_mask: 0.5771  mix_decode.d5.loss_dice: 0.6244  mix_decode.d6.loss_cls: 0.1790  mix_decode.d6.loss_mask: 0.5887  mix_decode.d6.loss_dice: 0.6444  mix_decode.d7.loss_cls: 0.1878  mix_decode.d7.loss_mask: 0.5731  mix_decode.d7.loss_dice: 0.6291  mix_decode.d8.loss_cls: 0.1481  mix_decode.d8.loss_mask: 0.5801  mix_decode.d8.loss_dice: 0.6579
2025/03/29 00:08:39 - mmengine - INFO - Iter(train) [14200/20000]  base_lr: 3.2823e-05 lr: 3.2823e-05  eta: 2:42:36  time: 2.0283  data_time: 0.0261  memory: 10746  loss: 47.9435  decode.loss_cls: 0.4611  decode.loss_mask: 1.5279  decode.loss_dice: 1.4403  decode.d0.loss_cls: 0.5894  decode.d0.loss_mask: 1.5553  decode.d0.loss_dice: 1.4666  decode.d1.loss_cls: 0.5392  decode.d1.loss_mask: 1.5226  decode.d1.loss_dice: 1.3823  decode.d2.loss_cls: 0.4830  decode.d2.loss_mask: 1.5496  decode.d2.loss_dice: 1.4526  decode.d3.loss_cls: 0.4623  decode.d3.loss_mask: 1.5586  decode.d3.loss_dice: 1.3783  decode.d4.loss_cls: 0.5277  decode.d4.loss_mask: 1.4870  decode.d4.loss_dice: 1.3873  decode.d5.loss_cls: 0.5434  decode.d5.loss_mask: 1.4830  decode.d5.loss_dice: 1.3487  decode.d6.loss_cls: 0.4806  decode.d6.loss_mask: 1.5291  decode.d6.loss_dice: 1.4799  decode.d7.loss_cls: 0.4783  decode.d7.loss_mask: 1.5112  decode.d7.loss_dice: 1.3771  decode.d8.loss_cls: 0.4942  decode.d8.loss_mask: 1.5368  decode.d8.loss_dice: 1.4276  mix_decode.loss_cls: 0.1735  mix_decode.loss_mask: 0.4608  mix_decode.loss_dice: 0.7048  mix_decode.d0.loss_cls: 0.2242  mix_decode.d0.loss_mask: 0.4596  mix_decode.d0.loss_dice: 0.7054  mix_decode.d1.loss_cls: 0.2005  mix_decode.d1.loss_mask: 0.4410  mix_decode.d1.loss_dice: 0.6647  mix_decode.d2.loss_cls: 0.2155  mix_decode.d2.loss_mask: 0.4534  mix_decode.d2.loss_dice: 0.6730  mix_decode.d3.loss_cls: 0.2068  mix_decode.d3.loss_mask: 0.4493  mix_decode.d3.loss_dice: 0.6741  mix_decode.d4.loss_cls: 0.2269  mix_decode.d4.loss_mask: 0.4402  mix_decode.d4.loss_dice: 0.6655  mix_decode.d5.loss_cls: 0.2495  mix_decode.d5.loss_mask: 0.4386  mix_decode.d5.loss_dice: 0.6592  mix_decode.d6.loss_cls: 0.2263  mix_decode.d6.loss_mask: 0.4676  mix_decode.d6.loss_dice: 0.7114  mix_decode.d7.loss_cls: 0.2171  mix_decode.d7.loss_mask: 0.4405  mix_decode.d7.loss_dice: 0.6812  mix_decode.d8.loss_cls: 0.2195  mix_decode.d8.loss_mask: 0.4345  mix_decode.d8.loss_dice: 0.6979
2025/03/29 00:10:14 - mmengine - INFO - Iter(train) [14250/20000]  base_lr: 3.2568e-05 lr: 3.2568e-05  eta: 2:41:16  time: 1.8799  data_time: 0.0241  memory: 10754  loss: 46.7063  decode.loss_cls: 0.3957  decode.loss_mask: 1.2438  decode.loss_dice: 1.4814  decode.d0.loss_cls: 0.4666  decode.d0.loss_mask: 1.2331  decode.d0.loss_dice: 1.5397  decode.d1.loss_cls: 0.4222  decode.d1.loss_mask: 1.1931  decode.d1.loss_dice: 1.4343  decode.d2.loss_cls: 0.3597  decode.d2.loss_mask: 1.2436  decode.d2.loss_dice: 1.4420  decode.d3.loss_cls: 0.4420  decode.d3.loss_mask: 1.2144  decode.d3.loss_dice: 1.4435  decode.d4.loss_cls: 0.4229  decode.d4.loss_mask: 1.1977  decode.d4.loss_dice: 1.4689  decode.d5.loss_cls: 0.3927  decode.d5.loss_mask: 1.2338  decode.d5.loss_dice: 1.4567  decode.d6.loss_cls: 0.4193  decode.d6.loss_mask: 1.1956  decode.d6.loss_dice: 1.4807  decode.d7.loss_cls: 0.4312  decode.d7.loss_mask: 1.2210  decode.d7.loss_dice: 1.4228  decode.d8.loss_cls: 0.3767  decode.d8.loss_mask: 1.2070  decode.d8.loss_dice: 1.4826  mix_decode.loss_cls: 0.2438  mix_decode.loss_mask: 0.5273  mix_decode.loss_dice: 0.8012  mix_decode.d0.loss_cls: 0.2767  mix_decode.d0.loss_mask: 0.4891  mix_decode.d0.loss_dice: 0.8748  mix_decode.d1.loss_cls: 0.2465  mix_decode.d1.loss_mask: 0.4996  mix_decode.d1.loss_dice: 0.7673  mix_decode.d2.loss_cls: 0.2466  mix_decode.d2.loss_mask: 0.5205  mix_decode.d2.loss_dice: 0.7871  mix_decode.d3.loss_cls: 0.2538  mix_decode.d3.loss_mask: 0.5126  mix_decode.d3.loss_dice: 0.7747  mix_decode.d4.loss_cls: 0.2366  mix_decode.d4.loss_mask: 0.5059  mix_decode.d4.loss_dice: 0.7958  mix_decode.d5.loss_cls: 0.2649  mix_decode.d5.loss_mask: 0.5264  mix_decode.d5.loss_dice: 0.8322  mix_decode.d6.loss_cls: 0.2676  mix_decode.d6.loss_mask: 0.5163  mix_decode.d6.loss_dice: 0.8100  mix_decode.d7.loss_cls: 0.2263  mix_decode.d7.loss_mask: 0.5295  mix_decode.d7.loss_dice: 0.8404  mix_decode.d8.loss_cls: 0.2083  mix_decode.d8.loss_mask: 0.5312  mix_decode.d8.loss_dice: 0.8283
2025/03/29 00:11:50 - mmengine - INFO - Iter(train) [14300/20000]  base_lr: 3.2313e-05 lr: 3.2313e-05  eta: 2:39:57  time: 1.8423  data_time: 0.0253  memory: 10757  loss: 48.7957  decode.loss_cls: 0.4632  decode.loss_mask: 1.4672  decode.loss_dice: 1.3713  decode.d0.loss_cls: 0.5872  decode.d0.loss_mask: 1.5232  decode.d0.loss_dice: 1.4336  decode.d1.loss_cls: 0.4661  decode.d1.loss_mask: 1.4407  decode.d1.loss_dice: 1.4757  decode.d2.loss_cls: 0.5613  decode.d2.loss_mask: 1.4892  decode.d2.loss_dice: 1.3992  decode.d3.loss_cls: 0.5265  decode.d3.loss_mask: 1.4243  decode.d3.loss_dice: 1.4202  decode.d4.loss_cls: 0.4130  decode.d4.loss_mask: 1.4687  decode.d4.loss_dice: 1.3802  decode.d5.loss_cls: 0.4360  decode.d5.loss_mask: 1.4779  decode.d5.loss_dice: 1.3954  decode.d6.loss_cls: 0.4928  decode.d6.loss_mask: 1.4919  decode.d6.loss_dice: 1.4261  decode.d7.loss_cls: 0.4592  decode.d7.loss_mask: 1.4309  decode.d7.loss_dice: 1.4084  decode.d8.loss_cls: 0.4785  decode.d8.loss_mask: 1.4854  decode.d8.loss_dice: 1.4534  mix_decode.loss_cls: 0.1807  mix_decode.loss_mask: 0.5414  mix_decode.loss_dice: 0.7747  mix_decode.d0.loss_cls: 0.2395  mix_decode.d0.loss_mask: 0.5395  mix_decode.d0.loss_dice: 0.7667  mix_decode.d1.loss_cls: 0.1892  mix_decode.d1.loss_mask: 0.5427  mix_decode.d1.loss_dice: 0.7774  mix_decode.d2.loss_cls: 0.2012  mix_decode.d2.loss_mask: 0.5482  mix_decode.d2.loss_dice: 0.7646  mix_decode.d3.loss_cls: 0.1944  mix_decode.d3.loss_mask: 0.5420  mix_decode.d3.loss_dice: 0.7788  mix_decode.d4.loss_cls: 0.1824  mix_decode.d4.loss_mask: 0.5185  mix_decode.d4.loss_dice: 0.7656  mix_decode.d5.loss_cls: 0.2126  mix_decode.d5.loss_mask: 0.5436  mix_decode.d5.loss_dice: 0.7652  mix_decode.d6.loss_cls: 0.1798  mix_decode.d6.loss_mask: 0.5428  mix_decode.d6.loss_dice: 0.7694  mix_decode.d7.loss_cls: 0.1700  mix_decode.d7.loss_mask: 0.5440  mix_decode.d7.loss_dice: 0.8022  mix_decode.d8.loss_cls: 0.1532  mix_decode.d8.loss_mask: 0.5473  mix_decode.d8.loss_dice: 0.7715
2025/03/29 00:13:27 - mmengine - INFO - Iter(train) [14350/20000]  base_lr: 3.2058e-05 lr: 3.2058e-05  eta: 2:38:38  time: 1.8490  data_time: 0.0266  memory: 10757  loss: 56.0479  decode.loss_cls: 0.5151  decode.loss_mask: 1.6666  decode.loss_dice: 1.6654  decode.d0.loss_cls: 0.6515  decode.d0.loss_mask: 1.6436  decode.d0.loss_dice: 1.6338  decode.d1.loss_cls: 0.4078  decode.d1.loss_mask: 1.6760  decode.d1.loss_dice: 1.5994  decode.d2.loss_cls: 0.5216  decode.d2.loss_mask: 1.6554  decode.d2.loss_dice: 1.6430  decode.d3.loss_cls: 0.5736  decode.d3.loss_mask: 1.6343  decode.d3.loss_dice: 1.6115  decode.d4.loss_cls: 0.5633  decode.d4.loss_mask: 1.6309  decode.d4.loss_dice: 1.6721  decode.d5.loss_cls: 0.4821  decode.d5.loss_mask: 1.6028  decode.d5.loss_dice: 1.6687  decode.d6.loss_cls: 0.4957  decode.d6.loss_mask: 1.6681  decode.d6.loss_dice: 1.7329  decode.d7.loss_cls: 0.4701  decode.d7.loss_mask: 1.6027  decode.d7.loss_dice: 1.6432  decode.d8.loss_cls: 0.4180  decode.d8.loss_mask: 1.6187  decode.d8.loss_dice: 1.7166  mix_decode.loss_cls: 0.2806  mix_decode.loss_mask: 0.6811  mix_decode.loss_dice: 0.8355  mix_decode.d0.loss_cls: 0.3029  mix_decode.d0.loss_mask: 0.6952  mix_decode.d0.loss_dice: 0.8637  mix_decode.d1.loss_cls: 0.2498  mix_decode.d1.loss_mask: 0.6772  mix_decode.d1.loss_dice: 0.8486  mix_decode.d2.loss_cls: 0.2872  mix_decode.d2.loss_mask: 0.6684  mix_decode.d2.loss_dice: 0.8044  mix_decode.d3.loss_cls: 0.3148  mix_decode.d3.loss_mask: 0.6628  mix_decode.d3.loss_dice: 0.7906  mix_decode.d4.loss_cls: 0.2950  mix_decode.d4.loss_mask: 0.6812  mix_decode.d4.loss_dice: 0.8148  mix_decode.d5.loss_cls: 0.2827  mix_decode.d5.loss_mask: 0.6821  mix_decode.d5.loss_dice: 0.8399  mix_decode.d6.loss_cls: 0.3066  mix_decode.d6.loss_mask: 0.6677  mix_decode.d6.loss_dice: 0.8500  mix_decode.d7.loss_cls: 0.2728  mix_decode.d7.loss_mask: 0.6879  mix_decode.d7.loss_dice: 0.8500  mix_decode.d8.loss_cls: 0.2755  mix_decode.d8.loss_mask: 0.6698  mix_decode.d8.loss_dice: 0.8247
2025/03/29 00:15:03 - mmengine - INFO - Iter(train) [14400/20000]  base_lr: 3.1803e-05 lr: 3.1803e-05  eta: 2:37:18  time: 1.9353  data_time: 0.0249  memory: 10750  loss: 55.8800  decode.loss_cls: 0.5400  decode.loss_mask: 1.6686  decode.loss_dice: 1.7843  decode.d0.loss_cls: 0.6928  decode.d0.loss_mask: 1.5984  decode.d0.loss_dice: 1.8330  decode.d1.loss_cls: 0.5516  decode.d1.loss_mask: 1.6056  decode.d1.loss_dice: 1.8128  decode.d2.loss_cls: 0.5558  decode.d2.loss_mask: 1.6177  decode.d2.loss_dice: 1.8062  decode.d3.loss_cls: 0.5436  decode.d3.loss_mask: 1.6152  decode.d3.loss_dice: 1.7678  decode.d4.loss_cls: 0.6449  decode.d4.loss_mask: 1.6042  decode.d4.loss_dice: 1.6423  decode.d5.loss_cls: 0.5595  decode.d5.loss_mask: 1.6707  decode.d5.loss_dice: 1.7785  decode.d6.loss_cls: 0.5646  decode.d6.loss_mask: 1.6179  decode.d6.loss_dice: 1.7371  decode.d7.loss_cls: 0.6240  decode.d7.loss_mask: 1.6279  decode.d7.loss_dice: 1.7552  decode.d8.loss_cls: 0.5917  decode.d8.loss_mask: 1.6644  decode.d8.loss_dice: 1.8306  mix_decode.loss_cls: 0.2909  mix_decode.loss_mask: 0.5210  mix_decode.loss_dice: 0.8016  mix_decode.d0.loss_cls: 0.2844  mix_decode.d0.loss_mask: 0.5277  mix_decode.d0.loss_dice: 0.8661  mix_decode.d1.loss_cls: 0.2443  mix_decode.d1.loss_mask: 0.5440  mix_decode.d1.loss_dice: 0.8261  mix_decode.d2.loss_cls: 0.1946  mix_decode.d2.loss_mask: 0.5444  mix_decode.d2.loss_dice: 0.8093  mix_decode.d3.loss_cls: 0.2475  mix_decode.d3.loss_mask: 0.5278  mix_decode.d3.loss_dice: 0.7916  mix_decode.d4.loss_cls: 0.2723  mix_decode.d4.loss_mask: 0.5347  mix_decode.d4.loss_dice: 0.7891  mix_decode.d5.loss_cls: 0.2775  mix_decode.d5.loss_mask: 0.5345  mix_decode.d5.loss_dice: 0.7944  mix_decode.d6.loss_cls: 0.2513  mix_decode.d6.loss_mask: 0.5205  mix_decode.d6.loss_dice: 0.8240  mix_decode.d7.loss_cls: 0.2530  mix_decode.d7.loss_mask: 0.5174  mix_decode.d7.loss_dice: 0.8212  mix_decode.d8.loss_cls: 0.2539  mix_decode.d8.loss_mask: 0.5105  mix_decode.d8.loss_dice: 0.7978
2025/03/29 00:16:37 - mmengine - INFO - Iter(train) [14450/20000]  base_lr: 3.1547e-05 lr: 3.1547e-05  eta: 2:35:58  time: 1.8699  data_time: 0.0284  memory: 10741  loss: 54.7659  decode.loss_cls: 0.3557  decode.loss_mask: 1.7805  decode.loss_dice: 1.6408  decode.d0.loss_cls: 0.5916  decode.d0.loss_mask: 1.7231  decode.d0.loss_dice: 1.6594  decode.d1.loss_cls: 0.4162  decode.d1.loss_mask: 1.7230  decode.d1.loss_dice: 1.5868  decode.d2.loss_cls: 0.4270  decode.d2.loss_mask: 1.7099  decode.d2.loss_dice: 1.5784  decode.d3.loss_cls: 0.3749  decode.d3.loss_mask: 1.7329  decode.d3.loss_dice: 1.6080  decode.d4.loss_cls: 0.3964  decode.d4.loss_mask: 1.7308  decode.d4.loss_dice: 1.6219  decode.d5.loss_cls: 0.3772  decode.d5.loss_mask: 1.7458  decode.d5.loss_dice: 1.6144  decode.d6.loss_cls: 0.3566  decode.d6.loss_mask: 1.8023  decode.d6.loss_dice: 1.6108  decode.d7.loss_cls: 0.3996  decode.d7.loss_mask: 1.7355  decode.d7.loss_dice: 1.6356  decode.d8.loss_cls: 0.3688  decode.d8.loss_mask: 1.7449  decode.d8.loss_dice: 1.6245  mix_decode.loss_cls: 0.2817  mix_decode.loss_mask: 0.6131  mix_decode.loss_dice: 0.8162  mix_decode.d0.loss_cls: 0.3069  mix_decode.d0.loss_mask: 0.5904  mix_decode.d0.loss_dice: 0.8299  mix_decode.d1.loss_cls: 0.2870  mix_decode.d1.loss_mask: 0.5710  mix_decode.d1.loss_dice: 0.8009  mix_decode.d2.loss_cls: 0.2661  mix_decode.d2.loss_mask: 0.6040  mix_decode.d2.loss_dice: 0.8380  mix_decode.d3.loss_cls: 0.2659  mix_decode.d3.loss_mask: 0.6245  mix_decode.d3.loss_dice: 0.8286  mix_decode.d4.loss_cls: 0.2530  mix_decode.d4.loss_mask: 0.6019  mix_decode.d4.loss_dice: 0.8624  mix_decode.d5.loss_cls: 0.3027  mix_decode.d5.loss_mask: 0.6117  mix_decode.d5.loss_dice: 0.8006  mix_decode.d6.loss_cls: 0.3016  mix_decode.d6.loss_mask: 0.5998  mix_decode.d6.loss_dice: 0.8046  mix_decode.d7.loss_cls: 0.2889  mix_decode.d7.loss_mask: 0.5939  mix_decode.d7.loss_dice: 0.8307  mix_decode.d8.loss_cls: 0.2771  mix_decode.d8.loss_mask: 0.6137  mix_decode.d8.loss_dice: 0.8255
2025/03/29 00:18:13 - mmengine - INFO - Iter(train) [14500/20000]  base_lr: 3.1291e-05 lr: 3.1291e-05  eta: 2:34:38  time: 1.9439  data_time: 0.0294  memory: 10744  loss: 47.4826  decode.loss_cls: 0.2788  decode.loss_mask: 1.5919  decode.loss_dice: 1.4345  decode.d0.loss_cls: 0.4237  decode.d0.loss_mask: 1.5859  decode.d0.loss_dice: 1.4808  decode.d1.loss_cls: 0.2747  decode.d1.loss_mask: 1.6006  decode.d1.loss_dice: 1.4505  decode.d2.loss_cls: 0.2903  decode.d2.loss_mask: 1.5865  decode.d2.loss_dice: 1.4229  decode.d3.loss_cls: 0.3179  decode.d3.loss_mask: 1.6024  decode.d3.loss_dice: 1.4363  decode.d4.loss_cls: 0.2520  decode.d4.loss_mask: 1.6043  decode.d4.loss_dice: 1.4213  decode.d5.loss_cls: 0.2482  decode.d5.loss_mask: 1.6218  decode.d5.loss_dice: 1.4302  decode.d6.loss_cls: 0.2524  decode.d6.loss_mask: 1.5964  decode.d6.loss_dice: 1.4337  decode.d7.loss_cls: 0.2510  decode.d7.loss_mask: 1.6130  decode.d7.loss_dice: 1.4485  decode.d8.loss_cls: 0.3182  decode.d8.loss_mask: 1.6086  decode.d8.loss_dice: 1.4197  mix_decode.loss_cls: 0.2268  mix_decode.loss_mask: 0.5314  mix_decode.loss_dice: 0.6809  mix_decode.d0.loss_cls: 0.2178  mix_decode.d0.loss_mask: 0.5484  mix_decode.d0.loss_dice: 0.7386  mix_decode.d1.loss_cls: 0.2804  mix_decode.d1.loss_mask: 0.4910  mix_decode.d1.loss_dice: 0.6430  mix_decode.d2.loss_cls: 0.2301  mix_decode.d2.loss_mask: 0.5144  mix_decode.d2.loss_dice: 0.6647  mix_decode.d3.loss_cls: 0.2465  mix_decode.d3.loss_mask: 0.5096  mix_decode.d3.loss_dice: 0.6480  mix_decode.d4.loss_cls: 0.2621  mix_decode.d4.loss_mask: 0.5003  mix_decode.d4.loss_dice: 0.6322  mix_decode.d5.loss_cls: 0.2534  mix_decode.d5.loss_mask: 0.5389  mix_decode.d5.loss_dice: 0.6318  mix_decode.d6.loss_cls: 0.2526  mix_decode.d6.loss_mask: 0.5052  mix_decode.d6.loss_dice: 0.6415  mix_decode.d7.loss_cls: 0.2191  mix_decode.d7.loss_mask: 0.5163  mix_decode.d7.loss_dice: 0.6527  mix_decode.d8.loss_cls: 0.2481  mix_decode.d8.loss_mask: 0.5257  mix_decode.d8.loss_dice: 0.6343
2025/03/29 00:19:48 - mmengine - INFO - Iter(train) [14550/20000]  base_lr: 3.1035e-05 lr: 3.1035e-05  eta: 2:33:17  time: 1.9573  data_time: 0.0284  memory: 10759  loss: 52.2101  decode.loss_cls: 0.5234  decode.loss_mask: 1.5748  decode.loss_dice: 1.5253  decode.d0.loss_cls: 0.6457  decode.d0.loss_mask: 1.3620  decode.d0.loss_dice: 1.5301  decode.d1.loss_cls: 0.5015  decode.d1.loss_mask: 1.5243  decode.d1.loss_dice: 1.5064  decode.d2.loss_cls: 0.5845  decode.d2.loss_mask: 1.5458  decode.d2.loss_dice: 1.5137  decode.d3.loss_cls: 0.5364  decode.d3.loss_mask: 1.5639  decode.d3.loss_dice: 1.5106  decode.d4.loss_cls: 0.5406  decode.d4.loss_mask: 1.5568  decode.d4.loss_dice: 1.5009  decode.d5.loss_cls: 0.4821  decode.d5.loss_mask: 1.6173  decode.d5.loss_dice: 1.5247  decode.d6.loss_cls: 0.4792  decode.d6.loss_mask: 1.5866  decode.d6.loss_dice: 1.5035  decode.d7.loss_cls: 0.5443  decode.d7.loss_mask: 1.5942  decode.d7.loss_dice: 1.5101  decode.d8.loss_cls: 0.5546  decode.d8.loss_mask: 1.5843  decode.d8.loss_dice: 1.4962  mix_decode.loss_cls: 0.2752  mix_decode.loss_mask: 0.5421  mix_decode.loss_dice: 0.8168  mix_decode.d0.loss_cls: 0.2781  mix_decode.d0.loss_mask: 0.4740  mix_decode.d0.loss_dice: 0.8392  mix_decode.d1.loss_cls: 0.2564  mix_decode.d1.loss_mask: 0.5371  mix_decode.d1.loss_dice: 0.8003  mix_decode.d2.loss_cls: 0.2370  mix_decode.d2.loss_mask: 0.5363  mix_decode.d2.loss_dice: 0.8346  mix_decode.d3.loss_cls: 0.2981  mix_decode.d3.loss_mask: 0.5238  mix_decode.d3.loss_dice: 0.7959  mix_decode.d4.loss_cls: 0.2709  mix_decode.d4.loss_mask: 0.5189  mix_decode.d4.loss_dice: 0.7973  mix_decode.d5.loss_cls: 0.2849  mix_decode.d5.loss_mask: 0.5303  mix_decode.d5.loss_dice: 0.8248  mix_decode.d6.loss_cls: 0.2542  mix_decode.d6.loss_mask: 0.5629  mix_decode.d6.loss_dice: 0.8509  mix_decode.d7.loss_cls: 0.2218  mix_decode.d7.loss_mask: 0.5784  mix_decode.d7.loss_dice: 0.8393  mix_decode.d8.loss_cls: 0.2468  mix_decode.d8.loss_mask: 0.5311  mix_decode.d8.loss_dice: 0.8290
2025/03/29 00:21:23 - mmengine - INFO - Iter(train) [14600/20000]  base_lr: 3.0778e-05 lr: 3.0778e-05  eta: 2:31:57  time: 1.8318  data_time: 0.0253  memory: 10762  loss: 48.9959  decode.loss_cls: 0.3844  decode.loss_mask: 1.4844  decode.loss_dice: 1.5028  decode.d0.loss_cls: 0.4091  decode.d0.loss_mask: 1.5580  decode.d0.loss_dice: 1.5237  decode.d1.loss_cls: 0.3820  decode.d1.loss_mask: 1.4286  decode.d1.loss_dice: 1.3995  decode.d2.loss_cls: 0.3473  decode.d2.loss_mask: 1.5022  decode.d2.loss_dice: 1.5127  decode.d3.loss_cls: 0.3006  decode.d3.loss_mask: 1.4924  decode.d3.loss_dice: 1.5350  decode.d4.loss_cls: 0.4171  decode.d4.loss_mask: 1.4587  decode.d4.loss_dice: 1.4700  decode.d5.loss_cls: 0.3145  decode.d5.loss_mask: 1.5028  decode.d5.loss_dice: 1.4973  decode.d6.loss_cls: 0.3646  decode.d6.loss_mask: 1.4976  decode.d6.loss_dice: 1.4979  decode.d7.loss_cls: 0.2959  decode.d7.loss_mask: 1.5387  decode.d7.loss_dice: 1.5125  decode.d8.loss_cls: 0.3847  decode.d8.loss_mask: 1.4578  decode.d8.loss_dice: 1.5041  mix_decode.loss_cls: 0.2279  mix_decode.loss_mask: 0.5656  mix_decode.loss_dice: 0.7466  mix_decode.d0.loss_cls: 0.1991  mix_decode.d0.loss_mask: 0.5764  mix_decode.d0.loss_dice: 0.8291  mix_decode.d1.loss_cls: 0.2715  mix_decode.d1.loss_mask: 0.5681  mix_decode.d1.loss_dice: 0.7316  mix_decode.d2.loss_cls: 0.2124  mix_decode.d2.loss_mask: 0.5724  mix_decode.d2.loss_dice: 0.7457  mix_decode.d3.loss_cls: 0.2278  mix_decode.d3.loss_mask: 0.5758  mix_decode.d3.loss_dice: 0.7500  mix_decode.d4.loss_cls: 0.2500  mix_decode.d4.loss_mask: 0.5740  mix_decode.d4.loss_dice: 0.7455  mix_decode.d5.loss_cls: 0.2156  mix_decode.d5.loss_mask: 0.5713  mix_decode.d5.loss_dice: 0.7573  mix_decode.d6.loss_cls: 0.2392  mix_decode.d6.loss_mask: 0.5624  mix_decode.d6.loss_dice: 0.7396  mix_decode.d7.loss_cls: 0.2084  mix_decode.d7.loss_mask: 0.5763  mix_decode.d7.loss_dice: 0.7432  mix_decode.d8.loss_cls: 0.2183  mix_decode.d8.loss_mask: 0.5776  mix_decode.d8.loss_dice: 0.7402
2025/03/29 00:22:58 - mmengine - INFO - Iter(train) [14650/20000]  base_lr: 3.0522e-05 lr: 3.0522e-05  eta: 2:30:36  time: 1.9825  data_time: 0.0252  memory: 10771  loss: 53.1100  decode.loss_cls: 0.5326  decode.loss_mask: 1.5298  decode.loss_dice: 1.5875  decode.d0.loss_cls: 0.5334  decode.d0.loss_mask: 1.5708  decode.d0.loss_dice: 1.7226  decode.d1.loss_cls: 0.4851  decode.d1.loss_mask: 1.5700  decode.d1.loss_dice: 1.6251  decode.d2.loss_cls: 0.5190  decode.d2.loss_mask: 1.5321  decode.d2.loss_dice: 1.6168  decode.d3.loss_cls: 0.4570  decode.d3.loss_mask: 1.5401  decode.d3.loss_dice: 1.5845  decode.d4.loss_cls: 0.4854  decode.d4.loss_mask: 1.5448  decode.d4.loss_dice: 1.5773  decode.d5.loss_cls: 0.4656  decode.d5.loss_mask: 1.5543  decode.d5.loss_dice: 1.6266  decode.d6.loss_cls: 0.4728  decode.d6.loss_mask: 1.5796  decode.d6.loss_dice: 1.6003  decode.d7.loss_cls: 0.4314  decode.d7.loss_mask: 1.5699  decode.d7.loss_dice: 1.6288  decode.d8.loss_cls: 0.4886  decode.d8.loss_mask: 1.5510  decode.d8.loss_dice: 1.6132  mix_decode.loss_cls: 0.2663  mix_decode.loss_mask: 0.5718  mix_decode.loss_dice: 0.7986  mix_decode.d0.loss_cls: 0.2489  mix_decode.d0.loss_mask: 0.6241  mix_decode.d0.loss_dice: 0.8971  mix_decode.d1.loss_cls: 0.2736  mix_decode.d1.loss_mask: 0.5823  mix_decode.d1.loss_dice: 0.7865  mix_decode.d2.loss_cls: 0.2617  mix_decode.d2.loss_mask: 0.5715  mix_decode.d2.loss_dice: 0.7901  mix_decode.d3.loss_cls: 0.2427  mix_decode.d3.loss_mask: 0.5918  mix_decode.d3.loss_dice: 0.8118  mix_decode.d4.loss_cls: 0.2478  mix_decode.d4.loss_mask: 0.5720  mix_decode.d4.loss_dice: 0.7940  mix_decode.d5.loss_cls: 0.2942  mix_decode.d5.loss_mask: 0.5806  mix_decode.d5.loss_dice: 0.7708  mix_decode.d6.loss_cls: 0.2418  mix_decode.d6.loss_mask: 0.5995  mix_decode.d6.loss_dice: 0.7893  mix_decode.d7.loss_cls: 0.2277  mix_decode.d7.loss_mask: 0.6031  mix_decode.d7.loss_dice: 0.8141  mix_decode.d8.loss_cls: 0.2842  mix_decode.d8.loss_mask: 0.5836  mix_decode.d8.loss_dice: 0.7925
2025/03/29 00:24:33 - mmengine - INFO - Iter(train) [14700/20000]  base_lr: 3.0265e-05 lr: 3.0265e-05  eta: 2:29:16  time: 1.9331  data_time: 0.0241  memory: 10767  loss: 52.5331  decode.loss_cls: 0.4369  decode.loss_mask: 1.5467  decode.loss_dice: 1.6879  decode.d0.loss_cls: 0.5287  decode.d0.loss_mask: 1.5820  decode.d0.loss_dice: 1.6713  decode.d1.loss_cls: 0.4598  decode.d1.loss_mask: 1.5520  decode.d1.loss_dice: 1.6365  decode.d2.loss_cls: 0.5305  decode.d2.loss_mask: 1.4744  decode.d2.loss_dice: 1.6150  decode.d3.loss_cls: 0.5094  decode.d3.loss_mask: 1.5515  decode.d3.loss_dice: 1.6140  decode.d4.loss_cls: 0.4692  decode.d4.loss_mask: 1.4978  decode.d4.loss_dice: 1.6524  decode.d5.loss_cls: 0.4619  decode.d5.loss_mask: 1.5054  decode.d5.loss_dice: 1.6607  decode.d6.loss_cls: 0.4159  decode.d6.loss_mask: 1.5854  decode.d6.loss_dice: 1.6797  decode.d7.loss_cls: 0.5161  decode.d7.loss_mask: 1.5337  decode.d7.loss_dice: 1.6632  decode.d8.loss_cls: 0.4750  decode.d8.loss_mask: 1.5399  decode.d8.loss_dice: 1.6428  mix_decode.loss_cls: 0.2572  mix_decode.loss_mask: 0.5774  mix_decode.loss_dice: 0.7458  mix_decode.d0.loss_cls: 0.2403  mix_decode.d0.loss_mask: 0.5691  mix_decode.d0.loss_dice: 0.8266  mix_decode.d1.loss_cls: 0.2551  mix_decode.d1.loss_mask: 0.5686  mix_decode.d1.loss_dice: 0.7218  mix_decode.d2.loss_cls: 0.2620  mix_decode.d2.loss_mask: 0.5707  mix_decode.d2.loss_dice: 0.6957  mix_decode.d3.loss_cls: 0.2832  mix_decode.d3.loss_mask: 0.5798  mix_decode.d3.loss_dice: 0.7064  mix_decode.d4.loss_cls: 0.3279  mix_decode.d4.loss_mask: 0.5551  mix_decode.d4.loss_dice: 0.6962  mix_decode.d5.loss_cls: 0.3108  mix_decode.d5.loss_mask: 0.5798  mix_decode.d5.loss_dice: 0.7289  mix_decode.d6.loss_cls: 0.2782  mix_decode.d6.loss_mask: 0.5817  mix_decode.d6.loss_dice: 0.7441  mix_decode.d7.loss_cls: 0.2424  mix_decode.d7.loss_mask: 0.5849  mix_decode.d7.loss_dice: 0.7483  mix_decode.d8.loss_cls: 0.2677  mix_decode.d8.loss_mask: 0.5850  mix_decode.d8.loss_dice: 0.7468
2025/03/29 00:26:10 - mmengine - INFO - Iter(train) [14750/20000]  base_lr: 3.0008e-05 lr: 3.0008e-05  eta: 2:27:56  time: 1.9518  data_time: 0.0266  memory: 10761  loss: 51.8104  decode.loss_cls: 0.5057  decode.loss_mask: 1.5827  decode.loss_dice: 1.6311  decode.d0.loss_cls: 0.5299  decode.d0.loss_mask: 1.5892  decode.d0.loss_dice: 1.6801  decode.d1.loss_cls: 0.5041  decode.d1.loss_mask: 1.5489  decode.d1.loss_dice: 1.5445  decode.d2.loss_cls: 0.4815  decode.d2.loss_mask: 1.5889  decode.d2.loss_dice: 1.5256  decode.d3.loss_cls: 0.4426  decode.d3.loss_mask: 1.5851  decode.d3.loss_dice: 1.5674  decode.d4.loss_cls: 0.5243  decode.d4.loss_mask: 1.5056  decode.d4.loss_dice: 1.5918  decode.d5.loss_cls: 0.4635  decode.d5.loss_mask: 1.5054  decode.d5.loss_dice: 1.5837  decode.d6.loss_cls: 0.5188  decode.d6.loss_mask: 1.5529  decode.d6.loss_dice: 1.6073  decode.d7.loss_cls: 0.4885  decode.d7.loss_mask: 1.6199  decode.d7.loss_dice: 1.6428  decode.d8.loss_cls: 0.4952  decode.d8.loss_mask: 1.6098  decode.d8.loss_dice: 1.5908  mix_decode.loss_cls: 0.2216  mix_decode.loss_mask: 0.4551  mix_decode.loss_dice: 0.8127  mix_decode.d0.loss_cls: 0.2362  mix_decode.d0.loss_mask: 0.4501  mix_decode.d0.loss_dice: 0.8791  mix_decode.d1.loss_cls: 0.2360  mix_decode.d1.loss_mask: 0.4604  mix_decode.d1.loss_dice: 0.8172  mix_decode.d2.loss_cls: 0.2201  mix_decode.d2.loss_mask: 0.4599  mix_decode.d2.loss_dice: 0.8090  mix_decode.d3.loss_cls: 0.2398  mix_decode.d3.loss_mask: 0.4502  mix_decode.d3.loss_dice: 0.7989  mix_decode.d4.loss_cls: 0.2549  mix_decode.d4.loss_mask: 0.4600  mix_decode.d4.loss_dice: 0.8042  mix_decode.d5.loss_cls: 0.2765  mix_decode.d5.loss_mask: 0.4608  mix_decode.d5.loss_dice: 0.8035  mix_decode.d6.loss_cls: 0.2260  mix_decode.d6.loss_mask: 0.4802  mix_decode.d6.loss_dice: 0.8387  mix_decode.d7.loss_cls: 0.2093  mix_decode.d7.loss_mask: 0.4750  mix_decode.d7.loss_dice: 0.8357  mix_decode.d8.loss_cls: 0.2101  mix_decode.d8.loss_mask: 0.4815  mix_decode.d8.loss_dice: 0.8402
2025/03/29 00:27:45 - mmengine - INFO - Iter(train) [14800/20000]  base_lr: 2.9751e-05 lr: 2.9751e-05  eta: 2:26:35  time: 1.8469  data_time: 0.0258  memory: 10747  loss: 44.5387  decode.loss_cls: 0.3841  decode.loss_mask: 1.2834  decode.loss_dice: 1.2953  decode.d0.loss_cls: 0.5430  decode.d0.loss_mask: 1.2965  decode.d0.loss_dice: 1.4013  decode.d1.loss_cls: 0.6473  decode.d1.loss_mask: 1.1175  decode.d1.loss_dice: 1.1723  decode.d2.loss_cls: 0.5265  decode.d2.loss_mask: 1.2576  decode.d2.loss_dice: 1.2414  decode.d3.loss_cls: 0.5300  decode.d3.loss_mask: 1.2507  decode.d3.loss_dice: 1.2342  decode.d4.loss_cls: 0.4918  decode.d4.loss_mask: 1.1530  decode.d4.loss_dice: 1.2085  decode.d5.loss_cls: 0.5169  decode.d5.loss_mask: 1.1873  decode.d5.loss_dice: 1.2351  decode.d6.loss_cls: 0.5292  decode.d6.loss_mask: 1.2469  decode.d6.loss_dice: 1.2101  decode.d7.loss_cls: 0.5304  decode.d7.loss_mask: 1.2531  decode.d7.loss_dice: 1.2180  decode.d8.loss_cls: 0.4913  decode.d8.loss_mask: 1.2142  decode.d8.loss_dice: 1.2457  mix_decode.loss_cls: 0.2557  mix_decode.loss_mask: 0.4947  mix_decode.loss_dice: 0.6708  mix_decode.d0.loss_cls: 0.2708  mix_decode.d0.loss_mask: 0.5060  mix_decode.d0.loss_dice: 0.7824  mix_decode.d1.loss_cls: 0.3189  mix_decode.d1.loss_mask: 0.4974  mix_decode.d1.loss_dice: 0.6830  mix_decode.d2.loss_cls: 0.3118  mix_decode.d2.loss_mask: 0.4790  mix_decode.d2.loss_dice: 0.6399  mix_decode.d3.loss_cls: 0.2864  mix_decode.d3.loss_mask: 0.4894  mix_decode.d3.loss_dice: 0.6628  mix_decode.d4.loss_cls: 0.3030  mix_decode.d4.loss_mask: 0.4864  mix_decode.d4.loss_dice: 0.6513  mix_decode.d5.loss_cls: 0.2985  mix_decode.d5.loss_mask: 0.4972  mix_decode.d5.loss_dice: 0.6434  mix_decode.d6.loss_cls: 0.2980  mix_decode.d6.loss_mask: 0.5006  mix_decode.d6.loss_dice: 0.6779  mix_decode.d7.loss_cls: 0.3094  mix_decode.d7.loss_mask: 0.4930  mix_decode.d7.loss_dice: 0.6676  mix_decode.d8.loss_cls: 0.2724  mix_decode.d8.loss_mask: 0.5050  mix_decode.d8.loss_dice: 0.6738
2025/03/29 00:29:21 - mmengine - INFO - Iter(train) [14850/20000]  base_lr: 2.9493e-05 lr: 2.9493e-05  eta: 2:25:14  time: 1.9286  data_time: 0.0256  memory: 10738  loss: 54.0820  decode.loss_cls: 0.5331  decode.loss_mask: 1.6445  decode.loss_dice: 1.4917  decode.d0.loss_cls: 0.5807  decode.d0.loss_mask: 1.6014  decode.d0.loss_dice: 1.5110  decode.d1.loss_cls: 0.5821  decode.d1.loss_mask: 1.5939  decode.d1.loss_dice: 1.4842  decode.d2.loss_cls: 0.5026  decode.d2.loss_mask: 1.6095  decode.d2.loss_dice: 1.5195  decode.d3.loss_cls: 0.4970  decode.d3.loss_mask: 1.6599  decode.d3.loss_dice: 1.4809  decode.d4.loss_cls: 0.5583  decode.d4.loss_mask: 1.5654  decode.d4.loss_dice: 1.4666  decode.d5.loss_cls: 0.4997  decode.d5.loss_mask: 1.6260  decode.d5.loss_dice: 1.5023  decode.d6.loss_cls: 0.5964  decode.d6.loss_mask: 1.5905  decode.d6.loss_dice: 1.4868  decode.d7.loss_cls: 0.5450  decode.d7.loss_mask: 1.6252  decode.d7.loss_dice: 1.4696  decode.d8.loss_cls: 0.5909  decode.d8.loss_mask: 1.5780  decode.d8.loss_dice: 1.4294  mix_decode.loss_cls: 0.3829  mix_decode.loss_mask: 0.5102  mix_decode.loss_dice: 0.8820  mix_decode.d0.loss_cls: 0.2990  mix_decode.d0.loss_mask: 0.5325  mix_decode.d0.loss_dice: 0.9488  mix_decode.d1.loss_cls: 0.4018  mix_decode.d1.loss_mask: 0.4997  mix_decode.d1.loss_dice: 0.8312  mix_decode.d2.loss_cls: 0.4422  mix_decode.d2.loss_mask: 0.5073  mix_decode.d2.loss_dice: 0.8033  mix_decode.d3.loss_cls: 0.4464  mix_decode.d3.loss_mask: 0.5143  mix_decode.d3.loss_dice: 0.8199  mix_decode.d4.loss_cls: 0.4189  mix_decode.d4.loss_mask: 0.5117  mix_decode.d4.loss_dice: 0.8475  mix_decode.d5.loss_cls: 0.4175  mix_decode.d5.loss_mask: 0.5212  mix_decode.d5.loss_dice: 0.8535  mix_decode.d6.loss_cls: 0.3900  mix_decode.d6.loss_mask: 0.4945  mix_decode.d6.loss_dice: 0.8819  mix_decode.d7.loss_cls: 0.4170  mix_decode.d7.loss_mask: 0.5095  mix_decode.d7.loss_dice: 0.8401  mix_decode.d8.loss_cls: 0.3315  mix_decode.d8.loss_mask: 0.5133  mix_decode.d8.loss_dice: 0.8903
2025/03/29 00:30:54 - mmengine - INFO - Iter(train) [14900/20000]  base_lr: 2.9235e-05 lr: 2.9235e-05  eta: 2:23:52  time: 1.8327  data_time: 0.0242  memory: 10762  loss: 52.8880  decode.loss_cls: 0.3864  decode.loss_mask: 1.6136  decode.loss_dice: 1.5694  decode.d0.loss_cls: 0.5937  decode.d0.loss_mask: 1.6480  decode.d0.loss_dice: 1.6093  decode.d1.loss_cls: 0.3658  decode.d1.loss_mask: 1.6343  decode.d1.loss_dice: 1.5761  decode.d2.loss_cls: 0.3545  decode.d2.loss_mask: 1.6090  decode.d2.loss_dice: 1.5477  decode.d3.loss_cls: 0.4362  decode.d3.loss_mask: 1.6106  decode.d3.loss_dice: 1.5564  decode.d4.loss_cls: 0.4087  decode.d4.loss_mask: 1.6501  decode.d4.loss_dice: 1.6198  decode.d5.loss_cls: 0.3071  decode.d5.loss_mask: 1.6720  decode.d5.loss_dice: 1.6058  decode.d6.loss_cls: 0.3579  decode.d6.loss_mask: 1.6584  decode.d6.loss_dice: 1.5842  decode.d7.loss_cls: 0.3548  decode.d7.loss_mask: 1.7359  decode.d7.loss_dice: 1.6099  decode.d8.loss_cls: 0.3876  decode.d8.loss_mask: 1.6538  decode.d8.loss_dice: 1.5956  mix_decode.loss_cls: 0.2355  mix_decode.loss_mask: 0.6079  mix_decode.loss_dice: 0.7924  mix_decode.d0.loss_cls: 0.2755  mix_decode.d0.loss_mask: 0.6163  mix_decode.d0.loss_dice: 0.8079  mix_decode.d1.loss_cls: 0.2859  mix_decode.d1.loss_mask: 0.5904  mix_decode.d1.loss_dice: 0.7881  mix_decode.d2.loss_cls: 0.2927  mix_decode.d2.loss_mask: 0.5893  mix_decode.d2.loss_dice: 0.7401  mix_decode.d3.loss_cls: 0.2275  mix_decode.d3.loss_mask: 0.6073  mix_decode.d3.loss_dice: 0.7686  mix_decode.d4.loss_cls: 0.2708  mix_decode.d4.loss_mask: 0.6186  mix_decode.d4.loss_dice: 0.7965  mix_decode.d5.loss_cls: 0.3122  mix_decode.d5.loss_mask: 0.6061  mix_decode.d5.loss_dice: 0.7763  mix_decode.d6.loss_cls: 0.2661  mix_decode.d6.loss_mask: 0.6196  mix_decode.d6.loss_dice: 0.8084  mix_decode.d7.loss_cls: 0.2829  mix_decode.d7.loss_mask: 0.5814  mix_decode.d7.loss_dice: 0.7721  mix_decode.d8.loss_cls: 0.2587  mix_decode.d8.loss_mask: 0.6006  mix_decode.d8.loss_dice: 0.7796
2025/03/29 00:32:30 - mmengine - INFO - Iter(train) [14950/20000]  base_lr: 2.8977e-05 lr: 2.8977e-05  eta: 2:22:32  time: 1.8877  data_time: 0.0284  memory: 10772  loss: 51.9651  decode.loss_cls: 0.4101  decode.loss_mask: 1.6610  decode.loss_dice: 1.6479  decode.d0.loss_cls: 0.5048  decode.d0.loss_mask: 1.6584  decode.d0.loss_dice: 1.8238  decode.d1.loss_cls: 0.3789  decode.d1.loss_mask: 1.6245  decode.d1.loss_dice: 1.7265  decode.d2.loss_cls: 0.4389  decode.d2.loss_mask: 1.5619  decode.d2.loss_dice: 1.5945  decode.d3.loss_cls: 0.4315  decode.d3.loss_mask: 1.5917  decode.d3.loss_dice: 1.6596  decode.d4.loss_cls: 0.3785  decode.d4.loss_mask: 1.5896  decode.d4.loss_dice: 1.6688  decode.d5.loss_cls: 0.4156  decode.d5.loss_mask: 1.5747  decode.d5.loss_dice: 1.7311  decode.d6.loss_cls: 0.4296  decode.d6.loss_mask: 1.6402  decode.d6.loss_dice: 1.7155  decode.d7.loss_cls: 0.4111  decode.d7.loss_mask: 1.6668  decode.d7.loss_dice: 1.7380  decode.d8.loss_cls: 0.4073  decode.d8.loss_mask: 1.6688  decode.d8.loss_dice: 1.6773  mix_decode.loss_cls: 0.2793  mix_decode.loss_mask: 0.4601  mix_decode.loss_dice: 0.7197  mix_decode.d0.loss_cls: 0.2748  mix_decode.d0.loss_mask: 0.4570  mix_decode.d0.loss_dice: 0.7853  mix_decode.d1.loss_cls: 0.2909  mix_decode.d1.loss_mask: 0.4292  mix_decode.d1.loss_dice: 0.6965  mix_decode.d2.loss_cls: 0.2977  mix_decode.d2.loss_mask: 0.4458  mix_decode.d2.loss_dice: 0.6767  mix_decode.d3.loss_cls: 0.3226  mix_decode.d3.loss_mask: 0.4420  mix_decode.d3.loss_dice: 0.6811  mix_decode.d4.loss_cls: 0.2968  mix_decode.d4.loss_mask: 0.4486  mix_decode.d4.loss_dice: 0.7260  mix_decode.d5.loss_cls: 0.2844  mix_decode.d5.loss_mask: 0.4511  mix_decode.d5.loss_dice: 0.7050  mix_decode.d6.loss_cls: 0.3172  mix_decode.d6.loss_mask: 0.4208  mix_decode.d6.loss_dice: 0.6724  mix_decode.d7.loss_cls: 0.3249  mix_decode.d7.loss_mask: 0.4604  mix_decode.d7.loss_dice: 0.6926  mix_decode.d8.loss_cls: 0.3153  mix_decode.d8.loss_mask: 0.4535  mix_decode.d8.loss_dice: 0.7103
2025/03/29 00:34:02 - mmengine - INFO - Exp name: r2u_20250328_164133
2025/03/29 00:34:02 - mmengine - INFO - Iter(train) [15000/20000]  base_lr: 2.8719e-05 lr: 2.8719e-05  eta: 2:21:09  time: 1.9490  data_time: 0.0283  memory: 10744  loss: 47.0611  decode.loss_cls: 0.3487  decode.loss_mask: 1.5453  decode.loss_dice: 1.3003  decode.d0.loss_cls: 0.5506  decode.d0.loss_mask: 1.4559  decode.d0.loss_dice: 1.2638  decode.d1.loss_cls: 0.4174  decode.d1.loss_mask: 1.4546  decode.d1.loss_dice: 1.2456  decode.d2.loss_cls: 0.3964  decode.d2.loss_mask: 1.4463  decode.d2.loss_dice: 1.2636  decode.d3.loss_cls: 0.3938  decode.d3.loss_mask: 1.4501  decode.d3.loss_dice: 1.2861  decode.d4.loss_cls: 0.3756  decode.d4.loss_mask: 1.4930  decode.d4.loss_dice: 1.2832  decode.d5.loss_cls: 0.3724  decode.d5.loss_mask: 1.5381  decode.d5.loss_dice: 1.2951  decode.d6.loss_cls: 0.3532  decode.d6.loss_mask: 1.5266  decode.d6.loss_dice: 1.3367  decode.d7.loss_cls: 0.4005  decode.d7.loss_mask: 1.4882  decode.d7.loss_dice: 1.2983  decode.d8.loss_cls: 0.4241  decode.d8.loss_mask: 1.4662  decode.d8.loss_dice: 1.2902  mix_decode.loss_cls: 0.2203  mix_decode.loss_mask: 0.5825  mix_decode.loss_dice: 0.7740  mix_decode.d0.loss_cls: 0.2851  mix_decode.d0.loss_mask: 0.5041  mix_decode.d0.loss_dice: 0.7377  mix_decode.d1.loss_cls: 0.2578  mix_decode.d1.loss_mask: 0.5359  mix_decode.d1.loss_dice: 0.7382  mix_decode.d2.loss_cls: 0.2522  mix_decode.d2.loss_mask: 0.5267  mix_decode.d2.loss_dice: 0.7218  mix_decode.d3.loss_cls: 0.2012  mix_decode.d3.loss_mask: 0.5437  mix_decode.d3.loss_dice: 0.7390  mix_decode.d4.loss_cls: 0.2193  mix_decode.d4.loss_mask: 0.5320  mix_decode.d4.loss_dice: 0.7294  mix_decode.d5.loss_cls: 0.2481  mix_decode.d5.loss_mask: 0.5827  mix_decode.d5.loss_dice: 0.7393  mix_decode.d6.loss_cls: 0.2797  mix_decode.d6.loss_mask: 0.5343  mix_decode.d6.loss_dice: 0.7297  mix_decode.d7.loss_cls: 0.2499  mix_decode.d7.loss_mask: 0.5552  mix_decode.d7.loss_dice: 0.7350  mix_decode.d8.loss_cls: 0.2386  mix_decode.d8.loss_mask: 0.5366  mix_decode.d8.loss_dice: 0.7711
2025/03/29 00:35:37 - mmengine - INFO - Iter(train) [15050/20000]  base_lr: 2.8460e-05 lr: 2.8460e-05  eta: 2:19:48  time: 1.8353  data_time: 0.0250  memory: 10760  loss: 51.4387  decode.loss_cls: 0.4616  decode.loss_mask: 1.5099  decode.loss_dice: 1.5189  decode.d0.loss_cls: 0.5529  decode.d0.loss_mask: 1.5529  decode.d0.loss_dice: 1.6424  decode.d1.loss_cls: 0.4819  decode.d1.loss_mask: 1.5364  decode.d1.loss_dice: 1.5403  decode.d2.loss_cls: 0.5253  decode.d2.loss_mask: 1.4815  decode.d2.loss_dice: 1.4780  decode.d3.loss_cls: 0.4132  decode.d3.loss_mask: 1.6023  decode.d3.loss_dice: 1.5633  decode.d4.loss_cls: 0.5214  decode.d4.loss_mask: 1.5077  decode.d4.loss_dice: 1.5251  decode.d5.loss_cls: 0.4351  decode.d5.loss_mask: 1.5987  decode.d5.loss_dice: 1.6153  decode.d6.loss_cls: 0.4199  decode.d6.loss_mask: 1.5362  decode.d6.loss_dice: 1.6173  decode.d7.loss_cls: 0.4669  decode.d7.loss_mask: 1.5226  decode.d7.loss_dice: 1.5626  decode.d8.loss_cls: 0.4496  decode.d8.loss_mask: 1.5242  decode.d8.loss_dice: 1.5562  mix_decode.loss_cls: 0.2475  mix_decode.loss_mask: 0.5685  mix_decode.loss_dice: 0.7606  mix_decode.d0.loss_cls: 0.1991  mix_decode.d0.loss_mask: 0.5811  mix_decode.d0.loss_dice: 0.8420  mix_decode.d1.loss_cls: 0.2463  mix_decode.d1.loss_mask: 0.5314  mix_decode.d1.loss_dice: 0.7698  mix_decode.d2.loss_cls: 0.2359  mix_decode.d2.loss_mask: 0.5508  mix_decode.d2.loss_dice: 0.7772  mix_decode.d3.loss_cls: 0.2444  mix_decode.d3.loss_mask: 0.5427  mix_decode.d3.loss_dice: 0.7635  mix_decode.d4.loss_cls: 0.2605  mix_decode.d4.loss_mask: 0.5665  mix_decode.d4.loss_dice: 0.7599  mix_decode.d5.loss_cls: 0.2790  mix_decode.d5.loss_mask: 0.5621  mix_decode.d5.loss_dice: 0.7578  mix_decode.d6.loss_cls: 0.2508  mix_decode.d6.loss_mask: 0.5351  mix_decode.d6.loss_dice: 0.7732  mix_decode.d7.loss_cls: 0.2175  mix_decode.d7.loss_mask: 0.5582  mix_decode.d7.loss_dice: 0.7611  mix_decode.d8.loss_cls: 0.2424  mix_decode.d8.loss_mask: 0.5649  mix_decode.d8.loss_dice: 0.7694
2025/03/29 00:37:11 - mmengine - INFO - Iter(train) [15100/20000]  base_lr: 2.8201e-05 lr: 2.8201e-05  eta: 2:18:26  time: 1.9454  data_time: 0.0268  memory: 10755  loss: 52.7539  decode.loss_cls: 0.4933  decode.loss_mask: 1.6341  decode.loss_dice: 1.6262  decode.d0.loss_cls: 0.4706  decode.d0.loss_mask: 1.6559  decode.d0.loss_dice: 1.6972  decode.d1.loss_cls: 0.5032  decode.d1.loss_mask: 1.5953  decode.d1.loss_dice: 1.6022  decode.d2.loss_cls: 0.5126  decode.d2.loss_mask: 1.6077  decode.d2.loss_dice: 1.6238  decode.d3.loss_cls: 0.5570  decode.d3.loss_mask: 1.5448  decode.d3.loss_dice: 1.5457  decode.d4.loss_cls: 0.4979  decode.d4.loss_mask: 1.6309  decode.d4.loss_dice: 1.6206  decode.d5.loss_cls: 0.5348  decode.d5.loss_mask: 1.5818  decode.d5.loss_dice: 1.6210  decode.d6.loss_cls: 0.4393  decode.d6.loss_mask: 1.5855  decode.d6.loss_dice: 1.5835  decode.d7.loss_cls: 0.5072  decode.d7.loss_mask: 1.6259  decode.d7.loss_dice: 1.5977  decode.d8.loss_cls: 0.5373  decode.d8.loss_mask: 1.5959  decode.d8.loss_dice: 1.6082  mix_decode.loss_cls: 0.1982  mix_decode.loss_mask: 0.5769  mix_decode.loss_dice: 0.7681  mix_decode.d0.loss_cls: 0.2421  mix_decode.d0.loss_mask: 0.5509  mix_decode.d0.loss_dice: 0.8111  mix_decode.d1.loss_cls: 0.2381  mix_decode.d1.loss_mask: 0.5574  mix_decode.d1.loss_dice: 0.7299  mix_decode.d2.loss_cls: 0.2403  mix_decode.d2.loss_mask: 0.5595  mix_decode.d2.loss_dice: 0.7426  mix_decode.d3.loss_cls: 0.2636  mix_decode.d3.loss_mask: 0.5490  mix_decode.d3.loss_dice: 0.7532  mix_decode.d4.loss_cls: 0.2565  mix_decode.d4.loss_mask: 0.5450  mix_decode.d4.loss_dice: 0.7435  mix_decode.d5.loss_cls: 0.2732  mix_decode.d5.loss_mask: 0.5480  mix_decode.d5.loss_dice: 0.7251  mix_decode.d6.loss_cls: 0.1983  mix_decode.d6.loss_mask: 0.5844  mix_decode.d6.loss_dice: 0.7533  mix_decode.d7.loss_cls: 0.2270  mix_decode.d7.loss_mask: 0.5802  mix_decode.d7.loss_dice: 0.7641  mix_decode.d8.loss_cls: 0.2077  mix_decode.d8.loss_mask: 0.5666  mix_decode.d8.loss_dice: 0.7630
2025/03/29 00:38:46 - mmengine - INFO - Iter(train) [15150/20000]  base_lr: 2.7942e-05 lr: 2.7942e-05  eta: 2:17:05  time: 1.8791  data_time: 0.0269  memory: 10742  loss: 51.5665  decode.loss_cls: 0.5073  decode.loss_mask: 1.4379  decode.loss_dice: 1.4995  decode.d0.loss_cls: 0.5544  decode.d0.loss_mask: 1.4783  decode.d0.loss_dice: 1.6057  decode.d1.loss_cls: 0.4485  decode.d1.loss_mask: 1.4888  decode.d1.loss_dice: 1.5472  decode.d2.loss_cls: 0.4225  decode.d2.loss_mask: 1.4662  decode.d2.loss_dice: 1.5345  decode.d3.loss_cls: 0.5314  decode.d3.loss_mask: 1.4591  decode.d3.loss_dice: 1.5017  decode.d4.loss_cls: 0.5349  decode.d4.loss_mask: 1.4783  decode.d4.loss_dice: 1.4654  decode.d5.loss_cls: 0.5383  decode.d5.loss_mask: 1.4367  decode.d5.loss_dice: 1.4663  decode.d6.loss_cls: 0.3956  decode.d6.loss_mask: 1.5322  decode.d6.loss_dice: 1.5542  decode.d7.loss_cls: 0.4756  decode.d7.loss_mask: 1.5565  decode.d7.loss_dice: 1.5055  decode.d8.loss_cls: 0.5606  decode.d8.loss_mask: 1.4833  decode.d8.loss_dice: 1.4945  mix_decode.loss_cls: 0.2634  mix_decode.loss_mask: 0.5020  mix_decode.loss_dice: 0.8700  mix_decode.d0.loss_cls: 0.2465  mix_decode.d0.loss_mask: 0.5170  mix_decode.d0.loss_dice: 0.9780  mix_decode.d1.loss_cls: 0.2962  mix_decode.d1.loss_mask: 0.4976  mix_decode.d1.loss_dice: 0.8874  mix_decode.d2.loss_cls: 0.2847  mix_decode.d2.loss_mask: 0.4956  mix_decode.d2.loss_dice: 0.8638  mix_decode.d3.loss_cls: 0.3064  mix_decode.d3.loss_mask: 0.4986  mix_decode.d3.loss_dice: 0.8856  mix_decode.d4.loss_cls: 0.2917  mix_decode.d4.loss_mask: 0.4978  mix_decode.d4.loss_dice: 0.8715  mix_decode.d5.loss_cls: 0.2783  mix_decode.d5.loss_mask: 0.4981  mix_decode.d5.loss_dice: 0.8793  mix_decode.d6.loss_cls: 0.2508  mix_decode.d6.loss_mask: 0.5082  mix_decode.d6.loss_dice: 0.8900  mix_decode.d7.loss_cls: 0.2685  mix_decode.d7.loss_mask: 0.4909  mix_decode.d7.loss_dice: 0.8912  mix_decode.d8.loss_cls: 0.2352  mix_decode.d8.loss_mask: 0.4948  mix_decode.d8.loss_dice: 0.8667
2025/03/29 00:40:21 - mmengine - INFO - Iter(train) [15200/20000]  base_lr: 2.7683e-05 lr: 2.7683e-05  eta: 2:15:43  time: 1.9276  data_time: 0.0254  memory: 10754  loss: 49.7640  decode.loss_cls: 0.3018  decode.loss_mask: 1.4729  decode.loss_dice: 1.5297  decode.d0.loss_cls: 0.3710  decode.d0.loss_mask: 1.4532  decode.d0.loss_dice: 1.6352  decode.d1.loss_cls: 0.3331  decode.d1.loss_mask: 1.4161  decode.d1.loss_dice: 1.5396  decode.d2.loss_cls: 0.3747  decode.d2.loss_mask: 1.4027  decode.d2.loss_dice: 1.5844  decode.d3.loss_cls: 0.3536  decode.d3.loss_mask: 1.4063  decode.d3.loss_dice: 1.5847  decode.d4.loss_cls: 0.3677  decode.d4.loss_mask: 1.3968  decode.d4.loss_dice: 1.5599  decode.d5.loss_cls: 0.3347  decode.d5.loss_mask: 1.4026  decode.d5.loss_dice: 1.5145  decode.d6.loss_cls: 0.3076  decode.d6.loss_mask: 1.4519  decode.d6.loss_dice: 1.5549  decode.d7.loss_cls: 0.2973  decode.d7.loss_mask: 1.4945  decode.d7.loss_dice: 1.6237  decode.d8.loss_cls: 0.3435  decode.d8.loss_mask: 1.4689  decode.d8.loss_dice: 1.5419  mix_decode.loss_cls: 0.2013  mix_decode.loss_mask: 0.5611  mix_decode.loss_dice: 0.8367  mix_decode.d0.loss_cls: 0.2104  mix_decode.d0.loss_mask: 0.5747  mix_decode.d0.loss_dice: 0.8929  mix_decode.d1.loss_cls: 0.2296  mix_decode.d1.loss_mask: 0.5593  mix_decode.d1.loss_dice: 0.8505  mix_decode.d2.loss_cls: 0.2471  mix_decode.d2.loss_mask: 0.5643  mix_decode.d2.loss_dice: 0.8491  mix_decode.d3.loss_cls: 0.2297  mix_decode.d3.loss_mask: 0.5448  mix_decode.d3.loss_dice: 0.8458  mix_decode.d4.loss_cls: 0.2303  mix_decode.d4.loss_mask: 0.5793  mix_decode.d4.loss_dice: 0.8457  mix_decode.d5.loss_cls: 0.2254  mix_decode.d5.loss_mask: 0.5683  mix_decode.d5.loss_dice: 0.8275  mix_decode.d6.loss_cls: 0.2295  mix_decode.d6.loss_mask: 0.5626  mix_decode.d6.loss_dice: 0.8526  mix_decode.d7.loss_cls: 0.2181  mix_decode.d7.loss_mask: 0.5682  mix_decode.d7.loss_dice: 0.8454  mix_decode.d8.loss_cls: 0.2125  mix_decode.d8.loss_mask: 0.5527  mix_decode.d8.loss_dice: 0.8293
2025/03/29 00:41:56 - mmengine - INFO - Iter(train) [15250/20000]  base_lr: 2.7423e-05 lr: 2.7423e-05  eta: 2:14:22  time: 1.8400  data_time: 0.0242  memory: 10745  loss: 52.6081  decode.loss_cls: 0.5442  decode.loss_mask: 1.6120  decode.loss_dice: 1.3684  decode.d0.loss_cls: 0.5992  decode.d0.loss_mask: 1.6054  decode.d0.loss_dice: 1.4159  decode.d1.loss_cls: 0.6119  decode.d1.loss_mask: 1.5570  decode.d1.loss_dice: 1.3900  decode.d2.loss_cls: 0.5553  decode.d2.loss_mask: 1.6088  decode.d2.loss_dice: 1.4205  decode.d3.loss_cls: 0.6318  decode.d3.loss_mask: 1.4787  decode.d3.loss_dice: 1.3174  decode.d4.loss_cls: 0.6342  decode.d4.loss_mask: 1.5941  decode.d4.loss_dice: 1.3298  decode.d5.loss_cls: 0.6348  decode.d5.loss_mask: 1.6347  decode.d5.loss_dice: 1.3444  decode.d6.loss_cls: 0.5565  decode.d6.loss_mask: 1.6029  decode.d6.loss_dice: 1.3939  decode.d7.loss_cls: 0.5643  decode.d7.loss_mask: 1.6156  decode.d7.loss_dice: 1.4190  decode.d8.loss_cls: 0.5564  decode.d8.loss_mask: 1.6810  decode.d8.loss_dice: 1.3744  mix_decode.loss_cls: 0.2269  mix_decode.loss_mask: 0.6375  mix_decode.loss_dice: 0.7630  mix_decode.d0.loss_cls: 0.2789  mix_decode.d0.loss_mask: 0.6525  mix_decode.d0.loss_dice: 0.8436  mix_decode.d1.loss_cls: 0.3127  mix_decode.d1.loss_mask: 0.6362  mix_decode.d1.loss_dice: 0.7458  mix_decode.d2.loss_cls: 0.2247  mix_decode.d2.loss_mask: 0.7795  mix_decode.d2.loss_dice: 0.7946  mix_decode.d3.loss_cls: 0.2205  mix_decode.d3.loss_mask: 0.6702  mix_decode.d3.loss_dice: 0.7647  mix_decode.d4.loss_cls: 0.2806  mix_decode.d4.loss_mask: 0.6171  mix_decode.d4.loss_dice: 0.7512  mix_decode.d5.loss_cls: 0.2772  mix_decode.d5.loss_mask: 0.6376  mix_decode.d5.loss_dice: 0.7240  mix_decode.d6.loss_cls: 0.2153  mix_decode.d6.loss_mask: 0.7089  mix_decode.d6.loss_dice: 0.7876  mix_decode.d7.loss_cls: 0.2439  mix_decode.d7.loss_mask: 0.6837  mix_decode.d7.loss_dice: 0.7812  mix_decode.d8.loss_cls: 0.2679  mix_decode.d8.loss_mask: 0.6567  mix_decode.d8.loss_dice: 0.7712
2025/03/29 00:43:31 - mmengine - INFO - Iter(train) [15300/20000]  base_lr: 2.7163e-05 lr: 2.7163e-05  eta: 2:13:00  time: 1.8241  data_time: 0.0238  memory: 10753  loss: 53.0382  decode.loss_cls: 0.4797  decode.loss_mask: 1.6560  decode.loss_dice: 1.6873  decode.d0.loss_cls: 0.6549  decode.d0.loss_mask: 1.5517  decode.d0.loss_dice: 1.6606  decode.d1.loss_cls: 0.4669  decode.d1.loss_mask: 1.6529  decode.d1.loss_dice: 1.6634  decode.d2.loss_cls: 0.4879  decode.d2.loss_mask: 1.6215  decode.d2.loss_dice: 1.6553  decode.d3.loss_cls: 0.4778  decode.d3.loss_mask: 1.6542  decode.d3.loss_dice: 1.6120  decode.d4.loss_cls: 0.4754  decode.d4.loss_mask: 1.6480  decode.d4.loss_dice: 1.6788  decode.d5.loss_cls: 0.5573  decode.d5.loss_mask: 1.6473  decode.d5.loss_dice: 1.6658  decode.d6.loss_cls: 0.4525  decode.d6.loss_mask: 1.6559  decode.d6.loss_dice: 1.6915  decode.d7.loss_cls: 0.4884  decode.d7.loss_mask: 1.6316  decode.d7.loss_dice: 1.6694  decode.d8.loss_cls: 0.5686  decode.d8.loss_mask: 1.6204  decode.d8.loss_dice: 1.6489  mix_decode.loss_cls: 0.2874  mix_decode.loss_mask: 0.5068  mix_decode.loss_dice: 0.6980  mix_decode.d0.loss_cls: 0.3696  mix_decode.d0.loss_mask: 0.4610  mix_decode.d0.loss_dice: 0.7687  mix_decode.d1.loss_cls: 0.3200  mix_decode.d1.loss_mask: 0.4990  mix_decode.d1.loss_dice: 0.7207  mix_decode.d2.loss_cls: 0.2710  mix_decode.d2.loss_mask: 0.4812  mix_decode.d2.loss_dice: 0.6524  mix_decode.d3.loss_cls: 0.2786  mix_decode.d3.loss_mask: 0.4866  mix_decode.d3.loss_dice: 0.7055  mix_decode.d4.loss_cls: 0.3197  mix_decode.d4.loss_mask: 0.4852  mix_decode.d4.loss_dice: 0.6852  mix_decode.d5.loss_cls: 0.3010  mix_decode.d5.loss_mask: 0.4903  mix_decode.d5.loss_dice: 0.6999  mix_decode.d6.loss_cls: 0.2533  mix_decode.d6.loss_mask: 0.5100  mix_decode.d6.loss_dice: 0.7262  mix_decode.d7.loss_cls: 0.2865  mix_decode.d7.loss_mask: 0.4997  mix_decode.d7.loss_dice: 0.7042  mix_decode.d8.loss_cls: 0.3156  mix_decode.d8.loss_mask: 0.4924  mix_decode.d8.loss_dice: 0.6803
2025/03/29 00:45:06 - mmengine - INFO - Iter(train) [15350/20000]  base_lr: 2.6903e-05 lr: 2.6903e-05  eta: 2:11:38  time: 1.9776  data_time: 0.0243  memory: 10750  loss: 51.1049  decode.loss_cls: 0.4482  decode.loss_mask: 1.5888  decode.loss_dice: 1.4491  decode.d0.loss_cls: 0.5385  decode.d0.loss_mask: 1.7392  decode.d0.loss_dice: 1.6308  decode.d1.loss_cls: 0.4977  decode.d1.loss_mask: 1.5179  decode.d1.loss_dice: 1.4578  decode.d2.loss_cls: 0.4385  decode.d2.loss_mask: 1.6709  decode.d2.loss_dice: 1.5088  decode.d3.loss_cls: 0.4212  decode.d3.loss_mask: 1.6327  decode.d3.loss_dice: 1.4918  decode.d4.loss_cls: 0.5011  decode.d4.loss_mask: 1.6162  decode.d4.loss_dice: 1.4890  decode.d5.loss_cls: 0.4537  decode.d5.loss_mask: 1.6637  decode.d5.loss_dice: 1.5921  decode.d6.loss_cls: 0.4372  decode.d6.loss_mask: 1.6454  decode.d6.loss_dice: 1.5605  decode.d7.loss_cls: 0.3890  decode.d7.loss_mask: 1.6475  decode.d7.loss_dice: 1.5195  decode.d8.loss_cls: 0.4365  decode.d8.loss_mask: 1.6414  decode.d8.loss_dice: 1.5152  mix_decode.loss_cls: 0.2750  mix_decode.loss_mask: 0.4338  mix_decode.loss_dice: 0.7582  mix_decode.d0.loss_cls: 0.3395  mix_decode.d0.loss_mask: 0.4277  mix_decode.d0.loss_dice: 0.8107  mix_decode.d1.loss_cls: 0.3155  mix_decode.d1.loss_mask: 0.4187  mix_decode.d1.loss_dice: 0.7513  mix_decode.d2.loss_cls: 0.3107  mix_decode.d2.loss_mask: 0.4031  mix_decode.d2.loss_dice: 0.7479  mix_decode.d3.loss_cls: 0.2821  mix_decode.d3.loss_mask: 0.4170  mix_decode.d3.loss_dice: 0.7759  mix_decode.d4.loss_cls: 0.3055  mix_decode.d4.loss_mask: 0.4333  mix_decode.d4.loss_dice: 0.7648  mix_decode.d5.loss_cls: 0.3466  mix_decode.d5.loss_mask: 0.4099  mix_decode.d5.loss_dice: 0.7698  mix_decode.d6.loss_cls: 0.2557  mix_decode.d6.loss_mask: 0.4409  mix_decode.d6.loss_dice: 0.7957  mix_decode.d7.loss_cls: 0.2638  mix_decode.d7.loss_mask: 0.4297  mix_decode.d7.loss_dice: 0.7918  mix_decode.d8.loss_cls: 0.2750  mix_decode.d8.loss_mask: 0.4439  mix_decode.d8.loss_dice: 0.7721
2025/03/29 00:46:42 - mmengine - INFO - Iter(train) [15400/20000]  base_lr: 2.6642e-05 lr: 2.6642e-05  eta: 2:10:16  time: 1.9424  data_time: 0.0256  memory: 10761  loss: 47.8148  decode.loss_cls: 0.5302  decode.loss_mask: 1.2351  decode.loss_dice: 1.4364  decode.d0.loss_cls: 0.6015  decode.d0.loss_mask: 1.3080  decode.d0.loss_dice: 1.5865  decode.d1.loss_cls: 0.5461  decode.d1.loss_mask: 1.2517  decode.d1.loss_dice: 1.4876  decode.d2.loss_cls: 0.5476  decode.d2.loss_mask: 1.2215  decode.d2.loss_dice: 1.4538  decode.d3.loss_cls: 0.5710  decode.d3.loss_mask: 1.2130  decode.d3.loss_dice: 1.4112  decode.d4.loss_cls: 0.5554  decode.d4.loss_mask: 1.2895  decode.d4.loss_dice: 1.4814  decode.d5.loss_cls: 0.6052  decode.d5.loss_mask: 1.2356  decode.d5.loss_dice: 1.4520  decode.d6.loss_cls: 0.5688  decode.d6.loss_mask: 1.2178  decode.d6.loss_dice: 1.4911  decode.d7.loss_cls: 0.5139  decode.d7.loss_mask: 1.2506  decode.d7.loss_dice: 1.4835  decode.d8.loss_cls: 0.5768  decode.d8.loss_mask: 1.2120  decode.d8.loss_dice: 1.4310  mix_decode.loss_cls: 0.2293  mix_decode.loss_mask: 0.5680  mix_decode.loss_dice: 0.6889  mix_decode.d0.loss_cls: 0.2965  mix_decode.d0.loss_mask: 0.5775  mix_decode.d0.loss_dice: 0.7719  mix_decode.d1.loss_cls: 0.2243  mix_decode.d1.loss_mask: 0.5570  mix_decode.d1.loss_dice: 0.6867  mix_decode.d2.loss_cls: 0.2186  mix_decode.d2.loss_mask: 0.5660  mix_decode.d2.loss_dice: 0.7098  mix_decode.d3.loss_cls: 0.2389  mix_decode.d3.loss_mask: 0.5552  mix_decode.d3.loss_dice: 0.6840  mix_decode.d4.loss_cls: 0.2380  mix_decode.d4.loss_mask: 0.5525  mix_decode.d4.loss_dice: 0.6888  mix_decode.d5.loss_cls: 0.2622  mix_decode.d5.loss_mask: 0.5624  mix_decode.d5.loss_dice: 0.6851  mix_decode.d6.loss_cls: 0.2405  mix_decode.d6.loss_mask: 0.5681  mix_decode.d6.loss_dice: 0.7034  mix_decode.d7.loss_cls: 0.2644  mix_decode.d7.loss_mask: 0.5571  mix_decode.d7.loss_dice: 0.6827  mix_decode.d8.loss_cls: 0.2384  mix_decode.d8.loss_mask: 0.5469  mix_decode.d8.loss_dice: 0.6859
2025/03/29 00:48:17 - mmengine - INFO - Iter(train) [15450/20000]  base_lr: 2.6382e-05 lr: 2.6382e-05  eta: 2:08:54  time: 1.9520  data_time: 0.0251  memory: 10754  loss: 50.8823  decode.loss_cls: 0.2968  decode.loss_mask: 1.6077  decode.loss_dice: 1.4928  decode.d0.loss_cls: 0.4092  decode.d0.loss_mask: 1.6514  decode.d0.loss_dice: 1.4575  decode.d1.loss_cls: 0.3584  decode.d1.loss_mask: 1.6256  decode.d1.loss_dice: 1.4465  decode.d2.loss_cls: 0.3554  decode.d2.loss_mask: 1.6307  decode.d2.loss_dice: 1.4681  decode.d3.loss_cls: 0.3166  decode.d3.loss_mask: 1.6187  decode.d3.loss_dice: 1.4336  decode.d4.loss_cls: 0.3527  decode.d4.loss_mask: 1.6026  decode.d4.loss_dice: 1.4317  decode.d5.loss_cls: 0.3407  decode.d5.loss_mask: 1.6108  decode.d5.loss_dice: 1.4490  decode.d6.loss_cls: 0.3390  decode.d6.loss_mask: 1.6089  decode.d6.loss_dice: 1.4672  decode.d7.loss_cls: 0.3226  decode.d7.loss_mask: 1.6173  decode.d7.loss_dice: 1.4337  decode.d8.loss_cls: 0.2930  decode.d8.loss_mask: 1.6276  decode.d8.loss_dice: 1.4451  mix_decode.loss_cls: 0.2017  mix_decode.loss_mask: 0.5863  mix_decode.loss_dice: 0.8562  mix_decode.d0.loss_cls: 0.2353  mix_decode.d0.loss_mask: 0.6070  mix_decode.d0.loss_dice: 0.9324  mix_decode.d1.loss_cls: 0.2523  mix_decode.d1.loss_mask: 0.5960  mix_decode.d1.loss_dice: 0.8482  mix_decode.d2.loss_cls: 0.2032  mix_decode.d2.loss_mask: 0.6035  mix_decode.d2.loss_dice: 0.8388  mix_decode.d3.loss_cls: 0.2014  mix_decode.d3.loss_mask: 0.5963  mix_decode.d3.loss_dice: 0.8535  mix_decode.d4.loss_cls: 0.2591  mix_decode.d4.loss_mask: 0.5863  mix_decode.d4.loss_dice: 0.8414  mix_decode.d5.loss_cls: 0.2373  mix_decode.d5.loss_mask: 0.5942  mix_decode.d5.loss_dice: 0.8512  mix_decode.d6.loss_cls: 0.2006  mix_decode.d6.loss_mask: 0.6008  mix_decode.d6.loss_dice: 0.8573  mix_decode.d7.loss_cls: 0.2027  mix_decode.d7.loss_mask: 0.6020  mix_decode.d7.loss_dice: 0.8558  mix_decode.d8.loss_cls: 0.2016  mix_decode.d8.loss_mask: 0.5960  mix_decode.d8.loss_dice: 0.8731
2025/03/29 00:49:52 - mmengine - INFO - Iter(train) [15500/20000]  base_lr: 2.6121e-05 lr: 2.6121e-05  eta: 2:07:32  time: 1.8295  data_time: 0.0256  memory: 10750  loss: 47.9931  decode.loss_cls: 0.3273  decode.loss_mask: 1.4980  decode.loss_dice: 1.4854  decode.d0.loss_cls: 0.5272  decode.d0.loss_mask: 1.5114  decode.d0.loss_dice: 1.4994  decode.d1.loss_cls: 0.4207  decode.d1.loss_mask: 1.5156  decode.d1.loss_dice: 1.4661  decode.d2.loss_cls: 0.3716  decode.d2.loss_mask: 1.4859  decode.d2.loss_dice: 1.4415  decode.d3.loss_cls: 0.3755  decode.d3.loss_mask: 1.4904  decode.d3.loss_dice: 1.4548  decode.d4.loss_cls: 0.4002  decode.d4.loss_mask: 1.4997  decode.d4.loss_dice: 1.4349  decode.d5.loss_cls: 0.3557  decode.d5.loss_mask: 1.4857  decode.d5.loss_dice: 1.4478  decode.d6.loss_cls: 0.3772  decode.d6.loss_mask: 1.4970  decode.d6.loss_dice: 1.4664  decode.d7.loss_cls: 0.3958  decode.d7.loss_mask: 1.4879  decode.d7.loss_dice: 1.4590  decode.d8.loss_cls: 0.3893  decode.d8.loss_mask: 1.5023  decode.d8.loss_dice: 1.4540  mix_decode.loss_cls: 0.1981  mix_decode.loss_mask: 0.4756  mix_decode.loss_dice: 0.7448  mix_decode.d0.loss_cls: 0.2768  mix_decode.d0.loss_mask: 0.4736  mix_decode.d0.loss_dice: 0.7735  mix_decode.d1.loss_cls: 0.2457  mix_decode.d1.loss_mask: 0.4510  mix_decode.d1.loss_dice: 0.7249  mix_decode.d2.loss_cls: 0.2550  mix_decode.d2.loss_mask: 0.4693  mix_decode.d2.loss_dice: 0.6883  mix_decode.d3.loss_cls: 0.2403  mix_decode.d3.loss_mask: 0.4547  mix_decode.d3.loss_dice: 0.7216  mix_decode.d4.loss_cls: 0.3108  mix_decode.d4.loss_mask: 0.4519  mix_decode.d4.loss_dice: 0.6897  mix_decode.d5.loss_cls: 0.2769  mix_decode.d5.loss_mask: 0.4838  mix_decode.d5.loss_dice: 0.7066  mix_decode.d6.loss_cls: 0.2461  mix_decode.d6.loss_mask: 0.4932  mix_decode.d6.loss_dice: 0.7410  mix_decode.d7.loss_cls: 0.2053  mix_decode.d7.loss_mask: 0.4909  mix_decode.d7.loss_dice: 0.7458  mix_decode.d8.loss_cls: 0.2354  mix_decode.d8.loss_mask: 0.4597  mix_decode.d8.loss_dice: 0.7389
2025/03/29 00:51:27 - mmengine - INFO - Iter(train) [15550/20000]  base_lr: 2.5859e-05 lr: 2.5859e-05  eta: 2:06:10  time: 1.8774  data_time: 0.0225  memory: 10746  loss: 45.8622  decode.loss_cls: 0.5789  decode.loss_mask: 1.2603  decode.loss_dice: 1.4415  decode.d0.loss_cls: 0.6347  decode.d0.loss_mask: 1.2550  decode.d0.loss_dice: 1.4874  decode.d1.loss_cls: 0.5483  decode.d1.loss_mask: 1.3048  decode.d1.loss_dice: 1.3833  decode.d2.loss_cls: 0.4280  decode.d2.loss_mask: 1.2828  decode.d2.loss_dice: 1.3961  decode.d3.loss_cls: 0.4515  decode.d3.loss_mask: 1.2959  decode.d3.loss_dice: 1.4128  decode.d4.loss_cls: 0.4566  decode.d4.loss_mask: 1.3118  decode.d4.loss_dice: 1.3922  decode.d5.loss_cls: 0.5618  decode.d5.loss_mask: 1.2688  decode.d5.loss_dice: 1.4251  decode.d6.loss_cls: 0.5244  decode.d6.loss_mask: 1.3006  decode.d6.loss_dice: 1.4502  decode.d7.loss_cls: 0.5357  decode.d7.loss_mask: 1.2735  decode.d7.loss_dice: 1.3922  decode.d8.loss_cls: 0.5433  decode.d8.loss_mask: 1.2534  decode.d8.loss_dice: 1.3680  mix_decode.loss_cls: 0.2325  mix_decode.loss_mask: 0.4026  mix_decode.loss_dice: 0.7393  mix_decode.d0.loss_cls: 0.2794  mix_decode.d0.loss_mask: 0.3880  mix_decode.d0.loss_dice: 0.7889  mix_decode.d1.loss_cls: 0.2250  mix_decode.d1.loss_mask: 0.3937  mix_decode.d1.loss_dice: 0.7319  mix_decode.d2.loss_cls: 0.2469  mix_decode.d2.loss_mask: 0.3702  mix_decode.d2.loss_dice: 0.7168  mix_decode.d3.loss_cls: 0.2245  mix_decode.d3.loss_mask: 0.3932  mix_decode.d3.loss_dice: 0.7521  mix_decode.d4.loss_cls: 0.2843  mix_decode.d4.loss_mask: 0.3903  mix_decode.d4.loss_dice: 0.6757  mix_decode.d5.loss_cls: 0.2554  mix_decode.d5.loss_mask: 0.3795  mix_decode.d5.loss_dice: 0.7099  mix_decode.d6.loss_cls: 0.2264  mix_decode.d6.loss_mask: 0.3777  mix_decode.d6.loss_dice: 0.7213  mix_decode.d7.loss_cls: 0.2406  mix_decode.d7.loss_mask: 0.3896  mix_decode.d7.loss_dice: 0.7158  mix_decode.d8.loss_cls: 0.2593  mix_decode.d8.loss_mask: 0.3921  mix_decode.d8.loss_dice: 0.7404
2025/03/29 00:53:01 - mmengine - INFO - Iter(train) [15600/20000]  base_lr: 2.5598e-05 lr: 2.5598e-05  eta: 2:04:48  time: 1.8252  data_time: 0.0227  memory: 10761  loss: 51.6567  decode.loss_cls: 0.4997  decode.loss_mask: 1.5082  decode.loss_dice: 1.5622  decode.d0.loss_cls: 0.5859  decode.d0.loss_mask: 1.5518  decode.d0.loss_dice: 1.7580  decode.d1.loss_cls: 0.4529  decode.d1.loss_mask: 1.4973  decode.d1.loss_dice: 1.6072  decode.d2.loss_cls: 0.4211  decode.d2.loss_mask: 1.4818  decode.d2.loss_dice: 1.6253  decode.d3.loss_cls: 0.4225  decode.d3.loss_mask: 1.4717  decode.d3.loss_dice: 1.6040  decode.d4.loss_cls: 0.4670  decode.d4.loss_mask: 1.4980  decode.d4.loss_dice: 1.5844  decode.d5.loss_cls: 0.4521  decode.d5.loss_mask: 1.5084  decode.d5.loss_dice: 1.5796  decode.d6.loss_cls: 0.4500  decode.d6.loss_mask: 1.5060  decode.d6.loss_dice: 1.6172  decode.d7.loss_cls: 0.4903  decode.d7.loss_mask: 1.4593  decode.d7.loss_dice: 1.6188  decode.d8.loss_cls: 0.4419  decode.d8.loss_mask: 1.4678  decode.d8.loss_dice: 1.6016  mix_decode.loss_cls: 0.2498  mix_decode.loss_mask: 0.5656  mix_decode.loss_dice: 0.7665  mix_decode.d0.loss_cls: 0.2659  mix_decode.d0.loss_mask: 0.5927  mix_decode.d0.loss_dice: 0.8503  mix_decode.d1.loss_cls: 0.2676  mix_decode.d1.loss_mask: 0.5711  mix_decode.d1.loss_dice: 0.7607  mix_decode.d2.loss_cls: 0.2542  mix_decode.d2.loss_mask: 0.5620  mix_decode.d2.loss_dice: 0.7277  mix_decode.d3.loss_cls: 0.2576  mix_decode.d3.loss_mask: 0.5474  mix_decode.d3.loss_dice: 0.7213  mix_decode.d4.loss_cls: 0.2668  mix_decode.d4.loss_mask: 0.5444  mix_decode.d4.loss_dice: 0.7367  mix_decode.d5.loss_cls: 0.2105  mix_decode.d5.loss_mask: 0.5838  mix_decode.d5.loss_dice: 0.7770  mix_decode.d6.loss_cls: 0.2376  mix_decode.d6.loss_mask: 0.5794  mix_decode.d6.loss_dice: 0.7949  mix_decode.d7.loss_cls: 0.2265  mix_decode.d7.loss_mask: 0.5804  mix_decode.d7.loss_dice: 0.7718  mix_decode.d8.loss_cls: 0.2479  mix_decode.d8.loss_mask: 0.5864  mix_decode.d8.loss_dice: 0.7604
2025/03/29 00:54:37 - mmengine - INFO - Iter(train) [15650/20000]  base_lr: 2.5336e-05 lr: 2.5336e-05  eta: 2:03:26  time: 1.9589  data_time: 0.0294  memory: 10759  loss: 43.7772  decode.loss_cls: 0.1974  decode.loss_mask: 1.3573  decode.loss_dice: 1.3470  decode.d0.loss_cls: 0.4398  decode.d0.loss_mask: 1.3314  decode.d0.loss_dice: 1.3364  decode.d1.loss_cls: 0.2415  decode.d1.loss_mask: 1.3634  decode.d1.loss_dice: 1.3805  decode.d2.loss_cls: 0.2030  decode.d2.loss_mask: 1.3853  decode.d2.loss_dice: 1.3464  decode.d3.loss_cls: 0.1800  decode.d3.loss_mask: 1.3759  decode.d3.loss_dice: 1.3358  decode.d4.loss_cls: 0.1679  decode.d4.loss_mask: 1.3999  decode.d4.loss_dice: 1.3653  decode.d5.loss_cls: 0.1257  decode.d5.loss_mask: 1.4062  decode.d5.loss_dice: 1.3435  decode.d6.loss_cls: 0.1901  decode.d6.loss_mask: 1.3814  decode.d6.loss_dice: 1.3410  decode.d7.loss_cls: 0.1873  decode.d7.loss_mask: 1.3661  decode.d7.loss_dice: 1.3814  decode.d8.loss_cls: 0.1755  decode.d8.loss_mask: 1.3631  decode.d8.loss_dice: 1.3262  mix_decode.loss_cls: 0.2430  mix_decode.loss_mask: 0.4832  mix_decode.loss_dice: 0.7245  mix_decode.d0.loss_cls: 0.2613  mix_decode.d0.loss_mask: 0.4827  mix_decode.d0.loss_dice: 0.7687  mix_decode.d1.loss_cls: 0.2112  mix_decode.d1.loss_mask: 0.4970  mix_decode.d1.loss_dice: 0.7406  mix_decode.d2.loss_cls: 0.2201  mix_decode.d2.loss_mask: 0.4744  mix_decode.d2.loss_dice: 0.7082  mix_decode.d3.loss_cls: 0.2434  mix_decode.d3.loss_mask: 0.4859  mix_decode.d3.loss_dice: 0.7268  mix_decode.d4.loss_cls: 0.2445  mix_decode.d4.loss_mask: 0.4703  mix_decode.d4.loss_dice: 0.7132  mix_decode.d5.loss_cls: 0.2050  mix_decode.d5.loss_mask: 0.5052  mix_decode.d5.loss_dice: 0.7324  mix_decode.d6.loss_cls: 0.2348  mix_decode.d6.loss_mask: 0.4959  mix_decode.d6.loss_dice: 0.6936  mix_decode.d7.loss_cls: 0.2403  mix_decode.d7.loss_mask: 0.4898  mix_decode.d7.loss_dice: 0.7139  mix_decode.d8.loss_cls: 0.2053  mix_decode.d8.loss_mask: 0.4907  mix_decode.d8.loss_dice: 0.7296
2025/03/29 00:56:12 - mmengine - INFO - Iter(train) [15700/20000]  base_lr: 2.5073e-05 lr: 2.5073e-05  eta: 2:02:03  time: 1.9526  data_time: 0.0249  memory: 10751  loss: 50.1069  decode.loss_cls: 0.3377  decode.loss_mask: 1.6326  decode.loss_dice: 1.5719  decode.d0.loss_cls: 0.4313  decode.d0.loss_mask: 1.7080  decode.d0.loss_dice: 1.5670  decode.d1.loss_cls: 0.4180  decode.d1.loss_mask: 1.5912  decode.d1.loss_dice: 1.5267  decode.d2.loss_cls: 0.3759  decode.d2.loss_mask: 1.6036  decode.d2.loss_dice: 1.5561  decode.d3.loss_cls: 0.3614  decode.d3.loss_mask: 1.5988  decode.d3.loss_dice: 1.5519  decode.d4.loss_cls: 0.4280  decode.d4.loss_mask: 1.5751  decode.d4.loss_dice: 1.5289  decode.d5.loss_cls: 0.3494  decode.d5.loss_mask: 1.5894  decode.d5.loss_dice: 1.5419  decode.d6.loss_cls: 0.4324  decode.d6.loss_mask: 1.6127  decode.d6.loss_dice: 1.5661  decode.d7.loss_cls: 0.3400  decode.d7.loss_mask: 1.6124  decode.d7.loss_dice: 1.5725  decode.d8.loss_cls: 0.3582  decode.d8.loss_mask: 1.5769  decode.d8.loss_dice: 1.5352  mix_decode.loss_cls: 0.2266  mix_decode.loss_mask: 0.5020  mix_decode.loss_dice: 0.6630  mix_decode.d0.loss_cls: 0.2355  mix_decode.d0.loss_mask: 0.5294  mix_decode.d0.loss_dice: 0.7820  mix_decode.d1.loss_cls: 0.2345  mix_decode.d1.loss_mask: 0.5366  mix_decode.d1.loss_dice: 0.7164  mix_decode.d2.loss_cls: 0.2334  mix_decode.d2.loss_mask: 0.5165  mix_decode.d2.loss_dice: 0.6832  mix_decode.d3.loss_cls: 0.2366  mix_decode.d3.loss_mask: 0.5203  mix_decode.d3.loss_dice: 0.6906  mix_decode.d4.loss_cls: 0.2416  mix_decode.d4.loss_mask: 0.5229  mix_decode.d4.loss_dice: 0.7121  mix_decode.d5.loss_cls: 0.2316  mix_decode.d5.loss_mask: 0.5348  mix_decode.d5.loss_dice: 0.7047  mix_decode.d6.loss_cls: 0.2387  mix_decode.d6.loss_mask: 0.5359  mix_decode.d6.loss_dice: 0.7151  mix_decode.d7.loss_cls: 0.2284  mix_decode.d7.loss_mask: 0.5309  mix_decode.d7.loss_dice: 0.7105  mix_decode.d8.loss_cls: 0.2113  mix_decode.d8.loss_mask: 0.5238  mix_decode.d8.loss_dice: 0.7069
2025/03/29 00:57:47 - mmengine - INFO - Iter(train) [15750/20000]  base_lr: 2.4811e-05 lr: 2.4811e-05  eta: 2:00:41  time: 1.8437  data_time: 0.0243  memory: 10741  loss: 50.1255  decode.loss_cls: 0.5118  decode.loss_mask: 1.3139  decode.loss_dice: 1.5826  decode.d0.loss_cls: 0.7734  decode.d0.loss_mask: 1.2955  decode.d0.loss_dice: 1.6202  decode.d1.loss_cls: 0.5783  decode.d1.loss_mask: 1.2697  decode.d1.loss_dice: 1.5497  decode.d2.loss_cls: 0.5859  decode.d2.loss_mask: 1.2435  decode.d2.loss_dice: 1.5520  decode.d3.loss_cls: 0.5649  decode.d3.loss_mask: 1.2907  decode.d3.loss_dice: 1.5796  decode.d4.loss_cls: 0.5026  decode.d4.loss_mask: 1.3221  decode.d4.loss_dice: 1.5654  decode.d5.loss_cls: 0.5288  decode.d5.loss_mask: 1.3475  decode.d5.loss_dice: 1.5807  decode.d6.loss_cls: 0.5346  decode.d6.loss_mask: 1.3302  decode.d6.loss_dice: 1.5608  decode.d7.loss_cls: 0.5368  decode.d7.loss_mask: 1.2972  decode.d7.loss_dice: 1.5659  decode.d8.loss_cls: 0.4706  decode.d8.loss_mask: 1.3753  decode.d8.loss_dice: 1.6046  mix_decode.loss_cls: 0.2636  mix_decode.loss_mask: 0.5292  mix_decode.loss_dice: 0.7314  mix_decode.d0.loss_cls: 0.2730  mix_decode.d0.loss_mask: 0.5642  mix_decode.d0.loss_dice: 0.8026  mix_decode.d1.loss_cls: 0.2746  mix_decode.d1.loss_mask: 0.5358  mix_decode.d1.loss_dice: 0.7727  mix_decode.d2.loss_cls: 0.2455  mix_decode.d2.loss_mask: 0.5433  mix_decode.d2.loss_dice: 0.7384  mix_decode.d3.loss_cls: 0.2244  mix_decode.d3.loss_mask: 0.5546  mix_decode.d3.loss_dice: 0.7715  mix_decode.d4.loss_cls: 0.2787  mix_decode.d4.loss_mask: 0.5473  mix_decode.d4.loss_dice: 0.7640  mix_decode.d5.loss_cls: 0.2494  mix_decode.d5.loss_mask: 0.5715  mix_decode.d5.loss_dice: 0.7430  mix_decode.d6.loss_cls: 0.2531  mix_decode.d6.loss_mask: 0.5530  mix_decode.d6.loss_dice: 0.7667  mix_decode.d7.loss_cls: 0.2384  mix_decode.d7.loss_mask: 0.5880  mix_decode.d7.loss_dice: 0.7571  mix_decode.d8.loss_cls: 0.2467  mix_decode.d8.loss_mask: 0.5662  mix_decode.d8.loss_dice: 0.7430
2025/03/29 00:59:23 - mmengine - INFO - Iter(train) [15800/20000]  base_lr: 2.4548e-05 lr: 2.4548e-05  eta: 1:59:18  time: 1.9889  data_time: 0.0248  memory: 10755  loss: 58.8482  decode.loss_cls: 0.6536  decode.loss_mask: 1.8425  decode.loss_dice: 1.8877  decode.d0.loss_cls: 0.7544  decode.d0.loss_mask: 1.7982  decode.d0.loss_dice: 1.7972  decode.d1.loss_cls: 0.5935  decode.d1.loss_mask: 1.8213  decode.d1.loss_dice: 1.8420  decode.d2.loss_cls: 0.6100  decode.d2.loss_mask: 1.8100  decode.d2.loss_dice: 1.7965  decode.d3.loss_cls: 0.6233  decode.d3.loss_mask: 1.7925  decode.d3.loss_dice: 1.7804  decode.d4.loss_cls: 0.5907  decode.d4.loss_mask: 1.7829  decode.d4.loss_dice: 1.8380  decode.d5.loss_cls: 0.5431  decode.d5.loss_mask: 1.7991  decode.d5.loss_dice: 1.8107  decode.d6.loss_cls: 0.6330  decode.d6.loss_mask: 1.8139  decode.d6.loss_dice: 1.8258  decode.d7.loss_cls: 0.6601  decode.d7.loss_mask: 1.7599  decode.d7.loss_dice: 1.7740  decode.d8.loss_cls: 0.5494  decode.d8.loss_mask: 1.8878  decode.d8.loss_dice: 1.8750  mix_decode.loss_cls: 0.3209  mix_decode.loss_mask: 0.4585  mix_decode.loss_dice: 0.8648  mix_decode.d0.loss_cls: 0.3189  mix_decode.d0.loss_mask: 0.4713  mix_decode.d0.loss_dice: 0.9346  mix_decode.d1.loss_cls: 0.2965  mix_decode.d1.loss_mask: 0.4326  mix_decode.d1.loss_dice: 0.8685  mix_decode.d2.loss_cls: 0.3363  mix_decode.d2.loss_mask: 0.4431  mix_decode.d2.loss_dice: 0.8314  mix_decode.d3.loss_cls: 0.3054  mix_decode.d3.loss_mask: 0.4438  mix_decode.d3.loss_dice: 0.8364  mix_decode.d4.loss_cls: 0.3481  mix_decode.d4.loss_mask: 0.4281  mix_decode.d4.loss_dice: 0.8493  mix_decode.d5.loss_cls: 0.3526  mix_decode.d5.loss_mask: 0.4334  mix_decode.d5.loss_dice: 0.8498  mix_decode.d6.loss_cls: 0.3646  mix_decode.d6.loss_mask: 0.4394  mix_decode.d6.loss_dice: 0.8592  mix_decode.d7.loss_cls: 0.3001  mix_decode.d7.loss_mask: 0.4474  mix_decode.d7.loss_dice: 0.8512  mix_decode.d8.loss_cls: 0.3068  mix_decode.d8.loss_mask: 0.4416  mix_decode.d8.loss_dice: 0.8670
2025/03/29 01:00:57 - mmengine - INFO - Iter(train) [15850/20000]  base_lr: 2.4285e-05 lr: 2.4285e-05  eta: 1:57:55  time: 1.8810  data_time: 0.0255  memory: 10743  loss: 50.1441  decode.loss_cls: 0.3322  decode.loss_mask: 1.5501  decode.loss_dice: 1.5277  decode.d0.loss_cls: 0.4610  decode.d0.loss_mask: 1.5302  decode.d0.loss_dice: 1.5557  decode.d1.loss_cls: 0.4213  decode.d1.loss_mask: 1.5713  decode.d1.loss_dice: 1.5191  decode.d2.loss_cls: 0.4475  decode.d2.loss_mask: 1.5446  decode.d2.loss_dice: 1.5145  decode.d3.loss_cls: 0.3899  decode.d3.loss_mask: 1.5248  decode.d3.loss_dice: 1.5260  decode.d4.loss_cls: 0.4467  decode.d4.loss_mask: 1.5057  decode.d4.loss_dice: 1.5139  decode.d5.loss_cls: 0.3401  decode.d5.loss_mask: 1.5337  decode.d5.loss_dice: 1.5228  decode.d6.loss_cls: 0.3059  decode.d6.loss_mask: 1.5660  decode.d6.loss_dice: 1.4897  decode.d7.loss_cls: 0.4153  decode.d7.loss_mask: 1.5580  decode.d7.loss_dice: 1.5175  decode.d8.loss_cls: 0.4314  decode.d8.loss_mask: 1.5547  decode.d8.loss_dice: 1.5225  mix_decode.loss_cls: 0.1864  mix_decode.loss_mask: 0.5817  mix_decode.loss_dice: 0.7670  mix_decode.d0.loss_cls: 0.2454  mix_decode.d0.loss_mask: 0.5708  mix_decode.d0.loss_dice: 0.7975  mix_decode.d1.loss_cls: 0.2522  mix_decode.d1.loss_mask: 0.5524  mix_decode.d1.loss_dice: 0.7369  mix_decode.d2.loss_cls: 0.2538  mix_decode.d2.loss_mask: 0.5410  mix_decode.d2.loss_dice: 0.7344  mix_decode.d3.loss_cls: 0.2117  mix_decode.d3.loss_mask: 0.5491  mix_decode.d3.loss_dice: 0.7580  mix_decode.d4.loss_cls: 0.2571  mix_decode.d4.loss_mask: 0.5470  mix_decode.d4.loss_dice: 0.7393  mix_decode.d5.loss_cls: 0.2461  mix_decode.d5.loss_mask: 0.5552  mix_decode.d5.loss_dice: 0.7578  mix_decode.d6.loss_cls: 0.2320  mix_decode.d6.loss_mask: 0.5707  mix_decode.d6.loss_dice: 0.7653  mix_decode.d7.loss_cls: 0.2178  mix_decode.d7.loss_mask: 0.5604  mix_decode.d7.loss_dice: 0.7624  mix_decode.d8.loss_cls: 0.2298  mix_decode.d8.loss_mask: 0.5398  mix_decode.d8.loss_dice: 0.7850
2025/03/29 01:02:12 - mmengine - INFO - Iter(train) [15900/20000]  base_lr: 2.4021e-05 lr: 2.4021e-05  eta: 1:56:28  time: 1.1630  data_time: 0.0237  memory: 10755  loss: 54.6354  decode.loss_cls: 0.3884  decode.loss_mask: 1.7098  decode.loss_dice: 1.8120  decode.d0.loss_cls: 0.5762  decode.d0.loss_mask: 1.6383  decode.d0.loss_dice: 1.8807  decode.d1.loss_cls: 0.4928  decode.d1.loss_mask: 1.7082  decode.d1.loss_dice: 1.7760  decode.d2.loss_cls: 0.4545  decode.d2.loss_mask: 1.6897  decode.d2.loss_dice: 1.8271  decode.d3.loss_cls: 0.4897  decode.d3.loss_mask: 1.6739  decode.d3.loss_dice: 1.7672  decode.d4.loss_cls: 0.4870  decode.d4.loss_mask: 1.6465  decode.d4.loss_dice: 1.7112  decode.d5.loss_cls: 0.4514  decode.d5.loss_mask: 1.6819  decode.d5.loss_dice: 1.8575  decode.d6.loss_cls: 0.4483  decode.d6.loss_mask: 1.6001  decode.d6.loss_dice: 1.8088  decode.d7.loss_cls: 0.4205  decode.d7.loss_mask: 1.6400  decode.d7.loss_dice: 1.7096  decode.d8.loss_cls: 0.4660  decode.d8.loss_mask: 1.7017  decode.d8.loss_dice: 1.8468  mix_decode.loss_cls: 0.3060  mix_decode.loss_mask: 0.4228  mix_decode.loss_dice: 0.7396  mix_decode.d0.loss_cls: 0.2702  mix_decode.d0.loss_mask: 0.4485  mix_decode.d0.loss_dice: 0.8519  mix_decode.d1.loss_cls: 0.3244  mix_decode.d1.loss_mask: 0.4506  mix_decode.d1.loss_dice: 0.7659  mix_decode.d2.loss_cls: 0.2929  mix_decode.d2.loss_mask: 0.4669  mix_decode.d2.loss_dice: 0.7286  mix_decode.d3.loss_cls: 0.3246  mix_decode.d3.loss_mask: 0.4626  mix_decode.d3.loss_dice: 0.7384  mix_decode.d4.loss_cls: 0.3478  mix_decode.d4.loss_mask: 0.4570  mix_decode.d4.loss_dice: 0.7509  mix_decode.d5.loss_cls: 0.3519  mix_decode.d5.loss_mask: 0.4346  mix_decode.d5.loss_dice: 0.7643  mix_decode.d6.loss_cls: 0.2831  mix_decode.d6.loss_mask: 0.4654  mix_decode.d6.loss_dice: 0.7807  mix_decode.d7.loss_cls: 0.2546  mix_decode.d7.loss_mask: 0.4938  mix_decode.d7.loss_dice: 0.7866  mix_decode.d8.loss_cls: 0.2624  mix_decode.d8.loss_mask: 0.4757  mix_decode.d8.loss_dice: 0.7709
2025/03/29 01:03:09 - mmengine - INFO - Iter(train) [15950/20000]  base_lr: 2.3758e-05 lr: 2.3758e-05  eta: 1:54:55  time: 1.1401  data_time: 0.0235  memory: 10741  loss: 51.1018  decode.loss_cls: 0.4343  decode.loss_mask: 1.3925  decode.loss_dice: 1.5989  decode.d0.loss_cls: 0.5796  decode.d0.loss_mask: 1.5088  decode.d0.loss_dice: 1.6852  decode.d1.loss_cls: 0.4119  decode.d1.loss_mask: 1.4432  decode.d1.loss_dice: 1.5686  decode.d2.loss_cls: 0.4042  decode.d2.loss_mask: 1.4593  decode.d2.loss_dice: 1.5707  decode.d3.loss_cls: 0.3699  decode.d3.loss_mask: 1.4458  decode.d3.loss_dice: 1.6748  decode.d4.loss_cls: 0.4776  decode.d4.loss_mask: 1.4306  decode.d4.loss_dice: 1.5789  decode.d5.loss_cls: 0.4336  decode.d5.loss_mask: 1.4372  decode.d5.loss_dice: 1.5341  decode.d6.loss_cls: 0.4229  decode.d6.loss_mask: 1.4789  decode.d6.loss_dice: 1.6089  decode.d7.loss_cls: 0.4067  decode.d7.loss_mask: 1.4806  decode.d7.loss_dice: 1.6116  decode.d8.loss_cls: 0.4167  decode.d8.loss_mask: 1.4703  decode.d8.loss_dice: 1.6431  mix_decode.loss_cls: 0.1824  mix_decode.loss_mask: 0.5632  mix_decode.loss_dice: 0.8441  mix_decode.d0.loss_cls: 0.2261  mix_decode.d0.loss_mask: 0.5771  mix_decode.d0.loss_dice: 0.9120  mix_decode.d1.loss_cls: 0.1849  mix_decode.d1.loss_mask: 0.5700  mix_decode.d1.loss_dice: 0.8543  mix_decode.d2.loss_cls: 0.1886  mix_decode.d2.loss_mask: 0.5708  mix_decode.d2.loss_dice: 0.8394  mix_decode.d3.loss_cls: 0.1860  mix_decode.d3.loss_mask: 0.5972  mix_decode.d3.loss_dice: 0.8334  mix_decode.d4.loss_cls: 0.2190  mix_decode.d4.loss_mask: 0.5753  mix_decode.d4.loss_dice: 0.8136  mix_decode.d5.loss_cls: 0.2047  mix_decode.d5.loss_mask: 0.5792  mix_decode.d5.loss_dice: 0.8350  mix_decode.d6.loss_cls: 0.1965  mix_decode.d6.loss_mask: 0.5659  mix_decode.d6.loss_dice: 0.8320  mix_decode.d7.loss_cls: 0.1794  mix_decode.d7.loss_mask: 0.5641  mix_decode.d7.loss_dice: 0.8394  mix_decode.d8.loss_cls: 0.1675  mix_decode.d8.loss_mask: 0.5704  mix_decode.d8.loss_dice: 0.8506
2025/03/29 01:04:06 - mmengine - INFO - Exp name: r2u_20250328_164133
2025/03/29 01:04:06 - mmengine - INFO - Iter(train) [16000/20000]  base_lr: 2.3493e-05 lr: 2.3493e-05  eta: 1:53:23  time: 1.1409  data_time: 0.0234  memory: 10758  loss: 40.0240  decode.loss_cls: 0.4446  decode.loss_mask: 1.1510  decode.loss_dice: 1.1887  decode.d0.loss_cls: 0.5053  decode.d0.loss_mask: 1.0581  decode.d0.loss_dice: 1.2383  decode.d1.loss_cls: 0.3746  decode.d1.loss_mask: 1.0609  decode.d1.loss_dice: 1.2363  decode.d2.loss_cls: 0.3852  decode.d2.loss_mask: 1.0931  decode.d2.loss_dice: 1.2359  decode.d3.loss_cls: 0.4150  decode.d3.loss_mask: 1.1838  decode.d3.loss_dice: 1.2521  decode.d4.loss_cls: 0.4288  decode.d4.loss_mask: 1.1533  decode.d4.loss_dice: 1.2164  decode.d5.loss_cls: 0.4488  decode.d5.loss_mask: 1.1402  decode.d5.loss_dice: 1.2322  decode.d6.loss_cls: 0.4281  decode.d6.loss_mask: 1.1878  decode.d6.loss_dice: 1.2272  decode.d7.loss_cls: 0.4244  decode.d7.loss_mask: 1.2034  decode.d7.loss_dice: 1.2393  decode.d8.loss_cls: 0.4624  decode.d8.loss_mask: 1.1591  decode.d8.loss_dice: 1.1878  mix_decode.loss_cls: 0.2473  mix_decode.loss_mask: 0.3608  mix_decode.loss_dice: 0.5924  mix_decode.d0.loss_cls: 0.2036  mix_decode.d0.loss_mask: 0.3605  mix_decode.d0.loss_dice: 0.6969  mix_decode.d1.loss_cls: 0.2457  mix_decode.d1.loss_mask: 0.3384  mix_decode.d1.loss_dice: 0.6148  mix_decode.d2.loss_cls: 0.2718  mix_decode.d2.loss_mask: 0.3753  mix_decode.d2.loss_dice: 0.5702  mix_decode.d3.loss_cls: 0.2347  mix_decode.d3.loss_mask: 0.3543  mix_decode.d3.loss_dice: 0.6082  mix_decode.d4.loss_cls: 0.2149  mix_decode.d4.loss_mask: 0.3564  mix_decode.d4.loss_dice: 0.6011  mix_decode.d5.loss_cls: 0.2148  mix_decode.d5.loss_mask: 0.3569  mix_decode.d5.loss_dice: 0.5916  mix_decode.d6.loss_cls: 0.2332  mix_decode.d6.loss_mask: 0.3610  mix_decode.d6.loss_dice: 0.6340  mix_decode.d7.loss_cls: 0.2595  mix_decode.d7.loss_mask: 0.3553  mix_decode.d7.loss_dice: 0.5971  mix_decode.d8.loss_cls: 0.2406  mix_decode.d8.loss_mask: 0.3641  mix_decode.d8.loss_dice: 0.6067
2025/03/29 01:04:06 - mmengine - INFO - Saving checkpoint at 16000 iterations
2025/03/29 01:04:12 - mmengine - INFO - Iter(val) [  50/2708]    eta: 0:04:07  time: 0.0907  data_time: 0.0019  memory: 3057  
2025/03/29 01:04:16 - mmengine - INFO - Iter(val) [ 100/2708]    eta: 0:04:00  time: 0.0911  data_time: 0.0019  memory: 3057  
2025/03/29 01:04:21 - mmengine - INFO - Iter(val) [ 150/2708]    eta: 0:03:54  time: 0.0908  data_time: 0.0019  memory: 3057  
2025/03/29 01:04:25 - mmengine - INFO - Iter(val) [ 200/2708]    eta: 0:03:49  time: 0.0908  data_time: 0.0018  memory: 3057  
2025/03/29 01:04:30 - mmengine - INFO - Iter(val) [ 250/2708]    eta: 0:03:44  time: 0.0910  data_time: 0.0020  memory: 3057  
2025/03/29 01:04:35 - mmengine - INFO - Iter(val) [ 300/2708]    eta: 0:03:40  time: 0.0910  data_time: 0.0020  memory: 3057  
2025/03/29 01:04:39 - mmengine - INFO - Iter(val) [ 350/2708]    eta: 0:03:35  time: 0.0920  data_time: 0.0021  memory: 3057  
2025/03/29 01:04:44 - mmengine - INFO - Iter(val) [ 400/2708]    eta: 0:03:31  time: 0.0907  data_time: 0.0019  memory: 3057  
2025/03/29 01:04:48 - mmengine - INFO - Iter(val) [ 450/2708]    eta: 0:03:26  time: 0.0907  data_time: 0.0019  memory: 3057  
2025/03/29 01:04:53 - mmengine - INFO - Iter(val) [ 500/2708]    eta: 0:03:21  time: 0.0913  data_time: 0.0020  memory: 3057  
2025/03/29 01:04:57 - mmengine - INFO - Iter(val) [ 550/2708]    eta: 0:03:17  time: 0.0910  data_time: 0.0020  memory: 3057  
2025/03/29 01:05:02 - mmengine - INFO - Iter(val) [ 600/2708]    eta: 0:03:12  time: 0.0909  data_time: 0.0019  memory: 3057  
2025/03/29 01:05:07 - mmengine - INFO - Iter(val) [ 650/2708]    eta: 0:03:07  time: 0.0905  data_time: 0.0018  memory: 3057  
2025/03/29 01:05:11 - mmengine - INFO - Iter(val) [ 700/2708]    eta: 0:03:03  time: 0.0908  data_time: 0.0019  memory: 3057  
2025/03/29 01:05:16 - mmengine - INFO - Iter(val) [ 750/2708]    eta: 0:02:58  time: 0.0909  data_time: 0.0020  memory: 3057  
2025/03/29 01:05:20 - mmengine - INFO - Iter(val) [ 800/2708]    eta: 0:02:53  time: 0.0910  data_time: 0.0020  memory: 3057  
2025/03/29 01:05:25 - mmengine - INFO - Iter(val) [ 850/2708]    eta: 0:02:49  time: 0.0908  data_time: 0.0020  memory: 3057  
2025/03/29 01:05:29 - mmengine - INFO - Iter(val) [ 900/2708]    eta: 0:02:44  time: 0.0910  data_time: 0.0019  memory: 3057  
2025/03/29 01:05:34 - mmengine - INFO - Iter(val) [ 950/2708]    eta: 0:02:40  time: 0.0907  data_time: 0.0019  memory: 3057  
2025/03/29 01:05:38 - mmengine - INFO - Iter(val) [1000/2708]    eta: 0:02:35  time: 0.0909  data_time: 0.0019  memory: 3057  
2025/03/29 01:05:43 - mmengine - INFO - Iter(val) [1050/2708]    eta: 0:02:31  time: 0.0911  data_time: 0.0020  memory: 3057  
2025/03/29 01:05:48 - mmengine - INFO - Iter(val) [1100/2708]    eta: 0:02:26  time: 0.0910  data_time: 0.0019  memory: 3057  
2025/03/29 01:05:52 - mmengine - INFO - Iter(val) [1150/2708]    eta: 0:02:21  time: 0.0911  data_time: 0.0019  memory: 3057  
2025/03/29 01:05:57 - mmengine - INFO - Iter(val) [1200/2708]    eta: 0:02:17  time: 0.0912  data_time: 0.0020  memory: 3057  
2025/03/29 01:06:01 - mmengine - INFO - Iter(val) [1250/2708]    eta: 0:02:12  time: 0.0906  data_time: 0.0019  memory: 3057  
2025/03/29 01:06:06 - mmengine - INFO - Iter(val) [1300/2708]    eta: 0:02:08  time: 0.0910  data_time: 0.0019  memory: 3057  
2025/03/29 01:06:10 - mmengine - INFO - Iter(val) [1350/2708]    eta: 0:02:03  time: 0.0909  data_time: 0.0019  memory: 3057  
2025/03/29 01:06:15 - mmengine - INFO - Iter(val) [1400/2708]    eta: 0:01:59  time: 0.0911  data_time: 0.0019  memory: 3057  
2025/03/29 01:06:20 - mmengine - INFO - Iter(val) [1450/2708]    eta: 0:01:54  time: 0.0910  data_time: 0.0019  memory: 3057  
2025/03/29 01:06:24 - mmengine - INFO - Iter(val) [1500/2708]    eta: 0:01:50  time: 0.0910  data_time: 0.0020  memory: 3057  
2025/03/29 01:06:29 - mmengine - INFO - Iter(val) [1550/2708]    eta: 0:01:45  time: 0.0913  data_time: 0.0019  memory: 3057  
2025/03/29 01:06:33 - mmengine - INFO - Iter(val) [1600/2708]    eta: 0:01:40  time: 0.0915  data_time: 0.0019  memory: 3057  
2025/03/29 01:06:38 - mmengine - INFO - Iter(val) [1650/2708]    eta: 0:01:36  time: 0.0914  data_time: 0.0019  memory: 3057  
2025/03/29 01:06:42 - mmengine - INFO - Iter(val) [1700/2708]    eta: 0:01:31  time: 0.0917  data_time: 0.0018  memory: 3057  
2025/03/29 01:06:47 - mmengine - INFO - Iter(val) [1750/2708]    eta: 0:01:27  time: 0.0911  data_time: 0.0018  memory: 3057  
2025/03/29 01:06:52 - mmengine - INFO - Iter(val) [1800/2708]    eta: 0:01:22  time: 0.0912  data_time: 0.0018  memory: 3057  
2025/03/29 01:06:56 - mmengine - INFO - Iter(val) [1850/2708]    eta: 0:01:18  time: 0.0912  data_time: 0.0018  memory: 3057  
2025/03/29 01:07:01 - mmengine - INFO - Iter(val) [1900/2708]    eta: 0:01:13  time: 0.0910  data_time: 0.0017  memory: 3057  
2025/03/29 01:07:05 - mmengine - INFO - Iter(val) [1950/2708]    eta: 0:01:09  time: 0.0913  data_time: 0.0019  memory: 3057  
2025/03/29 01:07:10 - mmengine - INFO - Iter(val) [2000/2708]    eta: 0:01:04  time: 0.0913  data_time: 0.0019  memory: 3057  
2025/03/29 01:07:14 - mmengine - INFO - Iter(val) [2050/2708]    eta: 0:00:59  time: 0.0914  data_time: 0.0018  memory: 3057  
2025/03/29 01:07:19 - mmengine - INFO - Iter(val) [2100/2708]    eta: 0:00:55  time: 0.0913  data_time: 0.0019  memory: 3057  
2025/03/29 01:07:24 - mmengine - INFO - Iter(val) [2150/2708]    eta: 0:00:50  time: 0.0924  data_time: 0.0021  memory: 3057  
2025/03/29 01:07:28 - mmengine - INFO - Iter(val) [2200/2708]    eta: 0:00:46  time: 0.0916  data_time: 0.0020  memory: 3057  
2025/03/29 01:07:33 - mmengine - INFO - Iter(val) [2250/2708]    eta: 0:00:41  time: 0.0912  data_time: 0.0020  memory: 3057  
2025/03/29 01:07:37 - mmengine - INFO - Iter(val) [2300/2708]    eta: 0:00:37  time: 0.0911  data_time: 0.0019  memory: 3057  
2025/03/29 01:07:42 - mmengine - INFO - Iter(val) [2350/2708]    eta: 0:00:32  time: 0.0916  data_time: 0.0019  memory: 3057  
2025/03/29 01:07:47 - mmengine - INFO - Iter(val) [2400/2708]    eta: 0:00:28  time: 0.0914  data_time: 0.0019  memory: 3057  
2025/03/29 01:07:51 - mmengine - INFO - Iter(val) [2450/2708]    eta: 0:00:23  time: 0.0914  data_time: 0.0019  memory: 3057  
2025/03/29 01:07:56 - mmengine - INFO - Iter(val) [2500/2708]    eta: 0:00:18  time: 0.0913  data_time: 0.0019  memory: 3057  
2025/03/29 01:08:00 - mmengine - INFO - Iter(val) [2550/2708]    eta: 0:00:14  time: 0.0915  data_time: 0.0018  memory: 3057  
2025/03/29 01:08:05 - mmengine - INFO - Iter(val) [2600/2708]    eta: 0:00:09  time: 0.0914  data_time: 0.0019  memory: 3057  
2025/03/29 01:08:10 - mmengine - INFO - Iter(val) [2650/2708]    eta: 0:00:05  time: 0.0914  data_time: 0.0020  memory: 3057  
2025/03/29 01:08:14 - mmengine - INFO - Iter(val) [2700/2708]    eta: 0:00:00  time: 0.0914  data_time: 0.0018  memory: 3057  
2025/03/29 01:08:15 - mmengine - INFO - per class results:
2025/03/29 01:08:15 - mmengine - INFO - 
+--------------+-------+-------+
|    Class     |  IoU  |  Acc  |
+--------------+-------+-------+
|  background  | 42.91 | 74.08 |
|   building   | 59.77 | 68.74 |
|     road     | 53.72 | 62.03 |
|    water     | 74.76 | 84.05 |
|    barren    | 34.14 | 42.27 |
|    forest    | 54.61 | 71.64 |
| agricultural | 60.56 | 66.05 |
+--------------+-------+-------+
2025/03/29 01:08:15 - mmengine - INFO - Iter(val) [2708/2708]    aAcc: 69.5900  mIoU: 54.3500  mAcc: 66.9800  data_time: 0.0019  time: 0.0913
2025/03/29 01:09:12 - mmengine - INFO - Iter(train) [16050/20000]  base_lr: 2.3229e-05 lr: 2.3229e-05  eta: 1:51:51  time: 1.1397  data_time: 0.0232  memory: 10744  loss: 48.7846  decode.loss_cls: 0.2780  decode.loss_mask: 1.6288  decode.loss_dice: 1.5952  decode.d0.loss_cls: 0.4182  decode.d0.loss_mask: 1.6322  decode.d0.loss_dice: 1.5435  decode.d1.loss_cls: 0.3274  decode.d1.loss_mask: 1.5610  decode.d1.loss_dice: 1.5588  decode.d2.loss_cls: 0.3448  decode.d2.loss_mask: 1.6033  decode.d2.loss_dice: 1.5362  decode.d3.loss_cls: 0.3294  decode.d3.loss_mask: 1.5717  decode.d3.loss_dice: 1.5577  decode.d4.loss_cls: 0.3239  decode.d4.loss_mask: 1.5659  decode.d4.loss_dice: 1.5392  decode.d5.loss_cls: 0.2652  decode.d5.loss_mask: 1.5751  decode.d5.loss_dice: 1.5693  decode.d6.loss_cls: 0.3020  decode.d6.loss_mask: 1.5626  decode.d6.loss_dice: 1.5627  decode.d7.loss_cls: 0.3328  decode.d7.loss_mask: 1.6006  decode.d7.loss_dice: 1.5553  decode.d8.loss_cls: 0.3050  decode.d8.loss_mask: 1.6055  decode.d8.loss_dice: 1.5633  mix_decode.loss_cls: 0.1995  mix_decode.loss_mask: 0.5554  mix_decode.loss_dice: 0.6371  mix_decode.d0.loss_cls: 0.2711  mix_decode.d0.loss_mask: 0.5398  mix_decode.d0.loss_dice: 0.6754  mix_decode.d1.loss_cls: 0.1796  mix_decode.d1.loss_mask: 0.5357  mix_decode.d1.loss_dice: 0.6699  mix_decode.d2.loss_cls: 0.2134  mix_decode.d2.loss_mask: 0.5317  mix_decode.d2.loss_dice: 0.6378  mix_decode.d3.loss_cls: 0.2006  mix_decode.d3.loss_mask: 0.5298  mix_decode.d3.loss_dice: 0.6538  mix_decode.d4.loss_cls: 0.2467  mix_decode.d4.loss_mask: 0.5348  mix_decode.d4.loss_dice: 0.6324  mix_decode.d5.loss_cls: 0.2305  mix_decode.d5.loss_mask: 0.5486  mix_decode.d5.loss_dice: 0.6434  mix_decode.d6.loss_cls: 0.1992  mix_decode.d6.loss_mask: 0.5314  mix_decode.d6.loss_dice: 0.6551  mix_decode.d7.loss_cls: 0.2118  mix_decode.d7.loss_mask: 0.5410  mix_decode.d7.loss_dice: 0.6583  mix_decode.d8.loss_cls: 0.1913  mix_decode.d8.loss_mask: 0.5488  mix_decode.d8.loss_dice: 0.6660
2025/03/29 01:10:09 - mmengine - INFO - Iter(train) [16100/20000]  base_lr: 2.2964e-05 lr: 2.2964e-05  eta: 1:50:19  time: 1.1380  data_time: 0.0230  memory: 10749  loss: 46.9500  decode.loss_cls: 0.3831  decode.loss_mask: 1.4589  decode.loss_dice: 1.5086  decode.d0.loss_cls: 0.5690  decode.d0.loss_mask: 1.3456  decode.d0.loss_dice: 1.4847  decode.d1.loss_cls: 0.4198  decode.d1.loss_mask: 1.4153  decode.d1.loss_dice: 1.4709  decode.d2.loss_cls: 0.4459  decode.d2.loss_mask: 1.4510  decode.d2.loss_dice: 1.5161  decode.d3.loss_cls: 0.4383  decode.d3.loss_mask: 1.4166  decode.d3.loss_dice: 1.4432  decode.d4.loss_cls: 0.4691  decode.d4.loss_mask: 1.2962  decode.d4.loss_dice: 1.4192  decode.d5.loss_cls: 0.4413  decode.d5.loss_mask: 1.3945  decode.d5.loss_dice: 1.4990  decode.d6.loss_cls: 0.4479  decode.d6.loss_mask: 1.3725  decode.d6.loss_dice: 1.4909  decode.d7.loss_cls: 0.4282  decode.d7.loss_mask: 1.4267  decode.d7.loss_dice: 1.4969  decode.d8.loss_cls: 0.4175  decode.d8.loss_mask: 1.3968  decode.d8.loss_dice: 1.4799  mix_decode.loss_cls: 0.2490  mix_decode.loss_mask: 0.4437  mix_decode.loss_dice: 0.6116  mix_decode.d0.loss_cls: 0.2774  mix_decode.d0.loss_mask: 0.4732  mix_decode.d0.loss_dice: 0.7279  mix_decode.d1.loss_cls: 0.2564  mix_decode.d1.loss_mask: 0.4568  mix_decode.d1.loss_dice: 0.6377  mix_decode.d2.loss_cls: 0.2142  mix_decode.d2.loss_mask: 0.4831  mix_decode.d2.loss_dice: 0.6611  mix_decode.d3.loss_cls: 0.2306  mix_decode.d3.loss_mask: 0.4636  mix_decode.d3.loss_dice: 0.6382  mix_decode.d4.loss_cls: 0.2614  mix_decode.d4.loss_mask: 0.4726  mix_decode.d4.loss_dice: 0.6471  mix_decode.d5.loss_cls: 0.2147  mix_decode.d5.loss_mask: 0.5106  mix_decode.d5.loss_dice: 0.6712  mix_decode.d6.loss_cls: 0.2121  mix_decode.d6.loss_mask: 0.5003  mix_decode.d6.loss_dice: 0.6555  mix_decode.d7.loss_cls: 0.2509  mix_decode.d7.loss_mask: 0.4686  mix_decode.d7.loss_dice: 0.6733  mix_decode.d8.loss_cls: 0.2537  mix_decode.d8.loss_mask: 0.4471  mix_decode.d8.loss_dice: 0.6424
2025/03/29 01:11:06 - mmengine - INFO - Iter(train) [16150/20000]  base_lr: 2.2699e-05 lr: 2.2699e-05  eta: 1:48:48  time: 1.1376  data_time: 0.0230  memory: 10754  loss: 48.7423  decode.loss_cls: 0.4938  decode.loss_mask: 1.3999  decode.loss_dice: 1.5175  decode.d0.loss_cls: 0.5914  decode.d0.loss_mask: 1.3488  decode.d0.loss_dice: 1.4847  decode.d1.loss_cls: 0.4838  decode.d1.loss_mask: 1.3249  decode.d1.loss_dice: 1.3412  decode.d2.loss_cls: 0.5165  decode.d2.loss_mask: 1.3843  decode.d2.loss_dice: 1.4355  decode.d3.loss_cls: 0.4949  decode.d3.loss_mask: 1.3579  decode.d3.loss_dice: 1.4291  decode.d4.loss_cls: 0.5272  decode.d4.loss_mask: 1.3467  decode.d4.loss_dice: 1.3578  decode.d5.loss_cls: 0.5378  decode.d5.loss_mask: 1.3208  decode.d5.loss_dice: 1.3477  decode.d6.loss_cls: 0.4317  decode.d6.loss_mask: 1.3425  decode.d6.loss_dice: 1.3517  decode.d7.loss_cls: 0.4949  decode.d7.loss_mask: 1.3786  decode.d7.loss_dice: 1.4019  decode.d8.loss_cls: 0.4251  decode.d8.loss_mask: 1.3765  decode.d8.loss_dice: 1.4413  mix_decode.loss_cls: 0.3059  mix_decode.loss_mask: 0.6162  mix_decode.loss_dice: 0.7447  mix_decode.d0.loss_cls: 0.3058  mix_decode.d0.loss_mask: 0.6102  mix_decode.d0.loss_dice: 0.7489  mix_decode.d1.loss_cls: 0.3152  mix_decode.d1.loss_mask: 0.5751  mix_decode.d1.loss_dice: 0.7224  mix_decode.d2.loss_cls: 0.2978  mix_decode.d2.loss_mask: 0.5656  mix_decode.d2.loss_dice: 0.6884  mix_decode.d3.loss_cls: 0.2964  mix_decode.d3.loss_mask: 0.5812  mix_decode.d3.loss_dice: 0.7281  mix_decode.d4.loss_cls: 0.2847  mix_decode.d4.loss_mask: 0.5911  mix_decode.d4.loss_dice: 0.6986  mix_decode.d5.loss_cls: 0.2697  mix_decode.d5.loss_mask: 0.5789  mix_decode.d5.loss_dice: 0.7141  mix_decode.d6.loss_cls: 0.2952  mix_decode.d6.loss_mask: 0.5897  mix_decode.d6.loss_dice: 0.7000  mix_decode.d7.loss_cls: 0.3341  mix_decode.d7.loss_mask: 0.5873  mix_decode.d7.loss_dice: 0.7159  mix_decode.d8.loss_cls: 0.3008  mix_decode.d8.loss_mask: 0.5770  mix_decode.d8.loss_dice: 0.7167
2025/03/29 01:12:03 - mmengine - INFO - Iter(train) [16200/20000]  base_lr: 2.2434e-05 lr: 2.2434e-05  eta: 1:47:17  time: 1.1383  data_time: 0.0232  memory: 10762  loss: 52.6267  decode.loss_cls: 0.3982  decode.loss_mask: 1.6893  decode.loss_dice: 1.5541  decode.d0.loss_cls: 0.4762  decode.d0.loss_mask: 1.6209  decode.d0.loss_dice: 1.5265  decode.d1.loss_cls: 0.3905  decode.d1.loss_mask: 1.6392  decode.d1.loss_dice: 1.5603  decode.d2.loss_cls: 0.3120  decode.d2.loss_mask: 1.7323  decode.d2.loss_dice: 1.5746  decode.d3.loss_cls: 0.3335  decode.d3.loss_mask: 1.6711  decode.d3.loss_dice: 1.5879  decode.d4.loss_cls: 0.3466  decode.d4.loss_mask: 1.6510  decode.d4.loss_dice: 1.5455  decode.d5.loss_cls: 0.2821  decode.d5.loss_mask: 1.7033  decode.d5.loss_dice: 1.5666  decode.d6.loss_cls: 0.3361  decode.d6.loss_mask: 1.6884  decode.d6.loss_dice: 1.5633  decode.d7.loss_cls: 0.3248  decode.d7.loss_mask: 1.7252  decode.d7.loss_dice: 1.6121  decode.d8.loss_cls: 0.3742  decode.d8.loss_mask: 1.7107  decode.d8.loss_dice: 1.5657  mix_decode.loss_cls: 0.2096  mix_decode.loss_mask: 0.6214  mix_decode.loss_dice: 0.8194  mix_decode.d0.loss_cls: 0.2759  mix_decode.d0.loss_mask: 0.6271  mix_decode.d0.loss_dice: 0.8473  mix_decode.d1.loss_cls: 0.2158  mix_decode.d1.loss_mask: 0.6247  mix_decode.d1.loss_dice: 0.7891  mix_decode.d2.loss_cls: 0.2623  mix_decode.d2.loss_mask: 0.6234  mix_decode.d2.loss_dice: 0.7825  mix_decode.d3.loss_cls: 0.1859  mix_decode.d3.loss_mask: 0.6089  mix_decode.d3.loss_dice: 0.8232  mix_decode.d4.loss_cls: 0.2609  mix_decode.d4.loss_mask: 0.6265  mix_decode.d4.loss_dice: 0.7950  mix_decode.d5.loss_cls: 0.2349  mix_decode.d5.loss_mask: 0.6068  mix_decode.d5.loss_dice: 0.8113  mix_decode.d6.loss_cls: 0.2317  mix_decode.d6.loss_mask: 0.6278  mix_decode.d6.loss_dice: 0.7912  mix_decode.d7.loss_cls: 0.2068  mix_decode.d7.loss_mask: 0.6121  mix_decode.d7.loss_dice: 0.8307  mix_decode.d8.loss_cls: 0.2192  mix_decode.d8.loss_mask: 0.6088  mix_decode.d8.loss_dice: 0.7842
2025/03/29 01:13:00 - mmengine - INFO - Iter(train) [16250/20000]  base_lr: 2.2168e-05 lr: 2.2168e-05  eta: 1:45:45  time: 1.1389  data_time: 0.0231  memory: 10753  loss: 40.0664  decode.loss_cls: 0.3362  decode.loss_mask: 1.1152  decode.loss_dice: 1.2333  decode.d0.loss_cls: 0.4059  decode.d0.loss_mask: 1.1767  decode.d0.loss_dice: 1.2934  decode.d1.loss_cls: 0.3647  decode.d1.loss_mask: 1.0689  decode.d1.loss_dice: 1.2113  decode.d2.loss_cls: 0.3996  decode.d2.loss_mask: 1.0751  decode.d2.loss_dice: 1.1904  decode.d3.loss_cls: 0.4414  decode.d3.loss_mask: 1.0850  decode.d3.loss_dice: 1.2419  decode.d4.loss_cls: 0.3951  decode.d4.loss_mask: 1.0894  decode.d4.loss_dice: 1.2511  decode.d5.loss_cls: 0.3741  decode.d5.loss_mask: 1.0774  decode.d5.loss_dice: 1.2573  decode.d6.loss_cls: 0.3817  decode.d6.loss_mask: 1.0658  decode.d6.loss_dice: 1.2559  decode.d7.loss_cls: 0.4140  decode.d7.loss_mask: 1.0688  decode.d7.loss_dice: 1.2262  decode.d8.loss_cls: 0.4017  decode.d8.loss_mask: 1.0927  decode.d8.loss_dice: 1.1896  mix_decode.loss_cls: 0.1497  mix_decode.loss_mask: 0.4348  mix_decode.loss_dice: 0.6885  mix_decode.d0.loss_cls: 0.1851  mix_decode.d0.loss_mask: 0.4541  mix_decode.d0.loss_dice: 0.7257  mix_decode.d1.loss_cls: 0.1376  mix_decode.d1.loss_mask: 0.4442  mix_decode.d1.loss_dice: 0.6895  mix_decode.d2.loss_cls: 0.1619  mix_decode.d2.loss_mask: 0.4398  mix_decode.d2.loss_dice: 0.6604  mix_decode.d3.loss_cls: 0.1855  mix_decode.d3.loss_mask: 0.4291  mix_decode.d3.loss_dice: 0.6593  mix_decode.d4.loss_cls: 0.1968  mix_decode.d4.loss_mask: 0.4443  mix_decode.d4.loss_dice: 0.6546  mix_decode.d5.loss_cls: 0.1531  mix_decode.d5.loss_mask: 0.4673  mix_decode.d5.loss_dice: 0.6701  mix_decode.d6.loss_cls: 0.1929  mix_decode.d6.loss_mask: 0.4329  mix_decode.d6.loss_dice: 0.6699  mix_decode.d7.loss_cls: 0.1430  mix_decode.d7.loss_mask: 0.4431  mix_decode.d7.loss_dice: 0.6976  mix_decode.d8.loss_cls: 0.1582  mix_decode.d8.loss_mask: 0.4288  mix_decode.d8.loss_dice: 0.6887
2025/03/29 01:13:57 - mmengine - INFO - Iter(train) [16300/20000]  base_lr: 2.1902e-05 lr: 2.1902e-05  eta: 1:44:15  time: 1.1393  data_time: 0.0240  memory: 10761  loss: 56.3965  decode.loss_cls: 0.6353  decode.loss_mask: 1.6800  decode.loss_dice: 1.6960  decode.d0.loss_cls: 0.7168  decode.d0.loss_mask: 1.6017  decode.d0.loss_dice: 1.6862  decode.d1.loss_cls: 0.5946  decode.d1.loss_mask: 1.6247  decode.d1.loss_dice: 1.6307  decode.d2.loss_cls: 0.5658  decode.d2.loss_mask: 1.6941  decode.d2.loss_dice: 1.6950  decode.d3.loss_cls: 0.6546  decode.d3.loss_mask: 1.6657  decode.d3.loss_dice: 1.7394  decode.d4.loss_cls: 0.6471  decode.d4.loss_mask: 1.6768  decode.d4.loss_dice: 1.7200  decode.d5.loss_cls: 0.6613  decode.d5.loss_mask: 1.6489  decode.d5.loss_dice: 1.7447  decode.d6.loss_cls: 0.6335  decode.d6.loss_mask: 1.7001  decode.d6.loss_dice: 1.6462  decode.d7.loss_cls: 0.5810  decode.d7.loss_mask: 1.6565  decode.d7.loss_dice: 1.6768  decode.d8.loss_cls: 0.5863  decode.d8.loss_mask: 1.7050  decode.d8.loss_dice: 1.6833  mix_decode.loss_cls: 0.2568  mix_decode.loss_mask: 0.6350  mix_decode.loss_dice: 0.7074  mix_decode.d0.loss_cls: 0.3044  mix_decode.d0.loss_mask: 0.5975  mix_decode.d0.loss_dice: 0.7934  mix_decode.d1.loss_cls: 0.2562  mix_decode.d1.loss_mask: 0.6377  mix_decode.d1.loss_dice: 0.7867  mix_decode.d2.loss_cls: 0.2625  mix_decode.d2.loss_mask: 0.6231  mix_decode.d2.loss_dice: 0.7585  mix_decode.d3.loss_cls: 0.2878  mix_decode.d3.loss_mask: 0.5782  mix_decode.d3.loss_dice: 0.7200  mix_decode.d4.loss_cls: 0.3020  mix_decode.d4.loss_mask: 0.6264  mix_decode.d4.loss_dice: 0.7783  mix_decode.d5.loss_cls: 0.3013  mix_decode.d5.loss_mask: 0.6096  mix_decode.d5.loss_dice: 0.7450  mix_decode.d6.loss_cls: 0.2734  mix_decode.d6.loss_mask: 0.6663  mix_decode.d6.loss_dice: 0.7530  mix_decode.d7.loss_cls: 0.2860  mix_decode.d7.loss_mask: 0.6262  mix_decode.d7.loss_dice: 0.7546  mix_decode.d8.loss_cls: 0.2789  mix_decode.d8.loss_mask: 0.6040  mix_decode.d8.loss_dice: 0.7381
2025/03/29 01:14:54 - mmengine - INFO - Iter(train) [16350/20000]  base_lr: 2.1635e-05 lr: 2.1635e-05  eta: 1:42:44  time: 1.1340  data_time: 0.0226  memory: 10768  loss: 48.0042  decode.loss_cls: 0.3904  decode.loss_mask: 1.5128  decode.loss_dice: 1.5286  decode.d0.loss_cls: 0.5298  decode.d0.loss_mask: 1.4363  decode.d0.loss_dice: 1.5478  decode.d1.loss_cls: 0.4286  decode.d1.loss_mask: 1.4621  decode.d1.loss_dice: 1.5175  decode.d2.loss_cls: 0.4003  decode.d2.loss_mask: 1.4492  decode.d2.loss_dice: 1.5083  decode.d3.loss_cls: 0.3894  decode.d3.loss_mask: 1.4580  decode.d3.loss_dice: 1.5638  decode.d4.loss_cls: 0.3963  decode.d4.loss_mask: 1.4714  decode.d4.loss_dice: 1.5065  decode.d5.loss_cls: 0.3780  decode.d5.loss_mask: 1.4633  decode.d5.loss_dice: 1.5348  decode.d6.loss_cls: 0.3675  decode.d6.loss_mask: 1.5553  decode.d6.loss_dice: 1.5948  decode.d7.loss_cls: 0.4236  decode.d7.loss_mask: 1.4233  decode.d7.loss_dice: 1.4972  decode.d8.loss_cls: 0.4460  decode.d8.loss_mask: 1.3868  decode.d8.loss_dice: 1.5003  mix_decode.loss_cls: 0.2438  mix_decode.loss_mask: 0.4828  mix_decode.loss_dice: 0.6254  mix_decode.d0.loss_cls: 0.2778  mix_decode.d0.loss_mask: 0.5023  mix_decode.d0.loss_dice: 0.7332  mix_decode.d1.loss_cls: 0.2254  mix_decode.d1.loss_mask: 0.4924  mix_decode.d1.loss_dice: 0.6785  mix_decode.d2.loss_cls: 0.2190  mix_decode.d2.loss_mask: 0.5022  mix_decode.d2.loss_dice: 0.6853  mix_decode.d3.loss_cls: 0.2166  mix_decode.d3.loss_mask: 0.5065  mix_decode.d3.loss_dice: 0.6591  mix_decode.d4.loss_cls: 0.2470  mix_decode.d4.loss_mask: 0.4947  mix_decode.d4.loss_dice: 0.6485  mix_decode.d5.loss_cls: 0.2348  mix_decode.d5.loss_mask: 0.4904  mix_decode.d5.loss_dice: 0.6517  mix_decode.d6.loss_cls: 0.2087  mix_decode.d6.loss_mask: 0.4887  mix_decode.d6.loss_dice: 0.6513  mix_decode.d7.loss_cls: 0.2724  mix_decode.d7.loss_mask: 0.4849  mix_decode.d7.loss_dice: 0.6443  mix_decode.d8.loss_cls: 0.2360  mix_decode.d8.loss_mask: 0.4835  mix_decode.d8.loss_dice: 0.6490
2025/03/29 01:15:51 - mmengine - INFO - Iter(train) [16400/20000]  base_lr: 2.1368e-05 lr: 2.1368e-05  eta: 1:41:13  time: 1.1429  data_time: 0.0231  memory: 10748  loss: 49.4547  decode.loss_cls: 0.3618  decode.loss_mask: 1.4255  decode.loss_dice: 1.6090  decode.d0.loss_cls: 0.4160  decode.d0.loss_mask: 1.3167  decode.d0.loss_dice: 1.6181  decode.d1.loss_cls: 0.3620  decode.d1.loss_mask: 1.4125  decode.d1.loss_dice: 1.6086  decode.d2.loss_cls: 0.3631  decode.d2.loss_mask: 1.4052  decode.d2.loss_dice: 1.6243  decode.d3.loss_cls: 0.3627  decode.d3.loss_mask: 1.4281  decode.d3.loss_dice: 1.6070  decode.d4.loss_cls: 0.3748  decode.d4.loss_mask: 1.3946  decode.d4.loss_dice: 1.6498  decode.d5.loss_cls: 0.2994  decode.d5.loss_mask: 1.4262  decode.d5.loss_dice: 1.6514  decode.d6.loss_cls: 0.3259  decode.d6.loss_mask: 1.4042  decode.d6.loss_dice: 1.6341  decode.d7.loss_cls: 0.3611  decode.d7.loss_mask: 1.4273  decode.d7.loss_dice: 1.6106  decode.d8.loss_cls: 0.3507  decode.d8.loss_mask: 1.3703  decode.d8.loss_dice: 1.6231  mix_decode.loss_cls: 0.2348  mix_decode.loss_mask: 0.5581  mix_decode.loss_dice: 0.7711  mix_decode.d0.loss_cls: 0.2208  mix_decode.d0.loss_mask: 0.5494  mix_decode.d0.loss_dice: 0.8521  mix_decode.d1.loss_cls: 0.2101  mix_decode.d1.loss_mask: 0.5496  mix_decode.d1.loss_dice: 0.7847  mix_decode.d2.loss_cls: 0.2563  mix_decode.d2.loss_mask: 0.5308  mix_decode.d2.loss_dice: 0.7621  mix_decode.d3.loss_cls: 0.2249  mix_decode.d3.loss_mask: 0.5347  mix_decode.d3.loss_dice: 0.7558  mix_decode.d4.loss_cls: 0.3073  mix_decode.d4.loss_mask: 0.5299  mix_decode.d4.loss_dice: 0.7416  mix_decode.d5.loss_cls: 0.2533  mix_decode.d5.loss_mask: 0.5292  mix_decode.d5.loss_dice: 0.7720  mix_decode.d6.loss_cls: 0.2385  mix_decode.d6.loss_mask: 0.5558  mix_decode.d6.loss_dice: 0.7746  mix_decode.d7.loss_cls: 0.2293  mix_decode.d7.loss_mask: 0.5432  mix_decode.d7.loss_dice: 0.8008  mix_decode.d8.loss_cls: 0.2217  mix_decode.d8.loss_mask: 0.5465  mix_decode.d8.loss_dice: 0.7916
2025/03/29 01:16:48 - mmengine - INFO - Iter(train) [16450/20000]  base_lr: 2.1101e-05 lr: 2.1101e-05  eta: 1:39:43  time: 1.1348  data_time: 0.0232  memory: 10753  loss: 46.2000  decode.loss_cls: 0.2727  decode.loss_mask: 1.3974  decode.loss_dice: 1.4093  decode.d0.loss_cls: 0.3965  decode.d0.loss_mask: 1.3723  decode.d0.loss_dice: 1.4296  decode.d1.loss_cls: 0.2921  decode.d1.loss_mask: 1.4343  decode.d1.loss_dice: 1.4253  decode.d2.loss_cls: 0.3064  decode.d2.loss_mask: 1.3926  decode.d2.loss_dice: 1.3950  decode.d3.loss_cls: 0.2705  decode.d3.loss_mask: 1.4330  decode.d3.loss_dice: 1.4459  decode.d4.loss_cls: 0.2580  decode.d4.loss_mask: 1.4577  decode.d4.loss_dice: 1.4436  decode.d5.loss_cls: 0.3195  decode.d5.loss_mask: 1.4012  decode.d5.loss_dice: 1.4411  decode.d6.loss_cls: 0.2575  decode.d6.loss_mask: 1.4278  decode.d6.loss_dice: 1.4559  decode.d7.loss_cls: 0.3121  decode.d7.loss_mask: 1.3888  decode.d7.loss_dice: 1.4220  decode.d8.loss_cls: 0.2972  decode.d8.loss_mask: 1.4097  decode.d8.loss_dice: 1.4132  mix_decode.loss_cls: 0.2203  mix_decode.loss_mask: 0.4805  mix_decode.loss_dice: 0.7487  mix_decode.d0.loss_cls: 0.2586  mix_decode.d0.loss_mask: 0.4749  mix_decode.d0.loss_dice: 0.8202  mix_decode.d1.loss_cls: 0.2194  mix_decode.d1.loss_mask: 0.4900  mix_decode.d1.loss_dice: 0.7578  mix_decode.d2.loss_cls: 0.2258  mix_decode.d2.loss_mask: 0.4915  mix_decode.d2.loss_dice: 0.7521  mix_decode.d3.loss_cls: 0.2270  mix_decode.d3.loss_mask: 0.5202  mix_decode.d3.loss_dice: 0.7495  mix_decode.d4.loss_cls: 0.2385  mix_decode.d4.loss_mask: 0.5126  mix_decode.d4.loss_dice: 0.7511  mix_decode.d5.loss_cls: 0.2601  mix_decode.d5.loss_mask: 0.5020  mix_decode.d5.loss_dice: 0.7565  mix_decode.d6.loss_cls: 0.2383  mix_decode.d6.loss_mask: 0.4848  mix_decode.d6.loss_dice: 0.7303  mix_decode.d7.loss_cls: 0.2463  mix_decode.d7.loss_mask: 0.4758  mix_decode.d7.loss_dice: 0.7387  mix_decode.d8.loss_cls: 0.2509  mix_decode.d8.loss_mask: 0.4744  mix_decode.d8.loss_dice: 0.7250
2025/03/29 01:17:45 - mmengine - INFO - Iter(train) [16500/20000]  base_lr: 2.0833e-05 lr: 2.0833e-05  eta: 1:38:13  time: 1.1368  data_time: 0.0232  memory: 10752  loss: 47.1344  decode.loss_cls: 0.2495  decode.loss_mask: 1.2999  decode.loss_dice: 1.4566  decode.d0.loss_cls: 0.3760  decode.d0.loss_mask: 1.2969  decode.d0.loss_dice: 1.4974  decode.d1.loss_cls: 0.3104  decode.d1.loss_mask: 1.2920  decode.d1.loss_dice: 1.5096  decode.d2.loss_cls: 0.2917  decode.d2.loss_mask: 1.2884  decode.d2.loss_dice: 1.3662  decode.d3.loss_cls: 0.2735  decode.d3.loss_mask: 1.2595  decode.d3.loss_dice: 1.4633  decode.d4.loss_cls: 0.3045  decode.d4.loss_mask: 1.2734  decode.d4.loss_dice: 1.4447  decode.d5.loss_cls: 0.2869  decode.d5.loss_mask: 1.2830  decode.d5.loss_dice: 1.3942  decode.d6.loss_cls: 0.2429  decode.d6.loss_mask: 1.3749  decode.d6.loss_dice: 1.3855  decode.d7.loss_cls: 0.3158  decode.d7.loss_mask: 1.2629  decode.d7.loss_dice: 1.4177  decode.d8.loss_cls: 0.3536  decode.d8.loss_mask: 1.2547  decode.d8.loss_dice: 1.3643  mix_decode.loss_cls: 0.2469  mix_decode.loss_mask: 0.5649  mix_decode.loss_dice: 0.8488  mix_decode.d0.loss_cls: 0.2770  mix_decode.d0.loss_mask: 0.5666  mix_decode.d0.loss_dice: 0.9482  mix_decode.d1.loss_cls: 0.2385  mix_decode.d1.loss_mask: 0.5712  mix_decode.d1.loss_dice: 0.8852  mix_decode.d2.loss_cls: 0.2187  mix_decode.d2.loss_mask: 0.6506  mix_decode.d2.loss_dice: 0.8962  mix_decode.d3.loss_cls: 0.2210  mix_decode.d3.loss_mask: 0.5830  mix_decode.d3.loss_dice: 0.8866  mix_decode.d4.loss_cls: 0.2418  mix_decode.d4.loss_mask: 0.5561  mix_decode.d4.loss_dice: 0.8460  mix_decode.d5.loss_cls: 0.2396  mix_decode.d5.loss_mask: 0.5547  mix_decode.d5.loss_dice: 0.8512  mix_decode.d6.loss_cls: 0.2772  mix_decode.d6.loss_mask: 0.5904  mix_decode.d6.loss_dice: 0.8396  mix_decode.d7.loss_cls: 0.2105  mix_decode.d7.loss_mask: 0.5846  mix_decode.d7.loss_dice: 0.8841  mix_decode.d8.loss_cls: 0.2273  mix_decode.d8.loss_mask: 0.5585  mix_decode.d8.loss_dice: 0.8796
2025/03/29 01:18:42 - mmengine - INFO - Iter(train) [16550/20000]  base_lr: 2.0565e-05 lr: 2.0565e-05  eta: 1:36:43  time: 1.1393  data_time: 0.0239  memory: 10775  loss: 47.6048  decode.loss_cls: 0.4464  decode.loss_mask: 1.4571  decode.loss_dice: 1.3658  decode.d0.loss_cls: 0.6253  decode.d0.loss_mask: 1.4449  decode.d0.loss_dice: 1.4266  decode.d1.loss_cls: 0.4694  decode.d1.loss_mask: 1.4511  decode.d1.loss_dice: 1.3511  decode.d2.loss_cls: 0.3806  decode.d2.loss_mask: 1.4748  decode.d2.loss_dice: 1.3585  decode.d3.loss_cls: 0.4515  decode.d3.loss_mask: 1.4369  decode.d3.loss_dice: 1.3197  decode.d4.loss_cls: 0.5006  decode.d4.loss_mask: 1.4285  decode.d4.loss_dice: 1.3092  decode.d5.loss_cls: 0.4915  decode.d5.loss_mask: 1.4062  decode.d5.loss_dice: 1.3135  decode.d6.loss_cls: 0.3977  decode.d6.loss_mask: 1.4541  decode.d6.loss_dice: 1.3696  decode.d7.loss_cls: 0.4424  decode.d7.loss_mask: 1.4290  decode.d7.loss_dice: 1.3416  decode.d8.loss_cls: 0.4946  decode.d8.loss_mask: 1.4726  decode.d8.loss_dice: 1.3196  mix_decode.loss_cls: 0.2244  mix_decode.loss_mask: 0.4658  mix_decode.loss_dice: 0.7746  mix_decode.d0.loss_cls: 0.2424  mix_decode.d0.loss_mask: 0.4709  mix_decode.d0.loss_dice: 0.8770  mix_decode.d1.loss_cls: 0.2087  mix_decode.d1.loss_mask: 0.4549  mix_decode.d1.loss_dice: 0.8106  mix_decode.d2.loss_cls: 0.2170  mix_decode.d2.loss_mask: 0.4540  mix_decode.d2.loss_dice: 0.7724  mix_decode.d3.loss_cls: 0.2482  mix_decode.d3.loss_mask: 0.4718  mix_decode.d3.loss_dice: 0.7824  mix_decode.d4.loss_cls: 0.2768  mix_decode.d4.loss_mask: 0.4564  mix_decode.d4.loss_dice: 0.7781  mix_decode.d5.loss_cls: 0.2383  mix_decode.d5.loss_mask: 0.4784  mix_decode.d5.loss_dice: 0.7925  mix_decode.d6.loss_cls: 0.2537  mix_decode.d6.loss_mask: 0.4780  mix_decode.d6.loss_dice: 0.7792  mix_decode.d7.loss_cls: 0.2248  mix_decode.d7.loss_mask: 0.4696  mix_decode.d7.loss_dice: 0.7930  mix_decode.d8.loss_cls: 0.2411  mix_decode.d8.loss_mask: 0.4605  mix_decode.d8.loss_dice: 0.7788
2025/03/29 01:19:39 - mmengine - INFO - Iter(train) [16600/20000]  base_lr: 2.0297e-05 lr: 2.0297e-05  eta: 1:35:13  time: 1.1362  data_time: 0.0234  memory: 10758  loss: 45.4520  decode.loss_cls: 0.3851  decode.loss_mask: 1.2427  decode.loss_dice: 1.5089  decode.d0.loss_cls: 0.4663  decode.d0.loss_mask: 1.2769  decode.d0.loss_dice: 1.5844  decode.d1.loss_cls: 0.3518  decode.d1.loss_mask: 1.2118  decode.d1.loss_dice: 1.5314  decode.d2.loss_cls: 0.3361  decode.d2.loss_mask: 1.2227  decode.d2.loss_dice: 1.5064  decode.d3.loss_cls: 0.3912  decode.d3.loss_mask: 1.2401  decode.d3.loss_dice: 1.4722  decode.d4.loss_cls: 0.3722  decode.d4.loss_mask: 1.2167  decode.d4.loss_dice: 1.4793  decode.d5.loss_cls: 0.4266  decode.d5.loss_mask: 1.2308  decode.d5.loss_dice: 1.4990  decode.d6.loss_cls: 0.4324  decode.d6.loss_mask: 1.2319  decode.d6.loss_dice: 1.4741  decode.d7.loss_cls: 0.4299  decode.d7.loss_mask: 1.2560  decode.d7.loss_dice: 1.4938  decode.d8.loss_cls: 0.3461  decode.d8.loss_mask: 1.2870  decode.d8.loss_dice: 1.5194  mix_decode.loss_cls: 0.2047  mix_decode.loss_mask: 0.4613  mix_decode.loss_dice: 0.7061  mix_decode.d0.loss_cls: 0.2419  mix_decode.d0.loss_mask: 0.4860  mix_decode.d0.loss_dice: 0.7979  mix_decode.d1.loss_cls: 0.1983  mix_decode.d1.loss_mask: 0.4820  mix_decode.d1.loss_dice: 0.7342  mix_decode.d2.loss_cls: 0.1982  mix_decode.d2.loss_mask: 0.4572  mix_decode.d2.loss_dice: 0.7364  mix_decode.d3.loss_cls: 0.2013  mix_decode.d3.loss_mask: 0.4574  mix_decode.d3.loss_dice: 0.7082  mix_decode.d4.loss_cls: 0.2249  mix_decode.d4.loss_mask: 0.4639  mix_decode.d4.loss_dice: 0.7189  mix_decode.d5.loss_cls: 0.2476  mix_decode.d5.loss_mask: 0.4586  mix_decode.d5.loss_dice: 0.7063  mix_decode.d6.loss_cls: 0.2223  mix_decode.d6.loss_mask: 0.4468  mix_decode.d6.loss_dice: 0.6815  mix_decode.d7.loss_cls: 0.2370  mix_decode.d7.loss_mask: 0.4580  mix_decode.d7.loss_dice: 0.6990  mix_decode.d8.loss_cls: 0.2292  mix_decode.d8.loss_mask: 0.4579  mix_decode.d8.loss_dice: 0.7061
2025/03/29 01:20:35 - mmengine - INFO - Iter(train) [16650/20000]  base_lr: 2.0028e-05 lr: 2.0028e-05  eta: 1:33:44  time: 1.1344  data_time: 0.0235  memory: 10750  loss: 48.2174  decode.loss_cls: 0.4979  decode.loss_mask: 1.4874  decode.loss_dice: 1.3266  decode.d0.loss_cls: 0.6511  decode.d0.loss_mask: 1.5228  decode.d0.loss_dice: 1.3279  decode.d1.loss_cls: 0.4421  decode.d1.loss_mask: 1.5793  decode.d1.loss_dice: 1.3755  decode.d2.loss_cls: 0.5181  decode.d2.loss_mask: 1.5459  decode.d2.loss_dice: 1.3522  decode.d3.loss_cls: 0.4898  decode.d3.loss_mask: 1.5213  decode.d3.loss_dice: 1.3499  decode.d4.loss_cls: 0.4716  decode.d4.loss_mask: 1.5060  decode.d4.loss_dice: 1.3240  decode.d5.loss_cls: 0.4382  decode.d5.loss_mask: 1.5212  decode.d5.loss_dice: 1.3519  decode.d6.loss_cls: 0.5006  decode.d6.loss_mask: 1.5057  decode.d6.loss_dice: 1.3278  decode.d7.loss_cls: 0.4963  decode.d7.loss_mask: 1.4977  decode.d7.loss_dice: 1.3640  decode.d8.loss_cls: 0.5036  decode.d8.loss_mask: 1.5422  decode.d8.loss_dice: 1.3311  mix_decode.loss_cls: 0.1791  mix_decode.loss_mask: 0.5709  mix_decode.loss_dice: 0.6492  mix_decode.d0.loss_cls: 0.2673  mix_decode.d0.loss_mask: 0.6063  mix_decode.d0.loss_dice: 0.6927  mix_decode.d1.loss_cls: 0.2457  mix_decode.d1.loss_mask: 0.5693  mix_decode.d1.loss_dice: 0.6376  mix_decode.d2.loss_cls: 0.1966  mix_decode.d2.loss_mask: 0.5880  mix_decode.d2.loss_dice: 0.6559  mix_decode.d3.loss_cls: 0.1967  mix_decode.d3.loss_mask: 0.5943  mix_decode.d3.loss_dice: 0.6743  mix_decode.d4.loss_cls: 0.1975  mix_decode.d4.loss_mask: 0.5875  mix_decode.d4.loss_dice: 0.6476  mix_decode.d5.loss_cls: 0.2209  mix_decode.d5.loss_mask: 0.5761  mix_decode.d5.loss_dice: 0.6020  mix_decode.d6.loss_cls: 0.1958  mix_decode.d6.loss_mask: 0.6185  mix_decode.d6.loss_dice: 0.6388  mix_decode.d7.loss_cls: 0.1901  mix_decode.d7.loss_mask: 0.6051  mix_decode.d7.loss_dice: 0.6647  mix_decode.d8.loss_cls: 0.2309  mix_decode.d8.loss_mask: 0.5971  mix_decode.d8.loss_dice: 0.6511
2025/03/29 01:21:32 - mmengine - INFO - Iter(train) [16700/20000]  base_lr: 1.9759e-05 lr: 1.9759e-05  eta: 1:32:15  time: 1.1369  data_time: 0.0229  memory: 10754  loss: 48.0554  decode.loss_cls: 0.4807  decode.loss_mask: 1.3411  decode.loss_dice: 1.3730  decode.d0.loss_cls: 0.6404  decode.d0.loss_mask: 1.3715  decode.d0.loss_dice: 1.4599  decode.d1.loss_cls: 0.4615  decode.d1.loss_mask: 1.4465  decode.d1.loss_dice: 1.4168  decode.d2.loss_cls: 0.4391  decode.d2.loss_mask: 1.3682  decode.d2.loss_dice: 1.3999  decode.d3.loss_cls: 0.4720  decode.d3.loss_mask: 1.4269  decode.d3.loss_dice: 1.4476  decode.d4.loss_cls: 0.5485  decode.d4.loss_mask: 1.3118  decode.d4.loss_dice: 1.3885  decode.d5.loss_cls: 0.4507  decode.d5.loss_mask: 1.4513  decode.d5.loss_dice: 1.4291  decode.d6.loss_cls: 0.4688  decode.d6.loss_mask: 1.3741  decode.d6.loss_dice: 1.4652  decode.d7.loss_cls: 0.4878  decode.d7.loss_mask: 1.3977  decode.d7.loss_dice: 1.4094  decode.d8.loss_cls: 0.4841  decode.d8.loss_mask: 1.3348  decode.d8.loss_dice: 1.3961  mix_decode.loss_cls: 0.1750  mix_decode.loss_mask: 0.6073  mix_decode.loss_dice: 0.7185  mix_decode.d0.loss_cls: 0.2459  mix_decode.d0.loss_mask: 0.6069  mix_decode.d0.loss_dice: 0.7480  mix_decode.d1.loss_cls: 0.2129  mix_decode.d1.loss_mask: 0.5979  mix_decode.d1.loss_dice: 0.7115  mix_decode.d2.loss_cls: 0.2180  mix_decode.d2.loss_mask: 0.5967  mix_decode.d2.loss_dice: 0.6731  mix_decode.d3.loss_cls: 0.2448  mix_decode.d3.loss_mask: 0.5702  mix_decode.d3.loss_dice: 0.6831  mix_decode.d4.loss_cls: 0.2056  mix_decode.d4.loss_mask: 0.5660  mix_decode.d4.loss_dice: 0.7104  mix_decode.d5.loss_cls: 0.2087  mix_decode.d5.loss_mask: 0.5176  mix_decode.d5.loss_dice: 0.6712  mix_decode.d6.loss_cls: 0.2285  mix_decode.d6.loss_mask: 0.6214  mix_decode.d6.loss_dice: 0.7178  mix_decode.d7.loss_cls: 0.2121  mix_decode.d7.loss_mask: 0.6048  mix_decode.d7.loss_dice: 0.7299  mix_decode.d8.loss_cls: 0.2128  mix_decode.d8.loss_mask: 0.5906  mix_decode.d8.loss_dice: 0.7052
2025/03/29 01:22:29 - mmengine - INFO - Iter(train) [16750/20000]  base_lr: 1.9489e-05 lr: 1.9489e-05  eta: 1:30:46  time: 1.1336  data_time: 0.0231  memory: 10753  loss: 49.5747  decode.loss_cls: 0.2592  decode.loss_mask: 1.6683  decode.loss_dice: 1.5629  decode.d0.loss_cls: 0.4425  decode.d0.loss_mask: 1.5367  decode.d0.loss_dice: 1.5659  decode.d1.loss_cls: 0.3709  decode.d1.loss_mask: 1.6298  decode.d1.loss_dice: 1.5532  decode.d2.loss_cls: 0.3097  decode.d2.loss_mask: 1.6310  decode.d2.loss_dice: 1.6234  decode.d3.loss_cls: 0.2539  decode.d3.loss_mask: 1.6749  decode.d3.loss_dice: 1.5664  decode.d4.loss_cls: 0.3274  decode.d4.loss_mask: 1.6172  decode.d4.loss_dice: 1.5561  decode.d5.loss_cls: 0.3256  decode.d5.loss_mask: 1.5709  decode.d5.loss_dice: 1.5996  decode.d6.loss_cls: 0.3080  decode.d6.loss_mask: 1.6112  decode.d6.loss_dice: 1.5875  decode.d7.loss_cls: 0.3071  decode.d7.loss_mask: 1.6582  decode.d7.loss_dice: 1.5911  decode.d8.loss_cls: 0.3415  decode.d8.loss_mask: 1.5470  decode.d8.loss_dice: 1.5503  mix_decode.loss_cls: 0.2584  mix_decode.loss_mask: 0.4936  mix_decode.loss_dice: 0.6684  mix_decode.d0.loss_cls: 0.2300  mix_decode.d0.loss_mask: 0.5223  mix_decode.d0.loss_dice: 0.8178  mix_decode.d1.loss_cls: 0.2553  mix_decode.d1.loss_mask: 0.4927  mix_decode.d1.loss_dice: 0.6847  mix_decode.d2.loss_cls: 0.2685  mix_decode.d2.loss_mask: 0.5003  mix_decode.d2.loss_dice: 0.6562  mix_decode.d3.loss_cls: 0.2737  mix_decode.d3.loss_mask: 0.4809  mix_decode.d3.loss_dice: 0.6321  mix_decode.d4.loss_cls: 0.2697  mix_decode.d4.loss_mask: 0.4925  mix_decode.d4.loss_dice: 0.6717  mix_decode.d5.loss_cls: 0.2781  mix_decode.d5.loss_mask: 0.4923  mix_decode.d5.loss_dice: 0.6828  mix_decode.d6.loss_cls: 0.2525  mix_decode.d6.loss_mask: 0.5136  mix_decode.d6.loss_dice: 0.6932  mix_decode.d7.loss_cls: 0.2638  mix_decode.d7.loss_mask: 0.4945  mix_decode.d7.loss_dice: 0.6598  mix_decode.d8.loss_cls: 0.2436  mix_decode.d8.loss_mask: 0.5005  mix_decode.d8.loss_dice: 0.6838
2025/03/29 01:23:26 - mmengine - INFO - Iter(train) [16800/20000]  base_lr: 1.9219e-05 lr: 1.9219e-05  eta: 1:29:17  time: 1.1349  data_time: 0.0232  memory: 10771  loss: 46.9338  decode.loss_cls: 0.2916  decode.loss_mask: 1.4206  decode.loss_dice: 1.5025  decode.d0.loss_cls: 0.3888  decode.d0.loss_mask: 1.4171  decode.d0.loss_dice: 1.4538  decode.d1.loss_cls: 0.3077  decode.d1.loss_mask: 1.4144  decode.d1.loss_dice: 1.4998  decode.d2.loss_cls: 0.2783  decode.d2.loss_mask: 1.3975  decode.d2.loss_dice: 1.5058  decode.d3.loss_cls: 0.2930  decode.d3.loss_mask: 1.4004  decode.d3.loss_dice: 1.5053  decode.d4.loss_cls: 0.3421  decode.d4.loss_mask: 1.3951  decode.d4.loss_dice: 1.4959  decode.d5.loss_cls: 0.3048  decode.d5.loss_mask: 1.3841  decode.d5.loss_dice: 1.4654  decode.d6.loss_cls: 0.3190  decode.d6.loss_mask: 1.3837  decode.d6.loss_dice: 1.4653  decode.d7.loss_cls: 0.3069  decode.d7.loss_mask: 1.4088  decode.d7.loss_dice: 1.4625  decode.d8.loss_cls: 0.3039  decode.d8.loss_mask: 1.4180  decode.d8.loss_dice: 1.5041  mix_decode.loss_cls: 0.1668  mix_decode.loss_mask: 0.5098  mix_decode.loss_dice: 0.8143  mix_decode.d0.loss_cls: 0.2371  mix_decode.d0.loss_mask: 0.5067  mix_decode.d0.loss_dice: 0.8295  mix_decode.d1.loss_cls: 0.1898  mix_decode.d1.loss_mask: 0.4778  mix_decode.d1.loss_dice: 0.7613  mix_decode.d2.loss_cls: 0.1892  mix_decode.d2.loss_mask: 0.4924  mix_decode.d2.loss_dice: 0.7729  mix_decode.d3.loss_cls: 0.1488  mix_decode.d3.loss_mask: 0.5307  mix_decode.d3.loss_dice: 0.8222  mix_decode.d4.loss_cls: 0.2062  mix_decode.d4.loss_mask: 0.5014  mix_decode.d4.loss_dice: 0.7661  mix_decode.d5.loss_cls: 0.1812  mix_decode.d5.loss_mask: 0.5127  mix_decode.d5.loss_dice: 0.7883  mix_decode.d6.loss_cls: 0.1860  mix_decode.d6.loss_mask: 0.5279  mix_decode.d6.loss_dice: 0.7953  mix_decode.d7.loss_cls: 0.2318  mix_decode.d7.loss_mask: 0.4881  mix_decode.d7.loss_dice: 0.7611  mix_decode.d8.loss_cls: 0.1683  mix_decode.d8.loss_mask: 0.5186  mix_decode.d8.loss_dice: 0.8156
2025/03/29 01:24:24 - mmengine - INFO - Iter(train) [16850/20000]  base_lr: 1.8948e-05 lr: 1.8948e-05  eta: 1:27:48  time: 1.1472  data_time: 0.0248  memory: 10767  loss: 55.3089  decode.loss_cls: 0.4356  decode.loss_mask: 1.7841  decode.loss_dice: 1.5428  decode.d0.loss_cls: 0.4562  decode.d0.loss_mask: 1.7244  decode.d0.loss_dice: 1.6116  decode.d1.loss_cls: 0.4029  decode.d1.loss_mask: 1.7844  decode.d1.loss_dice: 1.5485  decode.d2.loss_cls: 0.4415  decode.d2.loss_mask: 1.7907  decode.d2.loss_dice: 1.5962  decode.d3.loss_cls: 0.4718  decode.d3.loss_mask: 1.7545  decode.d3.loss_dice: 1.5131  decode.d4.loss_cls: 0.4144  decode.d4.loss_mask: 1.6920  decode.d4.loss_dice: 1.5249  decode.d5.loss_cls: 0.4319  decode.d5.loss_mask: 1.6871  decode.d5.loss_dice: 1.5007  decode.d6.loss_cls: 0.4674  decode.d6.loss_mask: 1.7253  decode.d6.loss_dice: 1.5201  decode.d7.loss_cls: 0.4354  decode.d7.loss_mask: 1.7529  decode.d7.loss_dice: 1.5308  decode.d8.loss_cls: 0.3693  decode.d8.loss_mask: 1.7877  decode.d8.loss_dice: 1.5486  mix_decode.loss_cls: 0.3582  mix_decode.loss_mask: 0.6391  mix_decode.loss_dice: 0.8047  mix_decode.d0.loss_cls: 0.3257  mix_decode.d0.loss_mask: 0.6135  mix_decode.d0.loss_dice: 0.8711  mix_decode.d1.loss_cls: 0.3609  mix_decode.d1.loss_mask: 0.6171  mix_decode.d1.loss_dice: 0.8020  mix_decode.d2.loss_cls: 0.3549  mix_decode.d2.loss_mask: 0.6233  mix_decode.d2.loss_dice: 0.8257  mix_decode.d3.loss_cls: 0.3466  mix_decode.d3.loss_mask: 0.6307  mix_decode.d3.loss_dice: 0.8082  mix_decode.d4.loss_cls: 0.3790  mix_decode.d4.loss_mask: 0.6100  mix_decode.d4.loss_dice: 0.7970  mix_decode.d5.loss_cls: 0.4173  mix_decode.d5.loss_mask: 0.6499  mix_decode.d5.loss_dice: 0.7986  mix_decode.d6.loss_cls: 0.3738  mix_decode.d6.loss_mask: 0.6315  mix_decode.d6.loss_dice: 0.8162  mix_decode.d7.loss_cls: 0.3005  mix_decode.d7.loss_mask: 0.6576  mix_decode.d7.loss_dice: 0.8268  mix_decode.d8.loss_cls: 0.3617  mix_decode.d8.loss_mask: 0.6501  mix_decode.d8.loss_dice: 0.8101
2025/03/29 01:25:20 - mmengine - INFO - Iter(train) [16900/20000]  base_lr: 1.8677e-05 lr: 1.8677e-05  eta: 1:26:20  time: 1.1448  data_time: 0.0234  memory: 10750  loss: 47.1381  decode.loss_cls: 0.3526  decode.loss_mask: 1.4413  decode.loss_dice: 1.5233  decode.d0.loss_cls: 0.5275  decode.d0.loss_mask: 1.4467  decode.d0.loss_dice: 1.5530  decode.d1.loss_cls: 0.4649  decode.d1.loss_mask: 1.3770  decode.d1.loss_dice: 1.4734  decode.d2.loss_cls: 0.4411  decode.d2.loss_mask: 1.4188  decode.d2.loss_dice: 1.5218  decode.d3.loss_cls: 0.3412  decode.d3.loss_mask: 1.4718  decode.d3.loss_dice: 1.5161  decode.d4.loss_cls: 0.2726  decode.d4.loss_mask: 1.4775  decode.d4.loss_dice: 1.5337  decode.d5.loss_cls: 0.3020  decode.d5.loss_mask: 1.4634  decode.d5.loss_dice: 1.5340  decode.d6.loss_cls: 0.4197  decode.d6.loss_mask: 1.4136  decode.d6.loss_dice: 1.5074  decode.d7.loss_cls: 0.4090  decode.d7.loss_mask: 1.3842  decode.d7.loss_dice: 1.4358  decode.d8.loss_cls: 0.3740  decode.d8.loss_mask: 1.4410  decode.d8.loss_dice: 1.5458  mix_decode.loss_cls: 0.2576  mix_decode.loss_mask: 0.4688  mix_decode.loss_dice: 0.6597  mix_decode.d0.loss_cls: 0.2837  mix_decode.d0.loss_mask: 0.4593  mix_decode.d0.loss_dice: 0.7151  mix_decode.d1.loss_cls: 0.2738  mix_decode.d1.loss_mask: 0.4543  mix_decode.d1.loss_dice: 0.6566  mix_decode.d2.loss_cls: 0.2527  mix_decode.d2.loss_mask: 0.4591  mix_decode.d2.loss_dice: 0.6130  mix_decode.d3.loss_cls: 0.2307  mix_decode.d3.loss_mask: 0.4732  mix_decode.d3.loss_dice: 0.6300  mix_decode.d4.loss_cls: 0.2594  mix_decode.d4.loss_mask: 0.4669  mix_decode.d4.loss_dice: 0.6475  mix_decode.d5.loss_cls: 0.2551  mix_decode.d5.loss_mask: 0.4749  mix_decode.d5.loss_dice: 0.6337  mix_decode.d6.loss_cls: 0.2458  mix_decode.d6.loss_mask: 0.4596  mix_decode.d6.loss_dice: 0.6357  mix_decode.d7.loss_cls: 0.2623  mix_decode.d7.loss_mask: 0.4579  mix_decode.d7.loss_dice: 0.6514  mix_decode.d8.loss_cls: 0.2809  mix_decode.d8.loss_mask: 0.4739  mix_decode.d8.loss_dice: 0.6617
2025/03/29 01:26:17 - mmengine - INFO - Iter(train) [16950/20000]  base_lr: 1.8406e-05 lr: 1.8406e-05  eta: 1:24:51  time: 1.1344  data_time: 0.0234  memory: 10755  loss: 47.9710  decode.loss_cls: 0.4099  decode.loss_mask: 1.3812  decode.loss_dice: 1.3118  decode.d0.loss_cls: 0.6415  decode.d0.loss_mask: 1.3887  decode.d0.loss_dice: 1.4199  decode.d1.loss_cls: 0.6267  decode.d1.loss_mask: 1.3328  decode.d1.loss_dice: 1.3128  decode.d2.loss_cls: 0.4332  decode.d2.loss_mask: 1.4132  decode.d2.loss_dice: 1.3280  decode.d3.loss_cls: 0.4946  decode.d3.loss_mask: 1.3604  decode.d3.loss_dice: 1.3289  decode.d4.loss_cls: 0.4461  decode.d4.loss_mask: 1.4497  decode.d4.loss_dice: 1.3076  decode.d5.loss_cls: 0.4646  decode.d5.loss_mask: 1.3424  decode.d5.loss_dice: 1.3206  decode.d6.loss_cls: 0.5450  decode.d6.loss_mask: 1.3247  decode.d6.loss_dice: 1.3099  decode.d7.loss_cls: 0.5297  decode.d7.loss_mask: 1.3503  decode.d7.loss_dice: 1.2722  decode.d8.loss_cls: 0.4923  decode.d8.loss_mask: 1.3399  decode.d8.loss_dice: 1.2710  mix_decode.loss_cls: 0.2889  mix_decode.loss_mask: 0.5797  mix_decode.loss_dice: 0.7027  mix_decode.d0.loss_cls: 0.3498  mix_decode.d0.loss_mask: 0.6023  mix_decode.d0.loss_dice: 0.8047  mix_decode.d1.loss_cls: 0.3322  mix_decode.d1.loss_mask: 0.5463  mix_decode.d1.loss_dice: 0.7235  mix_decode.d2.loss_cls: 0.2702  mix_decode.d2.loss_mask: 0.5912  mix_decode.d2.loss_dice: 0.7125  mix_decode.d3.loss_cls: 0.2997  mix_decode.d3.loss_mask: 0.5760  mix_decode.d3.loss_dice: 0.6957  mix_decode.d4.loss_cls: 0.3184  mix_decode.d4.loss_mask: 0.5657  mix_decode.d4.loss_dice: 0.6940  mix_decode.d5.loss_cls: 0.3085  mix_decode.d5.loss_mask: 0.5681  mix_decode.d5.loss_dice: 0.7002  mix_decode.d6.loss_cls: 0.3129  mix_decode.d6.loss_mask: 0.5693  mix_decode.d6.loss_dice: 0.6894  mix_decode.d7.loss_cls: 0.3193  mix_decode.d7.loss_mask: 0.5972  mix_decode.d7.loss_dice: 0.6953  mix_decode.d8.loss_cls: 0.3102  mix_decode.d8.loss_mask: 0.5666  mix_decode.d8.loss_dice: 0.7309
2025/03/29 01:27:14 - mmengine - INFO - Exp name: r2u_20250328_164133
2025/03/29 01:27:14 - mmengine - INFO - Iter(train) [17000/20000]  base_lr: 1.8134e-05 lr: 1.8134e-05  eta: 1:23:23  time: 1.1381  data_time: 0.0233  memory: 10740  loss: 43.4840  decode.loss_cls: 0.3406  decode.loss_mask: 1.2587  decode.loss_dice: 1.2886  decode.d0.loss_cls: 0.4837  decode.d0.loss_mask: 1.2744  decode.d0.loss_dice: 1.2632  decode.d1.loss_cls: 0.3466  decode.d1.loss_mask: 1.2712  decode.d1.loss_dice: 1.2413  decode.d2.loss_cls: 0.3456  decode.d2.loss_mask: 1.2549  decode.d2.loss_dice: 1.2532  decode.d3.loss_cls: 0.3361  decode.d3.loss_mask: 1.2861  decode.d3.loss_dice: 1.2436  decode.d4.loss_cls: 0.3517  decode.d4.loss_mask: 1.2735  decode.d4.loss_dice: 1.2480  decode.d5.loss_cls: 0.3655  decode.d5.loss_mask: 1.2648  decode.d5.loss_dice: 1.2465  decode.d6.loss_cls: 0.3473  decode.d6.loss_mask: 1.2831  decode.d6.loss_dice: 1.2731  decode.d7.loss_cls: 0.3808  decode.d7.loss_mask: 1.2816  decode.d7.loss_dice: 1.2637  decode.d8.loss_cls: 0.3316  decode.d8.loss_mask: 1.2704  decode.d8.loss_dice: 1.2911  mix_decode.loss_cls: 0.1774  mix_decode.loss_mask: 0.5350  mix_decode.loss_dice: 0.7240  mix_decode.d0.loss_cls: 0.2133  mix_decode.d0.loss_mask: 0.5590  mix_decode.d0.loss_dice: 0.7506  mix_decode.d1.loss_cls: 0.1953  mix_decode.d1.loss_mask: 0.5314  mix_decode.d1.loss_dice: 0.7292  mix_decode.d2.loss_cls: 0.1772  mix_decode.d2.loss_mask: 0.5329  mix_decode.d2.loss_dice: 0.7153  mix_decode.d3.loss_cls: 0.1745  mix_decode.d3.loss_mask: 0.5252  mix_decode.d3.loss_dice: 0.7051  mix_decode.d4.loss_cls: 0.2042  mix_decode.d4.loss_mask: 0.5349  mix_decode.d4.loss_dice: 0.7019  mix_decode.d5.loss_cls: 0.2176  mix_decode.d5.loss_mask: 0.5570  mix_decode.d5.loss_dice: 0.6934  mix_decode.d6.loss_cls: 0.1700  mix_decode.d6.loss_mask: 0.5703  mix_decode.d6.loss_dice: 0.7329  mix_decode.d7.loss_cls: 0.1778  mix_decode.d7.loss_mask: 0.5397  mix_decode.d7.loss_dice: 0.7446  mix_decode.d8.loss_cls: 0.1889  mix_decode.d8.loss_mask: 0.5278  mix_decode.d8.loss_dice: 0.7169
2025/03/29 01:28:11 - mmengine - INFO - Iter(train) [17050/20000]  base_lr: 1.7862e-05 lr: 1.7862e-05  eta: 1:21:55  time: 1.1366  data_time: 0.0233  memory: 10760  loss: 55.1338  decode.loss_cls: 0.4770  decode.loss_mask: 1.5188  decode.loss_dice: 1.7885  decode.d0.loss_cls: 0.5747  decode.d0.loss_mask: 1.5216  decode.d0.loss_dice: 1.7822  decode.d1.loss_cls: 0.4678  decode.d1.loss_mask: 1.5249  decode.d1.loss_dice: 1.7818  decode.d2.loss_cls: 0.4694  decode.d2.loss_mask: 1.5044  decode.d2.loss_dice: 1.7430  decode.d3.loss_cls: 0.4582  decode.d3.loss_mask: 1.5527  decode.d3.loss_dice: 1.7542  decode.d4.loss_cls: 0.4295  decode.d4.loss_mask: 1.5558  decode.d4.loss_dice: 1.7686  decode.d5.loss_cls: 0.4869  decode.d5.loss_mask: 1.5111  decode.d5.loss_dice: 1.7626  decode.d6.loss_cls: 0.4533  decode.d6.loss_mask: 1.5566  decode.d6.loss_dice: 1.7509  decode.d7.loss_cls: 0.4295  decode.d7.loss_mask: 1.5072  decode.d7.loss_dice: 1.7319  decode.d8.loss_cls: 0.4861  decode.d8.loss_mask: 1.5205  decode.d8.loss_dice: 1.7768  mix_decode.loss_cls: 0.2569  mix_decode.loss_mask: 0.6501  mix_decode.loss_dice: 0.8273  mix_decode.d0.loss_cls: 0.2581  mix_decode.d0.loss_mask: 0.6686  mix_decode.d0.loss_dice: 0.9170  mix_decode.d1.loss_cls: 0.2912  mix_decode.d1.loss_mask: 0.6697  mix_decode.d1.loss_dice: 0.8212  mix_decode.d2.loss_cls: 0.1950  mix_decode.d2.loss_mask: 0.6825  mix_decode.d2.loss_dice: 0.8398  mix_decode.d3.loss_cls: 0.2232  mix_decode.d3.loss_mask: 0.6874  mix_decode.d3.loss_dice: 0.8284  mix_decode.d4.loss_cls: 0.2552  mix_decode.d4.loss_mask: 0.6696  mix_decode.d4.loss_dice: 0.8329  mix_decode.d5.loss_cls: 0.2217  mix_decode.d5.loss_mask: 0.6763  mix_decode.d5.loss_dice: 0.8165  mix_decode.d6.loss_cls: 0.2728  mix_decode.d6.loss_mask: 0.6515  mix_decode.d6.loss_dice: 0.8174  mix_decode.d7.loss_cls: 0.2330  mix_decode.d7.loss_mask: 0.6624  mix_decode.d7.loss_dice: 0.8336  mix_decode.d8.loss_cls: 0.2517  mix_decode.d8.loss_mask: 0.6604  mix_decode.d8.loss_dice: 0.8156
2025/03/29 01:29:08 - mmengine - INFO - Iter(train) [17100/20000]  base_lr: 1.7589e-05 lr: 1.7589e-05  eta: 1:20:27  time: 1.1350  data_time: 0.0232  memory: 10763  loss: 48.4716  decode.loss_cls: 0.3331  decode.loss_mask: 1.4832  decode.loss_dice: 1.5055  decode.d0.loss_cls: 0.3366  decode.d0.loss_mask: 1.6425  decode.d0.loss_dice: 1.6477  decode.d1.loss_cls: 0.4105  decode.d1.loss_mask: 1.4634  decode.d1.loss_dice: 1.4495  decode.d2.loss_cls: 0.3729  decode.d2.loss_mask: 1.4652  decode.d2.loss_dice: 1.4550  decode.d3.loss_cls: 0.3198  decode.d3.loss_mask: 1.4596  decode.d3.loss_dice: 1.4932  decode.d4.loss_cls: 0.3888  decode.d4.loss_mask: 1.4404  decode.d4.loss_dice: 1.4687  decode.d5.loss_cls: 0.3682  decode.d5.loss_mask: 1.4559  decode.d5.loss_dice: 1.5044  decode.d6.loss_cls: 0.3477  decode.d6.loss_mask: 1.4603  decode.d6.loss_dice: 1.4554  decode.d7.loss_cls: 0.3885  decode.d7.loss_mask: 1.4698  decode.d7.loss_dice: 1.4359  decode.d8.loss_cls: 0.3383  decode.d8.loss_mask: 1.5007  decode.d8.loss_dice: 1.5328  mix_decode.loss_cls: 0.2414  mix_decode.loss_mask: 0.5510  mix_decode.loss_dice: 0.7088  mix_decode.d0.loss_cls: 0.2079  mix_decode.d0.loss_mask: 0.5627  mix_decode.d0.loss_dice: 0.7842  mix_decode.d1.loss_cls: 0.2311  mix_decode.d1.loss_mask: 0.5404  mix_decode.d1.loss_dice: 0.7358  mix_decode.d2.loss_cls: 0.1885  mix_decode.d2.loss_mask: 0.5647  mix_decode.d2.loss_dice: 0.7309  mix_decode.d3.loss_cls: 0.2017  mix_decode.d3.loss_mask: 0.5691  mix_decode.d3.loss_dice: 0.7295  mix_decode.d4.loss_cls: 0.2359  mix_decode.d4.loss_mask: 0.5441  mix_decode.d4.loss_dice: 0.6999  mix_decode.d5.loss_cls: 0.2255  mix_decode.d5.loss_mask: 0.5422  mix_decode.d5.loss_dice: 0.7375  mix_decode.d6.loss_cls: 0.2328  mix_decode.d6.loss_mask: 0.5591  mix_decode.d6.loss_dice: 0.7153  mix_decode.d7.loss_cls: 0.2050  mix_decode.d7.loss_mask: 0.5570  mix_decode.d7.loss_dice: 0.7498  mix_decode.d8.loss_cls: 0.2278  mix_decode.d8.loss_mask: 0.5658  mix_decode.d8.loss_dice: 0.7326
2025/03/29 01:30:05 - mmengine - INFO - Iter(train) [17150/20000]  base_lr: 1.7316e-05 lr: 1.7316e-05  eta: 1:19:00  time: 1.1405  data_time: 0.0236  memory: 10744  loss: 53.9823  decode.loss_cls: 0.5933  decode.loss_mask: 1.4115  decode.loss_dice: 1.6884  decode.d0.loss_cls: 0.5795  decode.d0.loss_mask: 1.5582  decode.d0.loss_dice: 1.7778  decode.d1.loss_cls: 0.5748  decode.d1.loss_mask: 1.3831  decode.d1.loss_dice: 1.6744  decode.d2.loss_cls: 0.5658  decode.d2.loss_mask: 1.4051  decode.d2.loss_dice: 1.7009  decode.d3.loss_cls: 0.5965  decode.d3.loss_mask: 1.3691  decode.d3.loss_dice: 1.6656  decode.d4.loss_cls: 0.5539  decode.d4.loss_mask: 1.3586  decode.d4.loss_dice: 1.6760  decode.d5.loss_cls: 0.5529  decode.d5.loss_mask: 1.3801  decode.d5.loss_dice: 1.6942  decode.d6.loss_cls: 0.6116  decode.d6.loss_mask: 1.3942  decode.d6.loss_dice: 1.6730  decode.d7.loss_cls: 0.5575  decode.d7.loss_mask: 1.4621  decode.d7.loss_dice: 1.6962  decode.d8.loss_cls: 0.6017  decode.d8.loss_mask: 1.4389  decode.d8.loss_dice: 1.6679  mix_decode.loss_cls: 0.3385  mix_decode.loss_mask: 0.6526  mix_decode.loss_dice: 0.7173  mix_decode.d0.loss_cls: 0.3992  mix_decode.d0.loss_mask: 0.6336  mix_decode.d0.loss_dice: 0.8145  mix_decode.d1.loss_cls: 0.2742  mix_decode.d1.loss_mask: 0.6163  mix_decode.d1.loss_dice: 0.7470  mix_decode.d2.loss_cls: 0.3132  mix_decode.d2.loss_mask: 0.6600  mix_decode.d2.loss_dice: 0.7224  mix_decode.d3.loss_cls: 0.3349  mix_decode.d3.loss_mask: 0.6029  mix_decode.d3.loss_dice: 0.6789  mix_decode.d4.loss_cls: 0.3544  mix_decode.d4.loss_mask: 0.6366  mix_decode.d4.loss_dice: 0.7288  mix_decode.d5.loss_cls: 0.3699  mix_decode.d5.loss_mask: 0.6424  mix_decode.d5.loss_dice: 0.7060  mix_decode.d6.loss_cls: 0.3632  mix_decode.d6.loss_mask: 0.6623  mix_decode.d6.loss_dice: 0.7052  mix_decode.d7.loss_cls: 0.3510  mix_decode.d7.loss_mask: 0.6417  mix_decode.d7.loss_dice: 0.7307  mix_decode.d8.loss_cls: 0.3690  mix_decode.d8.loss_mask: 0.6267  mix_decode.d8.loss_dice: 0.7264
2025/03/29 01:31:02 - mmengine - INFO - Iter(train) [17200/20000]  base_lr: 1.7043e-05 lr: 1.7043e-05  eta: 1:17:32  time: 1.1352  data_time: 0.0225  memory: 10760  loss: 54.1697  decode.loss_cls: 0.5838  decode.loss_mask: 1.6690  decode.loss_dice: 1.7267  decode.d0.loss_cls: 0.5955  decode.d0.loss_mask: 1.5593  decode.d0.loss_dice: 1.7939  decode.d1.loss_cls: 0.5705  decode.d1.loss_mask: 1.5749  decode.d1.loss_dice: 1.7311  decode.d2.loss_cls: 0.5978  decode.d2.loss_mask: 1.5985  decode.d2.loss_dice: 1.7054  decode.d3.loss_cls: 0.6151  decode.d3.loss_mask: 1.5368  decode.d3.loss_dice: 1.6681  decode.d4.loss_cls: 0.6261  decode.d4.loss_mask: 1.5584  decode.d4.loss_dice: 1.6745  decode.d5.loss_cls: 0.5800  decode.d5.loss_mask: 1.6273  decode.d5.loss_dice: 1.6780  decode.d6.loss_cls: 0.5973  decode.d6.loss_mask: 1.5823  decode.d6.loss_dice: 1.6853  decode.d7.loss_cls: 0.6374  decode.d7.loss_mask: 1.6013  decode.d7.loss_dice: 1.6675  decode.d8.loss_cls: 0.5890  decode.d8.loss_mask: 1.6589  decode.d8.loss_dice: 1.6908  mix_decode.loss_cls: 0.3629  mix_decode.loss_mask: 0.4700  mix_decode.loss_dice: 0.7187  mix_decode.d0.loss_cls: 0.3700  mix_decode.d0.loss_mask: 0.4527  mix_decode.d0.loss_dice: 0.7948  mix_decode.d1.loss_cls: 0.3221  mix_decode.d1.loss_mask: 0.4391  mix_decode.d1.loss_dice: 0.7198  mix_decode.d2.loss_cls: 0.3426  mix_decode.d2.loss_mask: 0.4478  mix_decode.d2.loss_dice: 0.7070  mix_decode.d3.loss_cls: 0.3294  mix_decode.d3.loss_mask: 0.4599  mix_decode.d3.loss_dice: 0.6833  mix_decode.d4.loss_cls: 0.3411  mix_decode.d4.loss_mask: 0.4311  mix_decode.d4.loss_dice: 0.7125  mix_decode.d5.loss_cls: 0.3437  mix_decode.d5.loss_mask: 0.4534  mix_decode.d5.loss_dice: 0.7331  mix_decode.d6.loss_cls: 0.3524  mix_decode.d6.loss_mask: 0.4475  mix_decode.d6.loss_dice: 0.7237  mix_decode.d7.loss_cls: 0.3410  mix_decode.d7.loss_mask: 0.4598  mix_decode.d7.loss_dice: 0.7221  mix_decode.d8.loss_cls: 0.3624  mix_decode.d8.loss_mask: 0.4566  mix_decode.d8.loss_dice: 0.6889
2025/03/29 01:31:59 - mmengine - INFO - Iter(train) [17250/20000]  base_lr: 1.6768e-05 lr: 1.6768e-05  eta: 1:16:05  time: 1.1525  data_time: 0.0255  memory: 10759  loss: 54.4904  decode.loss_cls: 0.5112  decode.loss_mask: 1.6056  decode.loss_dice: 1.7380  decode.d0.loss_cls: 0.6322  decode.d0.loss_mask: 1.6207  decode.d0.loss_dice: 1.8908  decode.d1.loss_cls: 0.5817  decode.d1.loss_mask: 1.5729  decode.d1.loss_dice: 1.7335  decode.d2.loss_cls: 0.4523  decode.d2.loss_mask: 1.6498  decode.d2.loss_dice: 1.7790  decode.d3.loss_cls: 0.4558  decode.d3.loss_mask: 1.6512  decode.d3.loss_dice: 1.7305  decode.d4.loss_cls: 0.5030  decode.d4.loss_mask: 1.5971  decode.d4.loss_dice: 1.7204  decode.d5.loss_cls: 0.4746  decode.d5.loss_mask: 1.5553  decode.d5.loss_dice: 1.7115  decode.d6.loss_cls: 0.4663  decode.d6.loss_mask: 1.6265  decode.d6.loss_dice: 1.7248  decode.d7.loss_cls: 0.5269  decode.d7.loss_mask: 1.6141  decode.d7.loss_dice: 1.7277  decode.d8.loss_cls: 0.5199  decode.d8.loss_mask: 1.6270  decode.d8.loss_dice: 1.7199  mix_decode.loss_cls: 0.2697  mix_decode.loss_mask: 0.5311  mix_decode.loss_dice: 0.7411  mix_decode.d0.loss_cls: 0.3117  mix_decode.d0.loss_mask: 0.5463  mix_decode.d0.loss_dice: 0.8204  mix_decode.d1.loss_cls: 0.3153  mix_decode.d1.loss_mask: 0.5139  mix_decode.d1.loss_dice: 0.7207  mix_decode.d2.loss_cls: 0.2960  mix_decode.d2.loss_mask: 0.5401  mix_decode.d2.loss_dice: 0.7370  mix_decode.d3.loss_cls: 0.2772  mix_decode.d3.loss_mask: 0.5277  mix_decode.d3.loss_dice: 0.7249  mix_decode.d4.loss_cls: 0.3215  mix_decode.d4.loss_mask: 0.5377  mix_decode.d4.loss_dice: 0.7441  mix_decode.d5.loss_cls: 0.3169  mix_decode.d5.loss_mask: 0.5429  mix_decode.d5.loss_dice: 0.7276  mix_decode.d6.loss_cls: 0.3039  mix_decode.d6.loss_mask: 0.5178  mix_decode.d6.loss_dice: 0.7494  mix_decode.d7.loss_cls: 0.3002  mix_decode.d7.loss_mask: 0.5439  mix_decode.d7.loss_dice: 0.7332  mix_decode.d8.loss_cls: 0.2995  mix_decode.d8.loss_mask: 0.5341  mix_decode.d8.loss_dice: 0.7241
2025/03/29 01:32:56 - mmengine - INFO - Iter(train) [17300/20000]  base_lr: 1.6494e-05 lr: 1.6494e-05  eta: 1:14:38  time: 1.1359  data_time: 0.0232  memory: 10759  loss: 54.6131  decode.loss_cls: 0.5988  decode.loss_mask: 1.5100  decode.loss_dice: 1.7467  decode.d0.loss_cls: 0.6992  decode.d0.loss_mask: 1.5487  decode.d0.loss_dice: 1.8592  decode.d1.loss_cls: 0.6534  decode.d1.loss_mask: 1.4988  decode.d1.loss_dice: 1.7551  decode.d2.loss_cls: 0.5457  decode.d2.loss_mask: 1.4761  decode.d2.loss_dice: 1.7739  decode.d3.loss_cls: 0.5676  decode.d3.loss_mask: 1.4745  decode.d3.loss_dice: 1.7846  decode.d4.loss_cls: 0.5967  decode.d4.loss_mask: 1.5481  decode.d4.loss_dice: 1.7860  decode.d5.loss_cls: 0.5962  decode.d5.loss_mask: 1.5404  decode.d5.loss_dice: 1.7817  decode.d6.loss_cls: 0.5930  decode.d6.loss_mask: 1.5726  decode.d6.loss_dice: 1.7994  decode.d7.loss_cls: 0.5157  decode.d7.loss_mask: 1.5656  decode.d7.loss_dice: 1.8205  decode.d8.loss_cls: 0.5928  decode.d8.loss_mask: 1.5419  decode.d8.loss_dice: 1.7786  mix_decode.loss_cls: 0.2063  mix_decode.loss_mask: 0.4667  mix_decode.loss_dice: 0.8253  mix_decode.d0.loss_cls: 0.2773  mix_decode.d0.loss_mask: 0.4930  mix_decode.d0.loss_dice: 0.9001  mix_decode.d1.loss_cls: 0.2224  mix_decode.d1.loss_mask: 0.4875  mix_decode.d1.loss_dice: 0.8135  mix_decode.d2.loss_cls: 0.2875  mix_decode.d2.loss_mask: 0.4778  mix_decode.d2.loss_dice: 0.7965  mix_decode.d3.loss_cls: 0.2556  mix_decode.d3.loss_mask: 0.4791  mix_decode.d3.loss_dice: 0.7918  mix_decode.d4.loss_cls: 0.2304  mix_decode.d4.loss_mask: 0.4837  mix_decode.d4.loss_dice: 0.8202  mix_decode.d5.loss_cls: 0.2690  mix_decode.d5.loss_mask: 0.4681  mix_decode.d5.loss_dice: 0.7995  mix_decode.d6.loss_cls: 0.2855  mix_decode.d6.loss_mask: 0.4896  mix_decode.d6.loss_dice: 0.7898  mix_decode.d7.loss_cls: 0.2982  mix_decode.d7.loss_mask: 0.4779  mix_decode.d7.loss_dice: 0.8006  mix_decode.d8.loss_cls: 0.2365  mix_decode.d8.loss_mask: 0.4695  mix_decode.d8.loss_dice: 0.7926
2025/03/29 01:33:53 - mmengine - INFO - Iter(train) [17350/20000]  base_lr: 1.6219e-05 lr: 1.6219e-05  eta: 1:13:11  time: 1.1323  data_time: 0.0232  memory: 10758  loss: 56.0515  decode.loss_cls: 0.3668  decode.loss_mask: 1.6657  decode.loss_dice: 1.7741  decode.d0.loss_cls: 0.5922  decode.d0.loss_mask: 1.7108  decode.d0.loss_dice: 1.8179  decode.d1.loss_cls: 0.4721  decode.d1.loss_mask: 1.6238  decode.d1.loss_dice: 1.7382  decode.d2.loss_cls: 0.4709  decode.d2.loss_mask: 1.6214  decode.d2.loss_dice: 1.7343  decode.d3.loss_cls: 0.4107  decode.d3.loss_mask: 1.6447  decode.d3.loss_dice: 1.7394  decode.d4.loss_cls: 0.3456  decode.d4.loss_mask: 1.6399  decode.d4.loss_dice: 1.8009  decode.d5.loss_cls: 0.3957  decode.d5.loss_mask: 1.6120  decode.d5.loss_dice: 1.7701  decode.d6.loss_cls: 0.4503  decode.d6.loss_mask: 1.6041  decode.d6.loss_dice: 1.7306  decode.d7.loss_cls: 0.4645  decode.d7.loss_mask: 1.6071  decode.d7.loss_dice: 1.7594  decode.d8.loss_cls: 0.3919  decode.d8.loss_mask: 1.6422  decode.d8.loss_dice: 1.7592  mix_decode.loss_cls: 0.2988  mix_decode.loss_mask: 0.5947  mix_decode.loss_dice: 0.8715  mix_decode.d0.loss_cls: 0.2969  mix_decode.d0.loss_mask: 0.5609  mix_decode.d0.loss_dice: 0.9544  mix_decode.d1.loss_cls: 0.3323  mix_decode.d1.loss_mask: 0.5591  mix_decode.d1.loss_dice: 0.8686  mix_decode.d2.loss_cls: 0.3540  mix_decode.d2.loss_mask: 0.5628  mix_decode.d2.loss_dice: 0.8612  mix_decode.d3.loss_cls: 0.3419  mix_decode.d3.loss_mask: 0.5748  mix_decode.d3.loss_dice: 0.8528  mix_decode.d4.loss_cls: 0.3500  mix_decode.d4.loss_mask: 0.5642  mix_decode.d4.loss_dice: 0.8746  mix_decode.d5.loss_cls: 0.3369  mix_decode.d5.loss_mask: 0.5552  mix_decode.d5.loss_dice: 0.8401  mix_decode.d6.loss_cls: 0.3290  mix_decode.d6.loss_mask: 0.5893  mix_decode.d6.loss_dice: 0.8630  mix_decode.d7.loss_cls: 0.3057  mix_decode.d7.loss_mask: 0.5789  mix_decode.d7.loss_dice: 0.8861  mix_decode.d8.loss_cls: 0.3550  mix_decode.d8.loss_mask: 0.5464  mix_decode.d8.loss_dice: 0.8361
2025/03/29 01:34:50 - mmengine - INFO - Iter(train) [17400/20000]  base_lr: 1.5943e-05 lr: 1.5943e-05  eta: 1:11:44  time: 1.1380  data_time: 0.0233  memory: 10750  loss: 52.0976  decode.loss_cls: 0.5503  decode.loss_mask: 1.4625  decode.loss_dice: 1.4359  decode.d0.loss_cls: 0.6077  decode.d0.loss_mask: 1.5274  decode.d0.loss_dice: 1.4813  decode.d1.loss_cls: 0.5590  decode.d1.loss_mask: 1.4510  decode.d1.loss_dice: 1.3840  decode.d2.loss_cls: 0.4948  decode.d2.loss_mask: 1.4500  decode.d2.loss_dice: 1.3975  decode.d3.loss_cls: 0.5226  decode.d3.loss_mask: 1.4498  decode.d3.loss_dice: 1.4483  decode.d4.loss_cls: 0.4857  decode.d4.loss_mask: 1.4610  decode.d4.loss_dice: 1.4465  decode.d5.loss_cls: 0.4782  decode.d5.loss_mask: 1.4295  decode.d5.loss_dice: 1.4043  decode.d6.loss_cls: 0.5309  decode.d6.loss_mask: 1.4520  decode.d6.loss_dice: 1.3786  decode.d7.loss_cls: 0.6743  decode.d7.loss_mask: 1.4137  decode.d7.loss_dice: 1.3587  decode.d8.loss_cls: 0.5067  decode.d8.loss_mask: 1.4559  decode.d8.loss_dice: 1.4040  mix_decode.loss_cls: 0.4131  mix_decode.loss_mask: 0.5568  mix_decode.loss_dice: 0.8365  mix_decode.d0.loss_cls: 0.3513  mix_decode.d0.loss_mask: 0.5675  mix_decode.d0.loss_dice: 0.9329  mix_decode.d1.loss_cls: 0.4383  mix_decode.d1.loss_mask: 0.5371  mix_decode.d1.loss_dice: 0.8008  mix_decode.d2.loss_cls: 0.4027  mix_decode.d2.loss_mask: 0.5636  mix_decode.d2.loss_dice: 0.8130  mix_decode.d3.loss_cls: 0.3526  mix_decode.d3.loss_mask: 0.5527  mix_decode.d3.loss_dice: 0.8516  mix_decode.d4.loss_cls: 0.4029  mix_decode.d4.loss_mask: 0.5782  mix_decode.d4.loss_dice: 0.8565  mix_decode.d5.loss_cls: 0.3582  mix_decode.d5.loss_mask: 0.5690  mix_decode.d5.loss_dice: 0.8515  mix_decode.d6.loss_cls: 0.3557  mix_decode.d6.loss_mask: 0.5549  mix_decode.d6.loss_dice: 0.8711  mix_decode.d7.loss_cls: 0.3876  mix_decode.d7.loss_mask: 0.5723  mix_decode.d7.loss_dice: 0.8589  mix_decode.d8.loss_cls: 0.3949  mix_decode.d8.loss_mask: 0.5539  mix_decode.d8.loss_dice: 0.8598
2025/03/29 01:35:47 - mmengine - INFO - Iter(train) [17450/20000]  base_lr: 1.5667e-05 lr: 1.5667e-05  eta: 1:10:18  time: 1.1359  data_time: 0.0233  memory: 10750  loss: 51.7292  decode.loss_cls: 0.6407  decode.loss_mask: 1.6809  decode.loss_dice: 1.4389  decode.d0.loss_cls: 0.7777  decode.d0.loss_mask: 1.7332  decode.d0.loss_dice: 1.3764  decode.d1.loss_cls: 0.6416  decode.d1.loss_mask: 1.6735  decode.d1.loss_dice: 1.3320  decode.d2.loss_cls: 0.6045  decode.d2.loss_mask: 1.6922  decode.d2.loss_dice: 1.3754  decode.d3.loss_cls: 0.5845  decode.d3.loss_mask: 1.7661  decode.d3.loss_dice: 1.3599  decode.d4.loss_cls: 0.5545  decode.d4.loss_mask: 1.7901  decode.d4.loss_dice: 1.4159  decode.d5.loss_cls: 0.5781  decode.d5.loss_mask: 1.7751  decode.d5.loss_dice: 1.3935  decode.d6.loss_cls: 0.5793  decode.d6.loss_mask: 1.7105  decode.d6.loss_dice: 1.4078  decode.d7.loss_cls: 0.6495  decode.d7.loss_mask: 1.7120  decode.d7.loss_dice: 1.3754  decode.d8.loss_cls: 0.6481  decode.d8.loss_mask: 1.6714  decode.d8.loss_dice: 1.4162  mix_decode.loss_cls: 0.2027  mix_decode.loss_mask: 0.5136  mix_decode.loss_dice: 0.6952  mix_decode.d0.loss_cls: 0.2520  mix_decode.d0.loss_mask: 0.5101  mix_decode.d0.loss_dice: 0.7519  mix_decode.d1.loss_cls: 0.2682  mix_decode.d1.loss_mask: 0.4999  mix_decode.d1.loss_dice: 0.6844  mix_decode.d2.loss_cls: 0.2546  mix_decode.d2.loss_mask: 0.5034  mix_decode.d2.loss_dice: 0.6698  mix_decode.d3.loss_cls: 0.2572  mix_decode.d3.loss_mask: 0.5152  mix_decode.d3.loss_dice: 0.6727  mix_decode.d4.loss_cls: 0.2416  mix_decode.d4.loss_mask: 0.5162  mix_decode.d4.loss_dice: 0.6753  mix_decode.d5.loss_cls: 0.2341  mix_decode.d5.loss_mask: 0.5108  mix_decode.d5.loss_dice: 0.6906  mix_decode.d6.loss_cls: 0.2375  mix_decode.d6.loss_mask: 0.5112  mix_decode.d6.loss_dice: 0.6833  mix_decode.d7.loss_cls: 0.2479  mix_decode.d7.loss_mask: 0.4954  mix_decode.d7.loss_dice: 0.6730  mix_decode.d8.loss_cls: 0.2106  mix_decode.d8.loss_mask: 0.4988  mix_decode.d8.loss_dice: 0.6968
2025/03/29 01:36:44 - mmengine - INFO - Iter(train) [17500/20000]  base_lr: 1.5390e-05 lr: 1.5390e-05  eta: 1:08:51  time: 1.1419  data_time: 0.0234  memory: 10762  loss: 54.4516  decode.loss_cls: 0.4886  decode.loss_mask: 1.6738  decode.loss_dice: 1.6311  decode.d0.loss_cls: 0.5768  decode.d0.loss_mask: 1.6470  decode.d0.loss_dice: 1.6823  decode.d1.loss_cls: 0.5507  decode.d1.loss_mask: 1.6512  decode.d1.loss_dice: 1.6275  decode.d2.loss_cls: 0.5206  decode.d2.loss_mask: 1.6574  decode.d2.loss_dice: 1.6167  decode.d3.loss_cls: 0.4722  decode.d3.loss_mask: 1.6375  decode.d3.loss_dice: 1.6305  decode.d4.loss_cls: 0.5242  decode.d4.loss_mask: 1.6837  decode.d4.loss_dice: 1.6519  decode.d5.loss_cls: 0.4938  decode.d5.loss_mask: 1.6419  decode.d5.loss_dice: 1.6220  decode.d6.loss_cls: 0.4615  decode.d6.loss_mask: 1.6990  decode.d6.loss_dice: 1.6374  decode.d7.loss_cls: 0.4616  decode.d7.loss_mask: 1.6874  decode.d7.loss_dice: 1.6747  decode.d8.loss_cls: 0.4817  decode.d8.loss_mask: 1.6738  decode.d8.loss_dice: 1.6634  mix_decode.loss_cls: 0.2842  mix_decode.loss_mask: 0.5646  mix_decode.loss_dice: 0.7835  mix_decode.d0.loss_cls: 0.3266  mix_decode.d0.loss_mask: 0.5589  mix_decode.d0.loss_dice: 0.8426  mix_decode.d1.loss_cls: 0.2823  mix_decode.d1.loss_mask: 0.5417  mix_decode.d1.loss_dice: 0.7967  mix_decode.d2.loss_cls: 0.2807  mix_decode.d2.loss_mask: 0.5389  mix_decode.d2.loss_dice: 0.7724  mix_decode.d3.loss_cls: 0.2586  mix_decode.d3.loss_mask: 0.5553  mix_decode.d3.loss_dice: 0.7945  mix_decode.d4.loss_cls: 0.3120  mix_decode.d4.loss_mask: 0.5510  mix_decode.d4.loss_dice: 0.7656  mix_decode.d5.loss_cls: 0.3092  mix_decode.d5.loss_mask: 0.5792  mix_decode.d5.loss_dice: 0.7662  mix_decode.d6.loss_cls: 0.2785  mix_decode.d6.loss_mask: 0.5646  mix_decode.d6.loss_dice: 0.7619  mix_decode.d7.loss_cls: 0.2903  mix_decode.d7.loss_mask: 0.5619  mix_decode.d7.loss_dice: 0.7865  mix_decode.d8.loss_cls: 0.2846  mix_decode.d8.loss_mask: 0.5532  mix_decode.d8.loss_dice: 0.7835
2025/03/29 01:37:41 - mmengine - INFO - Iter(train) [17550/20000]  base_lr: 1.5113e-05 lr: 1.5113e-05  eta: 1:07:25  time: 1.1404  data_time: 0.0236  memory: 10749  loss: 52.0469  decode.loss_cls: 0.5054  decode.loss_mask: 1.6127  decode.loss_dice: 1.5337  decode.d0.loss_cls: 0.7058  decode.d0.loss_mask: 1.5516  decode.d0.loss_dice: 1.6608  decode.d1.loss_cls: 0.6816  decode.d1.loss_mask: 1.5035  decode.d1.loss_dice: 1.5287  decode.d2.loss_cls: 0.6213  decode.d2.loss_mask: 1.5089  decode.d2.loss_dice: 1.5318  decode.d3.loss_cls: 0.5312  decode.d3.loss_mask: 1.5321  decode.d3.loss_dice: 1.5304  decode.d4.loss_cls: 0.4915  decode.d4.loss_mask: 1.5582  decode.d4.loss_dice: 1.5373  decode.d5.loss_cls: 0.5189  decode.d5.loss_mask: 1.5999  decode.d5.loss_dice: 1.5405  decode.d6.loss_cls: 0.5992  decode.d6.loss_mask: 1.5588  decode.d6.loss_dice: 1.5100  decode.d7.loss_cls: 0.5625  decode.d7.loss_mask: 1.6131  decode.d7.loss_dice: 1.5913  decode.d8.loss_cls: 0.5563  decode.d8.loss_mask: 1.5200  decode.d8.loss_dice: 1.4804  mix_decode.loss_cls: 0.2932  mix_decode.loss_mask: 0.5243  mix_decode.loss_dice: 0.7000  mix_decode.d0.loss_cls: 0.2469  mix_decode.d0.loss_mask: 0.5572  mix_decode.d0.loss_dice: 0.8146  mix_decode.d1.loss_cls: 0.2727  mix_decode.d1.loss_mask: 0.5317  mix_decode.d1.loss_dice: 0.7073  mix_decode.d2.loss_cls: 0.3146  mix_decode.d2.loss_mask: 0.5355  mix_decode.d2.loss_dice: 0.6888  mix_decode.d3.loss_cls: 0.2754  mix_decode.d3.loss_mask: 0.5399  mix_decode.d3.loss_dice: 0.6710  mix_decode.d4.loss_cls: 0.3270  mix_decode.d4.loss_mask: 0.5453  mix_decode.d4.loss_dice: 0.6800  mix_decode.d5.loss_cls: 0.3113  mix_decode.d5.loss_mask: 0.5165  mix_decode.d5.loss_dice: 0.6925  mix_decode.d6.loss_cls: 0.2882  mix_decode.d6.loss_mask: 0.4998  mix_decode.d6.loss_dice: 0.7084  mix_decode.d7.loss_cls: 0.2715  mix_decode.d7.loss_mask: 0.5086  mix_decode.d7.loss_dice: 0.7056  mix_decode.d8.loss_cls: 0.2871  mix_decode.d8.loss_mask: 0.5361  mix_decode.d8.loss_dice: 0.7184
2025/03/29 01:38:38 - mmengine - INFO - Iter(train) [17600/20000]  base_lr: 1.4835e-05 lr: 1.4835e-05  eta: 1:05:59  time: 1.1402  data_time: 0.0239  memory: 10754  loss: 51.4603  decode.loss_cls: 0.6871  decode.loss_mask: 1.4267  decode.loss_dice: 1.5861  decode.d0.loss_cls: 0.7702  decode.d0.loss_mask: 1.4140  decode.d0.loss_dice: 1.6947  decode.d1.loss_cls: 0.6752  decode.d1.loss_mask: 1.3871  decode.d1.loss_dice: 1.5447  decode.d2.loss_cls: 0.6812  decode.d2.loss_mask: 1.4093  decode.d2.loss_dice: 1.5264  decode.d3.loss_cls: 0.7796  decode.d3.loss_mask: 1.4044  decode.d3.loss_dice: 1.5055  decode.d4.loss_cls: 0.6686  decode.d4.loss_mask: 1.4954  decode.d4.loss_dice: 1.5651  decode.d5.loss_cls: 0.6690  decode.d5.loss_mask: 1.3915  decode.d5.loss_dice: 1.4928  decode.d6.loss_cls: 0.7060  decode.d6.loss_mask: 1.3784  decode.d6.loss_dice: 1.5334  decode.d7.loss_cls: 0.6267  decode.d7.loss_mask: 1.4827  decode.d7.loss_dice: 1.5863  decode.d8.loss_cls: 0.6410  decode.d8.loss_mask: 1.3879  decode.d8.loss_dice: 1.5914  mix_decode.loss_cls: 0.1996  mix_decode.loss_mask: 0.5644  mix_decode.loss_dice: 0.6895  mix_decode.d0.loss_cls: 0.3175  mix_decode.d0.loss_mask: 0.5514  mix_decode.d0.loss_dice: 0.7324  mix_decode.d1.loss_cls: 0.2307  mix_decode.d1.loss_mask: 0.5448  mix_decode.d1.loss_dice: 0.6817  mix_decode.d2.loss_cls: 0.2305  mix_decode.d2.loss_mask: 0.5401  mix_decode.d2.loss_dice: 0.6778  mix_decode.d3.loss_cls: 0.2184  mix_decode.d3.loss_mask: 0.5648  mix_decode.d3.loss_dice: 0.6640  mix_decode.d4.loss_cls: 0.2613  mix_decode.d4.loss_mask: 0.5694  mix_decode.d4.loss_dice: 0.6825  mix_decode.d5.loss_cls: 0.2133  mix_decode.d5.loss_mask: 0.5736  mix_decode.d5.loss_dice: 0.6917  mix_decode.d6.loss_cls: 0.2234  mix_decode.d6.loss_mask: 0.5772  mix_decode.d6.loss_dice: 0.6847  mix_decode.d7.loss_cls: 0.1766  mix_decode.d7.loss_mask: 0.5675  mix_decode.d7.loss_dice: 0.6945  mix_decode.d8.loss_cls: 0.1893  mix_decode.d8.loss_mask: 0.5632  mix_decode.d8.loss_dice: 0.6761
2025/03/29 01:39:35 - mmengine - INFO - Iter(train) [17650/20000]  base_lr: 1.4556e-05 lr: 1.4556e-05  eta: 1:04:33  time: 1.1340  data_time: 0.0234  memory: 10766  loss: 50.0575  decode.loss_cls: 0.4026  decode.loss_mask: 1.4033  decode.loss_dice: 1.4968  decode.d0.loss_cls: 0.4681  decode.d0.loss_mask: 1.4421  decode.d0.loss_dice: 1.5028  decode.d1.loss_cls: 0.5531  decode.d1.loss_mask: 1.4073  decode.d1.loss_dice: 1.4626  decode.d2.loss_cls: 0.4254  decode.d2.loss_mask: 1.4147  decode.d2.loss_dice: 1.4830  decode.d3.loss_cls: 0.4502  decode.d3.loss_mask: 1.4106  decode.d3.loss_dice: 1.4571  decode.d4.loss_cls: 0.4733  decode.d4.loss_mask: 1.3871  decode.d4.loss_dice: 1.4521  decode.d5.loss_cls: 0.4830  decode.d5.loss_mask: 1.3771  decode.d5.loss_dice: 1.4539  decode.d6.loss_cls: 0.3873  decode.d6.loss_mask: 1.4385  decode.d6.loss_dice: 1.5005  decode.d7.loss_cls: 0.4431  decode.d7.loss_mask: 1.4243  decode.d7.loss_dice: 1.4875  decode.d8.loss_cls: 0.4102  decode.d8.loss_mask: 1.3842  decode.d8.loss_dice: 1.4830  mix_decode.loss_cls: 0.2875  mix_decode.loss_mask: 0.5844  mix_decode.loss_dice: 0.7848  mix_decode.d0.loss_cls: 0.3014  mix_decode.d0.loss_mask: 0.5742  mix_decode.d0.loss_dice: 0.8490  mix_decode.d1.loss_cls: 0.3083  mix_decode.d1.loss_mask: 0.5782  mix_decode.d1.loss_dice: 0.8015  mix_decode.d2.loss_cls: 0.3075  mix_decode.d2.loss_mask: 0.5709  mix_decode.d2.loss_dice: 0.7659  mix_decode.d3.loss_cls: 0.3039  mix_decode.d3.loss_mask: 0.5770  mix_decode.d3.loss_dice: 0.7665  mix_decode.d4.loss_cls: 0.3663  mix_decode.d4.loss_mask: 0.5701  mix_decode.d4.loss_dice: 0.7665  mix_decode.d5.loss_cls: 0.3116  mix_decode.d5.loss_mask: 0.5633  mix_decode.d5.loss_dice: 0.7732  mix_decode.d6.loss_cls: 0.2712  mix_decode.d6.loss_mask: 0.5791  mix_decode.d6.loss_dice: 0.8033  mix_decode.d7.loss_cls: 0.3251  mix_decode.d7.loss_mask: 0.5693  mix_decode.d7.loss_dice: 0.7758  mix_decode.d8.loss_cls: 0.2760  mix_decode.d8.loss_mask: 0.5789  mix_decode.d8.loss_dice: 0.8023
2025/03/29 01:40:33 - mmengine - INFO - Iter(train) [17700/20000]  base_lr: 1.4277e-05 lr: 1.4277e-05  eta: 1:03:08  time: 1.1539  data_time: 0.0245  memory: 10755  loss: 52.7409  decode.loss_cls: 0.5537  decode.loss_mask: 1.5731  decode.loss_dice: 1.6146  decode.d0.loss_cls: 0.6359  decode.d0.loss_mask: 1.6315  decode.d0.loss_dice: 1.6101  decode.d1.loss_cls: 0.4688  decode.d1.loss_mask: 1.5569  decode.d1.loss_dice: 1.6047  decode.d2.loss_cls: 0.5362  decode.d2.loss_mask: 1.5219  decode.d2.loss_dice: 1.5945  decode.d3.loss_cls: 0.4972  decode.d3.loss_mask: 1.5635  decode.d3.loss_dice: 1.5877  decode.d4.loss_cls: 0.5196  decode.d4.loss_mask: 1.5508  decode.d4.loss_dice: 1.5900  decode.d5.loss_cls: 0.5568  decode.d5.loss_mask: 1.4977  decode.d5.loss_dice: 1.4878  decode.d6.loss_cls: 0.5944  decode.d6.loss_mask: 1.5302  decode.d6.loss_dice: 1.5385  decode.d7.loss_cls: 0.5266  decode.d7.loss_mask: 1.5832  decode.d7.loss_dice: 1.5748  decode.d8.loss_cls: 0.5970  decode.d8.loss_mask: 1.5204  decode.d8.loss_dice: 1.5760  mix_decode.loss_cls: 0.2363  mix_decode.loss_mask: 0.5752  mix_decode.loss_dice: 0.7766  mix_decode.d0.loss_cls: 0.2295  mix_decode.d0.loss_mask: 0.5539  mix_decode.d0.loss_dice: 0.8600  mix_decode.d1.loss_cls: 0.3167  mix_decode.d1.loss_mask: 0.5323  mix_decode.d1.loss_dice: 0.7616  mix_decode.d2.loss_cls: 0.2594  mix_decode.d2.loss_mask: 0.5414  mix_decode.d2.loss_dice: 0.7593  mix_decode.d3.loss_cls: 0.2487  mix_decode.d3.loss_mask: 0.5563  mix_decode.d3.loss_dice: 0.7564  mix_decode.d4.loss_cls: 0.2696  mix_decode.d4.loss_mask: 0.5511  mix_decode.d4.loss_dice: 0.7873  mix_decode.d5.loss_cls: 0.2649  mix_decode.d5.loss_mask: 0.5525  mix_decode.d5.loss_dice: 0.7655  mix_decode.d6.loss_cls: 0.2345  mix_decode.d6.loss_mask: 0.5527  mix_decode.d6.loss_dice: 0.7882  mix_decode.d7.loss_cls: 0.2849  mix_decode.d7.loss_mask: 0.5419  mix_decode.d7.loss_dice: 0.7815  mix_decode.d8.loss_cls: 0.2531  mix_decode.d8.loss_mask: 0.5671  mix_decode.d8.loss_dice: 0.7884
2025/03/29 01:41:30 - mmengine - INFO - Iter(train) [17750/20000]  base_lr: 1.3998e-05 lr: 1.3998e-05  eta: 1:01:42  time: 1.1515  data_time: 0.0252  memory: 10751  loss: 48.2862  decode.loss_cls: 0.3754  decode.loss_mask: 1.3594  decode.loss_dice: 1.4191  decode.d0.loss_cls: 0.5115  decode.d0.loss_mask: 1.3600  decode.d0.loss_dice: 1.5425  decode.d1.loss_cls: 0.5058  decode.d1.loss_mask: 1.3285  decode.d1.loss_dice: 1.4009  decode.d2.loss_cls: 0.4798  decode.d2.loss_mask: 1.3220  decode.d2.loss_dice: 1.4221  decode.d3.loss_cls: 0.3753  decode.d3.loss_mask: 1.3299  decode.d3.loss_dice: 1.4595  decode.d4.loss_cls: 0.3768  decode.d4.loss_mask: 1.3203  decode.d4.loss_dice: 1.4932  decode.d5.loss_cls: 0.4796  decode.d5.loss_mask: 1.3404  decode.d5.loss_dice: 1.4251  decode.d6.loss_cls: 0.4243  decode.d6.loss_mask: 1.3456  decode.d6.loss_dice: 1.4223  decode.d7.loss_cls: 0.4255  decode.d7.loss_mask: 1.3335  decode.d7.loss_dice: 1.4267  decode.d8.loss_cls: 0.4574  decode.d8.loss_mask: 1.3425  decode.d8.loss_dice: 1.4089  mix_decode.loss_cls: 0.2620  mix_decode.loss_mask: 0.5077  mix_decode.loss_dice: 0.8231  mix_decode.d0.loss_cls: 0.2699  mix_decode.d0.loss_mask: 0.5162  mix_decode.d0.loss_dice: 0.9029  mix_decode.d1.loss_cls: 0.3011  mix_decode.d1.loss_mask: 0.5088  mix_decode.d1.loss_dice: 0.8171  mix_decode.d2.loss_cls: 0.2480  mix_decode.d2.loss_mask: 0.5058  mix_decode.d2.loss_dice: 0.8268  mix_decode.d3.loss_cls: 0.2537  mix_decode.d3.loss_mask: 0.5085  mix_decode.d3.loss_dice: 0.8105  mix_decode.d4.loss_cls: 0.3182  mix_decode.d4.loss_mask: 0.4878  mix_decode.d4.loss_dice: 0.8068  mix_decode.d5.loss_cls: 0.2960  mix_decode.d5.loss_mask: 0.4846  mix_decode.d5.loss_dice: 0.8019  mix_decode.d6.loss_cls: 0.2468  mix_decode.d6.loss_mask: 0.5342  mix_decode.d6.loss_dice: 0.8351  mix_decode.d7.loss_cls: 0.2641  mix_decode.d7.loss_mask: 0.5195  mix_decode.d7.loss_dice: 0.8256  mix_decode.d8.loss_cls: 0.2445  mix_decode.d8.loss_mask: 0.5149  mix_decode.d8.loss_dice: 0.8307
2025/03/29 01:42:27 - mmengine - INFO - Iter(train) [17800/20000]  base_lr: 1.3717e-05 lr: 1.3717e-05  eta: 1:00:17  time: 1.1372  data_time: 0.0236  memory: 10770  loss: 42.5252  decode.loss_cls: 0.2911  decode.loss_mask: 1.1866  decode.loss_dice: 1.3216  decode.d0.loss_cls: 0.4011  decode.d0.loss_mask: 1.2159  decode.d0.loss_dice: 1.3965  decode.d1.loss_cls: 0.2956  decode.d1.loss_mask: 1.2106  decode.d1.loss_dice: 1.3373  decode.d2.loss_cls: 0.2902  decode.d2.loss_mask: 1.1374  decode.d2.loss_dice: 1.3500  decode.d3.loss_cls: 0.2527  decode.d3.loss_mask: 1.2047  decode.d3.loss_dice: 1.3611  decode.d4.loss_cls: 0.3048  decode.d4.loss_mask: 1.1830  decode.d4.loss_dice: 1.3780  decode.d5.loss_cls: 0.3020  decode.d5.loss_mask: 1.1922  decode.d5.loss_dice: 1.3513  decode.d6.loss_cls: 0.2602  decode.d6.loss_mask: 1.2001  decode.d6.loss_dice: 1.3767  decode.d7.loss_cls: 0.3277  decode.d7.loss_mask: 1.2231  decode.d7.loss_dice: 1.3358  decode.d8.loss_cls: 0.2832  decode.d8.loss_mask: 1.1983  decode.d8.loss_dice: 1.3215  mix_decode.loss_cls: 0.2619  mix_decode.loss_mask: 0.4247  mix_decode.loss_dice: 0.7173  mix_decode.d0.loss_cls: 0.2754  mix_decode.d0.loss_mask: 0.4141  mix_decode.d0.loss_dice: 0.7698  mix_decode.d1.loss_cls: 0.2942  mix_decode.d1.loss_mask: 0.4122  mix_decode.d1.loss_dice: 0.6947  mix_decode.d2.loss_cls: 0.2553  mix_decode.d2.loss_mask: 0.4212  mix_decode.d2.loss_dice: 0.6966  mix_decode.d3.loss_cls: 0.2347  mix_decode.d3.loss_mask: 0.4327  mix_decode.d3.loss_dice: 0.7188  mix_decode.d4.loss_cls: 0.2508  mix_decode.d4.loss_mask: 0.4475  mix_decode.d4.loss_dice: 0.7207  mix_decode.d5.loss_cls: 0.2619  mix_decode.d5.loss_mask: 0.4202  mix_decode.d5.loss_dice: 0.7275  mix_decode.d6.loss_cls: 0.2336  mix_decode.d6.loss_mask: 0.4445  mix_decode.d6.loss_dice: 0.7299  mix_decode.d7.loss_cls: 0.2365  mix_decode.d7.loss_mask: 0.4333  mix_decode.d7.loss_dice: 0.7146  mix_decode.d8.loss_cls: 0.2513  mix_decode.d8.loss_mask: 0.4256  mix_decode.d8.loss_dice: 0.7138
2025/03/29 01:43:23 - mmengine - INFO - Iter(train) [17850/20000]  base_lr: 1.3437e-05 lr: 1.3437e-05  eta: 0:58:51  time: 1.1383  data_time: 0.0234  memory: 10764  loss: 46.9199  decode.loss_cls: 0.3405  decode.loss_mask: 1.2986  decode.loss_dice: 1.2914  decode.d0.loss_cls: 0.4189  decode.d0.loss_mask: 1.3324  decode.d0.loss_dice: 1.3611  decode.d1.loss_cls: 0.3430  decode.d1.loss_mask: 1.3208  decode.d1.loss_dice: 1.2843  decode.d2.loss_cls: 0.3196  decode.d2.loss_mask: 1.3410  decode.d2.loss_dice: 1.3306  decode.d3.loss_cls: 0.3566  decode.d3.loss_mask: 1.3415  decode.d3.loss_dice: 1.3207  decode.d4.loss_cls: 0.3394  decode.d4.loss_mask: 1.3325  decode.d4.loss_dice: 1.3603  decode.d5.loss_cls: 0.3123  decode.d5.loss_mask: 1.3670  decode.d5.loss_dice: 1.3330  decode.d6.loss_cls: 0.3168  decode.d6.loss_mask: 1.3482  decode.d6.loss_dice: 1.3109  decode.d7.loss_cls: 0.3015  decode.d7.loss_mask: 1.3323  decode.d7.loss_dice: 1.3092  decode.d8.loss_cls: 0.2861  decode.d8.loss_mask: 1.3340  decode.d8.loss_dice: 1.2961  mix_decode.loss_cls: 0.2107  mix_decode.loss_mask: 0.6529  mix_decode.loss_dice: 0.8153  mix_decode.d0.loss_cls: 0.2894  mix_decode.d0.loss_mask: 0.6454  mix_decode.d0.loss_dice: 0.8338  mix_decode.d1.loss_cls: 0.2849  mix_decode.d1.loss_mask: 0.6398  mix_decode.d1.loss_dice: 0.7931  mix_decode.d2.loss_cls: 0.2692  mix_decode.d2.loss_mask: 0.6557  mix_decode.d2.loss_dice: 0.7920  mix_decode.d3.loss_cls: 0.2323  mix_decode.d3.loss_mask: 0.6594  mix_decode.d3.loss_dice: 0.7923  mix_decode.d4.loss_cls: 0.2629  mix_decode.d4.loss_mask: 0.6536  mix_decode.d4.loss_dice: 0.7906  mix_decode.d5.loss_cls: 0.2480  mix_decode.d5.loss_mask: 0.6675  mix_decode.d5.loss_dice: 0.8083  mix_decode.d6.loss_cls: 0.2173  mix_decode.d6.loss_mask: 0.6627  mix_decode.d6.loss_dice: 0.7937  mix_decode.d7.loss_cls: 0.2789  mix_decode.d7.loss_mask: 0.6329  mix_decode.d7.loss_dice: 0.7877  mix_decode.d8.loss_cls: 0.1947  mix_decode.d8.loss_mask: 0.6537  mix_decode.d8.loss_dice: 0.8207
2025/03/29 01:44:20 - mmengine - INFO - Iter(train) [17900/20000]  base_lr: 1.3155e-05 lr: 1.3155e-05  eta: 0:57:26  time: 1.1389  data_time: 0.0232  memory: 10767  loss: 53.0136  decode.loss_cls: 0.4693  decode.loss_mask: 1.5175  decode.loss_dice: 1.5280  decode.d0.loss_cls: 0.5526  decode.d0.loss_mask: 1.4845  decode.d0.loss_dice: 1.6157  decode.d1.loss_cls: 0.4970  decode.d1.loss_mask: 1.4661  decode.d1.loss_dice: 1.5216  decode.d2.loss_cls: 0.3902  decode.d2.loss_mask: 1.5667  decode.d2.loss_dice: 1.5714  decode.d3.loss_cls: 0.4238  decode.d3.loss_mask: 1.4997  decode.d3.loss_dice: 1.5406  decode.d4.loss_cls: 0.4490  decode.d4.loss_mask: 1.5733  decode.d4.loss_dice: 1.5008  decode.d5.loss_cls: 0.4582  decode.d5.loss_mask: 1.5980  decode.d5.loss_dice: 1.4974  decode.d6.loss_cls: 0.3890  decode.d6.loss_mask: 1.5655  decode.d6.loss_dice: 1.5191  decode.d7.loss_cls: 0.4682  decode.d7.loss_mask: 1.5280  decode.d7.loss_dice: 1.5170  decode.d8.loss_cls: 0.4857  decode.d8.loss_mask: 1.4774  decode.d8.loss_dice: 1.5561  mix_decode.loss_cls: 0.3139  mix_decode.loss_mask: 0.6273  mix_decode.loss_dice: 0.8168  mix_decode.d0.loss_cls: 0.3801  mix_decode.d0.loss_mask: 0.5995  mix_decode.d0.loss_dice: 0.9080  mix_decode.d1.loss_cls: 0.3052  mix_decode.d1.loss_mask: 0.6446  mix_decode.d1.loss_dice: 0.8289  mix_decode.d2.loss_cls: 0.2587  mix_decode.d2.loss_mask: 0.6685  mix_decode.d2.loss_dice: 0.8437  mix_decode.d3.loss_cls: 0.2964  mix_decode.d3.loss_mask: 0.6880  mix_decode.d3.loss_dice: 0.8241  mix_decode.d4.loss_cls: 0.2897  mix_decode.d4.loss_mask: 0.6372  mix_decode.d4.loss_dice: 0.8036  mix_decode.d5.loss_cls: 0.2715  mix_decode.d5.loss_mask: 0.6374  mix_decode.d5.loss_dice: 0.8172  mix_decode.d6.loss_cls: 0.2961  mix_decode.d6.loss_mask: 0.6583  mix_decode.d6.loss_dice: 0.8466  mix_decode.d7.loss_cls: 0.2848  mix_decode.d7.loss_mask: 0.6471  mix_decode.d7.loss_dice: 0.8176  mix_decode.d8.loss_cls: 0.2891  mix_decode.d8.loss_mask: 0.6638  mix_decode.d8.loss_dice: 0.8227
2025/03/29 01:45:17 - mmengine - INFO - Iter(train) [17950/20000]  base_lr: 1.2873e-05 lr: 1.2873e-05  eta: 0:56:01  time: 1.1348  data_time: 0.0233  memory: 10746  loss: 49.1895  decode.loss_cls: 0.3631  decode.loss_mask: 1.5420  decode.loss_dice: 1.5146  decode.d0.loss_cls: 0.5555  decode.d0.loss_mask: 1.4938  decode.d0.loss_dice: 1.5541  decode.d1.loss_cls: 0.3757  decode.d1.loss_mask: 1.5372  decode.d1.loss_dice: 1.5095  decode.d2.loss_cls: 0.4085  decode.d2.loss_mask: 1.4889  decode.d2.loss_dice: 1.4763  decode.d3.loss_cls: 0.3532  decode.d3.loss_mask: 1.5785  decode.d3.loss_dice: 1.5656  decode.d4.loss_cls: 0.3505  decode.d4.loss_mask: 1.5615  decode.d4.loss_dice: 1.5276  decode.d5.loss_cls: 0.3839  decode.d5.loss_mask: 1.5604  decode.d5.loss_dice: 1.5445  decode.d6.loss_cls: 0.3710  decode.d6.loss_mask: 1.5354  decode.d6.loss_dice: 1.5164  decode.d7.loss_cls: 0.3328  decode.d7.loss_mask: 1.5514  decode.d7.loss_dice: 1.5044  decode.d8.loss_cls: 0.4508  decode.d8.loss_mask: 1.4832  decode.d8.loss_dice: 1.5066  mix_decode.loss_cls: 0.1996  mix_decode.loss_mask: 0.5721  mix_decode.loss_dice: 0.6832  mix_decode.d0.loss_cls: 0.2395  mix_decode.d0.loss_mask: 0.5919  mix_decode.d0.loss_dice: 0.7220  mix_decode.d1.loss_cls: 0.2041  mix_decode.d1.loss_mask: 0.5839  mix_decode.d1.loss_dice: 0.6825  mix_decode.d2.loss_cls: 0.1881  mix_decode.d2.loss_mask: 0.5843  mix_decode.d2.loss_dice: 0.6793  mix_decode.d3.loss_cls: 0.1959  mix_decode.d3.loss_mask: 0.5636  mix_decode.d3.loss_dice: 0.6637  mix_decode.d4.loss_cls: 0.2343  mix_decode.d4.loss_mask: 0.5790  mix_decode.d4.loss_dice: 0.6769  mix_decode.d5.loss_cls: 0.2155  mix_decode.d5.loss_mask: 0.5631  mix_decode.d5.loss_dice: 0.6845  mix_decode.d6.loss_cls: 0.2009  mix_decode.d6.loss_mask: 0.5645  mix_decode.d6.loss_dice: 0.7067  mix_decode.d7.loss_cls: 0.1953  mix_decode.d7.loss_mask: 0.5621  mix_decode.d7.loss_dice: 0.6844  mix_decode.d8.loss_cls: 0.1856  mix_decode.d8.loss_mask: 0.5908  mix_decode.d8.loss_dice: 0.6953
2025/03/29 01:46:14 - mmengine - INFO - Exp name: r2u_20250328_164133
2025/03/29 01:46:14 - mmengine - INFO - Iter(train) [18000/20000]  base_lr: 1.2590e-05 lr: 1.2590e-05  eta: 0:54:37  time: 1.1362  data_time: 0.0234  memory: 10755  loss: 45.8141  decode.loss_cls: 0.3286  decode.loss_mask: 1.3999  decode.loss_dice: 1.3053  decode.d0.loss_cls: 0.4250  decode.d0.loss_mask: 1.4624  decode.d0.loss_dice: 1.3797  decode.d1.loss_cls: 0.3393  decode.d1.loss_mask: 1.4416  decode.d1.loss_dice: 1.3389  decode.d2.loss_cls: 0.3571  decode.d2.loss_mask: 1.4197  decode.d2.loss_dice: 1.2619  decode.d3.loss_cls: 0.3336  decode.d3.loss_mask: 1.4006  decode.d3.loss_dice: 1.3138  decode.d4.loss_cls: 0.3417  decode.d4.loss_mask: 1.4067  decode.d4.loss_dice: 1.3246  decode.d5.loss_cls: 0.3046  decode.d5.loss_mask: 1.4145  decode.d5.loss_dice: 1.3454  decode.d6.loss_cls: 0.3218  decode.d6.loss_mask: 1.4080  decode.d6.loss_dice: 1.3090  decode.d7.loss_cls: 0.3454  decode.d7.loss_mask: 1.4365  decode.d7.loss_dice: 1.3845  decode.d8.loss_cls: 0.3159  decode.d8.loss_mask: 1.4281  decode.d8.loss_dice: 1.3160  mix_decode.loss_cls: 0.1995  mix_decode.loss_mask: 0.5124  mix_decode.loss_dice: 0.7687  mix_decode.d0.loss_cls: 0.2561  mix_decode.d0.loss_mask: 0.4896  mix_decode.d0.loss_dice: 0.7970  mix_decode.d1.loss_cls: 0.2546  mix_decode.d1.loss_mask: 0.4804  mix_decode.d1.loss_dice: 0.7516  mix_decode.d2.loss_cls: 0.2479  mix_decode.d2.loss_mask: 0.5002  mix_decode.d2.loss_dice: 0.7329  mix_decode.d3.loss_cls: 0.2209  mix_decode.d3.loss_mask: 0.5031  mix_decode.d3.loss_dice: 0.7604  mix_decode.d4.loss_cls: 0.2256  mix_decode.d4.loss_mask: 0.4947  mix_decode.d4.loss_dice: 0.7436  mix_decode.d5.loss_cls: 0.2472  mix_decode.d5.loss_mask: 0.5121  mix_decode.d5.loss_dice: 0.7594  mix_decode.d6.loss_cls: 0.2199  mix_decode.d6.loss_mask: 0.5131  mix_decode.d6.loss_dice: 0.7612  mix_decode.d7.loss_cls: 0.1816  mix_decode.d7.loss_mask: 0.5108  mix_decode.d7.loss_dice: 0.7796  mix_decode.d8.loss_cls: 0.1830  mix_decode.d8.loss_mask: 0.5120  mix_decode.d8.loss_dice: 0.7849
2025/03/29 01:46:14 - mmengine - INFO - Saving checkpoint at 18000 iterations
2025/03/29 01:46:20 - mmengine - INFO - Iter(val) [  50/2708]    eta: 0:04:02  time: 0.0907  data_time: 0.0019  memory: 3058  
2025/03/29 01:46:25 - mmengine - INFO - Iter(val) [ 100/2708]    eta: 0:03:58  time: 0.0936  data_time: 0.0021  memory: 3058  
2025/03/29 01:46:29 - mmengine - INFO - Iter(val) [ 150/2708]    eta: 0:03:53  time: 0.0905  data_time: 0.0019  memory: 3058  
2025/03/29 01:46:34 - mmengine - INFO - Iter(val) [ 200/2708]    eta: 0:03:48  time: 0.0925  data_time: 0.0020  memory: 3058  
2025/03/29 01:46:38 - mmengine - INFO - Iter(val) [ 250/2708]    eta: 0:03:44  time: 0.0907  data_time: 0.0019  memory: 3058  
2025/03/29 01:46:43 - mmengine - INFO - Iter(val) [ 300/2708]    eta: 0:03:39  time: 0.0909  data_time: 0.0019  memory: 3058  
2025/03/29 01:46:47 - mmengine - INFO - Iter(val) [ 350/2708]    eta: 0:03:34  time: 0.0907  data_time: 0.0020  memory: 3058  
2025/03/29 01:46:52 - mmengine - INFO - Iter(val) [ 400/2708]    eta: 0:03:30  time: 0.0907  data_time: 0.0020  memory: 3058  
2025/03/29 01:46:56 - mmengine - INFO - Iter(val) [ 450/2708]    eta: 0:03:25  time: 0.0907  data_time: 0.0019  memory: 3058  
2025/03/29 01:47:01 - mmengine - INFO - Iter(val) [ 500/2708]    eta: 0:03:20  time: 0.0907  data_time: 0.0019  memory: 3058  
2025/03/29 01:47:05 - mmengine - INFO - Iter(val) [ 550/2708]    eta: 0:03:16  time: 0.0909  data_time: 0.0019  memory: 3058  
2025/03/29 01:47:10 - mmengine - INFO - Iter(val) [ 600/2708]    eta: 0:03:11  time: 0.0906  data_time: 0.0019  memory: 3058  
2025/03/29 01:47:15 - mmengine - INFO - Iter(val) [ 650/2708]    eta: 0:03:07  time: 0.0909  data_time: 0.0020  memory: 3058  
2025/03/29 01:47:19 - mmengine - INFO - Iter(val) [ 700/2708]    eta: 0:03:02  time: 0.0909  data_time: 0.0019  memory: 3058  
2025/03/29 01:47:24 - mmengine - INFO - Iter(val) [ 750/2708]    eta: 0:02:58  time: 0.0907  data_time: 0.0019  memory: 3058  
2025/03/29 01:47:28 - mmengine - INFO - Iter(val) [ 800/2708]    eta: 0:02:53  time: 0.0910  data_time: 0.0020  memory: 3058  
2025/03/29 01:47:33 - mmengine - INFO - Iter(val) [ 850/2708]    eta: 0:02:48  time: 0.0910  data_time: 0.0020  memory: 3058  
2025/03/29 01:47:37 - mmengine - INFO - Iter(val) [ 900/2708]    eta: 0:02:44  time: 0.0907  data_time: 0.0019  memory: 3058  
2025/03/29 01:47:42 - mmengine - INFO - Iter(val) [ 950/2708]    eta: 0:02:39  time: 0.0921  data_time: 0.0021  memory: 3058  
2025/03/29 01:47:47 - mmengine - INFO - Iter(val) [1000/2708]    eta: 0:02:35  time: 0.0909  data_time: 0.0020  memory: 3058  
2025/03/29 01:47:51 - mmengine - INFO - Iter(val) [1050/2708]    eta: 0:02:30  time: 0.0908  data_time: 0.0019  memory: 3058  
2025/03/29 01:47:56 - mmengine - INFO - Iter(val) [1100/2708]    eta: 0:02:26  time: 0.0909  data_time: 0.0020  memory: 3058  
2025/03/29 01:48:00 - mmengine - INFO - Iter(val) [1150/2708]    eta: 0:02:21  time: 0.0907  data_time: 0.0020  memory: 3058  
2025/03/29 01:48:05 - mmengine - INFO - Iter(val) [1200/2708]    eta: 0:02:17  time: 0.0908  data_time: 0.0020  memory: 3058  
2025/03/29 01:48:09 - mmengine - INFO - Iter(val) [1250/2708]    eta: 0:02:12  time: 0.0916  data_time: 0.0021  memory: 3058  
2025/03/29 01:48:14 - mmengine - INFO - Iter(val) [1300/2708]    eta: 0:02:08  time: 0.0907  data_time: 0.0019  memory: 3058  
2025/03/29 01:48:18 - mmengine - INFO - Iter(val) [1350/2708]    eta: 0:02:03  time: 0.0910  data_time: 0.0020  memory: 3058  
2025/03/29 01:48:23 - mmengine - INFO - Iter(val) [1400/2708]    eta: 0:01:58  time: 0.0909  data_time: 0.0020  memory: 3058  
2025/03/29 01:48:28 - mmengine - INFO - Iter(val) [1450/2708]    eta: 0:01:54  time: 0.0909  data_time: 0.0019  memory: 3058  
2025/03/29 01:48:32 - mmengine - INFO - Iter(val) [1500/2708]    eta: 0:01:49  time: 0.0910  data_time: 0.0020  memory: 3058  
2025/03/29 01:48:37 - mmengine - INFO - Iter(val) [1550/2708]    eta: 0:01:45  time: 0.0936  data_time: 0.0020  memory: 3058  
2025/03/29 01:48:41 - mmengine - INFO - Iter(val) [1600/2708]    eta: 0:01:40  time: 0.0911  data_time: 0.0020  memory: 3058  
2025/03/29 01:48:46 - mmengine - INFO - Iter(val) [1650/2708]    eta: 0:01:36  time: 0.0930  data_time: 0.0021  memory: 3058  
2025/03/29 01:48:50 - mmengine - INFO - Iter(val) [1700/2708]    eta: 0:01:31  time: 0.0906  data_time: 0.0018  memory: 3058  
2025/03/29 01:48:55 - mmengine - INFO - Iter(val) [1750/2708]    eta: 0:01:27  time: 0.0908  data_time: 0.0020  memory: 3058  
2025/03/29 01:49:00 - mmengine - INFO - Iter(val) [1800/2708]    eta: 0:01:22  time: 0.0908  data_time: 0.0019  memory: 3058  
2025/03/29 01:49:04 - mmengine - INFO - Iter(val) [1850/2708]    eta: 0:01:18  time: 0.0907  data_time: 0.0019  memory: 3058  
2025/03/29 01:49:09 - mmengine - INFO - Iter(val) [1900/2708]    eta: 0:01:13  time: 0.0912  data_time: 0.0020  memory: 3058  
2025/03/29 01:49:13 - mmengine - INFO - Iter(val) [1950/2708]    eta: 0:01:09  time: 0.0911  data_time: 0.0019  memory: 3058  
2025/03/29 01:49:18 - mmengine - INFO - Iter(val) [2000/2708]    eta: 0:01:04  time: 0.0913  data_time: 0.0020  memory: 3058  
2025/03/29 01:49:22 - mmengine - INFO - Iter(val) [2050/2708]    eta: 0:00:59  time: 0.0911  data_time: 0.0020  memory: 3058  
2025/03/29 01:49:27 - mmengine - INFO - Iter(val) [2100/2708]    eta: 0:00:55  time: 0.0912  data_time: 0.0020  memory: 3058  
2025/03/29 01:49:32 - mmengine - INFO - Iter(val) [2150/2708]    eta: 0:00:50  time: 0.0914  data_time: 0.0020  memory: 3058  
2025/03/29 01:49:36 - mmengine - INFO - Iter(val) [2200/2708]    eta: 0:00:46  time: 0.0914  data_time: 0.0020  memory: 3058  
2025/03/29 01:49:41 - mmengine - INFO - Iter(val) [2250/2708]    eta: 0:00:41  time: 0.0913  data_time: 0.0020  memory: 3058  
2025/03/29 01:49:45 - mmengine - INFO - Iter(val) [2300/2708]    eta: 0:00:37  time: 0.0912  data_time: 0.0020  memory: 3058  
2025/03/29 01:49:50 - mmengine - INFO - Iter(val) [2350/2708]    eta: 0:00:32  time: 0.0910  data_time: 0.0019  memory: 3058  
2025/03/29 01:49:54 - mmengine - INFO - Iter(val) [2400/2708]    eta: 0:00:28  time: 0.0914  data_time: 0.0020  memory: 3058  
2025/03/29 01:49:59 - mmengine - INFO - Iter(val) [2450/2708]    eta: 0:00:23  time: 0.0911  data_time: 0.0020  memory: 3058  
2025/03/29 01:50:04 - mmengine - INFO - Iter(val) [2500/2708]    eta: 0:00:18  time: 0.0911  data_time: 0.0019  memory: 3058  
2025/03/29 01:50:08 - mmengine - INFO - Iter(val) [2550/2708]    eta: 0:00:14  time: 0.0913  data_time: 0.0020  memory: 3058  
2025/03/29 01:50:13 - mmengine - INFO - Iter(val) [2600/2708]    eta: 0:00:09  time: 0.0914  data_time: 0.0022  memory: 3058  
2025/03/29 01:50:17 - mmengine - INFO - Iter(val) [2650/2708]    eta: 0:00:05  time: 0.0912  data_time: 0.0019  memory: 3058  
2025/03/29 01:50:22 - mmengine - INFO - Iter(val) [2700/2708]    eta: 0:00:00  time: 0.0909  data_time: 0.0019  memory: 3058  
2025/03/29 01:50:23 - mmengine - INFO - per class results:
2025/03/29 01:50:23 - mmengine - INFO - 
+--------------+-------+-------+
|    Class     |  IoU  |  Acc  |
+--------------+-------+-------+
|  background  | 42.46 | 68.52 |
|   building   | 62.55 | 73.24 |
|     road     | 54.63 | 67.12 |
|    water     | 74.67 | 84.11 |
|    barren    | 42.26 | 64.38 |
|    forest    | 52.85 | 64.61 |
| agricultural | 61.86 | 69.19 |
+--------------+-------+-------+
2025/03/29 01:50:23 - mmengine - INFO - Iter(val) [2708/2708]    aAcc: 70.3600  mIoU: 55.9000  mAcc: 70.1600  data_time: 0.0020  time: 0.0911
2025/03/29 01:50:23 - mmengine - INFO - The previous best checkpoint /data/xiaoxinghhh/code/my_mmcv/work_dirs/r2u/DA_spatial_16_fft_cut_off_0.3_suf3_scale_0.1/e6531_seed0/best_mIoU_iter_14000.pth is removed
2025/03/29 01:50:23 - mmengine - INFO - The best checkpoint with 55.9000 mIoU at 18000 iter is saved to best_mIoU_iter_18000.pth.
2025/03/29 01:51:21 - mmengine - INFO - Iter(train) [18050/20000]  base_lr: 1.2306e-05 lr: 1.2306e-05  eta: 0:53:12  time: 1.1331  data_time: 0.0229  memory: 10760  loss: 51.7292  decode.loss_cls: 0.5228  decode.loss_mask: 1.5196  decode.loss_dice: 1.4903  decode.d0.loss_cls: 0.7007  decode.d0.loss_mask: 1.4916  decode.d0.loss_dice: 1.5648  decode.d1.loss_cls: 0.4588  decode.d1.loss_mask: 1.4701  decode.d1.loss_dice: 1.4643  decode.d2.loss_cls: 0.4662  decode.d2.loss_mask: 1.5383  decode.d2.loss_dice: 1.5197  decode.d3.loss_cls: 0.4053  decode.d3.loss_mask: 1.5300  decode.d3.loss_dice: 1.4645  decode.d4.loss_cls: 0.4246  decode.d4.loss_mask: 1.5046  decode.d4.loss_dice: 1.4690  decode.d5.loss_cls: 0.4670  decode.d5.loss_mask: 1.4406  decode.d5.loss_dice: 1.4109  decode.d6.loss_cls: 0.4344  decode.d6.loss_mask: 1.5140  decode.d6.loss_dice: 1.4611  decode.d7.loss_cls: 0.4510  decode.d7.loss_mask: 1.5266  decode.d7.loss_dice: 1.4858  decode.d8.loss_cls: 0.4793  decode.d8.loss_mask: 1.5124  decode.d8.loss_dice: 1.5194  mix_decode.loss_cls: 0.3141  mix_decode.loss_mask: 0.5927  mix_decode.loss_dice: 0.7864  mix_decode.d0.loss_cls: 0.4020  mix_decode.d0.loss_mask: 0.5696  mix_decode.d0.loss_dice: 0.8580  mix_decode.d1.loss_cls: 0.2809  mix_decode.d1.loss_mask: 0.6048  mix_decode.d1.loss_dice: 0.7801  mix_decode.d2.loss_cls: 0.2730  mix_decode.d2.loss_mask: 0.6373  mix_decode.d2.loss_dice: 0.8068  mix_decode.d3.loss_cls: 0.2825  mix_decode.d3.loss_mask: 0.6392  mix_decode.d3.loss_dice: 0.7669  mix_decode.d4.loss_cls: 0.3191  mix_decode.d4.loss_mask: 0.6111  mix_decode.d4.loss_dice: 0.7187  mix_decode.d5.loss_cls: 0.3601  mix_decode.d5.loss_mask: 0.5975  mix_decode.d5.loss_dice: 0.7297  mix_decode.d6.loss_cls: 0.3681  mix_decode.d6.loss_mask: 0.5760  mix_decode.d6.loss_dice: 0.7550  mix_decode.d7.loss_cls: 0.3188  mix_decode.d7.loss_mask: 0.6380  mix_decode.d7.loss_dice: 0.7995  mix_decode.d8.loss_cls: 0.3000  mix_decode.d8.loss_mask: 0.5911  mix_decode.d8.loss_dice: 0.7445
2025/03/29 01:52:18 - mmengine - INFO - Iter(train) [18100/20000]  base_lr: 1.2022e-05 lr: 1.2022e-05  eta: 0:51:48  time: 1.1339  data_time: 0.0232  memory: 10751  loss: 46.1481  decode.loss_cls: 0.3821  decode.loss_mask: 1.4942  decode.loss_dice: 1.2736  decode.d0.loss_cls: 0.4905  decode.d0.loss_mask: 1.5458  decode.d0.loss_dice: 1.3110  decode.d1.loss_cls: 0.3472  decode.d1.loss_mask: 1.5251  decode.d1.loss_dice: 1.3104  decode.d2.loss_cls: 0.3669  decode.d2.loss_mask: 1.5732  decode.d2.loss_dice: 1.3336  decode.d3.loss_cls: 0.3706  decode.d3.loss_mask: 1.5629  decode.d3.loss_dice: 1.3676  decode.d4.loss_cls: 0.3342  decode.d4.loss_mask: 1.5461  decode.d4.loss_dice: 1.3456  decode.d5.loss_cls: 0.3556  decode.d5.loss_mask: 1.5698  decode.d5.loss_dice: 1.3326  decode.d6.loss_cls: 0.3481  decode.d6.loss_mask: 1.4835  decode.d6.loss_dice: 1.2985  decode.d7.loss_cls: 0.3529  decode.d7.loss_mask: 1.5283  decode.d7.loss_dice: 1.3000  decode.d8.loss_cls: 0.3252  decode.d8.loss_mask: 1.5275  decode.d8.loss_dice: 1.3241  mix_decode.loss_cls: 0.2434  mix_decode.loss_mask: 0.4517  mix_decode.loss_dice: 0.6743  mix_decode.d0.loss_cls: 0.2806  mix_decode.d0.loss_mask: 0.4607  mix_decode.d0.loss_dice: 0.7668  mix_decode.d1.loss_cls: 0.2817  mix_decode.d1.loss_mask: 0.4319  mix_decode.d1.loss_dice: 0.6676  mix_decode.d2.loss_cls: 0.2452  mix_decode.d2.loss_mask: 0.4238  mix_decode.d2.loss_dice: 0.6587  mix_decode.d3.loss_cls: 0.2676  mix_decode.d3.loss_mask: 0.4356  mix_decode.d3.loss_dice: 0.6243  mix_decode.d4.loss_cls: 0.2849  mix_decode.d4.loss_mask: 0.4532  mix_decode.d4.loss_dice: 0.6487  mix_decode.d5.loss_cls: 0.2539  mix_decode.d5.loss_mask: 0.4618  mix_decode.d5.loss_dice: 0.6925  mix_decode.d6.loss_cls: 0.3012  mix_decode.d6.loss_mask: 0.4451  mix_decode.d6.loss_dice: 0.6597  mix_decode.d7.loss_cls: 0.2529  mix_decode.d7.loss_mask: 0.4792  mix_decode.d7.loss_dice: 0.7229  mix_decode.d8.loss_cls: 0.2463  mix_decode.d8.loss_mask: 0.4436  mix_decode.d8.loss_dice: 0.6614
2025/03/29 01:53:15 - mmengine - INFO - Iter(train) [18150/20000]  base_lr: 1.1737e-05 lr: 1.1737e-05  eta: 0:50:23  time: 1.1388  data_time: 0.0235  memory: 10745  loss: 46.8509  decode.loss_cls: 0.3767  decode.loss_mask: 1.2397  decode.loss_dice: 1.4080  decode.d0.loss_cls: 0.4933  decode.d0.loss_mask: 1.2933  decode.d0.loss_dice: 1.4519  decode.d1.loss_cls: 0.3917  decode.d1.loss_mask: 1.3204  decode.d1.loss_dice: 1.4504  decode.d2.loss_cls: 0.3419  decode.d2.loss_mask: 1.3375  decode.d2.loss_dice: 1.4961  decode.d3.loss_cls: 0.3883  decode.d3.loss_mask: 1.2667  decode.d3.loss_dice: 1.4497  decode.d4.loss_cls: 0.3209  decode.d4.loss_mask: 1.3363  decode.d4.loss_dice: 1.4969  decode.d5.loss_cls: 0.3628  decode.d5.loss_mask: 1.2957  decode.d5.loss_dice: 1.4473  decode.d6.loss_cls: 0.3606  decode.d6.loss_mask: 1.3282  decode.d6.loss_dice: 1.4446  decode.d7.loss_cls: 0.4133  decode.d7.loss_mask: 1.2472  decode.d7.loss_dice: 1.4134  decode.d8.loss_cls: 0.3469  decode.d8.loss_mask: 1.3273  decode.d8.loss_dice: 1.4650  mix_decode.loss_cls: 0.2099  mix_decode.loss_mask: 0.5654  mix_decode.loss_dice: 0.7575  mix_decode.d0.loss_cls: 0.2615  mix_decode.d0.loss_mask: 0.5267  mix_decode.d0.loss_dice: 0.7916  mix_decode.d1.loss_cls: 0.2233  mix_decode.d1.loss_mask: 0.5636  mix_decode.d1.loss_dice: 0.7734  mix_decode.d2.loss_cls: 0.2151  mix_decode.d2.loss_mask: 0.5714  mix_decode.d2.loss_dice: 0.7583  mix_decode.d3.loss_cls: 0.1904  mix_decode.d3.loss_mask: 0.5911  mix_decode.d3.loss_dice: 0.7772  mix_decode.d4.loss_cls: 0.2234  mix_decode.d4.loss_mask: 0.5587  mix_decode.d4.loss_dice: 0.7626  mix_decode.d5.loss_cls: 0.2075  mix_decode.d5.loss_mask: 0.5859  mix_decode.d5.loss_dice: 0.7519  mix_decode.d6.loss_cls: 0.2904  mix_decode.d6.loss_mask: 0.5475  mix_decode.d6.loss_dice: 0.7268  mix_decode.d7.loss_cls: 0.2374  mix_decode.d7.loss_mask: 0.5748  mix_decode.d7.loss_dice: 0.7548  mix_decode.d8.loss_cls: 0.1765  mix_decode.d8.loss_mask: 0.5921  mix_decode.d8.loss_dice: 0.7719
2025/03/29 01:54:12 - mmengine - INFO - Iter(train) [18200/20000]  base_lr: 1.1451e-05 lr: 1.1451e-05  eta: 0:48:59  time: 1.1384  data_time: 0.0237  memory: 10745  loss: 45.9384  decode.loss_cls: 0.3644  decode.loss_mask: 1.2707  decode.loss_dice: 1.3953  decode.d0.loss_cls: 0.5432  decode.d0.loss_mask: 1.2955  decode.d0.loss_dice: 1.4224  decode.d1.loss_cls: 0.3738  decode.d1.loss_mask: 1.3306  decode.d1.loss_dice: 1.4425  decode.d2.loss_cls: 0.3555  decode.d2.loss_mask: 1.3453  decode.d2.loss_dice: 1.4475  decode.d3.loss_cls: 0.3868  decode.d3.loss_mask: 1.3458  decode.d3.loss_dice: 1.4305  decode.d4.loss_cls: 0.3408  decode.d4.loss_mask: 1.3149  decode.d4.loss_dice: 1.4391  decode.d5.loss_cls: 0.3219  decode.d5.loss_mask: 1.3537  decode.d5.loss_dice: 1.4578  decode.d6.loss_cls: 0.4338  decode.d6.loss_mask: 1.3002  decode.d6.loss_dice: 1.3768  decode.d7.loss_cls: 0.3471  decode.d7.loss_mask: 1.3221  decode.d7.loss_dice: 1.4463  decode.d8.loss_cls: 0.3610  decode.d8.loss_mask: 1.3263  decode.d8.loss_dice: 1.4408  mix_decode.loss_cls: 0.2585  mix_decode.loss_mask: 0.4608  mix_decode.loss_dice: 0.7337  mix_decode.d0.loss_cls: 0.2329  mix_decode.d0.loss_mask: 0.4723  mix_decode.d0.loss_dice: 0.8280  mix_decode.d1.loss_cls: 0.3481  mix_decode.d1.loss_mask: 0.4360  mix_decode.d1.loss_dice: 0.6575  mix_decode.d2.loss_cls: 0.2943  mix_decode.d2.loss_mask: 0.4422  mix_decode.d2.loss_dice: 0.6836  mix_decode.d3.loss_cls: 0.3327  mix_decode.d3.loss_mask: 0.4403  mix_decode.d3.loss_dice: 0.6551  mix_decode.d4.loss_cls: 0.3461  mix_decode.d4.loss_mask: 0.4441  mix_decode.d4.loss_dice: 0.6962  mix_decode.d5.loss_cls: 0.3217  mix_decode.d5.loss_mask: 0.4555  mix_decode.d5.loss_dice: 0.6914  mix_decode.d6.loss_cls: 0.3121  mix_decode.d6.loss_mask: 0.4531  mix_decode.d6.loss_dice: 0.7085  mix_decode.d7.loss_cls: 0.2910  mix_decode.d7.loss_mask: 0.4440  mix_decode.d7.loss_dice: 0.7123  mix_decode.d8.loss_cls: 0.3016  mix_decode.d8.loss_mask: 0.4466  mix_decode.d8.loss_dice: 0.7057
2025/03/29 01:55:09 - mmengine - INFO - Iter(train) [18250/20000]  base_lr: 1.1164e-05 lr: 1.1164e-05  eta: 0:47:35  time: 1.1324  data_time: 0.0234  memory: 10750  loss: 47.3310  decode.loss_cls: 0.4031  decode.loss_mask: 1.2585  decode.loss_dice: 1.5770  decode.d0.loss_cls: 0.4776  decode.d0.loss_mask: 1.2118  decode.d0.loss_dice: 1.6098  decode.d1.loss_cls: 0.4602  decode.d1.loss_mask: 1.2263  decode.d1.loss_dice: 1.5445  decode.d2.loss_cls: 0.4149  decode.d2.loss_mask: 1.2320  decode.d2.loss_dice: 1.5546  decode.d3.loss_cls: 0.4089  decode.d3.loss_mask: 1.2165  decode.d3.loss_dice: 1.5320  decode.d4.loss_cls: 0.3536  decode.d4.loss_mask: 1.2893  decode.d4.loss_dice: 1.5898  decode.d5.loss_cls: 0.4339  decode.d5.loss_mask: 1.2354  decode.d5.loss_dice: 1.5930  decode.d6.loss_cls: 0.3360  decode.d6.loss_mask: 1.2756  decode.d6.loss_dice: 1.6281  decode.d7.loss_cls: 0.4132  decode.d7.loss_mask: 1.2226  decode.d7.loss_dice: 1.5489  decode.d8.loss_cls: 0.3529  decode.d8.loss_mask: 1.2757  decode.d8.loss_dice: 1.6093  mix_decode.loss_cls: 0.2479  mix_decode.loss_mask: 0.4927  mix_decode.loss_dice: 0.7096  mix_decode.d0.loss_cls: 0.2658  mix_decode.d0.loss_mask: 0.5329  mix_decode.d0.loss_dice: 0.7641  mix_decode.d1.loss_cls: 0.2629  mix_decode.d1.loss_mask: 0.5200  mix_decode.d1.loss_dice: 0.7308  mix_decode.d2.loss_cls: 0.2526  mix_decode.d2.loss_mask: 0.5267  mix_decode.d2.loss_dice: 0.7171  mix_decode.d3.loss_cls: 0.2115  mix_decode.d3.loss_mask: 0.5559  mix_decode.d3.loss_dice: 0.7203  mix_decode.d4.loss_cls: 0.2424  mix_decode.d4.loss_mask: 0.5236  mix_decode.d4.loss_dice: 0.7216  mix_decode.d5.loss_cls: 0.2725  mix_decode.d5.loss_mask: 0.5336  mix_decode.d5.loss_dice: 0.7248  mix_decode.d6.loss_cls: 0.2600  mix_decode.d6.loss_mask: 0.5381  mix_decode.d6.loss_dice: 0.7060  mix_decode.d7.loss_cls: 0.2494  mix_decode.d7.loss_mask: 0.5232  mix_decode.d7.loss_dice: 0.7275  mix_decode.d8.loss_cls: 0.2784  mix_decode.d8.loss_mask: 0.4964  mix_decode.d8.loss_dice: 0.7380
2025/03/29 01:56:06 - mmengine - INFO - Iter(train) [18300/20000]  base_lr: 1.0877e-05 lr: 1.0877e-05  eta: 0:46:11  time: 1.1385  data_time: 0.0238  memory: 10769  loss: 42.4288  decode.loss_cls: 0.3151  decode.loss_mask: 1.2016  decode.loss_dice: 1.2120  decode.d0.loss_cls: 0.5130  decode.d0.loss_mask: 1.1620  decode.d0.loss_dice: 1.2201  decode.d1.loss_cls: 0.3511  decode.d1.loss_mask: 1.1596  decode.d1.loss_dice: 1.2124  decode.d2.loss_cls: 0.3027  decode.d2.loss_mask: 1.1885  decode.d2.loss_dice: 1.2240  decode.d3.loss_cls: 0.3429  decode.d3.loss_mask: 1.1882  decode.d3.loss_dice: 1.1843  decode.d4.loss_cls: 0.4214  decode.d4.loss_mask: 1.1352  decode.d4.loss_dice: 1.1881  decode.d5.loss_cls: 0.3802  decode.d5.loss_mask: 1.1620  decode.d5.loss_dice: 1.2100  decode.d6.loss_cls: 0.3506  decode.d6.loss_mask: 1.1861  decode.d6.loss_dice: 1.1999  decode.d7.loss_cls: 0.3430  decode.d7.loss_mask: 1.1552  decode.d7.loss_dice: 1.1767  decode.d8.loss_cls: 0.3459  decode.d8.loss_mask: 1.1665  decode.d8.loss_dice: 1.1950  mix_decode.loss_cls: 0.2819  mix_decode.loss_mask: 0.4785  mix_decode.loss_dice: 0.7083  mix_decode.d0.loss_cls: 0.3023  mix_decode.d0.loss_mask: 0.4602  mix_decode.d0.loss_dice: 0.8163  mix_decode.d1.loss_cls: 0.2737  mix_decode.d1.loss_mask: 0.4694  mix_decode.d1.loss_dice: 0.7625  mix_decode.d2.loss_cls: 0.2341  mix_decode.d2.loss_mask: 0.4537  mix_decode.d2.loss_dice: 0.7371  mix_decode.d3.loss_cls: 0.2703  mix_decode.d3.loss_mask: 0.4868  mix_decode.d3.loss_dice: 0.7421  mix_decode.d4.loss_cls: 0.2922  mix_decode.d4.loss_mask: 0.4634  mix_decode.d4.loss_dice: 0.7505  mix_decode.d5.loss_cls: 0.2671  mix_decode.d5.loss_mask: 0.4700  mix_decode.d5.loss_dice: 0.7675  mix_decode.d6.loss_cls: 0.2967  mix_decode.d6.loss_mask: 0.4765  mix_decode.d6.loss_dice: 0.7522  mix_decode.d7.loss_cls: 0.2835  mix_decode.d7.loss_mask: 0.4747  mix_decode.d7.loss_dice: 0.7528  mix_decode.d8.loss_cls: 0.2849  mix_decode.d8.loss_mask: 0.4912  mix_decode.d8.loss_dice: 0.7353
2025/03/29 01:57:02 - mmengine - INFO - Iter(train) [18350/20000]  base_lr: 1.0588e-05 lr: 1.0588e-05  eta: 0:44:47  time: 1.1365  data_time: 0.0234  memory: 10767  loss: 51.5758  decode.loss_cls: 0.4064  decode.loss_mask: 1.4262  decode.loss_dice: 1.4112  decode.d0.loss_cls: 0.6137  decode.d0.loss_mask: 1.4011  decode.d0.loss_dice: 1.3920  decode.d1.loss_cls: 0.4697  decode.d1.loss_mask: 1.3532  decode.d1.loss_dice: 1.3956  decode.d2.loss_cls: 0.4364  decode.d2.loss_mask: 1.3786  decode.d2.loss_dice: 1.4100  decode.d3.loss_cls: 0.4206  decode.d3.loss_mask: 1.3633  decode.d3.loss_dice: 1.3554  decode.d4.loss_cls: 0.3370  decode.d4.loss_mask: 1.3970  decode.d4.loss_dice: 1.3698  decode.d5.loss_cls: 0.3397  decode.d5.loss_mask: 1.3815  decode.d5.loss_dice: 1.3761  decode.d6.loss_cls: 0.4229  decode.d6.loss_mask: 1.3797  decode.d6.loss_dice: 1.4661  decode.d7.loss_cls: 0.4510  decode.d7.loss_mask: 1.3761  decode.d7.loss_dice: 1.3257  decode.d8.loss_cls: 0.4379  decode.d8.loss_mask: 1.3863  decode.d8.loss_dice: 1.3534  mix_decode.loss_cls: 0.4349  mix_decode.loss_mask: 0.6455  mix_decode.loss_dice: 0.9193  mix_decode.d0.loss_cls: 0.4069  mix_decode.d0.loss_mask: 0.6007  mix_decode.d0.loss_dice: 0.9830  mix_decode.d1.loss_cls: 0.4395  mix_decode.d1.loss_mask: 0.6132  mix_decode.d1.loss_dice: 0.9245  mix_decode.d2.loss_cls: 0.3881  mix_decode.d2.loss_mask: 0.5980  mix_decode.d2.loss_dice: 0.8739  mix_decode.d3.loss_cls: 0.4110  mix_decode.d3.loss_mask: 0.6188  mix_decode.d3.loss_dice: 0.8731  mix_decode.d4.loss_cls: 0.4523  mix_decode.d4.loss_mask: 0.6247  mix_decode.d4.loss_dice: 0.9252  mix_decode.d5.loss_cls: 0.4346  mix_decode.d5.loss_mask: 0.6165  mix_decode.d5.loss_dice: 0.9116  mix_decode.d6.loss_cls: 0.4434  mix_decode.d6.loss_mask: 0.6119  mix_decode.d6.loss_dice: 0.9064  mix_decode.d7.loss_cls: 0.4200  mix_decode.d7.loss_mask: 0.6170  mix_decode.d7.loss_dice: 0.9034  mix_decode.d8.loss_cls: 0.4071  mix_decode.d8.loss_mask: 0.6421  mix_decode.d8.loss_dice: 0.8954
2025/03/29 01:57:59 - mmengine - INFO - Iter(train) [18400/20000]  base_lr: 1.0299e-05 lr: 1.0299e-05  eta: 0:43:24  time: 1.1378  data_time: 0.0237  memory: 10749  loss: 48.7601  decode.loss_cls: 0.3393  decode.loss_mask: 1.4500  decode.loss_dice: 1.4875  decode.d0.loss_cls: 0.4723  decode.d0.loss_mask: 1.4100  decode.d0.loss_dice: 1.5091  decode.d1.loss_cls: 0.3651  decode.d1.loss_mask: 1.3922  decode.d1.loss_dice: 1.4688  decode.d2.loss_cls: 0.3899  decode.d2.loss_mask: 1.3613  decode.d2.loss_dice: 1.4446  decode.d3.loss_cls: 0.4533  decode.d3.loss_mask: 1.3601  decode.d3.loss_dice: 1.4304  decode.d4.loss_cls: 0.3613  decode.d4.loss_mask: 1.3376  decode.d4.loss_dice: 1.4369  decode.d5.loss_cls: 0.3945  decode.d5.loss_mask: 1.3827  decode.d5.loss_dice: 1.4365  decode.d6.loss_cls: 0.4132  decode.d6.loss_mask: 1.3720  decode.d6.loss_dice: 1.4515  decode.d7.loss_cls: 0.3598  decode.d7.loss_mask: 1.3979  decode.d7.loss_dice: 1.4946  decode.d8.loss_cls: 0.3211  decode.d8.loss_mask: 1.4652  decode.d8.loss_dice: 1.4826  mix_decode.loss_cls: 0.2846  mix_decode.loss_mask: 0.5300  mix_decode.loss_dice: 0.7946  mix_decode.d0.loss_cls: 0.2744  mix_decode.d0.loss_mask: 0.5458  mix_decode.d0.loss_dice: 0.8990  mix_decode.d1.loss_cls: 0.2930  mix_decode.d1.loss_mask: 0.5270  mix_decode.d1.loss_dice: 0.8470  mix_decode.d2.loss_cls: 0.2942  mix_decode.d2.loss_mask: 0.5084  mix_decode.d2.loss_dice: 0.7864  mix_decode.d3.loss_cls: 0.2984  mix_decode.d3.loss_mask: 0.5188  mix_decode.d3.loss_dice: 0.8071  mix_decode.d4.loss_cls: 0.3690  mix_decode.d4.loss_mask: 0.5114  mix_decode.d4.loss_dice: 0.7829  mix_decode.d5.loss_cls: 0.2638  mix_decode.d5.loss_mask: 0.5161  mix_decode.d5.loss_dice: 0.8040  mix_decode.d6.loss_cls: 0.3539  mix_decode.d6.loss_mask: 0.4895  mix_decode.d6.loss_dice: 0.8029  mix_decode.d7.loss_cls: 0.2981  mix_decode.d7.loss_mask: 0.5215  mix_decode.d7.loss_dice: 0.8073  mix_decode.d8.loss_cls: 0.2820  mix_decode.d8.loss_mask: 0.5130  mix_decode.d8.loss_dice: 0.7945
2025/03/29 01:58:56 - mmengine - INFO - Iter(train) [18450/20000]  base_lr: 1.0009e-05 lr: 1.0009e-05  eta: 0:42:00  time: 1.1397  data_time: 0.0230  memory: 10757  loss: 45.6469  decode.loss_cls: 0.5063  decode.loss_mask: 1.2865  decode.loss_dice: 1.4223  decode.d0.loss_cls: 0.5695  decode.d0.loss_mask: 1.3188  decode.d0.loss_dice: 1.4600  decode.d1.loss_cls: 0.5063  decode.d1.loss_mask: 1.2338  decode.d1.loss_dice: 1.4047  decode.d2.loss_cls: 0.4689  decode.d2.loss_mask: 1.2928  decode.d2.loss_dice: 1.3938  decode.d3.loss_cls: 0.5138  decode.d3.loss_mask: 1.2586  decode.d3.loss_dice: 1.3798  decode.d4.loss_cls: 0.5063  decode.d4.loss_mask: 1.2755  decode.d4.loss_dice: 1.4437  decode.d5.loss_cls: 0.4961  decode.d5.loss_mask: 1.2750  decode.d5.loss_dice: 1.4353  decode.d6.loss_cls: 0.4641  decode.d6.loss_mask: 1.2810  decode.d6.loss_dice: 1.4030  decode.d7.loss_cls: 0.4998  decode.d7.loss_mask: 1.2577  decode.d7.loss_dice: 1.4163  decode.d8.loss_cls: 0.5028  decode.d8.loss_mask: 1.2918  decode.d8.loss_dice: 1.3802  mix_decode.loss_cls: 0.1610  mix_decode.loss_mask: 0.4924  mix_decode.loss_dice: 0.6991  mix_decode.d0.loss_cls: 0.2248  mix_decode.d0.loss_mask: 0.4891  mix_decode.d0.loss_dice: 0.7428  mix_decode.d1.loss_cls: 0.1416  mix_decode.d1.loss_mask: 0.4755  mix_decode.d1.loss_dice: 0.7053  mix_decode.d2.loss_cls: 0.1886  mix_decode.d2.loss_mask: 0.4928  mix_decode.d2.loss_dice: 0.6819  mix_decode.d3.loss_cls: 0.2146  mix_decode.d3.loss_mask: 0.4932  mix_decode.d3.loss_dice: 0.6895  mix_decode.d4.loss_cls: 0.1535  mix_decode.d4.loss_mask: 0.5077  mix_decode.d4.loss_dice: 0.7123  mix_decode.d5.loss_cls: 0.1905  mix_decode.d5.loss_mask: 0.4976  mix_decode.d5.loss_dice: 0.6751  mix_decode.d6.loss_cls: 0.1707  mix_decode.d6.loss_mask: 0.4845  mix_decode.d6.loss_dice: 0.7057  mix_decode.d7.loss_cls: 0.1700  mix_decode.d7.loss_mask: 0.4955  mix_decode.d7.loss_dice: 0.6960  mix_decode.d8.loss_cls: 0.1786  mix_decode.d8.loss_mask: 0.4845  mix_decode.d8.loss_dice: 0.6877
2025/03/29 01:59:53 - mmengine - INFO - Iter(train) [18500/20000]  base_lr: 9.7180e-06 lr: 9.7180e-06  eta: 0:40:37  time: 1.1343  data_time: 0.0233  memory: 10767  loss: 46.9716  decode.loss_cls: 0.3188  decode.loss_mask: 1.1882  decode.loss_dice: 1.5101  decode.d0.loss_cls: 0.4515  decode.d0.loss_mask: 1.2453  decode.d0.loss_dice: 1.5842  decode.d1.loss_cls: 0.2947  decode.d1.loss_mask: 1.2003  decode.d1.loss_dice: 1.5381  decode.d2.loss_cls: 0.3421  decode.d2.loss_mask: 1.1869  decode.d2.loss_dice: 1.5318  decode.d3.loss_cls: 0.3023  decode.d3.loss_mask: 1.2709  decode.d3.loss_dice: 1.5625  decode.d4.loss_cls: 0.3987  decode.d4.loss_mask: 1.1969  decode.d4.loss_dice: 1.5648  decode.d5.loss_cls: 0.3157  decode.d5.loss_mask: 1.1821  decode.d5.loss_dice: 1.5543  decode.d6.loss_cls: 0.2715  decode.d6.loss_mask: 1.2593  decode.d6.loss_dice: 1.5747  decode.d7.loss_cls: 0.3714  decode.d7.loss_mask: 1.1888  decode.d7.loss_dice: 1.5190  decode.d8.loss_cls: 0.3049  decode.d8.loss_mask: 1.1790  decode.d8.loss_dice: 1.5143  mix_decode.loss_cls: 0.2966  mix_decode.loss_mask: 0.5093  mix_decode.loss_dice: 0.7679  mix_decode.d0.loss_cls: 0.3312  mix_decode.d0.loss_mask: 0.4929  mix_decode.d0.loss_dice: 0.8561  mix_decode.d1.loss_cls: 0.3353  mix_decode.d1.loss_mask: 0.5067  mix_decode.d1.loss_dice: 0.7704  mix_decode.d2.loss_cls: 0.3148  mix_decode.d2.loss_mask: 0.5152  mix_decode.d2.loss_dice: 0.7512  mix_decode.d3.loss_cls: 0.3040  mix_decode.d3.loss_mask: 0.5064  mix_decode.d3.loss_dice: 0.7644  mix_decode.d4.loss_cls: 0.3059  mix_decode.d4.loss_mask: 0.5116  mix_decode.d4.loss_dice: 0.7504  mix_decode.d5.loss_cls: 0.3273  mix_decode.d5.loss_mask: 0.5021  mix_decode.d5.loss_dice: 0.7626  mix_decode.d6.loss_cls: 0.3230  mix_decode.d6.loss_mask: 0.5118  mix_decode.d6.loss_dice: 0.7803  mix_decode.d7.loss_cls: 0.3152  mix_decode.d7.loss_mask: 0.5372  mix_decode.d7.loss_dice: 0.7830  mix_decode.d8.loss_cls: 0.3375  mix_decode.d8.loss_mask: 0.5119  mix_decode.d8.loss_dice: 0.7663
2025/03/29 02:00:50 - mmengine - INFO - Iter(train) [18550/20000]  base_lr: 9.4259e-06 lr: 9.4259e-06  eta: 0:39:14  time: 1.1331  data_time: 0.0236  memory: 10768  loss: 51.8263  decode.loss_cls: 0.3297  decode.loss_mask: 1.8730  decode.loss_dice: 1.4367  decode.d0.loss_cls: 0.5936  decode.d0.loss_mask: 1.9104  decode.d0.loss_dice: 1.3670  decode.d1.loss_cls: 0.4695  decode.d1.loss_mask: 1.7802  decode.d1.loss_dice: 1.3985  decode.d2.loss_cls: 0.3887  decode.d2.loss_mask: 1.8504  decode.d2.loss_dice: 1.4011  decode.d3.loss_cls: 0.3300  decode.d3.loss_mask: 1.9243  decode.d3.loss_dice: 1.4256  decode.d4.loss_cls: 0.3261  decode.d4.loss_mask: 1.8541  decode.d4.loss_dice: 1.4143  decode.d5.loss_cls: 0.3505  decode.d5.loss_mask: 1.8265  decode.d5.loss_dice: 1.3888  decode.d6.loss_cls: 0.3847  decode.d6.loss_mask: 1.8539  decode.d6.loss_dice: 1.4046  decode.d7.loss_cls: 0.3282  decode.d7.loss_mask: 1.8298  decode.d7.loss_dice: 1.3912  decode.d8.loss_cls: 0.3060  decode.d8.loss_mask: 1.8731  decode.d8.loss_dice: 1.4246  mix_decode.loss_cls: 0.1453  mix_decode.loss_mask: 0.5983  mix_decode.loss_dice: 0.7741  mix_decode.d0.loss_cls: 0.1981  mix_decode.d0.loss_mask: 0.5945  mix_decode.d0.loss_dice: 0.8100  mix_decode.d1.loss_cls: 0.2106  mix_decode.d1.loss_mask: 0.5501  mix_decode.d1.loss_dice: 0.7552  mix_decode.d2.loss_cls: 0.1941  mix_decode.d2.loss_mask: 0.5853  mix_decode.d2.loss_dice: 0.7613  mix_decode.d3.loss_cls: 0.1854  mix_decode.d3.loss_mask: 0.5557  mix_decode.d3.loss_dice: 0.7394  mix_decode.d4.loss_cls: 0.1858  mix_decode.d4.loss_mask: 0.5758  mix_decode.d4.loss_dice: 0.7728  mix_decode.d5.loss_cls: 0.1541  mix_decode.d5.loss_mask: 0.6020  mix_decode.d5.loss_dice: 0.7941  mix_decode.d6.loss_cls: 0.1882  mix_decode.d6.loss_mask: 0.5909  mix_decode.d6.loss_dice: 0.7877  mix_decode.d7.loss_cls: 0.1719  mix_decode.d7.loss_mask: 0.5961  mix_decode.d7.loss_dice: 0.7840  mix_decode.d8.loss_cls: 0.1703  mix_decode.d8.loss_mask: 0.5811  mix_decode.d8.loss_dice: 0.7790
2025/03/29 02:01:47 - mmengine - INFO - Iter(train) [18600/20000]  base_lr: 9.1329e-06 lr: 9.1329e-06  eta: 0:37:51  time: 1.1392  data_time: 0.0235  memory: 10773  loss: 46.6938  decode.loss_cls: 0.5058  decode.loss_mask: 1.3436  decode.loss_dice: 1.3900  decode.d0.loss_cls: 0.6918  decode.d0.loss_mask: 1.3131  decode.d0.loss_dice: 1.4002  decode.d1.loss_cls: 0.6088  decode.d1.loss_mask: 1.3131  decode.d1.loss_dice: 1.3794  decode.d2.loss_cls: 0.5955  decode.d2.loss_mask: 1.2907  decode.d2.loss_dice: 1.3247  decode.d3.loss_cls: 0.5769  decode.d3.loss_mask: 1.3505  decode.d3.loss_dice: 1.3792  decode.d4.loss_cls: 0.5488  decode.d4.loss_mask: 1.3581  decode.d4.loss_dice: 1.4470  decode.d5.loss_cls: 0.5321  decode.d5.loss_mask: 1.3724  decode.d5.loss_dice: 1.4387  decode.d6.loss_cls: 0.5502  decode.d6.loss_mask: 1.3801  decode.d6.loss_dice: 1.3814  decode.d7.loss_cls: 0.5372  decode.d7.loss_mask: 1.3336  decode.d7.loss_dice: 1.4239  decode.d8.loss_cls: 0.5266  decode.d8.loss_mask: 1.3938  decode.d8.loss_dice: 1.4641  mix_decode.loss_cls: 0.2693  mix_decode.loss_mask: 0.4240  mix_decode.loss_dice: 0.6402  mix_decode.d0.loss_cls: 0.2600  mix_decode.d0.loss_mask: 0.4262  mix_decode.d0.loss_dice: 0.7627  mix_decode.d1.loss_cls: 0.2778  mix_decode.d1.loss_mask: 0.4302  mix_decode.d1.loss_dice: 0.6552  mix_decode.d2.loss_cls: 0.2839  mix_decode.d2.loss_mask: 0.4625  mix_decode.d2.loss_dice: 0.6661  mix_decode.d3.loss_cls: 0.2307  mix_decode.d3.loss_mask: 0.4410  mix_decode.d3.loss_dice: 0.6540  mix_decode.d4.loss_cls: 0.2553  mix_decode.d4.loss_mask: 0.4132  mix_decode.d4.loss_dice: 0.6409  mix_decode.d5.loss_cls: 0.2609  mix_decode.d5.loss_mask: 0.4335  mix_decode.d5.loss_dice: 0.6435  mix_decode.d6.loss_cls: 0.2319  mix_decode.d6.loss_mask: 0.4374  mix_decode.d6.loss_dice: 0.6576  mix_decode.d7.loss_cls: 0.2491  mix_decode.d7.loss_mask: 0.4388  mix_decode.d7.loss_dice: 0.6567  mix_decode.d8.loss_cls: 0.2448  mix_decode.d8.loss_mask: 0.4492  mix_decode.d8.loss_dice: 0.6459
2025/03/29 02:02:44 - mmengine - INFO - Iter(train) [18650/20000]  base_lr: 8.8388e-06 lr: 8.8388e-06  eta: 0:36:28  time: 1.1392  data_time: 0.0234  memory: 10744  loss: 56.6879  decode.loss_cls: 0.5451  decode.loss_mask: 1.8673  decode.loss_dice: 1.6316  decode.d0.loss_cls: 0.7387  decode.d0.loss_mask: 1.8817  decode.d0.loss_dice: 1.6696  decode.d1.loss_cls: 0.5999  decode.d1.loss_mask: 1.8151  decode.d1.loss_dice: 1.6170  decode.d2.loss_cls: 0.5019  decode.d2.loss_mask: 1.8669  decode.d2.loss_dice: 1.6332  decode.d3.loss_cls: 0.6408  decode.d3.loss_mask: 1.8508  decode.d3.loss_dice: 1.5940  decode.d4.loss_cls: 0.5605  decode.d4.loss_mask: 1.8259  decode.d4.loss_dice: 1.6275  decode.d5.loss_cls: 0.5747  decode.d5.loss_mask: 1.7505  decode.d5.loss_dice: 1.5354  decode.d6.loss_cls: 0.6664  decode.d6.loss_mask: 1.8977  decode.d6.loss_dice: 1.5520  decode.d7.loss_cls: 0.5283  decode.d7.loss_mask: 1.8864  decode.d7.loss_dice: 1.5831  decode.d8.loss_cls: 0.5642  decode.d8.loss_mask: 1.9020  decode.d8.loss_dice: 1.6281  mix_decode.loss_cls: 0.2665  mix_decode.loss_mask: 0.5803  mix_decode.loss_dice: 0.7812  mix_decode.d0.loss_cls: 0.3071  mix_decode.d0.loss_mask: 0.5865  mix_decode.d0.loss_dice: 0.7909  mix_decode.d1.loss_cls: 0.2677  mix_decode.d1.loss_mask: 0.5832  mix_decode.d1.loss_dice: 0.7657  mix_decode.d2.loss_cls: 0.2740  mix_decode.d2.loss_mask: 0.5708  mix_decode.d2.loss_dice: 0.7364  mix_decode.d3.loss_cls: 0.2420  mix_decode.d3.loss_mask: 0.5928  mix_decode.d3.loss_dice: 0.7511  mix_decode.d4.loss_cls: 0.3317  mix_decode.d4.loss_mask: 0.5787  mix_decode.d4.loss_dice: 0.7330  mix_decode.d5.loss_cls: 0.2879  mix_decode.d5.loss_mask: 0.5771  mix_decode.d5.loss_dice: 0.7461  mix_decode.d6.loss_cls: 0.2865  mix_decode.d6.loss_mask: 0.5722  mix_decode.d6.loss_dice: 0.7473  mix_decode.d7.loss_cls: 0.2544  mix_decode.d7.loss_mask: 0.5762  mix_decode.d7.loss_dice: 0.7540  mix_decode.d8.loss_cls: 0.2752  mix_decode.d8.loss_mask: 0.5865  mix_decode.d8.loss_dice: 0.7485
2025/03/29 02:03:41 - mmengine - INFO - Iter(train) [18700/20000]  base_lr: 8.5436e-06 lr: 8.5436e-06  eta: 0:35:05  time: 1.1347  data_time: 0.0234  memory: 10761  loss: 48.4259  decode.loss_cls: 0.3142  decode.loss_mask: 1.4691  decode.loss_dice: 1.4200  decode.d0.loss_cls: 0.4163  decode.d0.loss_mask: 1.5145  decode.d0.loss_dice: 1.4540  decode.d1.loss_cls: 0.3128  decode.d1.loss_mask: 1.5412  decode.d1.loss_dice: 1.4747  decode.d2.loss_cls: 0.3010  decode.d2.loss_mask: 1.5253  decode.d2.loss_dice: 1.5049  decode.d3.loss_cls: 0.2777  decode.d3.loss_mask: 1.5168  decode.d3.loss_dice: 1.4462  decode.d4.loss_cls: 0.3315  decode.d4.loss_mask: 1.4721  decode.d4.loss_dice: 1.4392  decode.d5.loss_cls: 0.3158  decode.d5.loss_mask: 1.4689  decode.d5.loss_dice: 1.3839  decode.d6.loss_cls: 0.2978  decode.d6.loss_mask: 1.5310  decode.d6.loss_dice: 1.4444  decode.d7.loss_cls: 0.2911  decode.d7.loss_mask: 1.5108  decode.d7.loss_dice: 1.4580  decode.d8.loss_cls: 0.2753  decode.d8.loss_mask: 1.5102  decode.d8.loss_dice: 1.4443  mix_decode.loss_cls: 0.2275  mix_decode.loss_mask: 0.5470  mix_decode.loss_dice: 0.7808  mix_decode.d0.loss_cls: 0.2944  mix_decode.d0.loss_mask: 0.5220  mix_decode.d0.loss_dice: 0.7996  mix_decode.d1.loss_cls: 0.2715  mix_decode.d1.loss_mask: 0.5329  mix_decode.d1.loss_dice: 0.7911  mix_decode.d2.loss_cls: 0.2560  mix_decode.d2.loss_mask: 0.5346  mix_decode.d2.loss_dice: 0.7684  mix_decode.d3.loss_cls: 0.2559  mix_decode.d3.loss_mask: 0.5400  mix_decode.d3.loss_dice: 0.7416  mix_decode.d4.loss_cls: 0.2486  mix_decode.d4.loss_mask: 0.5752  mix_decode.d4.loss_dice: 0.7840  mix_decode.d5.loss_cls: 0.2490  mix_decode.d5.loss_mask: 0.5337  mix_decode.d5.loss_dice: 0.7856  mix_decode.d6.loss_cls: 0.2612  mix_decode.d6.loss_mask: 0.5397  mix_decode.d6.loss_dice: 0.7627  mix_decode.d7.loss_cls: 0.2248  mix_decode.d7.loss_mask: 0.5549  mix_decode.d7.loss_dice: 0.7915  mix_decode.d8.loss_cls: 0.2381  mix_decode.d8.loss_mask: 0.5536  mix_decode.d8.loss_dice: 0.7972
2025/03/29 02:04:38 - mmengine - INFO - Iter(train) [18750/20000]  base_lr: 8.2473e-06 lr: 8.2473e-06  eta: 0:33:43  time: 1.1344  data_time: 0.0229  memory: 10754  loss: 53.1558  decode.loss_cls: 0.3933  decode.loss_mask: 1.5983  decode.loss_dice: 1.6805  decode.d0.loss_cls: 0.4422  decode.d0.loss_mask: 1.5945  decode.d0.loss_dice: 1.7619  decode.d1.loss_cls: 0.4277  decode.d1.loss_mask: 1.6078  decode.d1.loss_dice: 1.6955  decode.d2.loss_cls: 0.4771  decode.d2.loss_mask: 1.5933  decode.d2.loss_dice: 1.6761  decode.d3.loss_cls: 0.4795  decode.d3.loss_mask: 1.5927  decode.d3.loss_dice: 1.6955  decode.d4.loss_cls: 0.4305  decode.d4.loss_mask: 1.5773  decode.d4.loss_dice: 1.6891  decode.d5.loss_cls: 0.4086  decode.d5.loss_mask: 1.6100  decode.d5.loss_dice: 1.7000  decode.d6.loss_cls: 0.4252  decode.d6.loss_mask: 1.5774  decode.d6.loss_dice: 1.6780  decode.d7.loss_cls: 0.4048  decode.d7.loss_mask: 1.5861  decode.d7.loss_dice: 1.6791  decode.d8.loss_cls: 0.4276  decode.d8.loss_mask: 1.5521  decode.d8.loss_dice: 1.6744  mix_decode.loss_cls: 0.2915  mix_decode.loss_mask: 0.5564  mix_decode.loss_dice: 0.7527  mix_decode.d0.loss_cls: 0.2900  mix_decode.d0.loss_mask: 0.5300  mix_decode.d0.loss_dice: 0.8095  mix_decode.d1.loss_cls: 0.2903  mix_decode.d1.loss_mask: 0.5155  mix_decode.d1.loss_dice: 0.7634  mix_decode.d2.loss_cls: 0.2715  mix_decode.d2.loss_mask: 0.5321  mix_decode.d2.loss_dice: 0.7531  mix_decode.d3.loss_cls: 0.3025  mix_decode.d3.loss_mask: 0.5235  mix_decode.d3.loss_dice: 0.7535  mix_decode.d4.loss_cls: 0.3187  mix_decode.d4.loss_mask: 0.5477  mix_decode.d4.loss_dice: 0.7533  mix_decode.d5.loss_cls: 0.3258  mix_decode.d5.loss_mask: 0.5270  mix_decode.d5.loss_dice: 0.7562  mix_decode.d6.loss_cls: 0.3093  mix_decode.d6.loss_mask: 0.5307  mix_decode.d6.loss_dice: 0.7649  mix_decode.d7.loss_cls: 0.3200  mix_decode.d7.loss_mask: 0.5348  mix_decode.d7.loss_dice: 0.7855  mix_decode.d8.loss_cls: 0.2832  mix_decode.d8.loss_mask: 0.5572  mix_decode.d8.loss_dice: 0.7698
2025/03/29 02:05:35 - mmengine - INFO - Iter(train) [18800/20000]  base_lr: 7.9498e-06 lr: 7.9498e-06  eta: 0:32:20  time: 1.1361  data_time: 0.0231  memory: 10769  loss: 53.6324  decode.loss_cls: 0.4237  decode.loss_mask: 1.6327  decode.loss_dice: 1.5166  decode.d0.loss_cls: 0.5521  decode.d0.loss_mask: 1.6760  decode.d0.loss_dice: 1.5698  decode.d1.loss_cls: 0.4994  decode.d1.loss_mask: 1.7045  decode.d1.loss_dice: 1.5237  decode.d2.loss_cls: 0.4820  decode.d2.loss_mask: 1.6643  decode.d2.loss_dice: 1.5091  decode.d3.loss_cls: 0.4541  decode.d3.loss_mask: 1.6325  decode.d3.loss_dice: 1.4721  decode.d4.loss_cls: 0.3690  decode.d4.loss_mask: 1.7233  decode.d4.loss_dice: 1.5662  decode.d5.loss_cls: 0.4798  decode.d5.loss_mask: 1.6611  decode.d5.loss_dice: 1.5265  decode.d6.loss_cls: 0.4700  decode.d6.loss_mask: 1.6851  decode.d6.loss_dice: 1.5218  decode.d7.loss_cls: 0.4016  decode.d7.loss_mask: 1.6720  decode.d7.loss_dice: 1.5472  decode.d8.loss_cls: 0.4247  decode.d8.loss_mask: 1.6798  decode.d8.loss_dice: 1.5422  mix_decode.loss_cls: 0.2786  mix_decode.loss_mask: 0.5867  mix_decode.loss_dice: 0.8739  mix_decode.d0.loss_cls: 0.2278  mix_decode.d0.loss_mask: 0.6014  mix_decode.d0.loss_dice: 0.9228  mix_decode.d1.loss_cls: 0.2394  mix_decode.d1.loss_mask: 0.5805  mix_decode.d1.loss_dice: 0.8176  mix_decode.d2.loss_cls: 0.2382  mix_decode.d2.loss_mask: 0.5984  mix_decode.d2.loss_dice: 0.8225  mix_decode.d3.loss_cls: 0.2721  mix_decode.d3.loss_mask: 0.6162  mix_decode.d3.loss_dice: 0.8372  mix_decode.d4.loss_cls: 0.2681  mix_decode.d4.loss_mask: 0.5811  mix_decode.d4.loss_dice: 0.8404  mix_decode.d5.loss_cls: 0.2661  mix_decode.d5.loss_mask: 0.5749  mix_decode.d5.loss_dice: 0.8478  mix_decode.d6.loss_cls: 0.2482  mix_decode.d6.loss_mask: 0.6118  mix_decode.d6.loss_dice: 0.8670  mix_decode.d7.loss_cls: 0.2310  mix_decode.d7.loss_mask: 0.6143  mix_decode.d7.loss_dice: 0.8777  mix_decode.d8.loss_cls: 0.2563  mix_decode.d8.loss_mask: 0.6008  mix_decode.d8.loss_dice: 0.8508
2025/03/29 02:06:31 - mmengine - INFO - Iter(train) [18850/20000]  base_lr: 7.6510e-06 lr: 7.6510e-06  eta: 0:30:58  time: 1.1323  data_time: 0.0232  memory: 10760  loss: 50.2726  decode.loss_cls: 0.4184  decode.loss_mask: 1.3569  decode.loss_dice: 1.4997  decode.d0.loss_cls: 0.4446  decode.d0.loss_mask: 1.4160  decode.d0.loss_dice: 1.5768  decode.d1.loss_cls: 0.4048  decode.d1.loss_mask: 1.3753  decode.d1.loss_dice: 1.5157  decode.d2.loss_cls: 0.3475  decode.d2.loss_mask: 1.3641  decode.d2.loss_dice: 1.5378  decode.d3.loss_cls: 0.4013  decode.d3.loss_mask: 1.3624  decode.d3.loss_dice: 1.5273  decode.d4.loss_cls: 0.3044  decode.d4.loss_mask: 1.3722  decode.d4.loss_dice: 1.5578  decode.d5.loss_cls: 0.3486  decode.d5.loss_mask: 1.3740  decode.d5.loss_dice: 1.5147  decode.d6.loss_cls: 0.5048  decode.d6.loss_mask: 1.4126  decode.d6.loss_dice: 1.5159  decode.d7.loss_cls: 0.3685  decode.d7.loss_mask: 1.3687  decode.d7.loss_dice: 1.5291  decode.d8.loss_cls: 0.4704  decode.d8.loss_mask: 1.3593  decode.d8.loss_dice: 1.4956  mix_decode.loss_cls: 0.3545  mix_decode.loss_mask: 0.5082  mix_decode.loss_dice: 0.8671  mix_decode.d0.loss_cls: 0.2642  mix_decode.d0.loss_mask: 0.5102  mix_decode.d0.loss_dice: 0.9588  mix_decode.d1.loss_cls: 0.3227  mix_decode.d1.loss_mask: 0.5041  mix_decode.d1.loss_dice: 0.8886  mix_decode.d2.loss_cls: 0.3241  mix_decode.d2.loss_mask: 0.5249  mix_decode.d2.loss_dice: 0.8595  mix_decode.d3.loss_cls: 0.3085  mix_decode.d3.loss_mask: 0.5136  mix_decode.d3.loss_dice: 0.8510  mix_decode.d4.loss_cls: 0.3236  mix_decode.d4.loss_mask: 0.5194  mix_decode.d4.loss_dice: 0.8825  mix_decode.d5.loss_cls: 0.3502  mix_decode.d5.loss_mask: 0.4957  mix_decode.d5.loss_dice: 0.8576  mix_decode.d6.loss_cls: 0.4374  mix_decode.d6.loss_mask: 0.4834  mix_decode.d6.loss_dice: 0.8342  mix_decode.d7.loss_cls: 0.3472  mix_decode.d7.loss_mask: 0.5022  mix_decode.d7.loss_dice: 0.8895  mix_decode.d8.loss_cls: 0.3484  mix_decode.d8.loss_mask: 0.5060  mix_decode.d8.loss_dice: 0.8902
2025/03/29 02:07:28 - mmengine - INFO - Iter(train) [18900/20000]  base_lr: 7.3510e-06 lr: 7.3510e-06  eta: 0:29:36  time: 1.1332  data_time: 0.0243  memory: 10759  loss: 43.7052  decode.loss_cls: 0.2952  decode.loss_mask: 1.3387  decode.loss_dice: 1.3297  decode.d0.loss_cls: 0.4098  decode.d0.loss_mask: 1.3258  decode.d0.loss_dice: 1.3975  decode.d1.loss_cls: 0.3565  decode.d1.loss_mask: 1.3128  decode.d1.loss_dice: 1.3600  decode.d2.loss_cls: 0.3294  decode.d2.loss_mask: 1.3198  decode.d2.loss_dice: 1.3201  decode.d3.loss_cls: 0.3310  decode.d3.loss_mask: 1.3145  decode.d3.loss_dice: 1.3429  decode.d4.loss_cls: 0.3691  decode.d4.loss_mask: 1.3184  decode.d4.loss_dice: 1.3533  decode.d5.loss_cls: 0.3216  decode.d5.loss_mask: 1.3105  decode.d5.loss_dice: 1.3645  decode.d6.loss_cls: 0.2983  decode.d6.loss_mask: 1.3641  decode.d6.loss_dice: 1.3876  decode.d7.loss_cls: 0.2642  decode.d7.loss_mask: 1.3768  decode.d7.loss_dice: 1.4042  decode.d8.loss_cls: 0.3272  decode.d8.loss_mask: 1.3104  decode.d8.loss_dice: 1.3804  mix_decode.loss_cls: 0.1424  mix_decode.loss_mask: 0.5196  mix_decode.loss_dice: 0.6880  mix_decode.d0.loss_cls: 0.1671  mix_decode.d0.loss_mask: 0.5124  mix_decode.d0.loss_dice: 0.7584  mix_decode.d1.loss_cls: 0.1139  mix_decode.d1.loss_mask: 0.5101  mix_decode.d1.loss_dice: 0.7159  mix_decode.d2.loss_cls: 0.1289  mix_decode.d2.loss_mask: 0.5145  mix_decode.d2.loss_dice: 0.7073  mix_decode.d3.loss_cls: 0.1307  mix_decode.d3.loss_mask: 0.5170  mix_decode.d3.loss_dice: 0.6992  mix_decode.d4.loss_cls: 0.1205  mix_decode.d4.loss_mask: 0.5084  mix_decode.d4.loss_dice: 0.7080  mix_decode.d5.loss_cls: 0.1186  mix_decode.d5.loss_mask: 0.5135  mix_decode.d5.loss_dice: 0.6976  mix_decode.d6.loss_cls: 0.1246  mix_decode.d6.loss_mask: 0.5072  mix_decode.d6.loss_dice: 0.7166  mix_decode.d7.loss_cls: 0.1371  mix_decode.d7.loss_mask: 0.5023  mix_decode.d7.loss_dice: 0.6741  mix_decode.d8.loss_cls: 0.1409  mix_decode.d8.loss_mask: 0.5110  mix_decode.d8.loss_dice: 0.6650
2025/03/29 02:08:25 - mmengine - INFO - Iter(train) [18950/20000]  base_lr: 7.0496e-06 lr: 7.0496e-06  eta: 0:28:14  time: 1.1329  data_time: 0.0236  memory: 10751  loss: 52.3414  decode.loss_cls: 0.4851  decode.loss_mask: 1.6011  decode.loss_dice: 1.6476  decode.d0.loss_cls: 0.5596  decode.d0.loss_mask: 1.6486  decode.d0.loss_dice: 1.6952  decode.d1.loss_cls: 0.4524  decode.d1.loss_mask: 1.6788  decode.d1.loss_dice: 1.7008  decode.d2.loss_cls: 0.4128  decode.d2.loss_mask: 1.6780  decode.d2.loss_dice: 1.6697  decode.d3.loss_cls: 0.4309  decode.d3.loss_mask: 1.6618  decode.d3.loss_dice: 1.6916  decode.d4.loss_cls: 0.4332  decode.d4.loss_mask: 1.6463  decode.d4.loss_dice: 1.6704  decode.d5.loss_cls: 0.4439  decode.d5.loss_mask: 1.6319  decode.d5.loss_dice: 1.6504  decode.d6.loss_cls: 0.4901  decode.d6.loss_mask: 1.6569  decode.d6.loss_dice: 1.6966  decode.d7.loss_cls: 0.4855  decode.d7.loss_mask: 1.6582  decode.d7.loss_dice: 1.6952  decode.d8.loss_cls: 0.4765  decode.d8.loss_mask: 1.5985  decode.d8.loss_dice: 1.6111  mix_decode.loss_cls: 0.2631  mix_decode.loss_mask: 0.5099  mix_decode.loss_dice: 0.6734  mix_decode.d0.loss_cls: 0.2684  mix_decode.d0.loss_mask: 0.5211  mix_decode.d0.loss_dice: 0.6962  mix_decode.d1.loss_cls: 0.2633  mix_decode.d1.loss_mask: 0.5302  mix_decode.d1.loss_dice: 0.6962  mix_decode.d2.loss_cls: 0.2386  mix_decode.d2.loss_mask: 0.5185  mix_decode.d2.loss_dice: 0.6718  mix_decode.d3.loss_cls: 0.2314  mix_decode.d3.loss_mask: 0.5155  mix_decode.d3.loss_dice: 0.6769  mix_decode.d4.loss_cls: 0.2455  mix_decode.d4.loss_mask: 0.5230  mix_decode.d4.loss_dice: 0.6836  mix_decode.d5.loss_cls: 0.2457  mix_decode.d5.loss_mask: 0.5149  mix_decode.d5.loss_dice: 0.6537  mix_decode.d6.loss_cls: 0.2661  mix_decode.d6.loss_mask: 0.5153  mix_decode.d6.loss_dice: 0.6851  mix_decode.d7.loss_cls: 0.2444  mix_decode.d7.loss_mask: 0.5177  mix_decode.d7.loss_dice: 0.6740  mix_decode.d8.loss_cls: 0.2634  mix_decode.d8.loss_mask: 0.5160  mix_decode.d8.loss_dice: 0.6600
2025/03/29 02:09:22 - mmengine - INFO - Exp name: r2u_20250328_164133
2025/03/29 02:09:22 - mmengine - INFO - Iter(train) [19000/20000]  base_lr: 6.7467e-06 lr: 6.7467e-06  eta: 0:26:52  time: 1.1399  data_time: 0.0243  memory: 10759  loss: 38.6696  decode.loss_cls: 0.4754  decode.loss_mask: 0.9695  decode.loss_dice: 1.2154  decode.d0.loss_cls: 0.4374  decode.d0.loss_mask: 1.0047  decode.d0.loss_dice: 1.3250  decode.d1.loss_cls: 0.4076  decode.d1.loss_mask: 0.9698  decode.d1.loss_dice: 1.2597  decode.d2.loss_cls: 0.4443  decode.d2.loss_mask: 0.9732  decode.d2.loss_dice: 1.1430  decode.d3.loss_cls: 0.4435  decode.d3.loss_mask: 0.9535  decode.d3.loss_dice: 1.2061  decode.d4.loss_cls: 0.4499  decode.d4.loss_mask: 0.9968  decode.d4.loss_dice: 1.2412  decode.d5.loss_cls: 0.3707  decode.d5.loss_mask: 1.0346  decode.d5.loss_dice: 1.2805  decode.d6.loss_cls: 0.3965  decode.d6.loss_mask: 1.0088  decode.d6.loss_dice: 1.3222  decode.d7.loss_cls: 0.4938  decode.d7.loss_mask: 0.9790  decode.d7.loss_dice: 1.1891  decode.d8.loss_cls: 0.4635  decode.d8.loss_mask: 0.9786  decode.d8.loss_dice: 1.2226  mix_decode.loss_cls: 0.1726  mix_decode.loss_mask: 0.4151  mix_decode.loss_dice: 0.6169  mix_decode.d0.loss_cls: 0.2763  mix_decode.d0.loss_mask: 0.3927  mix_decode.d0.loss_dice: 0.6187  mix_decode.d1.loss_cls: 0.2185  mix_decode.d1.loss_mask: 0.3974  mix_decode.d1.loss_dice: 0.5935  mix_decode.d2.loss_cls: 0.1775  mix_decode.d2.loss_mask: 0.4143  mix_decode.d2.loss_dice: 0.5874  mix_decode.d3.loss_cls: 0.2040  mix_decode.d3.loss_mask: 0.4042  mix_decode.d3.loss_dice: 0.5804  mix_decode.d4.loss_cls: 0.1850  mix_decode.d4.loss_mask: 0.4148  mix_decode.d4.loss_dice: 0.5841  mix_decode.d5.loss_cls: 0.1929  mix_decode.d5.loss_mask: 0.4151  mix_decode.d5.loss_dice: 0.5842  mix_decode.d6.loss_cls: 0.1884  mix_decode.d6.loss_mask: 0.4099  mix_decode.d6.loss_dice: 0.6083  mix_decode.d7.loss_cls: 0.2040  mix_decode.d7.loss_mask: 0.4012  mix_decode.d7.loss_dice: 0.5899  mix_decode.d8.loss_cls: 0.1614  mix_decode.d8.loss_mask: 0.4170  mix_decode.d8.loss_dice: 0.5882
2025/03/29 02:10:19 - mmengine - INFO - Iter(train) [19050/20000]  base_lr: 6.4423e-06 lr: 6.4423e-06  eta: 0:25:30  time: 1.1404  data_time: 0.0238  memory: 10753  loss: 50.4215  decode.loss_cls: 0.4671  decode.loss_mask: 1.3912  decode.loss_dice: 1.5033  decode.d0.loss_cls: 0.6220  decode.d0.loss_mask: 1.5225  decode.d0.loss_dice: 1.6490  decode.d1.loss_cls: 0.4920  decode.d1.loss_mask: 1.4485  decode.d1.loss_dice: 1.5615  decode.d2.loss_cls: 0.4582  decode.d2.loss_mask: 1.4842  decode.d2.loss_dice: 1.5201  decode.d3.loss_cls: 0.4922  decode.d3.loss_mask: 1.3985  decode.d3.loss_dice: 1.5016  decode.d4.loss_cls: 0.4855  decode.d4.loss_mask: 1.4854  decode.d4.loss_dice: 1.5313  decode.d5.loss_cls: 0.4915  decode.d5.loss_mask: 1.4183  decode.d5.loss_dice: 1.5499  decode.d6.loss_cls: 0.4892  decode.d6.loss_mask: 1.4409  decode.d6.loss_dice: 1.5299  decode.d7.loss_cls: 0.5252  decode.d7.loss_mask: 1.4126  decode.d7.loss_dice: 1.5268  decode.d8.loss_cls: 0.5174  decode.d8.loss_mask: 1.4279  decode.d8.loss_dice: 1.5110  mix_decode.loss_cls: 0.2743  mix_decode.loss_mask: 0.4983  mix_decode.loss_dice: 0.7560  mix_decode.d0.loss_cls: 0.2705  mix_decode.d0.loss_mask: 0.4740  mix_decode.d0.loss_dice: 0.8663  mix_decode.d1.loss_cls: 0.3213  mix_decode.d1.loss_mask: 0.4798  mix_decode.d1.loss_dice: 0.7446  mix_decode.d2.loss_cls: 0.3634  mix_decode.d2.loss_mask: 0.4829  mix_decode.d2.loss_dice: 0.7395  mix_decode.d3.loss_cls: 0.3040  mix_decode.d3.loss_mask: 0.4879  mix_decode.d3.loss_dice: 0.7598  mix_decode.d4.loss_cls: 0.3639  mix_decode.d4.loss_mask: 0.4594  mix_decode.d4.loss_dice: 0.7283  mix_decode.d5.loss_cls: 0.2951  mix_decode.d5.loss_mask: 0.5060  mix_decode.d5.loss_dice: 0.7550  mix_decode.d6.loss_cls: 0.2755  mix_decode.d6.loss_mask: 0.4865  mix_decode.d6.loss_dice: 0.7678  mix_decode.d7.loss_cls: 0.2956  mix_decode.d7.loss_mask: 0.4863  mix_decode.d7.loss_dice: 0.7608  mix_decode.d8.loss_cls: 0.2839  mix_decode.d8.loss_mask: 0.5022  mix_decode.d8.loss_dice: 0.7780
2025/03/29 02:11:15 - mmengine - INFO - Iter(train) [19100/20000]  base_lr: 6.1364e-06 lr: 6.1364e-06  eta: 0:24:08  time: 1.1345  data_time: 0.0233  memory: 10756  loss: 48.2354  decode.loss_cls: 0.2883  decode.loss_mask: 1.5008  decode.loss_dice: 1.4549  decode.d0.loss_cls: 0.4279  decode.d0.loss_mask: 1.5377  decode.d0.loss_dice: 1.4888  decode.d1.loss_cls: 0.2565  decode.d1.loss_mask: 1.4708  decode.d1.loss_dice: 1.4250  decode.d2.loss_cls: 0.2401  decode.d2.loss_mask: 1.5055  decode.d2.loss_dice: 1.4414  decode.d3.loss_cls: 0.2565  decode.d3.loss_mask: 1.4880  decode.d3.loss_dice: 1.4228  decode.d4.loss_cls: 0.2976  decode.d4.loss_mask: 1.4781  decode.d4.loss_dice: 1.4621  decode.d5.loss_cls: 0.2529  decode.d5.loss_mask: 1.5472  decode.d5.loss_dice: 1.5174  decode.d6.loss_cls: 0.2882  decode.d6.loss_mask: 1.5174  decode.d6.loss_dice: 1.4591  decode.d7.loss_cls: 0.2839  decode.d7.loss_mask: 1.4853  decode.d7.loss_dice: 1.4610  decode.d8.loss_cls: 0.2634  decode.d8.loss_mask: 1.4961  decode.d8.loss_dice: 1.4513  mix_decode.loss_cls: 0.2099  mix_decode.loss_mask: 0.5313  mix_decode.loss_dice: 0.8092  mix_decode.d0.loss_cls: 0.1865  mix_decode.d0.loss_mask: 0.5528  mix_decode.d0.loss_dice: 0.8791  mix_decode.d1.loss_cls: 0.2442  mix_decode.d1.loss_mask: 0.5454  mix_decode.d1.loss_dice: 0.8044  mix_decode.d2.loss_cls: 0.2579  mix_decode.d2.loss_mask: 0.5426  mix_decode.d2.loss_dice: 0.7968  mix_decode.d3.loss_cls: 0.2634  mix_decode.d3.loss_mask: 0.5413  mix_decode.d3.loss_dice: 0.8046  mix_decode.d4.loss_cls: 0.2085  mix_decode.d4.loss_mask: 0.5512  mix_decode.d4.loss_dice: 0.8162  mix_decode.d5.loss_cls: 0.2284  mix_decode.d5.loss_mask: 0.5323  mix_decode.d5.loss_dice: 0.8156  mix_decode.d6.loss_cls: 0.1970  mix_decode.d6.loss_mask: 0.5303  mix_decode.d6.loss_dice: 0.8361  mix_decode.d7.loss_cls: 0.1692  mix_decode.d7.loss_mask: 0.5418  mix_decode.d7.loss_dice: 0.8265  mix_decode.d8.loss_cls: 0.1923  mix_decode.d8.loss_mask: 0.5304  mix_decode.d8.loss_dice: 0.8241
2025/03/29 02:12:12 - mmengine - INFO - Iter(train) [19150/20000]  base_lr: 5.8287e-06 lr: 5.8287e-06  eta: 0:22:47  time: 1.1377  data_time: 0.0234  memory: 10770  loss: 47.4270  decode.loss_cls: 0.3644  decode.loss_mask: 1.4314  decode.loss_dice: 1.4457  decode.d0.loss_cls: 0.4981  decode.d0.loss_mask: 1.4345  decode.d0.loss_dice: 1.4936  decode.d1.loss_cls: 0.3839  decode.d1.loss_mask: 1.4252  decode.d1.loss_dice: 1.4144  decode.d2.loss_cls: 0.3348  decode.d2.loss_mask: 1.3964  decode.d2.loss_dice: 1.3271  decode.d3.loss_cls: 0.3638  decode.d3.loss_mask: 1.4173  decode.d3.loss_dice: 1.3635  decode.d4.loss_cls: 0.3575  decode.d4.loss_mask: 1.3909  decode.d4.loss_dice: 1.3852  decode.d5.loss_cls: 0.3436  decode.d5.loss_mask: 1.4410  decode.d5.loss_dice: 1.3975  decode.d6.loss_cls: 0.3689  decode.d6.loss_mask: 1.4417  decode.d6.loss_dice: 1.4156  decode.d7.loss_cls: 0.3674  decode.d7.loss_mask: 1.4310  decode.d7.loss_dice: 1.3857  decode.d8.loss_cls: 0.3880  decode.d8.loss_mask: 1.4108  decode.d8.loss_dice: 1.4592  mix_decode.loss_cls: 0.1906  mix_decode.loss_mask: 0.5364  mix_decode.loss_dice: 0.7785  mix_decode.d0.loss_cls: 0.2439  mix_decode.d0.loss_mask: 0.5496  mix_decode.d0.loss_dice: 0.8455  mix_decode.d1.loss_cls: 0.2347  mix_decode.d1.loss_mask: 0.5356  mix_decode.d1.loss_dice: 0.7949  mix_decode.d2.loss_cls: 0.1830  mix_decode.d2.loss_mask: 0.5451  mix_decode.d2.loss_dice: 0.7738  mix_decode.d3.loss_cls: 0.1850  mix_decode.d3.loss_mask: 0.5515  mix_decode.d3.loss_dice: 0.7821  mix_decode.d4.loss_cls: 0.1958  mix_decode.d4.loss_mask: 0.5570  mix_decode.d4.loss_dice: 0.7914  mix_decode.d5.loss_cls: 0.1991  mix_decode.d5.loss_mask: 0.5397  mix_decode.d5.loss_dice: 0.7703  mix_decode.d6.loss_cls: 0.1782  mix_decode.d6.loss_mask: 0.5474  mix_decode.d6.loss_dice: 0.7555  mix_decode.d7.loss_cls: 0.2224  mix_decode.d7.loss_mask: 0.5462  mix_decode.d7.loss_dice: 0.7898  mix_decode.d8.loss_cls: 0.1839  mix_decode.d8.loss_mask: 0.5533  mix_decode.d8.loss_dice: 0.7888
2025/03/29 02:13:09 - mmengine - INFO - Iter(train) [19200/20000]  base_lr: 5.5192e-06 lr: 5.5192e-06  eta: 0:21:25  time: 1.1350  data_time: 0.0233  memory: 10751  loss: 46.3627  decode.loss_cls: 0.3144  decode.loss_mask: 1.3944  decode.loss_dice: 1.5700  decode.d0.loss_cls: 0.4223  decode.d0.loss_mask: 1.4528  decode.d0.loss_dice: 1.6200  decode.d1.loss_cls: 0.3161  decode.d1.loss_mask: 1.3792  decode.d1.loss_dice: 1.5619  decode.d2.loss_cls: 0.3128  decode.d2.loss_mask: 1.3587  decode.d2.loss_dice: 1.5497  decode.d3.loss_cls: 0.2903  decode.d3.loss_mask: 1.3844  decode.d3.loss_dice: 1.5888  decode.d4.loss_cls: 0.2859  decode.d4.loss_mask: 1.4029  decode.d4.loss_dice: 1.5844  decode.d5.loss_cls: 0.3169  decode.d5.loss_mask: 1.3609  decode.d5.loss_dice: 1.5610  decode.d6.loss_cls: 0.3316  decode.d6.loss_mask: 1.3687  decode.d6.loss_dice: 1.5458  decode.d7.loss_cls: 0.3152  decode.d7.loss_mask: 1.3610  decode.d7.loss_dice: 1.5718  decode.d8.loss_cls: 0.2974  decode.d8.loss_mask: 1.3705  decode.d8.loss_dice: 1.5827  mix_decode.loss_cls: 0.1710  mix_decode.loss_mask: 0.5429  mix_decode.loss_dice: 0.5924  mix_decode.d0.loss_cls: 0.2618  mix_decode.d0.loss_mask: 0.5778  mix_decode.d0.loss_dice: 0.6870  mix_decode.d1.loss_cls: 0.2125  mix_decode.d1.loss_mask: 0.5396  mix_decode.d1.loss_dice: 0.6028  mix_decode.d2.loss_cls: 0.2065  mix_decode.d2.loss_mask: 0.5465  mix_decode.d2.loss_dice: 0.6122  mix_decode.d3.loss_cls: 0.1904  mix_decode.d3.loss_mask: 0.5497  mix_decode.d3.loss_dice: 0.6037  mix_decode.d4.loss_cls: 0.1695  mix_decode.d4.loss_mask: 0.5702  mix_decode.d4.loss_dice: 0.6171  mix_decode.d5.loss_cls: 0.1857  mix_decode.d5.loss_mask: 0.5457  mix_decode.d5.loss_dice: 0.6132  mix_decode.d6.loss_cls: 0.1950  mix_decode.d6.loss_mask: 0.5390  mix_decode.d6.loss_dice: 0.6034  mix_decode.d7.loss_cls: 0.1793  mix_decode.d7.loss_mask: 0.5471  mix_decode.d7.loss_dice: 0.6082  mix_decode.d8.loss_cls: 0.1759  mix_decode.d8.loss_mask: 0.5407  mix_decode.d8.loss_dice: 0.6032
2025/03/29 02:14:06 - mmengine - INFO - Iter(train) [19250/20000]  base_lr: 5.2077e-06 lr: 5.2077e-06  eta: 0:20:04  time: 1.1363  data_time: 0.0233  memory: 10760  loss: 51.7484  decode.loss_cls: 0.4298  decode.loss_mask: 1.6056  decode.loss_dice: 1.5579  decode.d0.loss_cls: 0.5265  decode.d0.loss_mask: 1.6558  decode.d0.loss_dice: 1.6689  decode.d1.loss_cls: 0.4118  decode.d1.loss_mask: 1.6125  decode.d1.loss_dice: 1.5463  decode.d2.loss_cls: 0.3920  decode.d2.loss_mask: 1.6026  decode.d2.loss_dice: 1.5577  decode.d3.loss_cls: 0.3961  decode.d3.loss_mask: 1.5326  decode.d3.loss_dice: 1.5395  decode.d4.loss_cls: 0.4482  decode.d4.loss_mask: 1.5632  decode.d4.loss_dice: 1.5458  decode.d5.loss_cls: 0.4232  decode.d5.loss_mask: 1.5596  decode.d5.loss_dice: 1.5540  decode.d6.loss_cls: 0.4528  decode.d6.loss_mask: 1.5463  decode.d6.loss_dice: 1.5140  decode.d7.loss_cls: 0.4091  decode.d7.loss_mask: 1.5783  decode.d7.loss_dice: 1.5504  decode.d8.loss_cls: 0.5083  decode.d8.loss_mask: 1.5221  decode.d8.loss_dice: 1.5317  mix_decode.loss_cls: 0.2740  mix_decode.loss_mask: 0.5881  mix_decode.loss_dice: 0.6969  mix_decode.d0.loss_cls: 0.2701  mix_decode.d0.loss_mask: 0.6035  mix_decode.d0.loss_dice: 0.8163  mix_decode.d1.loss_cls: 0.2571  mix_decode.d1.loss_mask: 0.5743  mix_decode.d1.loss_dice: 0.7106  mix_decode.d2.loss_cls: 0.2452  mix_decode.d2.loss_mask: 0.5912  mix_decode.d2.loss_dice: 0.7275  mix_decode.d3.loss_cls: 0.3231  mix_decode.d3.loss_mask: 0.5789  mix_decode.d3.loss_dice: 0.7112  mix_decode.d4.loss_cls: 0.3258  mix_decode.d4.loss_mask: 0.5789  mix_decode.d4.loss_dice: 0.7346  mix_decode.d5.loss_cls: 0.2971  mix_decode.d5.loss_mask: 0.5763  mix_decode.d5.loss_dice: 0.7198  mix_decode.d6.loss_cls: 0.2943  mix_decode.d6.loss_mask: 0.5900  mix_decode.d6.loss_dice: 0.7333  mix_decode.d7.loss_cls: 0.3030  mix_decode.d7.loss_mask: 0.5717  mix_decode.d7.loss_dice: 0.7175  mix_decode.d8.loss_cls: 0.2921  mix_decode.d8.loss_mask: 0.5808  mix_decode.d8.loss_dice: 0.7227
2025/03/29 02:15:03 - mmengine - INFO - Iter(train) [19300/20000]  base_lr: 4.8942e-06 lr: 4.8942e-06  eta: 0:18:43  time: 1.1353  data_time: 0.0233  memory: 10753  loss: 59.1415  decode.loss_cls: 0.5132  decode.loss_mask: 1.9282  decode.loss_dice: 1.6114  decode.d0.loss_cls: 0.7516  decode.d0.loss_mask: 1.9052  decode.d0.loss_dice: 1.7165  decode.d1.loss_cls: 0.5554  decode.d1.loss_mask: 1.9753  decode.d1.loss_dice: 1.6588  decode.d2.loss_cls: 0.5463  decode.d2.loss_mask: 1.9515  decode.d2.loss_dice: 1.6778  decode.d3.loss_cls: 0.4987  decode.d3.loss_mask: 2.0121  decode.d3.loss_dice: 1.6760  decode.d4.loss_cls: 0.5144  decode.d4.loss_mask: 2.0003  decode.d4.loss_dice: 1.6692  decode.d5.loss_cls: 0.5299  decode.d5.loss_mask: 2.0167  decode.d5.loss_dice: 1.6148  decode.d6.loss_cls: 0.4914  decode.d6.loss_mask: 1.9916  decode.d6.loss_dice: 1.6610  decode.d7.loss_cls: 0.5351  decode.d7.loss_mask: 1.9675  decode.d7.loss_dice: 1.6581  decode.d8.loss_cls: 0.5030  decode.d8.loss_mask: 2.0742  decode.d8.loss_dice: 1.6798  mix_decode.loss_cls: 0.3471  mix_decode.loss_mask: 0.6265  mix_decode.loss_dice: 0.7646  mix_decode.d0.loss_cls: 0.3477  mix_decode.d0.loss_mask: 0.5893  mix_decode.d0.loss_dice: 0.8486  mix_decode.d1.loss_cls: 0.3311  mix_decode.d1.loss_mask: 0.6091  mix_decode.d1.loss_dice: 0.7667  mix_decode.d2.loss_cls: 0.3183  mix_decode.d2.loss_mask: 0.5852  mix_decode.d2.loss_dice: 0.7412  mix_decode.d3.loss_cls: 0.3728  mix_decode.d3.loss_mask: 0.6092  mix_decode.d3.loss_dice: 0.7508  mix_decode.d4.loss_cls: 0.3257  mix_decode.d4.loss_mask: 0.6255  mix_decode.d4.loss_dice: 0.7721  mix_decode.d5.loss_cls: 0.2944  mix_decode.d5.loss_mask: 0.6391  mix_decode.d5.loss_dice: 0.7872  mix_decode.d6.loss_cls: 0.3204  mix_decode.d6.loss_mask: 0.6352  mix_decode.d6.loss_dice: 0.7511  mix_decode.d7.loss_cls: 0.3598  mix_decode.d7.loss_mask: 0.6229  mix_decode.d7.loss_dice: 0.7541  mix_decode.d8.loss_cls: 0.3437  mix_decode.d8.loss_mask: 0.6375  mix_decode.d8.loss_dice: 0.7797
2025/03/29 02:16:00 - mmengine - INFO - Iter(train) [19350/20000]  base_lr: 4.5784e-06 lr: 4.5784e-06  eta: 0:17:22  time: 1.1359  data_time: 0.0231  memory: 10748  loss: 46.5002  decode.loss_cls: 0.4294  decode.loss_mask: 1.2956  decode.loss_dice: 1.3282  decode.d0.loss_cls: 0.4577  decode.d0.loss_mask: 1.3353  decode.d0.loss_dice: 1.3773  decode.d1.loss_cls: 0.4251  decode.d1.loss_mask: 1.3012  decode.d1.loss_dice: 1.3435  decode.d2.loss_cls: 0.3514  decode.d2.loss_mask: 1.3061  decode.d2.loss_dice: 1.3404  decode.d3.loss_cls: 0.3655  decode.d3.loss_mask: 1.2930  decode.d3.loss_dice: 1.3258  decode.d4.loss_cls: 0.3735  decode.d4.loss_mask: 1.3106  decode.d4.loss_dice: 1.3223  decode.d5.loss_cls: 0.3932  decode.d5.loss_mask: 1.3063  decode.d5.loss_dice: 1.3265  decode.d6.loss_cls: 0.4237  decode.d6.loss_mask: 1.3098  decode.d6.loss_dice: 1.3436  decode.d7.loss_cls: 0.3799  decode.d7.loss_mask: 1.3171  decode.d7.loss_dice: 1.3672  decode.d8.loss_cls: 0.3703  decode.d8.loss_mask: 1.3171  decode.d8.loss_dice: 1.3686  mix_decode.loss_cls: 0.2403  mix_decode.loss_mask: 0.5503  mix_decode.loss_dice: 0.7993  mix_decode.d0.loss_cls: 0.2347  mix_decode.d0.loss_mask: 0.6196  mix_decode.d0.loss_dice: 0.8793  mix_decode.d1.loss_cls: 0.2274  mix_decode.d1.loss_mask: 0.5526  mix_decode.d1.loss_dice: 0.7975  mix_decode.d2.loss_cls: 0.2194  mix_decode.d2.loss_mask: 0.5460  mix_decode.d2.loss_dice: 0.7966  mix_decode.d3.loss_cls: 0.2189  mix_decode.d3.loss_mask: 0.5535  mix_decode.d3.loss_dice: 0.7891  mix_decode.d4.loss_cls: 0.2310  mix_decode.d4.loss_mask: 0.5452  mix_decode.d4.loss_dice: 0.7944  mix_decode.d5.loss_cls: 0.2337  mix_decode.d5.loss_mask: 0.5566  mix_decode.d5.loss_dice: 0.7947  mix_decode.d6.loss_cls: 0.2355  mix_decode.d6.loss_mask: 0.5741  mix_decode.d6.loss_dice: 0.8048  mix_decode.d7.loss_cls: 0.2513  mix_decode.d7.loss_mask: 0.5596  mix_decode.d7.loss_dice: 0.7970  mix_decode.d8.loss_cls: 0.1971  mix_decode.d8.loss_mask: 0.5831  mix_decode.d8.loss_dice: 0.8125
2025/03/29 02:16:56 - mmengine - INFO - Iter(train) [19400/20000]  base_lr: 4.2602e-06 lr: 4.2602e-06  eta: 0:16:01  time: 1.1340  data_time: 0.0228  memory: 10746  loss: 49.2407  decode.loss_cls: 0.4501  decode.loss_mask: 1.4223  decode.loss_dice: 1.5458  decode.d0.loss_cls: 0.6457  decode.d0.loss_mask: 1.5160  decode.d0.loss_dice: 1.6243  decode.d1.loss_cls: 0.4667  decode.d1.loss_mask: 1.4239  decode.d1.loss_dice: 1.5289  decode.d2.loss_cls: 0.3821  decode.d2.loss_mask: 1.4681  decode.d2.loss_dice: 1.5723  decode.d3.loss_cls: 0.3513  decode.d3.loss_mask: 1.4696  decode.d3.loss_dice: 1.5295  decode.d4.loss_cls: 0.4177  decode.d4.loss_mask: 1.4259  decode.d4.loss_dice: 1.5068  decode.d5.loss_cls: 0.4229  decode.d5.loss_mask: 1.4094  decode.d5.loss_dice: 1.4977  decode.d6.loss_cls: 0.4497  decode.d6.loss_mask: 1.4208  decode.d6.loss_dice: 1.5325  decode.d7.loss_cls: 0.5026  decode.d7.loss_mask: 1.4337  decode.d7.loss_dice: 1.4968  decode.d8.loss_cls: 0.4511  decode.d8.loss_mask: 1.3948  decode.d8.loss_dice: 1.5083  mix_decode.loss_cls: 0.2643  mix_decode.loss_mask: 0.4704  mix_decode.loss_dice: 0.7600  mix_decode.d0.loss_cls: 0.2242  mix_decode.d0.loss_mask: 0.5701  mix_decode.d0.loss_dice: 0.8473  mix_decode.d1.loss_cls: 0.2863  mix_decode.d1.loss_mask: 0.4716  mix_decode.d1.loss_dice: 0.7554  mix_decode.d2.loss_cls: 0.2488  mix_decode.d2.loss_mask: 0.4606  mix_decode.d2.loss_dice: 0.7392  mix_decode.d3.loss_cls: 0.2770  mix_decode.d3.loss_mask: 0.4676  mix_decode.d3.loss_dice: 0.7566  mix_decode.d4.loss_cls: 0.2571  mix_decode.d4.loss_mask: 0.4711  mix_decode.d4.loss_dice: 0.7486  mix_decode.d5.loss_cls: 0.2637  mix_decode.d5.loss_mask: 0.4614  mix_decode.d5.loss_dice: 0.7148  mix_decode.d6.loss_cls: 0.3533  mix_decode.d6.loss_mask: 0.4485  mix_decode.d6.loss_dice: 0.7362  mix_decode.d7.loss_cls: 0.2668  mix_decode.d7.loss_mask: 0.4666  mix_decode.d7.loss_dice: 0.7307  mix_decode.d8.loss_cls: 0.2654  mix_decode.d8.loss_mask: 0.4510  mix_decode.d8.loss_dice: 0.7386
2025/03/29 02:17:53 - mmengine - INFO - Iter(train) [19450/20000]  base_lr: 3.9393e-06 lr: 3.9393e-06  eta: 0:14:40  time: 1.1318  data_time: 0.0227  memory: 10751  loss: 47.7612  decode.loss_cls: 0.3992  decode.loss_mask: 1.5771  decode.loss_dice: 1.4098  decode.d0.loss_cls: 0.6455  decode.d0.loss_mask: 1.4911  decode.d0.loss_dice: 1.4689  decode.d1.loss_cls: 0.3737  decode.d1.loss_mask: 1.5079  decode.d1.loss_dice: 1.3707  decode.d2.loss_cls: 0.4011  decode.d2.loss_mask: 1.4644  decode.d2.loss_dice: 1.3906  decode.d3.loss_cls: 0.3782  decode.d3.loss_mask: 1.4991  decode.d3.loss_dice: 1.4303  decode.d4.loss_cls: 0.3681  decode.d4.loss_mask: 1.5194  decode.d4.loss_dice: 1.4115  decode.d5.loss_cls: 0.4988  decode.d5.loss_mask: 1.4237  decode.d5.loss_dice: 1.3205  decode.d6.loss_cls: 0.4336  decode.d6.loss_mask: 1.4600  decode.d6.loss_dice: 1.3940  decode.d7.loss_cls: 0.3599  decode.d7.loss_mask: 1.6036  decode.d7.loss_dice: 1.4078  decode.d8.loss_cls: 0.3618  decode.d8.loss_mask: 1.5882  decode.d8.loss_dice: 1.4301  mix_decode.loss_cls: 0.1952  mix_decode.loss_mask: 0.5809  mix_decode.loss_dice: 0.6385  mix_decode.d0.loss_cls: 0.2721  mix_decode.d0.loss_mask: 0.6062  mix_decode.d0.loss_dice: 0.6943  mix_decode.d1.loss_cls: 0.2223  mix_decode.d1.loss_mask: 0.5769  mix_decode.d1.loss_dice: 0.6522  mix_decode.d2.loss_cls: 0.2023  mix_decode.d2.loss_mask: 0.5537  mix_decode.d2.loss_dice: 0.6242  mix_decode.d3.loss_cls: 0.2255  mix_decode.d3.loss_mask: 0.5577  mix_decode.d3.loss_dice: 0.6235  mix_decode.d4.loss_cls: 0.2734  mix_decode.d4.loss_mask: 0.5613  mix_decode.d4.loss_dice: 0.6210  mix_decode.d5.loss_cls: 0.2137  mix_decode.d5.loss_mask: 0.5990  mix_decode.d5.loss_dice: 0.6478  mix_decode.d6.loss_cls: 0.2065  mix_decode.d6.loss_mask: 0.5800  mix_decode.d6.loss_dice: 0.6365  mix_decode.d7.loss_cls: 0.1933  mix_decode.d7.loss_mask: 0.5825  mix_decode.d7.loss_dice: 0.6331  mix_decode.d8.loss_cls: 0.1918  mix_decode.d8.loss_mask: 0.5640  mix_decode.d8.loss_dice: 0.6429
2025/03/29 02:18:50 - mmengine - INFO - Iter(train) [19500/20000]  base_lr: 3.6155e-06 lr: 3.6155e-06  eta: 0:13:20  time: 1.1333  data_time: 0.0231  memory: 10756  loss: 44.9300  decode.loss_cls: 0.3883  decode.loss_mask: 1.2132  decode.loss_dice: 1.4391  decode.d0.loss_cls: 0.4439  decode.d0.loss_mask: 1.3013  decode.d0.loss_dice: 1.5669  decode.d1.loss_cls: 0.4453  decode.d1.loss_mask: 1.2093  decode.d1.loss_dice: 1.3581  decode.d2.loss_cls: 0.4770  decode.d2.loss_mask: 1.1885  decode.d2.loss_dice: 1.3827  decode.d3.loss_cls: 0.3911  decode.d3.loss_mask: 1.2125  decode.d3.loss_dice: 1.4205  decode.d4.loss_cls: 0.4067  decode.d4.loss_mask: 1.2269  decode.d4.loss_dice: 1.4019  decode.d5.loss_cls: 0.4204  decode.d5.loss_mask: 1.2336  decode.d5.loss_dice: 1.4864  decode.d6.loss_cls: 0.4022  decode.d6.loss_mask: 1.2562  decode.d6.loss_dice: 1.4847  decode.d7.loss_cls: 0.3542  decode.d7.loss_mask: 1.2519  decode.d7.loss_dice: 1.4633  decode.d8.loss_cls: 0.3926  decode.d8.loss_mask: 1.2332  decode.d8.loss_dice: 1.4652  mix_decode.loss_cls: 0.2170  mix_decode.loss_mask: 0.4960  mix_decode.loss_dice: 0.6683  mix_decode.d0.loss_cls: 0.2243  mix_decode.d0.loss_mask: 0.4903  mix_decode.d0.loss_dice: 0.7811  mix_decode.d1.loss_cls: 0.2103  mix_decode.d1.loss_mask: 0.4788  mix_decode.d1.loss_dice: 0.7056  mix_decode.d2.loss_cls: 0.1913  mix_decode.d2.loss_mask: 0.4907  mix_decode.d2.loss_dice: 0.6879  mix_decode.d3.loss_cls: 0.2016  mix_decode.d3.loss_mask: 0.4997  mix_decode.d3.loss_dice: 0.6730  mix_decode.d4.loss_cls: 0.2176  mix_decode.d4.loss_mask: 0.4951  mix_decode.d4.loss_dice: 0.6880  mix_decode.d5.loss_cls: 0.2314  mix_decode.d5.loss_mask: 0.4846  mix_decode.d5.loss_dice: 0.6826  mix_decode.d6.loss_cls: 0.2475  mix_decode.d6.loss_mask: 0.4856  mix_decode.d6.loss_dice: 0.6640  mix_decode.d7.loss_cls: 0.2231  mix_decode.d7.loss_mask: 0.4813  mix_decode.d7.loss_dice: 0.6923  mix_decode.d8.loss_cls: 0.2242  mix_decode.d8.loss_mask: 0.4882  mix_decode.d8.loss_dice: 0.6916
2025/03/29 02:19:46 - mmengine - INFO - Iter(train) [19550/20000]  base_lr: 3.2884e-06 lr: 3.2884e-06  eta: 0:11:59  time: 1.1342  data_time: 0.0232  memory: 10755  loss: 47.0075  decode.loss_cls: 0.4120  decode.loss_mask: 1.4451  decode.loss_dice: 1.4510  decode.d0.loss_cls: 0.5475  decode.d0.loss_mask: 1.4590  decode.d0.loss_dice: 1.4907  decode.d1.loss_cls: 0.3819  decode.d1.loss_mask: 1.4856  decode.d1.loss_dice: 1.4460  decode.d2.loss_cls: 0.3571  decode.d2.loss_mask: 1.4487  decode.d2.loss_dice: 1.4475  decode.d3.loss_cls: 0.3681  decode.d3.loss_mask: 1.4222  decode.d3.loss_dice: 1.3879  decode.d4.loss_cls: 0.3830  decode.d4.loss_mask: 1.4450  decode.d4.loss_dice: 1.3937  decode.d5.loss_cls: 0.3837  decode.d5.loss_mask: 1.4287  decode.d5.loss_dice: 1.3861  decode.d6.loss_cls: 0.3800  decode.d6.loss_mask: 1.4240  decode.d6.loss_dice: 1.4135  decode.d7.loss_cls: 0.3905  decode.d7.loss_mask: 1.4502  decode.d7.loss_dice: 1.4471  decode.d8.loss_cls: 0.3743  decode.d8.loss_mask: 1.4420  decode.d8.loss_dice: 1.4093  mix_decode.loss_cls: 0.2263  mix_decode.loss_mask: 0.5161  mix_decode.loss_dice: 0.6917  mix_decode.d0.loss_cls: 0.2608  mix_decode.d0.loss_mask: 0.5470  mix_decode.d0.loss_dice: 0.7396  mix_decode.d1.loss_cls: 0.2355  mix_decode.d1.loss_mask: 0.5064  mix_decode.d1.loss_dice: 0.6580  mix_decode.d2.loss_cls: 0.2390  mix_decode.d2.loss_mask: 0.5148  mix_decode.d2.loss_dice: 0.6659  mix_decode.d3.loss_cls: 0.2286  mix_decode.d3.loss_mask: 0.5352  mix_decode.d3.loss_dice: 0.6757  mix_decode.d4.loss_cls: 0.2612  mix_decode.d4.loss_mask: 0.5145  mix_decode.d4.loss_dice: 0.6742  mix_decode.d5.loss_cls: 0.2677  mix_decode.d5.loss_mask: 0.5039  mix_decode.d5.loss_dice: 0.6441  mix_decode.d6.loss_cls: 0.2229  mix_decode.d6.loss_mask: 0.5166  mix_decode.d6.loss_dice: 0.6690  mix_decode.d7.loss_cls: 0.2827  mix_decode.d7.loss_mask: 0.4971  mix_decode.d7.loss_dice: 0.6402  mix_decode.d8.loss_cls: 0.2472  mix_decode.d8.loss_mask: 0.4989  mix_decode.d8.loss_dice: 0.6254
2025/03/29 02:20:43 - mmengine - INFO - Iter(train) [19600/20000]  base_lr: 2.9576e-06 lr: 2.9576e-06  eta: 0:10:39  time: 1.1368  data_time: 0.0231  memory: 10756  loss: 50.5957  decode.loss_cls: 0.3899  decode.loss_mask: 1.4024  decode.loss_dice: 1.5817  decode.d0.loss_cls: 0.5967  decode.d0.loss_mask: 1.3423  decode.d0.loss_dice: 1.6879  decode.d1.loss_cls: 0.4802  decode.d1.loss_mask: 1.3311  decode.d1.loss_dice: 1.5357  decode.d2.loss_cls: 0.4049  decode.d2.loss_mask: 1.3813  decode.d2.loss_dice: 1.5806  decode.d3.loss_cls: 0.4171  decode.d3.loss_mask: 1.3500  decode.d3.loss_dice: 1.5519  decode.d4.loss_cls: 0.3822  decode.d4.loss_mask: 1.3728  decode.d4.loss_dice: 1.5249  decode.d5.loss_cls: 0.5093  decode.d5.loss_mask: 1.2958  decode.d5.loss_dice: 1.4825  decode.d6.loss_cls: 0.4771  decode.d6.loss_mask: 1.3719  decode.d6.loss_dice: 1.5518  decode.d7.loss_cls: 0.4205  decode.d7.loss_mask: 1.3044  decode.d7.loss_dice: 1.4885  decode.d8.loss_cls: 0.4396  decode.d8.loss_mask: 1.3528  decode.d8.loss_dice: 1.5319  mix_decode.loss_cls: 0.2754  mix_decode.loss_mask: 0.5833  mix_decode.loss_dice: 0.8158  mix_decode.d0.loss_cls: 0.3420  mix_decode.d0.loss_mask: 0.5750  mix_decode.d0.loss_dice: 0.8901  mix_decode.d1.loss_cls: 0.3519  mix_decode.d1.loss_mask: 0.5657  mix_decode.d1.loss_dice: 0.7501  mix_decode.d2.loss_cls: 0.2990  mix_decode.d2.loss_mask: 0.5796  mix_decode.d2.loss_dice: 0.7793  mix_decode.d3.loss_cls: 0.2952  mix_decode.d3.loss_mask: 0.5785  mix_decode.d3.loss_dice: 0.7994  mix_decode.d4.loss_cls: 0.3082  mix_decode.d4.loss_mask: 0.6060  mix_decode.d4.loss_dice: 0.7976  mix_decode.d5.loss_cls: 0.3178  mix_decode.d5.loss_mask: 0.5863  mix_decode.d5.loss_dice: 0.8121  mix_decode.d6.loss_cls: 0.2954  mix_decode.d6.loss_mask: 0.6115  mix_decode.d6.loss_dice: 0.8146  mix_decode.d7.loss_cls: 0.3261  mix_decode.d7.loss_mask: 0.5827  mix_decode.d7.loss_dice: 0.7986  mix_decode.d8.loss_cls: 0.2986  mix_decode.d8.loss_mask: 0.6164  mix_decode.d8.loss_dice: 0.8035
2025/03/29 02:21:40 - mmengine - INFO - Iter(train) [19650/20000]  base_lr: 2.6227e-06 lr: 2.6227e-06  eta: 0:09:18  time: 1.1313  data_time: 0.0235  memory: 10757  loss: 55.2826  decode.loss_cls: 0.4701  decode.loss_mask: 1.7110  decode.loss_dice: 1.6259  decode.d0.loss_cls: 0.6749  decode.d0.loss_mask: 1.5700  decode.d0.loss_dice: 1.6861  decode.d1.loss_cls: 0.6066  decode.d1.loss_mask: 1.6153  decode.d1.loss_dice: 1.6056  decode.d2.loss_cls: 0.4988  decode.d2.loss_mask: 1.6742  decode.d2.loss_dice: 1.6170  decode.d3.loss_cls: 0.4364  decode.d3.loss_mask: 1.7054  decode.d3.loss_dice: 1.6710  decode.d4.loss_cls: 0.4529  decode.d4.loss_mask: 1.7754  decode.d4.loss_dice: 1.6675  decode.d5.loss_cls: 0.4230  decode.d5.loss_mask: 1.6994  decode.d5.loss_dice: 1.6434  decode.d6.loss_cls: 0.4440  decode.d6.loss_mask: 1.6721  decode.d6.loss_dice: 1.6519  decode.d7.loss_cls: 0.5310  decode.d7.loss_mask: 1.6362  decode.d7.loss_dice: 1.6817  decode.d8.loss_cls: 0.5089  decode.d8.loss_mask: 1.6497  decode.d8.loss_dice: 1.6669  mix_decode.loss_cls: 0.3057  mix_decode.loss_mask: 0.5961  mix_decode.loss_dice: 0.7648  mix_decode.d0.loss_cls: 0.2671  mix_decode.d0.loss_mask: 0.6041  mix_decode.d0.loss_dice: 0.8657  mix_decode.d1.loss_cls: 0.3389  mix_decode.d1.loss_mask: 0.5876  mix_decode.d1.loss_dice: 0.7813  mix_decode.d2.loss_cls: 0.3374  mix_decode.d2.loss_mask: 0.5765  mix_decode.d2.loss_dice: 0.7921  mix_decode.d3.loss_cls: 0.3294  mix_decode.d3.loss_mask: 0.5777  mix_decode.d3.loss_dice: 0.7826  mix_decode.d4.loss_cls: 0.3490  mix_decode.d4.loss_mask: 0.5696  mix_decode.d4.loss_dice: 0.7850  mix_decode.d5.loss_cls: 0.3292  mix_decode.d5.loss_mask: 0.5925  mix_decode.d5.loss_dice: 0.8003  mix_decode.d6.loss_cls: 0.3230  mix_decode.d6.loss_mask: 0.5658  mix_decode.d6.loss_dice: 0.7938  mix_decode.d7.loss_cls: 0.3029  mix_decode.d7.loss_mask: 0.5886  mix_decode.d7.loss_dice: 0.8041  mix_decode.d8.loss_cls: 0.3029  mix_decode.d8.loss_mask: 0.5897  mix_decode.d8.loss_dice: 0.8068
2025/03/29 02:22:37 - mmengine - INFO - Iter(train) [19700/20000]  base_lr: 2.2830e-06 lr: 2.2830e-06  eta: 0:07:58  time: 1.1334  data_time: 0.0230  memory: 10752  loss: 56.4714  decode.loss_cls: 0.4642  decode.loss_mask: 1.8022  decode.loss_dice: 1.7774  decode.d0.loss_cls: 0.4966  decode.d0.loss_mask: 1.7686  decode.d0.loss_dice: 1.7988  decode.d1.loss_cls: 0.4598  decode.d1.loss_mask: 1.7336  decode.d1.loss_dice: 1.7624  decode.d2.loss_cls: 0.4296  decode.d2.loss_mask: 1.7012  decode.d2.loss_dice: 1.6812  decode.d3.loss_cls: 0.4036  decode.d3.loss_mask: 1.8362  decode.d3.loss_dice: 1.7782  decode.d4.loss_cls: 0.3861  decode.d4.loss_mask: 1.8321  decode.d4.loss_dice: 1.8038  decode.d5.loss_cls: 0.3477  decode.d5.loss_mask: 1.8446  decode.d5.loss_dice: 1.7746  decode.d6.loss_cls: 0.4569  decode.d6.loss_mask: 1.7230  decode.d6.loss_dice: 1.7339  decode.d7.loss_cls: 0.4447  decode.d7.loss_mask: 1.7785  decode.d7.loss_dice: 1.7391  decode.d8.loss_cls: 0.4500  decode.d8.loss_mask: 1.8174  decode.d8.loss_dice: 1.7410  mix_decode.loss_cls: 0.2852  mix_decode.loss_mask: 0.6415  mix_decode.loss_dice: 0.7419  mix_decode.d0.loss_cls: 0.2673  mix_decode.d0.loss_mask: 0.6468  mix_decode.d0.loss_dice: 0.8476  mix_decode.d1.loss_cls: 0.2492  mix_decode.d1.loss_mask: 0.6659  mix_decode.d1.loss_dice: 0.7882  mix_decode.d2.loss_cls: 0.2214  mix_decode.d2.loss_mask: 0.6396  mix_decode.d2.loss_dice: 0.7795  mix_decode.d3.loss_cls: 0.2229  mix_decode.d3.loss_mask: 0.6497  mix_decode.d3.loss_dice: 0.7769  mix_decode.d4.loss_cls: 0.2290  mix_decode.d4.loss_mask: 0.6665  mix_decode.d4.loss_dice: 0.7760  mix_decode.d5.loss_cls: 0.2694  mix_decode.d5.loss_mask: 0.6369  mix_decode.d5.loss_dice: 0.7602  mix_decode.d6.loss_cls: 0.2785  mix_decode.d6.loss_mask: 0.6432  mix_decode.d6.loss_dice: 0.7627  mix_decode.d7.loss_cls: 0.2471  mix_decode.d7.loss_mask: 0.6391  mix_decode.d7.loss_dice: 0.7590  mix_decode.d8.loss_cls: 0.2583  mix_decode.d8.loss_mask: 0.6326  mix_decode.d8.loss_dice: 0.7224
2025/03/29 02:23:33 - mmengine - INFO - Iter(train) [19750/20000]  base_lr: 1.9375e-06 lr: 1.9375e-06  eta: 0:06:38  time: 1.1326  data_time: 0.0230  memory: 10750  loss: 50.5865  decode.loss_cls: 0.3431  decode.loss_mask: 1.5308  decode.loss_dice: 1.5882  decode.d0.loss_cls: 0.4820  decode.d0.loss_mask: 1.5958  decode.d0.loss_dice: 1.6991  decode.d1.loss_cls: 0.3623  decode.d1.loss_mask: 1.5199  decode.d1.loss_dice: 1.6012  decode.d2.loss_cls: 0.3100  decode.d2.loss_mask: 1.5558  decode.d2.loss_dice: 1.5990  decode.d3.loss_cls: 0.3175  decode.d3.loss_mask: 1.5256  decode.d3.loss_dice: 1.6080  decode.d4.loss_cls: 0.3956  decode.d4.loss_mask: 1.4983  decode.d4.loss_dice: 1.6030  decode.d5.loss_cls: 0.4152  decode.d5.loss_mask: 1.5482  decode.d5.loss_dice: 1.6055  decode.d6.loss_cls: 0.3833  decode.d6.loss_mask: 1.5134  decode.d6.loss_dice: 1.5863  decode.d7.loss_cls: 0.3591  decode.d7.loss_mask: 1.5177  decode.d7.loss_dice: 1.6212  decode.d8.loss_cls: 0.3598  decode.d8.loss_mask: 1.5206  decode.d8.loss_dice: 1.5830  mix_decode.loss_cls: 0.2541  mix_decode.loss_mask: 0.4764  mix_decode.loss_dice: 0.7657  mix_decode.d0.loss_cls: 0.2831  mix_decode.d0.loss_mask: 0.5218  mix_decode.d0.loss_dice: 0.8778  mix_decode.d1.loss_cls: 0.3102  mix_decode.d1.loss_mask: 0.4937  mix_decode.d1.loss_dice: 0.7292  mix_decode.d2.loss_cls: 0.2908  mix_decode.d2.loss_mask: 0.4976  mix_decode.d2.loss_dice: 0.7515  mix_decode.d3.loss_cls: 0.2714  mix_decode.d3.loss_mask: 0.5025  mix_decode.d3.loss_dice: 0.7651  mix_decode.d4.loss_cls: 0.2408  mix_decode.d4.loss_mask: 0.5177  mix_decode.d4.loss_dice: 0.7921  mix_decode.d5.loss_cls: 0.2646  mix_decode.d5.loss_mask: 0.4786  mix_decode.d5.loss_dice: 0.7881  mix_decode.d6.loss_cls: 0.2467  mix_decode.d6.loss_mask: 0.5102  mix_decode.d6.loss_dice: 0.7771  mix_decode.d7.loss_cls: 0.2648  mix_decode.d7.loss_mask: 0.4890  mix_decode.d7.loss_dice: 0.7715  mix_decode.d8.loss_cls: 0.2660  mix_decode.d8.loss_mask: 0.4983  mix_decode.d8.loss_dice: 0.7421
2025/03/29 02:24:30 - mmengine - INFO - Iter(train) [19800/20000]  base_lr: 1.5850e-06 lr: 1.5850e-06  eta: 0:05:18  time: 1.1349  data_time: 0.0233  memory: 10751  loss: 48.2059  decode.loss_cls: 0.2962  decode.loss_mask: 1.4848  decode.loss_dice: 1.4529  decode.d0.loss_cls: 0.4125  decode.d0.loss_mask: 1.5389  decode.d0.loss_dice: 1.5483  decode.d1.loss_cls: 0.2897  decode.d1.loss_mask: 1.5999  decode.d1.loss_dice: 1.5282  decode.d2.loss_cls: 0.3244  decode.d2.loss_mask: 1.4841  decode.d2.loss_dice: 1.4776  decode.d3.loss_cls: 0.2921  decode.d3.loss_mask: 1.5641  decode.d3.loss_dice: 1.5424  decode.d4.loss_cls: 0.2131  decode.d4.loss_mask: 1.5639  decode.d4.loss_dice: 1.5671  decode.d5.loss_cls: 0.2614  decode.d5.loss_mask: 1.5935  decode.d5.loss_dice: 1.5463  decode.d6.loss_cls: 0.2587  decode.d6.loss_mask: 1.5845  decode.d6.loss_dice: 1.5075  decode.d7.loss_cls: 0.2196  decode.d7.loss_mask: 1.6224  decode.d7.loss_dice: 1.5576  decode.d8.loss_cls: 0.2676  decode.d8.loss_mask: 1.5953  decode.d8.loss_dice: 1.4778  mix_decode.loss_cls: 0.2239  mix_decode.loss_mask: 0.5459  mix_decode.loss_dice: 0.7077  mix_decode.d0.loss_cls: 0.2565  mix_decode.d0.loss_mask: 0.4634  mix_decode.d0.loss_dice: 0.7357  mix_decode.d1.loss_cls: 0.2706  mix_decode.d1.loss_mask: 0.4717  mix_decode.d1.loss_dice: 0.6817  mix_decode.d2.loss_cls: 0.2569  mix_decode.d2.loss_mask: 0.5226  mix_decode.d2.loss_dice: 0.6998  mix_decode.d3.loss_cls: 0.2328  mix_decode.d3.loss_mask: 0.5257  mix_decode.d3.loss_dice: 0.6980  mix_decode.d4.loss_cls: 0.2465  mix_decode.d4.loss_mask: 0.5293  mix_decode.d4.loss_dice: 0.6825  mix_decode.d5.loss_cls: 0.2470  mix_decode.d5.loss_mask: 0.5113  mix_decode.d5.loss_dice: 0.6507  mix_decode.d6.loss_cls: 0.2485  mix_decode.d6.loss_mask: 0.5172  mix_decode.d6.loss_dice: 0.7024  mix_decode.d7.loss_cls: 0.2536  mix_decode.d7.loss_mask: 0.5035  mix_decode.d7.loss_dice: 0.6997  mix_decode.d8.loss_cls: 0.2492  mix_decode.d8.loss_mask: 0.5084  mix_decode.d8.loss_dice: 0.6909
2025/03/29 02:25:27 - mmengine - INFO - Iter(train) [19850/20000]  base_lr: 1.2234e-06 lr: 1.2234e-06  eta: 0:03:58  time: 1.1324  data_time: 0.0231  memory: 10744  loss: 51.5471  decode.loss_cls: 0.3162  decode.loss_mask: 1.5487  decode.loss_dice: 1.6230  decode.d0.loss_cls: 0.6380  decode.d0.loss_mask: 1.3627  decode.d0.loss_dice: 1.6102  decode.d1.loss_cls: 0.3546  decode.d1.loss_mask: 1.5120  decode.d1.loss_dice: 1.6301  decode.d2.loss_cls: 0.3617  decode.d2.loss_mask: 1.4755  decode.d2.loss_dice: 1.6199  decode.d3.loss_cls: 0.3529  decode.d3.loss_mask: 1.4516  decode.d3.loss_dice: 1.5958  decode.d4.loss_cls: 0.3664  decode.d4.loss_mask: 1.4574  decode.d4.loss_dice: 1.6027  decode.d5.loss_cls: 0.3021  decode.d5.loss_mask: 1.5247  decode.d5.loss_dice: 1.6183  decode.d6.loss_cls: 0.3710  decode.d6.loss_mask: 1.4712  decode.d6.loss_dice: 1.6224  decode.d7.loss_cls: 0.3381  decode.d7.loss_mask: 1.4697  decode.d7.loss_dice: 1.6371  decode.d8.loss_cls: 0.3899  decode.d8.loss_mask: 1.4598  decode.d8.loss_dice: 1.6332  mix_decode.loss_cls: 0.2781  mix_decode.loss_mask: 0.6486  mix_decode.loss_dice: 0.7741  mix_decode.d0.loss_cls: 0.3456  mix_decode.d0.loss_mask: 0.5956  mix_decode.d0.loss_dice: 0.8559  mix_decode.d1.loss_cls: 0.2826  mix_decode.d1.loss_mask: 0.6485  mix_decode.d1.loss_dice: 0.7585  mix_decode.d2.loss_cls: 0.2744  mix_decode.d2.loss_mask: 0.6369  mix_decode.d2.loss_dice: 0.7532  mix_decode.d3.loss_cls: 0.2625  mix_decode.d3.loss_mask: 0.6203  mix_decode.d3.loss_dice: 0.7557  mix_decode.d4.loss_cls: 0.2801  mix_decode.d4.loss_mask: 0.6326  mix_decode.d4.loss_dice: 0.7506  mix_decode.d5.loss_cls: 0.2629  mix_decode.d5.loss_mask: 0.6267  mix_decode.d5.loss_dice: 0.7630  mix_decode.d6.loss_cls: 0.2833  mix_decode.d6.loss_mask: 0.6146  mix_decode.d6.loss_dice: 0.7697  mix_decode.d7.loss_cls: 0.2727  mix_decode.d7.loss_mask: 0.6402  mix_decode.d7.loss_dice: 0.7615  mix_decode.d8.loss_cls: 0.2679  mix_decode.d8.loss_mask: 0.6427  mix_decode.d8.loss_dice: 0.7710
2025/03/29 02:26:24 - mmengine - INFO - Iter(train) [19900/20000]  base_lr: 8.4936e-07 lr: 8.4936e-07  eta: 0:02:39  time: 1.1352  data_time: 0.0230  memory: 10751  loss: 49.7405  decode.loss_cls: 0.4508  decode.loss_mask: 1.6143  decode.loss_dice: 1.3480  decode.d0.loss_cls: 0.5947  decode.d0.loss_mask: 1.5476  decode.d0.loss_dice: 1.3845  decode.d1.loss_cls: 0.5100  decode.d1.loss_mask: 1.5722  decode.d1.loss_dice: 1.3703  decode.d2.loss_cls: 0.4909  decode.d2.loss_mask: 1.5727  decode.d2.loss_dice: 1.3394  decode.d3.loss_cls: 0.4789  decode.d3.loss_mask: 1.5549  decode.d3.loss_dice: 1.3701  decode.d4.loss_cls: 0.5088  decode.d4.loss_mask: 1.6017  decode.d4.loss_dice: 1.3666  decode.d5.loss_cls: 0.4822  decode.d5.loss_mask: 1.6239  decode.d5.loss_dice: 1.3498  decode.d6.loss_cls: 0.4558  decode.d6.loss_mask: 1.6039  decode.d6.loss_dice: 1.3453  decode.d7.loss_cls: 0.4884  decode.d7.loss_mask: 1.5866  decode.d7.loss_dice: 1.3886  decode.d8.loss_cls: 0.4299  decode.d8.loss_mask: 1.6469  decode.d8.loss_dice: 1.3779  mix_decode.loss_cls: 0.1957  mix_decode.loss_mask: 0.5398  mix_decode.loss_dice: 0.7525  mix_decode.d0.loss_cls: 0.2688  mix_decode.d0.loss_mask: 0.5818  mix_decode.d0.loss_dice: 0.8108  mix_decode.d1.loss_cls: 0.2423  mix_decode.d1.loss_mask: 0.5358  mix_decode.d1.loss_dice: 0.7573  mix_decode.d2.loss_cls: 0.1852  mix_decode.d2.loss_mask: 0.5490  mix_decode.d2.loss_dice: 0.7628  mix_decode.d3.loss_cls: 0.1880  mix_decode.d3.loss_mask: 0.5495  mix_decode.d3.loss_dice: 0.7482  mix_decode.d4.loss_cls: 0.2240  mix_decode.d4.loss_mask: 0.5559  mix_decode.d4.loss_dice: 0.7582  mix_decode.d5.loss_cls: 0.2004  mix_decode.d5.loss_mask: 0.5806  mix_decode.d5.loss_dice: 0.7706  mix_decode.d6.loss_cls: 0.2263  mix_decode.d6.loss_mask: 0.5558  mix_decode.d6.loss_dice: 0.7483  mix_decode.d7.loss_cls: 0.2241  mix_decode.d7.loss_mask: 0.5389  mix_decode.d7.loss_dice: 0.7504  mix_decode.d8.loss_cls: 0.1923  mix_decode.d8.loss_mask: 0.5410  mix_decode.d8.loss_dice: 0.7509
2025/03/29 02:27:21 - mmengine - INFO - Iter(train) [19950/20000]  base_lr: 4.5516e-07 lr: 4.5516e-07  eta: 0:01:19  time: 1.1609  data_time: 0.0258  memory: 10759  loss: 49.9257  decode.loss_cls: 0.3736  decode.loss_mask: 1.6344  decode.loss_dice: 1.5604  decode.d0.loss_cls: 0.5436  decode.d0.loss_mask: 1.6123  decode.d0.loss_dice: 1.6025  decode.d1.loss_cls: 0.4831  decode.d1.loss_mask: 1.6330  decode.d1.loss_dice: 1.5003  decode.d2.loss_cls: 0.5046  decode.d2.loss_mask: 1.6225  decode.d2.loss_dice: 1.5343  decode.d3.loss_cls: 0.4542  decode.d3.loss_mask: 1.6439  decode.d3.loss_dice: 1.5298  decode.d4.loss_cls: 0.4409  decode.d4.loss_mask: 1.6285  decode.d4.loss_dice: 1.5324  decode.d5.loss_cls: 0.3961  decode.d5.loss_mask: 1.6234  decode.d5.loss_dice: 1.5486  decode.d6.loss_cls: 0.4089  decode.d6.loss_mask: 1.6463  decode.d6.loss_dice: 1.5414  decode.d7.loss_cls: 0.4236  decode.d7.loss_mask: 1.6118  decode.d7.loss_dice: 1.5042  decode.d8.loss_cls: 0.4444  decode.d8.loss_mask: 1.5670  decode.d8.loss_dice: 1.5334  mix_decode.loss_cls: 0.1680  mix_decode.loss_mask: 0.5229  mix_decode.loss_dice: 0.6451  mix_decode.d0.loss_cls: 0.2358  mix_decode.d0.loss_mask: 0.5423  mix_decode.d0.loss_dice: 0.7290  mix_decode.d1.loss_cls: 0.1974  mix_decode.d1.loss_mask: 0.5138  mix_decode.d1.loss_dice: 0.6497  mix_decode.d2.loss_cls: 0.1656  mix_decode.d2.loss_mask: 0.5286  mix_decode.d2.loss_dice: 0.6747  mix_decode.d3.loss_cls: 0.1585  mix_decode.d3.loss_mask: 0.5403  mix_decode.d3.loss_dice: 0.6669  mix_decode.d4.loss_cls: 0.1671  mix_decode.d4.loss_mask: 0.5432  mix_decode.d4.loss_dice: 0.6778  mix_decode.d5.loss_cls: 0.1902  mix_decode.d5.loss_mask: 0.5234  mix_decode.d5.loss_dice: 0.6490  mix_decode.d6.loss_cls: 0.1933  mix_decode.d6.loss_mask: 0.5333  mix_decode.d6.loss_dice: 0.6634  mix_decode.d7.loss_cls: 0.1944  mix_decode.d7.loss_mask: 0.5414  mix_decode.d7.loss_dice: 0.6684  mix_decode.d8.loss_cls: 0.1985  mix_decode.d8.loss_mask: 0.5243  mix_decode.d8.loss_dice: 0.6364
2025/03/29 02:28:18 - mmengine - INFO - Exp name: r2u_20250328_164133
2025/03/29 02:28:18 - mmengine - INFO - Iter(train) [20000/20000]  base_lr: 0.0000e+00 lr: 0.0000e+00  eta: 0:00:00  time: 1.1606  data_time: 0.0248  memory: 10762  loss: 44.8871  decode.loss_cls: 0.4026  decode.loss_mask: 1.2404  decode.loss_dice: 1.3964  decode.d0.loss_cls: 0.4988  decode.d0.loss_mask: 1.2443  decode.d0.loss_dice: 1.4803  decode.d1.loss_cls: 0.4300  decode.d1.loss_mask: 1.2211  decode.d1.loss_dice: 1.3911  decode.d2.loss_cls: 0.3625  decode.d2.loss_mask: 1.2219  decode.d2.loss_dice: 1.4221  decode.d3.loss_cls: 0.3944  decode.d3.loss_mask: 1.2464  decode.d3.loss_dice: 1.4247  decode.d4.loss_cls: 0.4218  decode.d4.loss_mask: 1.2249  decode.d4.loss_dice: 1.3768  decode.d5.loss_cls: 0.4150  decode.d5.loss_mask: 1.2114  decode.d5.loss_dice: 1.3867  decode.d6.loss_cls: 0.3739  decode.d6.loss_mask: 1.2015  decode.d6.loss_dice: 1.3957  decode.d7.loss_cls: 0.3861  decode.d7.loss_mask: 1.2073  decode.d7.loss_dice: 1.4258  decode.d8.loss_cls: 0.3842  decode.d8.loss_mask: 1.2126  decode.d8.loss_dice: 1.4261  mix_decode.loss_cls: 0.1919  mix_decode.loss_mask: 0.5171  mix_decode.loss_dice: 0.7366  mix_decode.d0.loss_cls: 0.2391  mix_decode.d0.loss_mask: 0.5195  mix_decode.d0.loss_dice: 0.7755  mix_decode.d1.loss_cls: 0.2111  mix_decode.d1.loss_mask: 0.5201  mix_decode.d1.loss_dice: 0.7187  mix_decode.d2.loss_cls: 0.1757  mix_decode.d2.loss_mask: 0.5153  mix_decode.d2.loss_dice: 0.7253  mix_decode.d3.loss_cls: 0.2111  mix_decode.d3.loss_mask: 0.4987  mix_decode.d3.loss_dice: 0.7006  mix_decode.d4.loss_cls: 0.1878  mix_decode.d4.loss_mask: 0.5218  mix_decode.d4.loss_dice: 0.7264  mix_decode.d5.loss_cls: 0.2177  mix_decode.d5.loss_mask: 0.5103  mix_decode.d5.loss_dice: 0.7064  mix_decode.d6.loss_cls: 0.2663  mix_decode.d6.loss_mask: 0.4742  mix_decode.d6.loss_dice: 0.7068  mix_decode.d7.loss_cls: 0.2444  mix_decode.d7.loss_mask: 0.5073  mix_decode.d7.loss_dice: 0.7063  mix_decode.d8.loss_cls: 0.2222  mix_decode.d8.loss_mask: 0.4878  mix_decode.d8.loss_dice: 0.7185
2025/03/29 02:28:18 - mmengine - INFO - Saving checkpoint at 20000 iterations
2025/03/29 02:28:24 - mmengine - INFO - Iter(val) [  50/2708]    eta: 0:04:02  time: 0.0906  data_time: 0.0019  memory: 3056  
2025/03/29 02:28:28 - mmengine - INFO - Iter(val) [ 100/2708]    eta: 0:03:57  time: 0.0906  data_time: 0.0019  memory: 3056  
2025/03/29 02:28:33 - mmengine - INFO - Iter(val) [ 150/2708]    eta: 0:03:52  time: 0.0904  data_time: 0.0018  memory: 3056  
2025/03/29 02:28:37 - mmengine - INFO - Iter(val) [ 200/2708]    eta: 0:03:47  time: 0.0906  data_time: 0.0020  memory: 3056  
2025/03/29 02:28:42 - mmengine - INFO - Iter(val) [ 250/2708]    eta: 0:03:42  time: 0.0906  data_time: 0.0020  memory: 3056  
2025/03/29 02:28:46 - mmengine - INFO - Iter(val) [ 300/2708]    eta: 0:03:38  time: 0.0905  data_time: 0.0019  memory: 3056  
2025/03/29 02:28:51 - mmengine - INFO - Iter(val) [ 350/2708]    eta: 0:03:33  time: 0.0907  data_time: 0.0019  memory: 3056  
2025/03/29 02:28:55 - mmengine - INFO - Iter(val) [ 400/2708]    eta: 0:03:29  time: 0.0907  data_time: 0.0020  memory: 3056  
2025/03/29 02:29:00 - mmengine - INFO - Iter(val) [ 450/2708]    eta: 0:03:24  time: 0.0936  data_time: 0.0021  memory: 3056  
2025/03/29 02:29:05 - mmengine - INFO - Iter(val) [ 500/2708]    eta: 0:03:20  time: 0.0907  data_time: 0.0020  memory: 3056  
2025/03/29 02:29:09 - mmengine - INFO - Iter(val) [ 550/2708]    eta: 0:03:15  time: 0.0903  data_time: 0.0019  memory: 3056  
2025/03/29 02:29:14 - mmengine - INFO - Iter(val) [ 600/2708]    eta: 0:03:11  time: 0.0907  data_time: 0.0020  memory: 3056  
2025/03/29 02:29:18 - mmengine - INFO - Iter(val) [ 650/2708]    eta: 0:03:06  time: 0.0906  data_time: 0.0019  memory: 3056  
2025/03/29 02:29:23 - mmengine - INFO - Iter(val) [ 700/2708]    eta: 0:03:02  time: 0.0906  data_time: 0.0019  memory: 3056  
2025/03/29 02:29:27 - mmengine - INFO - Iter(val) [ 750/2708]    eta: 0:02:57  time: 0.0907  data_time: 0.0019  memory: 3056  
2025/03/29 02:29:32 - mmengine - INFO - Iter(val) [ 800/2708]    eta: 0:02:53  time: 0.0905  data_time: 0.0019  memory: 3056  
2025/03/29 02:29:36 - mmengine - INFO - Iter(val) [ 850/2708]    eta: 0:02:48  time: 0.0905  data_time: 0.0019  memory: 3056  
2025/03/29 02:29:41 - mmengine - INFO - Iter(val) [ 900/2708]    eta: 0:02:44  time: 0.0912  data_time: 0.0020  memory: 3056  
2025/03/29 02:29:46 - mmengine - INFO - Iter(val) [ 950/2708]    eta: 0:02:39  time: 0.0920  data_time: 0.0019  memory: 3056  
2025/03/29 02:29:50 - mmengine - INFO - Iter(val) [1000/2708]    eta: 0:02:35  time: 0.0907  data_time: 0.0019  memory: 3056  
2025/03/29 02:29:55 - mmengine - INFO - Iter(val) [1050/2708]    eta: 0:02:30  time: 0.0909  data_time: 0.0019  memory: 3056  
2025/03/29 02:29:59 - mmengine - INFO - Iter(val) [1100/2708]    eta: 0:02:25  time: 0.0907  data_time: 0.0018  memory: 3056  
2025/03/29 02:30:04 - mmengine - INFO - Iter(val) [1150/2708]    eta: 0:02:21  time: 0.0910  data_time: 0.0019  memory: 3056  
2025/03/29 02:30:08 - mmengine - INFO - Iter(val) [1200/2708]    eta: 0:02:16  time: 0.0908  data_time: 0.0018  memory: 3056  
2025/03/29 02:30:13 - mmengine - INFO - Iter(val) [1250/2708]    eta: 0:02:12  time: 0.0908  data_time: 0.0019  memory: 3056  
2025/03/29 02:30:17 - mmengine - INFO - Iter(val) [1300/2708]    eta: 0:02:07  time: 0.0911  data_time: 0.0020  memory: 3056  
2025/03/29 02:30:22 - mmengine - INFO - Iter(val) [1350/2708]    eta: 0:02:03  time: 0.0907  data_time: 0.0019  memory: 3056  
2025/03/29 02:30:27 - mmengine - INFO - Iter(val) [1400/2708]    eta: 0:01:58  time: 0.0913  data_time: 0.0019  memory: 3056  
2025/03/29 02:30:31 - mmengine - INFO - Iter(val) [1450/2708]    eta: 0:01:54  time: 0.0906  data_time: 0.0019  memory: 3056  
2025/03/29 02:30:36 - mmengine - INFO - Iter(val) [1500/2708]    eta: 0:01:49  time: 0.0908  data_time: 0.0020  memory: 3056  
2025/03/29 02:30:40 - mmengine - INFO - Iter(val) [1550/2708]    eta: 0:01:45  time: 0.0914  data_time: 0.0019  memory: 3056  
2025/03/29 02:30:45 - mmengine - INFO - Iter(val) [1600/2708]    eta: 0:01:40  time: 0.0907  data_time: 0.0020  memory: 3056  
2025/03/29 02:30:49 - mmengine - INFO - Iter(val) [1650/2708]    eta: 0:01:36  time: 0.0903  data_time: 0.0019  memory: 3056  
2025/03/29 02:30:54 - mmengine - INFO - Iter(val) [1700/2708]    eta: 0:01:31  time: 0.0901  data_time: 0.0019  memory: 3056  
2025/03/29 02:30:59 - mmengine - INFO - Iter(val) [1750/2708]    eta: 0:01:27  time: 0.0902  data_time: 0.0019  memory: 3056  
2025/03/29 02:31:03 - mmengine - INFO - Iter(val) [1800/2708]    eta: 0:01:22  time: 0.0903  data_time: 0.0019  memory: 3056  
2025/03/29 02:31:08 - mmengine - INFO - Iter(val) [1850/2708]    eta: 0:01:17  time: 0.0900  data_time: 0.0020  memory: 3056  
2025/03/29 02:31:12 - mmengine - INFO - Iter(val) [1900/2708]    eta: 0:01:13  time: 0.0903  data_time: 0.0020  memory: 3056  
2025/03/29 02:31:17 - mmengine - INFO - Iter(val) [1950/2708]    eta: 0:01:08  time: 0.0906  data_time: 0.0020  memory: 3056  
2025/03/29 02:31:21 - mmengine - INFO - Iter(val) [2000/2708]    eta: 0:01:04  time: 0.0905  data_time: 0.0019  memory: 3056  
2025/03/29 02:31:26 - mmengine - INFO - Iter(val) [2050/2708]    eta: 0:00:59  time: 0.0903  data_time: 0.0019  memory: 3056  
2025/03/29 02:31:30 - mmengine - INFO - Iter(val) [2100/2708]    eta: 0:00:55  time: 0.0901  data_time: 0.0019  memory: 3056  
2025/03/29 02:31:35 - mmengine - INFO - Iter(val) [2150/2708]    eta: 0:00:50  time: 0.0898  data_time: 0.0019  memory: 3056  
2025/03/29 02:31:39 - mmengine - INFO - Iter(val) [2200/2708]    eta: 0:00:46  time: 0.0904  data_time: 0.0019  memory: 3056  
2025/03/29 02:31:44 - mmengine - INFO - Iter(val) [2250/2708]    eta: 0:00:41  time: 0.0905  data_time: 0.0019  memory: 3056  
2025/03/29 02:31:48 - mmengine - INFO - Iter(val) [2300/2708]    eta: 0:00:37  time: 0.0902  data_time: 0.0018  memory: 3056  
2025/03/29 02:31:53 - mmengine - INFO - Iter(val) [2350/2708]    eta: 0:00:32  time: 0.0907  data_time: 0.0020  memory: 3056  
2025/03/29 02:31:57 - mmengine - INFO - Iter(val) [2400/2708]    eta: 0:00:27  time: 0.0906  data_time: 0.0020  memory: 3056  
2025/03/29 02:32:02 - mmengine - INFO - Iter(val) [2450/2708]    eta: 0:00:23  time: 0.0902  data_time: 0.0018  memory: 3056  
2025/03/29 02:32:06 - mmengine - INFO - Iter(val) [2500/2708]    eta: 0:00:18  time: 0.0905  data_time: 0.0019  memory: 3056  
2025/03/29 02:32:11 - mmengine - INFO - Iter(val) [2550/2708]    eta: 0:00:14  time: 0.0903  data_time: 0.0018  memory: 3056  
2025/03/29 02:32:16 - mmengine - INFO - Iter(val) [2600/2708]    eta: 0:00:09  time: 0.0905  data_time: 0.0019  memory: 3056  
2025/03/29 02:32:20 - mmengine - INFO - Iter(val) [2650/2708]    eta: 0:00:05  time: 0.0905  data_time: 0.0019  memory: 3056  
2025/03/29 02:32:25 - mmengine - INFO - Iter(val) [2700/2708]    eta: 0:00:00  time: 0.0904  data_time: 0.0020  memory: 3056  
2025/03/29 02:32:25 - mmengine - INFO - per class results:
2025/03/29 02:32:25 - mmengine - INFO - 
+--------------+-------+-------+
|    Class     |  IoU  |  Acc  |
+--------------+-------+-------+
|  background  | 42.15 | 70.25 |
|   building   | 62.67 | 72.57 |
|     road     | 53.57 | 65.14 |
|    water     | 74.77 | 84.02 |
|    barren    | 42.17 | 62.46 |
|    forest    | 52.68 | 64.22 |
| agricultural | 61.17 | 67.41 |
+--------------+-------+-------+
2025/03/29 02:32:25 - mmengine - INFO - Iter(val) [2708/2708]    aAcc: 69.9600  mIoU: 55.6000  mAcc: 69.4400  data_time: 0.0019  time: 0.0907
